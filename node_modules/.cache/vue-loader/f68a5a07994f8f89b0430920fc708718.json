{"remainingRequest":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/macos/Desktop/banhji-0.2/banhji-commerce/src/components/upload_excel/Timesheet.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/src/components/upload_excel/Timesheet.vue","mtime":1638499442953},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KCmltcG9ydCBYTFNYIGZyb20gJ3hsc3gnCmV4cG9ydCBkZWZhdWx0IHsKICBwcm9wczogewogICAgYmVmb3JlVXBsb2FkOiBGdW5jdGlvbiwgLy8gZXNsaW50LWRpc2FibGUtbGluZQogICAgb25TdWNjZXNzOiBGdW5jdGlvbi8vIGVzbGludC1kaXNhYmxlLWxpbmUKICB9LAogIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICBsb2FkaW5nOiBmYWxzZSwKICAgICAgZXhjZWxEYXRhOiB7CiAgICAgICAgaGVhZGVyOiBudWxsLAogICAgICAgIHJlc3VsdHM6IG51bGwKICAgICAgfQogICAgfQogIH0sCiAgbWV0aG9kczogewogICAgZ2VuZXJhdGVEYXRhKHsgaGVhZGVyLCByZXN1bHRzIH0pIHsKICAgICAgdGhpcy5leGNlbERhdGEuaGVhZGVyID0gaGVhZGVyCiAgICAgIHRoaXMuZXhjZWxEYXRhLnJlc3VsdHMgPSByZXN1bHRzCiAgICAgIHRoaXMub25TdWNjZXNzICYmIHRoaXMub25TdWNjZXNzKHRoaXMuZXhjZWxEYXRhKQogICAgfSwKICAgIGhhbmRsZUNsaWNrKGUpIHsKICAgICAgY29uc3QgZmlsZXMgPSBlLnRhcmdldC5maWxlcwogICAgICBjb25zdCByYXdGaWxlID0gZmlsZXNbMF0gLy8gb25seSB1c2UgZmlsZXNbMF0KICAgICAgaWYgKCFyYXdGaWxlKSByZXR1cm4KICAgICAgdGhpcy51cGxvYWQocmF3RmlsZSkKICAgIH0sCiAgICB1cGxvYWQocmF3RmlsZSkgewogICAgICBpZiAoIXRoaXMuYmVmb3JlVXBsb2FkKSB7CiAgICAgICAgdGhpcy5yZWFkZXJEYXRhKHJhd0ZpbGUpCiAgICAgICAgcmV0dXJuCiAgICAgIH0KICAgICAgY29uc3QgYmVmb3JlID0gdGhpcy5iZWZvcmVVcGxvYWQocmF3RmlsZSkKICAgICAgaWYgKGJlZm9yZSkgewogICAgICAgIHRoaXMucmVhZGVyRGF0YShyYXdGaWxlKQogICAgICB9CiAgICB9LAogICAgYXN5bmMgcmVhZGVyRGF0YShyYXdGaWxlKSB7CiAgICAgICAgdGhpcy5sb2FkaW5nID0gdHJ1ZQogICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gewogICAgICAgICAgICBjb25zdCByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpCiAgICAgICAgICAgIHJlYWRlci5vbmxvYWQgPSBlID0+IHsKICAgICAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBlLnRhcmdldC5yZXN1bHQKICAgICAgICAgICAgICAgIGNvbnN0IHdvcmtib29rID0gWExTWC5yZWFkKGRhdGEsIHt0eXBlOiAnYXJyYXknfSkKICAgICAgICAgICAgICAgIGNvbnN0IGZpcnN0U2hlZXROYW1lID0gd29ya2Jvb2suU2hlZXROYW1lc1swXQogICAgICAgICAgICAgICAgaWYgKGZpcnN0U2hlZXROYW1lID09PSAnVGltZXNoZWV0JykgewogICAgICAgICAgICAgICAgICAgIGNvbnN0IHdvcmtzaGVldCA9IHdvcmtib29rLlNoZWV0c1tmaXJzdFNoZWV0TmFtZV0KICAgICAgICAgICAgICAgICAgICBjb25zdCBoZWFkZXIgPSB0aGlzLmdldEhlYWRlclJvdyh3b3Jrc2hlZXQpCiAgICAgICAgICAgICAgICAgICAgLy8gY29uc3QgaGVhZGVyX3Jlc3VsdCA9IFhMU1gudXRpbHMuc2hlZXRfdG9fanNvbih3b3Jrc2hlZXQsIHtoZWFkZXI6IDF9KQogICAgICAgICAgICAgICAgICAgIC8vIHNraXAgcm93CiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmFuZ2UgPSBYTFNYLnV0aWxzLmRlY29kZV9yYW5nZSh3b3Jrc2hlZXRbJyFyZWYnXSkKICAgICAgICAgICAgICAgICAgICByYW5nZS5zLnIgPSAxMAogICAgICAgICAgICAgICAgICAgIHdvcmtzaGVldFsnIXJlZiddID0gWExTWC51dGlscy5lbmNvZGVfcmFuZ2UocmFuZ2UpCiAgICAgICAgICAgICAgICAgICAgLy8gc2tpcCByb3cKCiAgICAgICAgICAgICAgICAgICAgbGV0IHJlc3VsdHMgPSBYTFNYLnV0aWxzLnNoZWV0X3RvX2pzb24od29ya3NoZWV0LCB7aGVhZGVyOiAxfSkKICAgICAgICAgICAgICAgICAgICByZXN1bHRzID0gcmVzdWx0cy5maWx0ZXIoaSA9PiB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpWzFdICE9PSB1bmRlZmluZWQKICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgIHRoaXMuZ2VuZXJhdGVEYXRhKHtoZWFkZXIsIHJlc3VsdHN9KQogICAgICAgICAgICAgICAgICAgIHRoaXMubG9hZGluZyA9IGZhbHNlCiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSgpCiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIHRoaXMuJHRvYXN0LmVycm9yKCdQbGVhc2UgVXBsb2FkIFNhbGUgZmlsZSEnKQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHJlYWRlci5yZWFkQXNBcnJheUJ1ZmZlcihyYXdGaWxlKQogICAgICAgIH0pCiAgICB9LAogICAgZ2V0SGVhZGVyUm93KHNoZWV0KSB7CiAgICAgIGNvbnN0IGhlYWRlcnMgPSBbXQogICAgICBjb25zdCByYW5nZSA9IFhMU1gudXRpbHMuZGVjb2RlX3JhbmdlKHNoZWV0WychcmVmJ10pCiAgICAgIGxldCBDIAogICAgICAvLyBjb25zdCBSID0gcmFuZ2Uucy5yCiAgICAgIGNvbnN0IFIgPSA5CiAgICAgIC8qIHN0YXJ0IGluIHRoZSBmaXJzdCByb3cgKi8KICAgICAgZm9yIChDID0gcmFuZ2Uucy5jOyBDIDw9IHJhbmdlLmUuYzsgKytDKSB7IC8qIHdhbGsgZXZlcnkgY29sdW1uIGluIHRoZSByYW5nZSAqLwogICAgICAgIGNvbnN0IGNlbGwgPSBzaGVldFtYTFNYLnV0aWxzLmVuY29kZV9jZWxsKHsgYzogQywgcjogUiB9KV0KICAgICAgICAvKiBmaW5kIHRoZSBjZWxsIGluIHRoZSBmaXJzdCByb3cgKi8KICAgICAgICBsZXQgaGRyID0gJ1VOS05PV04gJyArIEMgLy8gPC0tIHJlcGxhY2Ugd2l0aCB5b3VyIGRlc2lyZWQgZGVmYXVsdAogICAgICAgIGlmIChjZWxsICYmIGNlbGwudCkgaGRyID0gWExTWC51dGlscy5mb3JtYXRfY2VsbChjZWxsKQogICAgICAgIGhlYWRlcnMucHVzaChoZHIpCiAgICAgIH0KICAgICAgcmV0dXJuIGhlYWRlcnMKICAgIH0sCiAgfQp9Cg=="},{"version":3,"sources":["Timesheet.vue"],"names":[],"mappings":";;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Timesheet.vue","sourceRoot":"src/components/upload_excel","sourcesContent":["<template>\n  <div>\n    <input ref=\"excel-upload-input\" type=\"file\" accept=\".xlsx, .xls\" @change=\"handleClick\">\n  </div>\n</template>\n<script>\nimport XLSX from 'xlsx'\nexport default {\n  props: {\n    beforeUpload: Function, // eslint-disable-line\n    onSuccess: Function// eslint-disable-line\n  },\n  data() {\n    return {\n      loading: false,\n      excelData: {\n        header: null,\n        results: null\n      }\n    }\n  },\n  methods: {\n    generateData({ header, results }) {\n      this.excelData.header = header\n      this.excelData.results = results\n      this.onSuccess && this.onSuccess(this.excelData)\n    },\n    handleClick(e) {\n      const files = e.target.files\n      const rawFile = files[0] // only use files[0]\n      if (!rawFile) return\n      this.upload(rawFile)\n    },\n    upload(rawFile) {\n      if (!this.beforeUpload) {\n        this.readerData(rawFile)\n        return\n      }\n      const before = this.beforeUpload(rawFile)\n      if (before) {\n        this.readerData(rawFile)\n      }\n    },\n    async readerData(rawFile) {\n        this.loading = true\n        return new Promise((resolve) => {\n            const reader = new FileReader()\n            reader.onload = e => {\n                const data = e.target.result\n                const workbook = XLSX.read(data, {type: 'array'})\n                const firstSheetName = workbook.SheetNames[0]\n                if (firstSheetName === 'Timesheet') {\n                    const worksheet = workbook.Sheets[firstSheetName]\n                    const header = this.getHeaderRow(worksheet)\n                    // const header_result = XLSX.utils.sheet_to_json(worksheet, {header: 1})\n                    // skip row\n                    const range = XLSX.utils.decode_range(worksheet['!ref'])\n                    range.s.r = 10\n                    worksheet['!ref'] = XLSX.utils.encode_range(range)\n                    // skip row\n\n                    let results = XLSX.utils.sheet_to_json(worksheet, {header: 1})\n                    results = results.filter(i => {\n                        return i[1] !== undefined\n                    })\n                    this.generateData({header, results})\n                    this.loading = false\n                    resolve()\n                } else {\n                    this.$toast.error('Please Upload Sale file!')\n                }\n            }\n            reader.readAsArrayBuffer(rawFile)\n        })\n    },\n    getHeaderRow(sheet) {\n      const headers = []\n      const range = XLSX.utils.decode_range(sheet['!ref'])\n      let C \n      // const R = range.s.r\n      const R = 9\n      /* start in the first row */\n      for (C = range.s.c; C <= range.e.c; ++C) { /* walk every column in the range */\n        const cell = sheet[XLSX.utils.encode_cell({ c: C, r: R })]\n        /* find the cell in the first row */\n        let hdr = 'UNKNOWN ' + C // <-- replace with your desired default\n        if (cell && cell.t) hdr = XLSX.utils.format_cell(cell)\n        headers.push(hdr)\n      }\n      return headers\n    },\n  }\n}\n</script>\n\n<style scoped>\n.excel-upload-input{\n  display: none;\n  z-index: -9999;\n}\n.drop{\n  border: 2px dashed #bbb;\n  width: 600px;\n  height: 160px;\n  line-height: 160px;\n  margin: 0 auto;\n  font-size: 24px;\n  border-radius: 5px;\n  text-align: center;\n  color: #bbb;\n  position: relative;\n}\n</style>"]}]}