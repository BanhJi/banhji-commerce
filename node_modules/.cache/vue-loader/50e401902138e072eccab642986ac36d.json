{"remainingRequest":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/src/views/payroll/payment/bank_payment/Confirm.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/src/views/payroll/payment/bank_payment/Confirm.vue","mtime":1638499443259},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["Confirm.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAufile":"Confirm.vue","sourceRoot":"src/views/payroll/payment/bank_payment","sourcesContent":["<template>\n    <v-row>\n        <v-col sm=\"12\">\n            <p class=\"font_16\">{{$t('please_make_another_review')}}</p>\n             <v-simple-table>\n                <template v-slot:default>\n                    <tbody>\n                    <tr>\n                        <td class=\"text-bold text-uppercase\">{{$t('financial_institutions')}}</td>\n                        <td>:</td>\n                        <td>{{ bank.bankName ? bank.bankName: ''}}</td>\n                    </tr>\n                    <tr>\n                        <td class=\"text-bold text-uppercase\">{{$t('account_number')}}</td>\n                        <td>:</td>\n                        <td>{{ bankAccountNumber.account || ''}}</td>\n                    </tr>\n                    <tr>\n                        <td class=\"text-bold text-uppercase\">{{$t('number_of_employees')}}</td>\n                        <td>:</td>\n                        <td>{{batchPayment.totalBatch}}</td>\n                    </tr>\n                    <tr>\n                        <td class=\"green text-uppercase white--text text-bold\">{{$t('total_amount')}}</td>\n                        <td class=\"green\">:</td>\n                        <td class=\"green white--text text-right text-bold\">{{format(batchPayment.batchAmount)}}</td>\n                    </tr>\n                    </tbody>\n                </template>\n            </v-simple-table>\n            <LoadingMe\n                :isLoading=\"showLoading\"\n                :fullPage=\"false\"\n                type=\"loading\"\n                :myLoading=\"true\"/>\n        </v-col>\n    </v-row>\n</template>\n<script>\nimport LoadingMe from '@/components/Loading'\nimport kendo from \"@progress/kendo-ui\"\nimport Helper from \"@/helper.js\";\nimport {JournalModel,\n    JournalEntryModel,\n    AccountModel,\n\tCurrencyModel,} from \"@/scripts/model/AppModels\";\nconst { EntityType, } = require(\"@/scripts/default_setup/Collections\");\nconst payrollHandler    = require(\"@/scripts/payrollHandler\")\nconst settingsHandler   = require(\"@/scripts/settingsHandler\")\nconst cookieJS = require(\"@/cookie.js\");\nconst cookie = cookieJS.getCookie();\nexport default({\n    props:['batch'],\n    data() {\n        return {\n            showLoading:    true,\n            batchPayment:   [],\n            bank:           {} ,\n            bankAccount:    {},\n            bankAccountNumber: {},\n            suffix:         '',\n            batchs:         [],\n            resultJournals: [],\n            loggedUser: {\n                id: cookie.creator,\n                name: cookie.email\n            },\n            prefix_format: ''\n        }\n    },\n    components: {\n        'LoadingMe': LoadingMe,\n    },\n    methods:{\n        format(val){\n            return kendo.toString(val,'c2')\n        },\n        returnData(data){\n            this.$emit('returnData', data)\n        },\n        loadSuccess(data){\n            this.$emit('headline',data)\n        },\n        loadBatchSingle(){\n            new Promise(resolve => {\n                setTimeout(() => {\n                    resolve('resolved')\n                    payrollHandler.getBatchSingle(this.$route.params.id).then(res => {\n                        if (res.statusCode === 200) {\n                            let result = res.data\n                            this.batchPayment = result[0]\n                            this.bank = this.batchPayment.bank\n                            this.bankAccount = this.batchPayment.bankAccount\n                            if(this.bankAccount){\n                                this.bankAccountNumber  = this.bankAccount.account\n                            }\n                            this.loadBatchItem(this.batchPayment)\n                        }\n                    })\n                }, 300)\n            })\n        },\n        loadBatchItem(result){\n            new Promise(resolve => {\n                setTimeout(() => {\n                    resolve('resolved')\n                    this.showLoading = true\n                    payrollHandler.getBatchItem(result.id).then(res => {\n                        this.showLoading = true\n                        if (res.statusCode === 200) {\n                            let result = res.data\n                            this.batchs  = result\n                            this.generateNumber()\n                            this.loadJournal()\n                        }\n                    })\n                }, 300)\n            })\n        },\n        calculateJournal(){\n            let batchs          = this.batchs\n            let segmentAR = []\n            batchs.forEach(o=>{\n                window.console.log(o,'o')\n                const segment           = o.segment\n                // const benefitAccount    = o.benefitAccount\n                segment.forEach(n=> {\n                    n['currency']               = o.currency,\n                    n['netPay']                 = o.netPay,\n                    n['amountPay']              = o.amountPay,\n                    n['taxBenefit']             = o.taxBenefit,\n                    n['taxSalaryUS']            = o.taxSalaryUS,\n                    n['totalBenefit']           = o.totalBenefit,\n                    n['payrollLiabilitie']      = o.payrollLiabilitie,\n                    n['benefitAccount']         = o.benefitAccount\n                    segmentAR.push(n)\n                })\n                \n            })\n            let helper = {}\n            let resultSegment   = segmentAR.reduce(function(r, o){\n                let key = o.component.id + '-' + o.component.name;\n                if(!helper[key]) {\n                    helper[key] = Object.assign({}, o); // create a copy of o\n                    r.push(helper[key]);\n                } else {\n                    helper[key].percentage          += parseFloat(o.percentage);\n                    helper[key].salary              += parseFloat(o.salary);\n                    helper[key].netPay              += parseFloat(o.netPay);\n                    helper[key].amountPay           += parseFloat(o.amountPay);\n                    helper[key].taxBenefit          += parseFloat(o.taxBenefit);\n                    helper[key].taxSalary           += parseFloat(o.taxSalary);\n                    helper[key].totalBenefit        += parseFloat(o.totalBenefit);\n                }\n                return r;\n            },[]);\n            let journals        =[];\n            let bankAccount     = this.bankAccount\n            // window.console.log('this.bankAccount',this.bankAccount)\n            resultSegment.forEach(function(p){\n                // window.console.log(p,'payrollLiabilitie')\n                journals.push(\n                    new JournalEntryModel({\n                        description:          p.payrollLiabilitie.name,\n                        account:              new AccountModel(p.payrollLiabilitie),\n                        exchange_rate:        1,\n                        currency:             new CurrencyModel(p.currency),\n                        amount:               p.amountPay, // Dr\n                        class_1_uuid:         p.component.id\n                    }),\n                    new JournalEntryModel({\n                        description:          bankAccount.bankName,\n                        account:              new AccountModel(bankAccount.account.chartAcount),\n                        exchange_rate:        1,\n                        currency:             new CurrencyModel(p.currency),\n                        amount:               p.amountPay * -1, // Cr\n                        class_1_uuid:         p.component.id\n                    }),\n                )\n            })\n            this.payrollAccount = resultSegment\n            this.journalLine = journals\n            if(this.payrollAccount && this.journalLine){\n                this.journal()\n            }\n        },\n        journal(){\n            let payrollAcc =  this.payrollAccount\n            let journals = this.journalLine\n            let batchPayment = this.batchPayment\n            let journal_ = []\n            let prefix_format = this.prefix_format\n            payrollAcc.forEach(function(pa){\n                let line = journals.filter(r => r.class_1_uuid === pa.component.id ) \n                journal_.push(new JournalModel({\n                    description:                  pa.payrollLiabilitie.name || 'Payroll & Employee Benefit Liabilities',\n                    number:                       batchPayment.referenceNumber,\n                    journal_date:                 Helper.toISODate(new Date()),\n                    month_of:                     Helper.toISODate(new Date(batchPayment.monthOf).toISOString().substr(0, 7)),//'2021-02-01',   \n                    journal_type:                 EntityType.AUTO_JOURNAL,\n                    transaction_type:             'Payroll Payment',\n                    referral_transaction_uuid:    batchPayment.id,\n                    journal_entries:              line,\n                    segment_uuid:                 pa.component.id || '',\n                    prefix_format:                prefix_format || ''\n                }))\n            })\n\n            let result_journal = []\n            if(this.resultJournals.length > 0){\n                let jNal = this.resultJournals\n                journal_.forEach(res =>{\n                    let journalAR =  jNal.filter(n => n.segment_uuid = res.segment_uuid)\n                    let journalUuid = journalAR[0].uuid\n                    // window.console.log(4,journalUuid)\n                    let created_date = journalAR[0].created_date\n                    result_journal.push(new JournalModel( {\n                        uuid:                         journalUuid,\n                        number:                       res.number,\n                        created_date:                 created_date,\n                        journal_date:                 res.journal_date,\n                        month_of:                     res.month_of,\n                        journal_type:                 res.journal_type,\n                        transaction_type:             res.transaction_type,\n                        segment_uuid:                 res.segment_uuid,\n                        journal_entries:              res.journal_entries,\n                        prefix_format:                res.prefix_format\n                    }))\n                })\n                this.journal_data = result_journal\n                window.console.log(5,this.journal_data)\n            }else{\n                this.journal_data = journal_\n            }\n        },\n        saveSpets(){\n            if(this.journal_data.length > 0){\n                new Promise(resolve => {\n                    setTimeout(() => {\n                        resolve('resolved');\n                        let data = {\n                            id:                 this.$route.params.id ? this.$route.params.id : '',\n                            monthOf:            this.batchPayment.monthOf,\n                            created:            this.batchPayment.created,\n                            bank:               this.batchPayment.bank,\n                            bankAccount:        this.batchPayment.bankAccount,\n                            balanceInBanhJi:    this.batchPayment.balanceInBanhJi,\n                            batchItem:          this.batchs,\n                            date:               this.batchPayment.date,\n                            batchAmount:        this.batchPayment.batchAmount,\n                            totalBatch:         this.batchPayment.totalBatch,\n                            amountInWord:       this.batchPayment.amountInWord,\n                            referencePayroll:   this.batchPayment.referencePayroll,\n                            confirm:            'done',\n                            suffix:             this.suffix,\n                            payNumber:          this.payNumber,\n                            abbr:               this.payNumber.abbr,\n                            lastNumber:         this.lastNumber,\n                            step:               3,\n                            status:             1,\n                            raw_journal:        this.journal_data,\n                            loggedUser:         this.loggedUser\n                        }\n                        window.console.log('data', data)\n                        payrollHandler.createBatchPayment(data).then(response => {\n                            if (response.data.statusCode === 201) {\n                                this.$snotify.success('Success')\n                                this.loadSuccess(response.data.statusCode)\n                                this.close()\n                            }\n                        }).catch(e => {\n                            this.$snotify.error('Something went wrong')\n                            this.errors.push(e)\n                        })\n                    }, 300);\n                })\n            }else{\n                this.$snotify.error('Something went wrong')\n            }\n        },\n        close(){\n            window.history.go(-2)\n        },\n        zeroPad(num, places) {\n            return String(num).padStart(places, '0')\n        },\n        loadPrefixes() {\n            new Promise(resolve => {\n                setTimeout(() => {\n                    resolve('resolved');\n                    settingsHandler.getPrefixes().then(res => {\n                        if (res.data.statusCode === 200) {\n                            let result = res.data.data\n                            this.prefixList = result.filter(p => p.type =='payroll_payment')\n                            this.prefix = this.prefixList[0]\n                            this.payNumber = this.prefix\n                            const lastNumber = this.zeroPad(parseInt(0), this.prefix.format)\n                            this.prefix_format = (this.prefix.abbr + this.prefix.numberSeparator + this.prefix.structure + this.prefix.numberSeparator + lastNumber + '@' + this.prefix.sequcencing)\n                        }\n                    })\n                }, 300)\n            })\n        },\n        generateNumber() {\n            let sequcencing = ''\n            if(this.payNumber.sequcencing ==\"Year\"){\n                sequcencing = new Date().toISOString().substr(0, 4)\n            }else if(this.payNumber.sequcencing ==\"Month\"){\n                sequcencing = new Date().toISOString().substr(0, 7)\n            }else{\n                sequcencing = ''\n            }\n            new Promise(resolve => {\n                setTimeout(() => {\n                    resolve('resolved');\n                    let data = {\n                        abbr:           this.payNumber.abbr,\n                        structure:      this.payNumber.structure,\n                        date:           new Date(),\n                        type:           'payroll_payment',\n                        pkId:           'ppm-',\n                        sequcencing:    sequcencing\n                    }\n                    payrollHandler.getPrefixNumber(data).then(res => {\n                        this.showLoading = true;\n                        if(res.data.statusCode === 200){\n                            this.showLoading = false;\n                            const result = res.data.data\n                            const lastNumber = this.zeroPad(parseInt(result.lastNumber), this.payNumber.format)\n                            this.suffix = result.suffix\n                            this.lastNumber = lastNumber\n                        }\n                    })\n                }, 300);\n            })\n        },\n        goBack(){\n            window.history.go(-1)\n        },\n        async loadJournal(){\n            new Promise(resolve => {\n                setTimeout(() => {\n                    resolve('resolved');\n                    payrollHandler.getPayrollJournal(this.$route.params.id).then(res => {\n                        if (res.statusCode === 200) {\n                            this.resultJournals = res.data\n                        }\n                        this.calculateJournal()\n                    })\n                }, 300)\n            })\n        }\n    },\n    async mounted(){\n        await this.loadBatchSingle()\n        await this.loadPrefixes()\n        await this.loadJournal()\n    },\n    watch:{\n        batch(){\n           if(this.batch !== undefined){\n                this.loadBatchSingle()\n                this.loadJournal()\n            }\n        }\n    }\n})\n</script>\n<style scoped>\n    .theme--light.v-data-table > .v-data-table__wrapper > table > tbody > tr:hover:not(.v-data-table__expanded__content):not(.v-data-table__empty-wrapper) {\n        background-color: transparent !important;\n    }\n\n    .theme--light.v-data-table > .v-data-table__wrapper > table > tbody > tr.primary:hover:not(.v-data-table__expanded__content):not(.v-data-table__empty-wrapper) {\n        background-color: #f44336 !important;\n    }\n\n    .theme--light.v-data-table {\n        background-color: transparent !important;\n        border-top: thin solid #ddd;\n        border-bottom: thin solid #ddd;\n        border-radius: 0 !important;\n    }\n\n    .theme--light.v-data-table > .v-data-table__wrapper > table > tbody > tr:not(:last-child) > td:not(.v-data-table__mobile-row),\n    .theme--light.v-data-table > .v-data-table__wrapper > table > tbody > tr:not(:last-child) > th:not(.v-data-table__mobile-row) {\n        border-bottom: thin solid #ddd;\n    }\n\n    .v-data-table > .v-data-table__wrapper > table > tbody > tr > td {\n        height: 32px !important;\n        border-bottom: thin solid rgba(0, 0, 0, 0.12) !important;\n    }\n</style>\n"]}]}