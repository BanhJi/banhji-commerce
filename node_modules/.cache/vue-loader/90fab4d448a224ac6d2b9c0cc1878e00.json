{"remainingRequest":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/macos/Desktop/banhji-0.2/banhji-commerce/src/views/customers/sales/Lead.vue?vue&type=style&index=0&id=5d0e919a&scoped=true&lang=css&","dependencies":[{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/src/views/customers/sales/Lead.vue","mtime":1642155812676},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/@vue/cli-service/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgouc21hbGxfc2lkZWJhciB7CiAgICBoZWlnaHQ6IDk0JTsKICAgIHBvc2l0aW9uOiByZWxhdGl2ZTsKICAgIHBhZGRpbmc6IDEycHg7Cn0KCi5oaWRlX3NtYWxsX2Jhcl9jbGFzcyB7CiAgICBtYXgtd2lkdGg6IDA7CiAgICB0cmFuc2l0aW9uOiAuNXMgZWFzZS1pbjsKICAgIGZsZXg6IDAgMCAwOwogICAgcGFkZGluZzogMDsKfQoKLmhpZGVfYmlnX2Jhcl9jbGFzcyB7CiAgICBtYXgtd2lkdGg6IDEwMCU7CiAgICB0cmFuc2l0aW9uOiAuNXMgZWFzZS1pbjsKICAgIGZsZXg6IDAgMCAxMDAlOwp9CgouaWNvbkFycm93IHsKICAgIHJpZ2h0OiAtMzVweDsKICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICAgIGJvdHRvbTogLTEwcHg7Cn0KCi5pY29uQXJyb3dIaWRlIHsKICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICAgIHJpZ2h0OiAtN3B4OwogICAgYm90dG9tOiAtMTBweDsKfQoKLnRoZW1lLS1saWdodC52LWRhdGEtdGFibGUgPiAudi1kYXRhLXRhYmxlX193cmFwcGVyID4gdGFibGUgPiB0Ym9keSA+IHRyOmhvdmVyOm5vdCgudi1kYXRhLXRhYmxlX19leHBhbmRlZF9fY29udGVudCk6bm90KC52LWRhdGEtdGFibGVfX2VtcHR5LXdyYXBwZXIpIHsKICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50ICFpbXBvcnRhbnQ7Cn0KCi5kZXRpYWxfc21hbGxzaWRlX3AgewogICAgcG9zaXRpb246IGFic29sdXRlOwogICAgcGFkZGluZy1yaWdodDogMTJweDsKICAgIGJvdHRvbTogMTBweDsKfQoK"},{"version":3,"sources":["Lead.vue"],"names":[],"mappingsurBA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"Lead.vue","sourceRoot":"src/views/customers/sales","sourcesContent":["<template>\n    <v-app>\n        <v-container>\n            <v-row>\n                <v-col sm=\"12\" cols=\"12\">\n                    <v-card outlined dense class=\"pa-4 no_border rounded-sm\" color=\"white\">\n                        <v-form ref=\"form\" v-model=\"valid\" lazy-validation>\n                            <v-row>\n                                <v-col class=\"bigSide py-0 pr-2\" sm=\"8\" cols=\"12\" style=\"transition: .3s ease-in;\"\n                                       :class=\"{'hide_big_bar_class':isHideBar}\">\n                                    <v-card outlined dense class=\"no_border\">\n                                        <h2 class=\"mb-0\">{{ $t('lead') }}</h2>\n                                        <v-icon v-if=\"isHideBar\"\n                                                @click=\"cancel()\"\n                                                style=\"cursor: pointer;  font-size: 40px;\"\n                                                color=\"grey--text\"\n                                                class=\"float-right\"\n                                        >close\n                                        </v-icon>\n                                        <span style=\"transition: .3s ease-in; z-index:10;\"\n                                              :class=\"{'iconArrow': !isHideBar,'iconArrowHide': isHideBar }\"><v-icon\n                                            size=\"22\"\n                                            class=\"arr_icon\"\n                                            @click=\"hide_smallsitebar\"\n                                            v-if=\"isHideBar\"> mdi-chevron-left-circle\n                                              </v-icon><v-icon size=\"22\"\n                                                               class=\"arr_icon\"\n                                                               @click=\"hide_smallsitebar\"\n                                                               v-if=\"!isHideBar\"> mdi-chevron-right-circle\n                                              </v-icon></span>\n                                    </v-card>\n                                    <v-card outlined dense class=\"no_border\" color=\"white\">\n                                        <v-row>\n                                            <v-col sm=\"4\" cols=\"12\" class=\"pb-0\">\n                                                <label class=\"label \">{{ $t('name_of_lead') }}</label>\n                                                <v-text-field\n                                                    class=\"mt-1\"\n                                                    v-model=\"transaction.nameOfLead\"\n                                                    outlined\n                                                    :rules=\"[v => !!v || 'Lead Name is required']\"\n                                                    required\n                                                />\n                                            </v-col>\n                                            <v-col sm=\"4\" cols=\"12\" class=\"pb-0\">\n                                                <label class=\"label \">{{ $t('date') }}</label>\n                                                <app-datepicker\n                                                    :initialDate=\"transaction.transactionDate\"\n                                                    @emitDate=\"transaction.transactionDate = $event\"/>\n                                            </v-col>\n                                            <v-col sm=\"4\" cols=\"12\" class=\"pb-0\">\n\n                                                <label class=\"label \">{{ $t('expected_revenue') }} {{\n                                                        currency\n                                                    }}</label>\n                                                <v-text-field\n                                                    class=\"mt-1\"\n                                                    type=\"number\"\n                                                    min=\"1\"\n                                                    :rules=\"[v => !! parseFloat(v)>0 || ' is required']\"\n                                                    v-model=\"transaction.total\"\n                                                    outlined\n                                                />\n                                            </v-col>\n                                        </v-row>\n                                    </v-card>\n                                    <v-card outlined dense class=\"no_border\" color=\"white\">\n                                        <v-row>\n                                            <v-col sm=\"4\" cols=\"12\" class=\"py-0\">\n                                                <label class=\"label\">{{ $t('customer_name') }}</label>\n                                                <v-text-field\n                                                    class=\"mt-1\"\n                                                    v-model=\"transaction.customerName\"\n                                                    :rules=\"[v => !!v || 'Customer Name is required']\"\n                                                    outlined\n                                                />\n                                                <label class=\"label\">{{ $t('sale_rep') }}</label>\n                                                <v-select\n                                                    class=\"mt-1\"\n                                                    v-model=\"transaction.employee\"\n                                                    :items=\"employees\"\n                                                    item-value=\"id\"\n                                                    :item-text=\"item =>`${item.name}`\"\n                                                    return-object\n                                                    placeholder=\"Sale Rep\"\n                                                    outlined=\"\"\n                                                />\n                                            </v-col>\n                                            <v-col sm=\"4\" cols=\"12\" class=\"py-0\">\n                                                <label class=\"label \">{{ $t('customer_email') }}</label>\n                                                <v-text-field\n                                                    class=\"mt-1\"\n                                                    v-model=\"transaction.customerEmail\"\n                                                    outlined\n                                                />\n                                                <label class=\"label mb-0\">{{ $t('segment') }}</label>\n                                                <v-select class=\"mt-1\"\n                                                          v-model=\"transaction.segment\"\n                                                          :items=\"segments\"\n                                                          item-value=\"id\"\n                                                          :item-text=\"item =>`${item.code} - ${item.name}`\"\n                                                          return-object\n                                                          tage=\"Segment\"\n                                                          placeholder=\"Segment\"\n                                                          outlined=\"\"\n                                                />\n                                            </v-col>\n                                            <v-col sm=\"4\" cols=\"12\" class=\"py-0\">\n                                                <label class=\"label \">{{ $t('customer_phone') }}</label>\n                                                <v-text-field\n                                                    class=\"mt-1\"\n                                                    v-model=\"transaction.customerPhone\"\n                                                    outlined\n                                                />\n                                                <label class=\"label\">{{ $t('location') }}</label>\n                                                <v-select class=\"mt-1\"\n                                                          v-model=\"transaction.location\"\n                                                          :items=\"locations\"\n                                                          item-value=\"id\"\n                                                          :item-text=\"item =>`${item.code} - ${item.name}`\"\n                                                          return-object\n                                                          tage=\"Location\"\n                                                          placeholder=\"bu/location\"\n                                                          outlined=\"\"/>\n                                            </v-col>\n                                        </v-row>\n                                    </v-card>\n                                    <v-divider/>\n                                    <v-card outlined dense class=\"no_border function_footer\">\n                                        <v-btn color=\"grayBg\"\n                                               outlined\n                                               class=\" text-capitalize  black--text float-left\"\n                                               @click=\"cancel\">{{ $t('cancel') }}\n                                        </v-btn>\n                                        <!--                    <v-btn color=\"primary\"-->\n                                        <!--                           class=\"ml-2 float-right text-capitalize  white&#45;&#45;text\"-->\n                                        <!--                           @click=\"saveNew\">-->\n                                        <!--                      {{ $t('save_new') }}-->\n                                        <!--                    </v-btn>-->\n                                        <v-btn color=\"primary\"\n                                               class=\"float-right white--text text-capitalize\"\n                                               :disabled=\"btnDisabled\"\n                                               @click=\"saveClose\">\n                                            {{ $t('save_close') }}\n                                        </v-btn>\n                                        <v-btn color=\"secondary\"\n                                               style=\"margin-right: 10px !important\"\n                                               class=\"white--text float-right text-capitalize\"\n                                               @click=\"saveNew\" :hidden=\"hiddenButton\">{{ $t(\"save_new\") }}\n                                        </v-btn>\n\n                                    </v-card>\n                                </v-col>\n                                <v-col class=\"smallSide pl-2\" sm=\"4\" cols=\"12\" style=\"transition: .3s ease-in;\"\n                                       :class=\"{'hide_small_bar_class':isHideBar}\">\n                                    <h3 style=\"color: #b3b5bc; font-size:20px;\" v-if=\"!isHideBar\"\n                                        class=\"text-uppercase float-right mt-n3\">\n                      <span class=\"pointer\" @click=\"Help('lead')\">\n                          {{ $t('help') }}\n                      </span>\n                                        <v-icon\n                                            @click=\"cancel()\"\n                                            style=\"cursor: pointer; color: #333; font-size: 40px;\"\n                                            class=\"float-right mt-n1\"\n                                        >close\n                                        </v-icon>\n                                    </h3>\n\n                                    <div v-if=\"!isHideBar\" class=\"small_sidebar mt-8 px-4 grayBg\">\n                                        <label class=\"label\">{{ $t('number') }}</label>\n                                        <div class=\"mt-1 d-flex mr-0\">\n\n                                            <div class=\"code_text flex-1 text-bold\">{{\n                                                    transaction.transactionType.abbr\n                                                }}\n                                            </div>\n                                            <v-text-field class=\"flex-2 custom-border \"\n                                                          v-model=\"transaction.number\"\n                                                          outlined\n                                                          :disabled=\"true\"\n                                                          :rules=\"[v => !!v || 'Number is required']\"\n                                                          required/>\n\n                                            <v-icon color=\"black\" size=\"30\" style=\"height:40px;\"\n                                                    class=\"border_qrcode ml-2\"\n                                                    :disabled=\"disabledMe\"\n                                                    @click=\"generateNumber\">mdi-qrcode\n                                            </v-icon>\n\n                                        </div>\n                                        <label class=\"label\">{{ $t('note') }}</label>\n                                        <v-textarea\n                                            class=\"mt-1\"\n                                            v-model=\"transaction.transactionNote\"\n                                            outlined\n                                            no-resize\n                                            height=\"116px\"\n                                            placeholder=\"Note\"\n                                        />\n                                        <p class=\"mb-0 detial_smallside_p font_14\">{{ $t('lead_desc') }}</p>\n                                    </div>\n                                </v-col>\n                            </v-row>\n                        </v-form>\n                    </v-card>\n                </v-col>\n            </v-row>\n            <LoadingMe\n                :isLoading=\"showLoading\"\n                :fullPage=\"true\"\n                :myLoading=\"true\"\n                :alertMessage=\"loadingAlert\"\n                :color=\"loadingColorAlert\"\n                :alertText=\"loadingTextAlert\"/>\n        </v-container>\n    </v-app>\n</template>\n\n<script>\nimport {i18n} from '@/i18n';\nimport DatePickerComponent from '@/components/custom_templates/DatePickerComponent'\nimport Transaction from \"@/scripts/model/Transaction\"\n\nconst settingsHandler = require(\"@/scripts/settingsHandler\")\nconst employeeHandler = require(\"@/scripts/employeeHandler\")\nconst billingHandler = require(\"@/scripts/invoice/handler/billingHandler\")\nconst prefixHandler = require(\"@/scripts/prefixHandler\")\nconst locationHandler = require(\"@/scripts/locationHandler\")\nconst transactionHandler = require(\"@/scripts/transactionHandler\")\nimport {ShowResource} from '@/observable/store'\nimport instituteHandler from \"@/scripts/instituteHandler\";\nimport currencyHandler from \"@/scripts/currency/handler/currencyHandler\";\nimport saleQuoteHandler from \"@/scripts/transactionHandler\";\n// import kendo from \"@progress/kendo-ui\";\n\n/* Cookie */\nconst cookieJS = require(\"@/cookie.js\");\nconst cookie = cookieJS.getCookie();\n\nconst transaction = new Transaction({})\nexport default {\n    name: \"CreditPurchase\",\n    components: {\n        LoadingMe: () => import(`@/components/Loading`),\n        'app-datepicker': DatePickerComponent,\n    },\n    data: () => ({\n        isEdit: false,\n        // LoadingMe\n        showLoading: false,\n        loadingAlert: false,\n        loadingColorAlert: '',\n        loadingTextAlert: '',\n        loggedUser: {\n            id: cookie.creator,\n            name: cookie.email\n        },\n        alert: false,\n        files: [],\n        errors: [],\n        // Form validation\n        valid: true,\n        col_expand: 9,\n        col_hide: 3,\n        isHideBar: false,\n        transaction: transaction,\n        transactionDate: new Date().toISOString().substr(0, 10),\n        segments: [],\n        //employee\n        employees: [],\n        transactionType: [],\n        locations: [],\n        isSaveNew: false,\n        saveOption: '',\n        company: {},\n        maxRules: [\n            (v) => {\n                const total = parseFloat(transaction.total) || 0\n                window.console.log('total', total)\n                if (total <= 0) {\n                    return v + ' Must be greater than zero'\n                } else {\n                    return true\n                }\n            }\n        ],\n        btnDisabled: false\n    }),\n    methods: {\n        async loadTransactionRate() {\n            new Promise(resolve => {\n                setTimeout(() => {\n                    resolve('resolved')\n                    const date = new Date(this.transaction.transactionDate).toISOString().substr(0, 10)\n                    const baseCurrency = this.company.baseCurrency || {}\n                    const code = baseCurrency.code || ''\n                    if (code !== undefined || code !== '') {\n                        this.showLoading = true\n                        currencyHandler.getLastExchangeRateByDate(date, code).then(res => {\n                            if (res.data.statusCode === 200) {\n                                this.showLoading = false\n                                const xRate = res.data.data[0]\n                                this.transaction.exchangeRate = xRate\n                                this.transaction.txnRate = xRate.rate || 1\n                            }\n                        })\n                    }\n                }, 10)\n            })\n        },\n        async loadInstituteInfo() {\n            new Promise(resolve => {\n                setTimeout(() => {\n                    instituteHandler.getOneCompany(cookie.instituteId).then(res => {\n                        this.company = res\n                        this.loadTransactionRate()\n                    })\n                    resolve('resolved');\n                }, 10);\n            });\n        },\n        Help(key_search) {\n            ShowResource(key_search)\n        },\n        async initData() {\n            if (this.$route.params.id !== undefined) {\n                this.isEdit = true\n                await this.loadViewLead()\n            } else {\n                this.clear()\n            }\n        },\n        async loadLocation() {\n            new Promise(resolve => {\n                setTimeout(() => {\n                    resolve('resolved')\n                    this.locations = []\n                    locationHandler.list().then(res => {\n                        this.showLoading = true\n                        if (res.data.statusCode === 200) {\n                            this.showLoading = false\n                            this.locations = res.data.data\n                            if (this.locations.length > 0) {\n                                if (this.$route.params.id !== undefined || this.$route.params.id != '') {\n                                    this.transaction.location = this.locations[0]\n                                }\n                            }\n                        }\n                    }).catch()\n                    {\n                        this.showLoading = false\n                    }\n                }, 10)\n            })\n        },\n        async loadPrefix() {\n            new Promise(resolve => {\n                setTimeout(() => {\n                    resolve('resolved');\n                    prefixHandler.get('sale lead').then(res => {\n                        if (res.data.statusCode === 200) {\n                            this.showLoading = false\n                            this.transactionType = res.data.data\n                            if (this.transactionType.length > 0) {\n                                if (this.$route.params.id !== undefined || this.$route.params.id != '') {\n                                    this.transaction.transactionType = this.transactionType[0]\n                                    this.generateNumber()\n                                }\n                            }\n                        }\n\n                    })\n                }, 10);\n            })\n        },\n        generateNumber() {\n            let data = {\n                abbr: this.transaction.transactionType.abbr,\n                structure: this.transaction.transactionType.structure,\n                transactionDate: this.transaction.transactionDate,\n                sequcencing: this.transaction.transactionType.sequcencing,\n                prefixSeparator: this.transaction.transactionType.prefixSeparator || '',\n                numberSeparator: this.transaction.transactionType.numberSeparator || '',\n                format: this.transaction.transactionType.format || 5,\n                type: 'Sale Lead',\n            }\n            billingHandler.lastNumber(data).then(response => {\n                if (response.data.statusCode === 200) {\n                    const res = response.data.data\n                    const lastNumber = this.zeroPad(parseInt(res.lastNumber), this.transaction.transactionType.format)\n                    const number = res.suffix + this.transaction.transactionType.numberSeparator + lastNumber\n                    this.transaction.number = number\n                    this.showLoading = false\n                }\n            }).catch(e => {\n                this.showLoading = false\n                this.errors.push(e)\n            })\n        },\n        zeroPad(num, places) {\n            return String(num).padStart(places, '0')\n        },\n        savePrint() {\n        },\n        saveNew() {\n            this.isSaveNew = true\n            this.saveOption = 'saveNew'\n            this.save()\n        },\n        saveClose() {\n            this.isSaveNew = false\n            this.saveOption = 'saveClose'\n            this.save()\n        },\n        async save() {\n            if (!this.$refs.form.validate()) {\n                this.$refs.form.validate()\n                return\n            }\n            new Promise(resolve => {\n                setTimeout(() => {\n                    resolve('resolved')\n                    this.showLoading = true\n                    let data = {\n                        \"id\": this.transaction.id ? this.transaction.id : '',\n                        \"type\": 'Sale Lead',\n                        \"number\": this.transaction.number ? this.transaction.number : '',\n                        \"abbr\": this.transaction.transactionType.abbr ? this.transaction.transactionType.abbr : '',\n                        \"transactionDate\": this.transaction.transactionDate ? this.transaction.transactionDate : new Date().toISOString().substr(0, 10),\n                        \"validityDate\": '',\n                        \"monthOf\": '',\n                        \"customer\": {\n                            \"name\": this.transaction.customerName,\n                            \"nameOfLead\": this.transaction.nameOfLead,\n                            \"phone\": this.transaction.customerPhone,\n                            \"email\": this.transaction.customerEmail,\n                        },\n                        \"transactionType\": this.transaction.transactionType ? this.transaction.transactionType : '',\n                        \"paymentTerm\": {},\n                        \"discountPromotion\": {},\n                        \"priceLevel\": {},\n                        \"segment\": this.transaction.segment ? this.transaction.segment : {},\n                        \"location\": this.transaction.location ? this.transaction.location : {},\n                        \"project\": {},\n                        \"saleChannel\": {},\n                        \"billingAddress\": {},\n                        \"deliveryAddress\": {},\n                        \"deliveryDateTime\": '',\n                        \"transactionNote\": this.transaction.transactionNote ? this.transaction.transactionNote : '',\n                        \"subTotal\": this.transaction.total ? this.transaction.total : 0,\n                        \"total\": this.transaction.total ? this.transaction.total : 0,\n                        \"amount\": (this.transaction.total || 0),\n                        \"exchangeAmount\": (this.transaction.total || 0) * (this.transaction.txnRate || 1),\n                        \"discountTotal\": 0,\n                        \"loggedUser\": this.loggedUser,\n                        \"specificDiscountTotal\": 0,\n                        \"deliveryFee\": 0,\n                        \"totalTaxAmount\": 0,\n                        \"currentBalance\": 0,\n                        \"balance\": 0,\n                        \"creditLimit\": 0,\n                        \"saveOption\": this.saveOption,\n                        \"status\": 1, //1 open, 0 used,\n                        \"approvedBy\": {},\n                        \"rejectedBy\": {},\n                        \"formTemplate\": '',\n                        \"specificDiscountItem\": {},\n                        \"otherCharge\": [],\n                        \"otherChargeAmount\": 0,\n                        \"itemLines\": [],\n                        \"taxListTotal\": [],\n                        \"progressingStatus\": '',\n                        \"txnList\": [],\n                        \"publicLink\": '',\n                        \"usedDateAt\": '',\n                        \"deletedAt\": '',\n                        \"deleted\": 0,\n                        \"createdAt\": new Date().toISOString().substr(0, 10),\n                        \"saleOrderType\": 0,\n                        \"employee\": this.transaction.employee,\n                        \"supplier\": {},\n                        \"txnRate\": 1,\n                        \"exchangeRate\": {},\n                        \"form\": 1,\n                        \"lead\": {},\n                        \"routeView\": \"\",\n                        \"exspectedDate\": '',\n                    }\n                    transactionHandler.create(data).then(response => {\n                        if (response.data.statusCode === 201) {\n                            if (this.isSaveNew == true) {\n                                setTimeout(() => {\n                                    this.clear()\n                                }, 10)\n                            } else {\n                                window.history.go(-1)\n                            }\n                            this.showLoading = false\n                            this.$refs.form.reset()\n                            this.$snotify.success('Successfully')\n                            this.destroy()\n                        }\n                    }).catch(e => {\n                        this.showLoading = false\n                        this.$snotify.error('Something went wrong')\n                        this.errors.push(e)\n                    })\n                }, 10);\n            })\n        },\n        async loadSegment() {\n            new Promise(resolve => {\n                setTimeout(() => {\n                    resolve('resolved')\n                    this.segments = []\n                    settingsHandler.getSeg().then(res => {\n                        this.showLoading = true\n                        if (res.data.statusCode === 200) {\n                            this.showLoading = false\n                            this.segments = res.data.data\n                            if (this.segments.length > 0) {\n                                if (this.$route.params.id !== undefined || this.$route.params.id != '') {\n                                    this.transaction.segment = this.segments[0]\n                                }\n                            }\n                            // this.segmentList = res.data.data\n                        }\n                    }).catch()\n                    {\n                        this.showLoading = false\n                    }\n                }, 10)\n            })\n        },\n        async loadEmployeeCenter() {\n            new Promise(resolve => {\n                setTimeout(() => {\n                    resolve('resolved')\n                    this.employees = []\n                    employeeHandler.center(undefined).then(res => {\n                        this.showLoading = true\n                        if (res.data.statusCode === 200) {\n                            this.showLoading = false\n                            this.employees = res.data.data\n                            if (this.employees.length > 0) {\n                                this.transaction.employee = this.employees[0]\n                            }\n                        }\n                    }).catch()\n                    {\n                        this.showLoading = false\n                    }\n                }, 10)\n            })\n        },\n        cancel() {\n            this.$swal({\n                title: i18n.t('msg_title_warning'),\n                text: i18n.t('msg_discard'),\n                icon: \"warning\",\n                showCancelButton: true,\n                cancelButtonText: i18n.t('cancel'),\n                confirmButtonColor: \"#4d4848\",\n                cancelButtonColor: \"#ED1A3A\",\n                confirmButtonText: i18n.t('discard'),\n            }).then((result) => {\n                window.console.log(result)\n                if (result.value) {\n                    this.$router.go(-1);\n                }\n            });\n        },\n        clear() {\n            this.isEdit = false\n            //set default segment\n            let s = {}\n            if (this.segments.length > 0) {\n                s = this.segments[0]\n            }\n            //set default location\n            let l = {}\n            if (this.locations.length > 0) {\n                l = this.locations[0]\n            }\n            //set default employee\n            let e = {}\n            if (this.employees.length > 0) {\n                e = this.employees[0]\n            }\n            //transaction type\n            let tt = {}\n            if (this.transactionType.length > 0) {\n                tt = this.transactionType[0]\n            }\n            this.transaction = new Transaction({\n                transactionDate: new Date().toISOString().substr(0, 10),\n                total: 0,\n                segment: s,\n                location: l,\n                employee: e,\n                transactionType: tt,\n            })\n            this.generateNumber()\n        },\n        hide_smallsitebar() {\n            this.isHideBar = !this.isHideBar;\n        },\n        async loadViewLead() {\n            new Promise((resolve) => {\n                setTimeout(() => {\n                    resolve(\"resolved\");\n                    this.showLoading = true;\n                    this.transaction = {}\n                    saleQuoteHandler\n                        .view(this.$route.params.id)\n                        .then((res) => {\n                            if (res.data.statusCode === 200) {\n                                this.showLoading = false;\n                                const data = res.data.data[0]\n                                this.transaction = data\n                                this.transaction.total = parseFloat(data.total) || 0\n                                this.transaction.nameOfLead = data.customer.nameOfLead || ''\n                                this.transaction.customerName = data.customer.name || ''\n                                this.transaction.customerEmail = data.customer.email || ''\n                                this.transaction.customerPhone = data.customer.phone || ''\n                                this.transaction.transactionDate = data.transactionDate || ''\n                                const status = this.transaction.status || 1\n                                if (status === 2) {\n                                    this.btnDisabled = true\n                                } else {\n                                    this.btnDisabled = false\n                                }\n                            } else {\n                                this.showLoading = false;\n                            }\n                        })\n                        .catch();\n                    {\n                        this.showLoading = false;\n                    }\n                }, 10);\n            })\n        },\n        destroy() {\n            this.$destroy();\n        }\n    },\n    computed: {\n        id() {\n            return this.$route.params.id\n        },\n        disabledMe() {\n            return !!this.$route.params.id;\n        },\n        currency() {\n            if (this.company) {\n                const baseCurrency = this.company.baseCurrency || {}\n                const code = baseCurrency.code || ''\n                if (code) {\n                    return '( ' + code + ' )'\n                }\n            }\n            return ''\n        },\n        hiddenButton() {\n            if (this.$route.params.id) {\n                return true\n            } else {\n                return false\n            }\n        }\n    },\n    created() {\n    },\n    mounted: async function () {\n        await this.loadInstituteInfo()\n        await this.loadSegment()\n        await this.loadEmployeeCenter()\n        await this.loadPrefix()\n        await this.loadLocation()\n        await this.initData()\n    },\n    watch: {\n        id() {\n            if (this.$route.params.id === undefined) {\n                this.clear();\n            } else {\n                this.showLoading = true;\n                this.initData();\n            }\n        },\n    }\n};\n</script>\n\n<style scoped>\n.small_sidebar {\n    height: 94%;\n    position: relative;\n    padding: 12px;\n}\n\n.hide_small_bar_class {\n    max-width: 0;\n    transition: .5s ease-in;\n    flex: 0 0 0;\n    padding: 0;\n}\n\n.hide_big_bar_class {\n    max-width: 100%;\n    transition: .5s ease-in;\n    flex: 0 0 100%;\n}\n\n.iconArrow {\n    right: -35px;\n    position: absolute;\n    bottom: -10px;\n}\n\n.iconArrowHide {\n    position: absolute;\n    right: -7px;\n    bottom: -10px;\n}\n\n.theme--light.v-data-table > .v-data-table__wrapper > table > tbody > tr:hover:not(.v-data-table__expanded__content):not(.v-data-table__empty-wrapper) {\n    background-color: transparent !important;\n}\n\n.detial_smallside_p {\n    position: absolute;\n    padding-right: 12px;\n    bottom: 10px;\n}\n\n</style>"]}]}