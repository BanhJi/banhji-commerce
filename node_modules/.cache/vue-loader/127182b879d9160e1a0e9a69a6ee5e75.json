{"remainingRequest":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/src/views/micro_edition/purchases/CreditPurchase.vue?vue&type=style&index=0&id=2be90c86&scoped=true&lang=css&","dependencies":[{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/src/views/micro_edition/purchases/CreditPurchase.vue","mtime":1640595536818},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/@vue/cli-service/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["CreditPurchase.vue"],"names":[],"mappingsqfile":"CreditPurchase.vue","sourceRoot":"src/views/micro_edition/purchases","sourcesContent":["<template>\n  <v-app>\n    <v-container>\n      <v-row>\n        <v-col sm=\"12\" cols=\"12\">\n          <v-card\n            outlined\n            dense\n            class=\"pa-4 no_border rounded-sm\"\n            color=\"white\"\n          >\n            <v-form ref=\"form\" v-model=\"valid\" lazy-validation>\n              <v-row>\n                <v-col\n                  class=\"bigSide pr-2 py-0\"\n                  sm=\"12\"\n                  cols=\"12\"\n                  style=\"transition: 0.3s ease-in\"\n                  :class=\"{ hide_big_bar_class: isHideBar }\"\n                >\n                  <v-card outlined dense class=\"no_border\">\n                    <h2 class=\"mb-0\">{{ $t(\"purchase\") }}</h2>\n\n                    <v-icon\n                      @click=\"cancel()\"\n                      style=\"cursor: pointer; font-size: 40px\"\n                      color=\"grey\"\n                      class=\"float-right\"\n                      >close\n                    </v-icon>\n                    <span\n                      class=\"pointer float-right help\"\n                      @click=\"Help('purchase')\"\n                    >\n                      {{ $t(\"help\") }}\n                    </span>\n                  </v-card>\n                  <v-card\n                    outlined\n                    dense\n                    class=\"px-4 rounded-4 no_border\"\n                    color=\"grayBg\"\n                  >\n                    <v-row>\n                      <v-col class=\"pb-0 pt-3\" sm=\"4\" cols=\"12\">\n                        <label class=\"label mb-0\">{{ $t(\"supplier\") }}</label>\n                        <v-col\n                          sm=\"12\"\n                          cols=\"12\"\n                          class=\"kendo_dropdown_custom px-0 pb-4 pt-0\"\n                        >\n                          <dropdownlist\n                            :data-items=\"vendorList\"\n                            @change=\"onChange\"\n                            :value=\"vendor\"\n                            :data-item-key=\"dataItemKey\"\n                            :text-field=\"textField\"\n                            :default-item=\"defaultItem\"\n                            :filterable=\"true\"\n                            :required=\"true\"\n                            :disabled=\"disableMe\"\n                            :valid=\"validVendor\"\n                            @filterchange=\"onFilterChange\"\n                          >\n                          </dropdownlist>\n                        </v-col>\n                        <div hidden>\n                          <label class=\"label mb-0\">{{\n                            $t(\"purchase_type\")\n                          }}</label>\n                          <v-select\n                            class=\"mt-1\"\n                            :items=\"purchaseTypes\"\n                            item-value=\"id\"\n                            item-text=\"name\"\n                            v-model=\"purchase.transactionType\"\n                            @change=\"onInvoiceTypeChanged\"\n                            :rules=\"[\n                              (v) => !!v || 'Transaction Currency is required',\n                            ]\"\n                            return-object\n                            outlined\n                          />\n                        </div>\n\n                        <label class=\"label mb-0\">{{\n                          $t(\"transaction_date\")\n                        }}</label>\n                        <app-datepicker\n                          :initialDate=\"purchase.transactionDate\"\n                          :disabled=\"disableMe\"\n                          @onChanged=\"onInvoiceDateChanged\"\n                          @emitDate=\"txnDate = $event\"\n                        />\n                        <label class=\"label mb-0\">{{\n                          $t(\"transaction_number\")\n                        }}</label>\n                        <v-row class=\"mt-1 mr-0\">\n                          <v-col sm=\"3\" cols=\"3\" class=\"pt-0 pr-0 pb-0\">\n                            <div class=\"code_text text-bold\">\n                              {{ abbr }}\n                            </div>\n                          </v-col>\n                          <v-col sm=\"7\" cols=\"7\" class=\"pt-0 pl-0 pr-1 pb-0\">\n                            <v-text-field\n                              class=\"custom-border\"\n                              v-model=\"purchase.number\"\n                              outlined\n                              readonly\n                              :rules=\"[(v) => !!v || 'Number is required']\"\n                              required\n                            />\n                          </v-col>\n                          <v-col sm=\"2\" cols=\"2\" class=\"pt-0 px-0 pb-0\">\n                            <v-icon\n                              color=\"black\"\n                              size=\"30\"\n                              class=\"border_qrcode\"\n                              :disabled=\"disableMe\"\n                              @click=\"generateNumber\"\n                              >mdi-qrcode\n                            </v-icon>\n                          </v-col>\n                        </v-row>\n                      </v-col>\n                      <v-col class=\"pb-0 pt-3\" sm=\"4\" cols=\"12\">\n                        <label class=\"label mb-0\">{{\n                          $t(\"suppliers_invoice_no\")\n                        }}</label>\n                        <v-text-field\n                          class=\"mt-1 mr-0\"\n                          outlined\n                          v-model=\"purchase.billNo\"\n                          tage=\"Vendor Invoice Number.\"\n                          :rules=\"[(v) => !!v || 'required']\"\n                          required\n                        />\n                        <label class=\"label mb-0\">{{ $t(\"term\") }}</label>\n                        <v-select\n                          class=\"mt-1\"\n                          v-model=\"purchase.paymentTerm\"\n                          :items=\"paymentTerms\"\n                          :rules=\"[(v) => !!v['id'] || 'required']\"\n                          @change=\"onPaymentTermChanged\"\n                          placeholder=\"Term\"\n                          item-text=\"name\"\n                          item-value=\"id\"\n                          return-object\n                          outlined\n                        />\n                      </v-col>\n                      <v-col class=\"pb-0 pt-3\" sm=\"4\" cols=\"12\">\n                        <label class=\"label mb-0\">{{ $t(\"due_date\") }}</label>\n                        <app-datepicker\n                          :initialDate=\"purchase.dueDate\"\n                          @emitDate=\"dueDate = $event\"\n                        />\n                        <label class=\"label mb-0\">{{\n                          $t(\"vendor_invoice_date\")\n                        }}</label>\n                        <app-datepicker\n                          :initialDate=\"purchase.billDate\"\n                          @emitDate=\"billDate = $event\"\n                        />\n                        <!-- <label class=\"label mb-0\">{{\n                                                        $t(\"price_level\")\n                                                    }}</label>\n                                                <v-select\n                                                    class=\"mt-1\"\n                                                    v-model=\"purchase.priceLevel\"\n                                                    :items=\"priceLevel\"\n                                                    item-value=\"id\"\n                                                    @change=\"onPriceLevelChange\"\n                                                    :disabled=\"disabledSLP\"\n                                                    :rules=\"[(v) => !!v['id'] || 'required']\"\n                                                    item-text=\"name\"\n                                                    return-object\n                                                    placeholder=\"Price Level\"\n                                                    tage=\"Default Price Level\"\n                                                    outlined\n                                                /> -->\n\n                        <!-- <v-col\n                                                    sm=\"12\"\n                                                    col=\"12\"\n                                                    class=\"d-flex justify-space-between pt-0\"\n                                                >\n                                                    <div>\n                                                        <p class=\"label mb-0\">{{ $t(\"currency\") }}</p>\n                                                        <p class=\"label mb-0 mt-4\">\n                                                            {{ currencyCode }}\n                                                        </p>\n                                                    </div>\n                                                    <div>\n                                                        <p class=\"label mb-0\">{{ $t(\"rate\") }}</p>\n                                                        <p class=\"label mb-0 mt-4\">\n                                                            {{ transactionRate }}\n                                                        </p>\n                                                    </div>\n                                                </v-col> -->\n                      </v-col>\n                    </v-row>\n                  </v-card>\n                  <v-row style=\"background-color: #fff\">\n                    <v-col sm=\"12\" cols=\"12\" class=\"pb-0 px-4\">\n                      <kendo-datasource\n                        ref=\"itemLineDS\"\n                        :data=\"itemLines\"\n                        :change=\"dataSourceChanged\"\n                      />\n                      <kendo-grid\n                        id=\"gridItemLine\"\n                        class=\"grid-function\"\n                        :data-source-ref=\"'itemLineDS'\"\n                        :sortable=\"false\"\n                        :column-menu=\"true\"\n                        :editable=\"true\"\n                        v-on:databound=\"dataBound\"\n                        :scrollable-virtual=\"true\"\n                      >\n                        <kendo-grid-column\n                          :command=\"{\n                            iconClass: 'k-icon k-i-trash',\n                            text: ' ',\n                            click: removeRow,\n                            className: 'isEditable',\n                          }\"\n                          :title=\"' '\"\n                          :width=\"70\"\n                          :headerAttributes=\"{\n                            style:\n                              'text-align: left; background-color: #EDF1F5',\n                          }\"\n                        />\n                        <kendo-grid-column\n                          :title=\"$t('no.')\"\n                          :width=\"55\"\n                          :column-menu=\"false\"\n                          :template=\"rowNumberTmpl\"\n                          :headerAttributes=\"{\n                            style: 'background-color: #EDF1F5;',\n                            class: 'text-products',\n                          }\"\n                          :attributes=\"{ style: 'text-align: products' }\"\n                        />\n\n                        <kendo-grid-column\n                          :field=\"'item'\"\n                          :title=\"$t('item')\"\n                          :template=\"itemTemplate\"\n                          :editor=\"ItemDropDownEditor\"\n                          :attributes=\"{ class: 'isEditable' }\"\n                          :width=\"200\"\n                          :headerAttributes=\"{\n                            style: 'background-color: #EDF1F5',\n                          }\"\n                        />\n                        <kendo-grid-column\n                          :field=\"'description'\"\n                          :title=\"$t('description')\"\n                          :template=\"'<span>#=description#</span>'\"\n                          :width=\"200\"\n                          :headerAttributes=\"{\n                            style: 'background-color: #EDF1F5',\n                          }\"\n                        />\n                        <kendo-grid-column\n                          :field=\"'qty'\"\n                          :title=\"$t('qty')\"\n                          :format=\"'{0:n}'\"\n                          :template=\"'<span>#=qty#</span>'\"\n                          :width=\"80\"\n                          :headerAttributes=\"{\n                            style:\n                              'text-align: left; background-color: #EDF1F5',\n                          }\"\n                          :attributes=\"{ style: 'text-align: right; ' }\"\n                        />\n                        <kendo-grid-column\n                          :field=\"'uom'\"\n                          :title=\"$t('uom')\"\n                          :width=\"100\"\n                          :template=\"UOMTemplate\"\n                          :editor=\"UOMDropDownEditor\"\n                          :headerAttributes=\"{\n                            style:\n                              'text-align: left; background-color: #EDF1F5',\n                          }\"\n                          :attributes=\"{ style: 'text-align: left' }\"\n                        />\n                        <kendo-grid-column\n                          :field=\"'cost'\"\n                          :title=\"$t('cost')\"\n                          :width=\"200\"\n                          :template=\"'<span>#=kendo.toString(cost || 0, decimalFormat)#</span>'\"\n                          :headerAttributes=\"{\n                            style:\n                              'text-align: left; background-color: #EDF1F5',\n                          }\"\n                          :attributes=\"{ style: 'text-align: right' }\"\n                        />\n                        <kendo-grid-column\n                          :field=\"'amount'\"\n                          :title=\"$t('amount')\"\n                          :width=\"200\"\n                          :editable=\"\n                            () => {\n                              return false;\n                            }\n                          \"\n                          :template=\"'<span>#=kendo.toString(amount || 0, decimalFormat)#</span>'\"\n                          :headerAttributes=\"{\n                            style:\n                              'text-align: left; background-color: #EDF1F5',\n                          }\"\n                          :attributes=\"{ style: 'text-align: right' }\"\n                        />\n                        <kendo-grid-column\n                          :field=\"'vatTax'\"\n                          :title=\"$t('tax')\"\n                          :width=\"200\"\n                          :hidden=\"true\"\n                          :template=\"vatTemplate\"\n                          :editor=\"VatTaxDropDownEditor\"\n                          :headerAttributes=\"{\n                            style:\n                              'text-align: left; background-color: #EDF1F5',\n                          }\"\n                          :attributes=\"{ style: 'text-align: left' }\"\n                        />\n                        <kendo-grid-column\n                          :field=\"'serviceDate'\"\n                          :title=\"$t('date_from')\"\n                          :width=\"200\"\n                          :hidden=\"!purchaseFormContent.serviceDate\"\n                          :template=\"'<span>#= kendo.toString(new Date(serviceDate), dateFormat)#</span>'\"\n                          :editor=\"ServiceDateEditor\"\n                          :headerAttributes=\"{\n                            style: 'background-color: #EDF1F5',\n                          }\"\n                        />\n                        <kendo-grid-column\n                          :field=\"'serviceDateTo'\"\n                          :title=\"$t('date_to')\"\n                          :width=\"200\"\n                          :hidden=\"!purchaseFormContent.serviceDateTo\"\n                          :template=\"'<span>#= kendo.toString(new Date(serviceDateTo), dateFormat)#</span>'\"\n                          :editor=\"ServiceDateToEditor\"\n                          :headerAttributes=\"{\n                            style: 'background-color: #EDF1F5',\n                          }\"\n                        />\n                        <kendo-grid-column\n                          :field=\"'discountItem'\"\n                          :title=\"$t('discount_item')\"\n                          :width=\"200\"\n                          :hidden=\"!purchaseFormContent.discountItem\"\n                          :template=\"discountItemTemplate\"\n                          :editor=\"DiscountItemDropDownEditor\"\n                          :headerAttributes=\"{\n                            style:\n                              'text-align: left; background-color: #EDF1F5',\n                          }\"\n                          :attributes=\"{ style: 'text-align: left' }\"\n                        />\n\n                        <kendo-grid-column\n                          :field=\"'class1'\"\n                          :title=\"$t('class_1')\"\n                          :hidden=\"!purchaseFormContent.class1\"\n                          :template=\"'<span>#=class1.name || ``#</span>'\"\n                          :width=\"200\"\n                          :editor=\"ClassEditor.class1\"\n                          :headerAttributes=\"{\n                            style:\n                              'text-align: left; background-color: #EDF1F5',\n                          }\"\n                          :attributes=\"{ style: 'text-align: left' }\"\n                        />\n                        <kendo-grid-column\n                          :field=\"'class2'\"\n                          :title=\"$t('class_2')\"\n                          :hidden=\"!purchaseFormContent.class2\"\n                          :template=\"'<span>#=class2.name || ``#</span>'\"\n                          :width=\"200\"\n                          :editor=\"ClassEditor.class2\"\n                          :headerAttributes=\"{\n                            style:\n                              'text-align: left; background-color: #EDF1F5',\n                          }\"\n                          :attributes=\"{ style: 'text-align: left' }\"\n                        />\n                        <kendo-grid-column\n                          :field=\"'class3'\"\n                          :title=\"$t('class_3')\"\n                          :hidden=\"!purchaseFormContent.class3\"\n                          :template=\"'<span>#=class3.name || ``#</span>'\"\n                          :width=\"200\"\n                          :editor=\"ClassEditor.class3\"\n                          :headerAttributes=\"{\n                            style:\n                              'text-align: left; background-color: #EDF1F5',\n                          }\"\n                          :attributes=\"{ style: 'text-align: left' }\"\n                        />\n                        <kendo-grid-column\n                          :field=\"'class4'\"\n                          :title=\"$t('class_4')\"\n                          :hidden=\"!purchaseFormContent.class4\"\n                          :template=\"'<span>#=class4.name || ``#</span>'\"\n                          :width=\"200\"\n                          :editor=\"ClassEditor.class4\"\n                          :headerAttributes=\"{\n                            style:\n                              'text-align: left; background-color: #EDF1F5',\n                          }\"\n                          :attributes=\"{ style: 'text-align: left' }\"\n                        />\n                        <kendo-grid-column\n                          :field=\"'class5'\"\n                          :title=\"$t('class_5')\"\n                          :hidden=\"!purchaseFormContent.class5\"\n                          :template=\"'<span>#=class5.name || ``#</span>'\"\n                          :width=\"200\"\n                          :editor=\"ClassEditor.class5\"\n                          :headerAttributes=\"{\n                            style:\n                              'text-align: left; background-color: #EDF1F5',\n                          }\"\n                          :attributes=\"{ style: 'text-align: left' }\"\n                        />\n                      </kendo-grid>\n                    </v-col>\n                    <v-col sm=\"12\" cols=\"12\" class=\"pt-1\">\n                      <v-btn class=\"float-left btn_plus mr-2\" @click=\"addRow\">\n                        <v-icon size=\"\" class=\"ma-1\">mdi-plus</v-icon>\n                      </v-btn>\n                    </v-col>\n                    <v-col sm=\"12\" cols=\"12\" class=\"py-0\">\n                      <v-row>\n                        <v-col class=\"pt-0\" sm=\"5\" cols=\"6\">\n                          <v-card\n                            class=\"no-boxshadow pa-3 rounded-4\"\n                            color=\"grayBg\"\n                          >\n                            <v-row>\n                              <v-col class=\"py-0 pa-4\" sm=\"12\" cols=\"12\">\n                                <label class=\"label mb-0\">{{\n                                  $t(\"billing_address\")\n                                }}</label>\n                                <v-select\n                                  class=\"mt-1\"\n                                  v-model=\"purchase.billingAddress\"\n                                  :items=\"billingAddress\"\n                                  item-value=\"id\"\n                                  item-text=\"name\"\n                                  tage=\"Billing Address\"\n                                  placeholder=\"Address\"\n                                  outlined\n                                />\n                                <label class=\"label mb-0\">{{\n                                  $t(\"pickup_delivery_address\")\n                                }}</label>\n                                <v-select\n                                  class=\"mt-1\"\n                                  v-model=\"purchase.deliveryAddress\"\n                                  :items=\"deliveryAddress\"\n                                  item-value=\"id\"\n                                  item-text=\"name\"\n                                  tage=\"Pickup/ Delivery Address\"\n                                  placeholder=\"Address\"\n                                  outlined\n                                />\n                                <label class=\"label mb-0\">{{\n                                  $t(\"pickup_delivery_date_time\")\n                                }}</label>\n                                <app-datepicker\n                                  :initialDate=\"purchase.deliveryDateTime\"\n                                  @emitDate=\"deliveryDateTime = $event\"\n                                />\n                                <!-- \n                                                                <label>{{ $t(\"message_on_invoice\") }}</label>\n                                                                <v-textarea\n                                                                    class=\"mt-1\"\n                                                                    v-model=\"purchase.transactionNote\"\n                                                                    outlined\n                                                                    no-resize\n                                                                    height=\"70px\"\n                                                                    tage=\"Message on Purchase\"\n                                                                    placeholder=\"This will appear on the Purchase\"\n                                                                />\n                                                                <label>{{ $t(\"message_on_journal\") }}</label>\n                                                                <v-textarea\n                                                                    class=\"mt-1\"\n                                                                    v-model=\"purchase.journalNote\"\n                                                                    outlined\n                                                                    no-resize\n                                                                    height=\"70px\"\n                                                                    tage=\"Message on Order\"\n                                                                    placeholder=\"This will appear on the journal\"\n                                                                /> -->\n                              </v-col>\n                            </v-row>\n                          </v-card>\n                        </v-col>\n                        <v-col class=\"pt-0\" sm=\"7\" cols=\"6\">\n                          <v-simple-table>\n                            <template v-slot:default>\n                              <tbody>\n                                <tr>\n                                  <td class=\"text-left pr-0\">\n                                    {{ $t(\"subtotal\") }}\n                                  </td>\n                                  <td class=\"text-center\">:</td>\n                                  <td class=\"text-right\">\n                                    {{ numberFormat(purchase.subTotal) }}\n                                  </td>\n                                </tr>\n                                <tr>\n                                  <td class=\"text-left pr-0\">\n                                    {{ $t(\"general_discount\") }}\n                                  </td>\n                                  <td class=\"text-center\">:</td>\n                                  <td class=\"text-right\">\n                                    ({{ numberFormat(purchase.discountTotal) }})\n                                  </td>\n                                </tr>\n                                <tr>\n                                  <td class=\"text-left text-uppercase pr-0\">\n                                    {{ $t(\"total\") }}\n                                  </td>\n                                  <td class=\"text-center\">:</td>\n                                  <td\n                                    class=\"text-right primary--text text-bold\"\n                                    id=\"total\"\n                                  >\n                                    {{ numberFormat(purchase.total) }}\n                                  </td>\n                                </tr>\n                                <tr>\n                                  <td class=\"text-left pr-0\">\n                                    {{ $t(\"deposit\") }}\n                                    <span class=\"float-right primary--text\">{{\n                                      numberFormat(purchase.depositAmount)\n                                    }}</span>\n                                  </td>\n                                  <td class=\"text-center\">:</td>\n                                  <td class=\"text-right hide_form_alert\">\n                                    <v-text-field\n                                      class=\"\n                                        text-right\n                                        float-right\n                                        deposite_input\n                                      \"\n                                      v-model=\"purchase.depositDeduction\"\n                                      @change=\"onDepositDeductionChange\"\n                                      min=\"0\"\n                                      type=\"number\"\n                                      tage=\"Deposit\"\n                                      width=\"80\"\n                                      outlined\n                                    />\n                                  </td>\n                                </tr>\n                                <tr>\n                                  <td class=\"text-left\">\n                                    {{ $t(\"amount_due\") }}\n                                  </td>\n                                  <td class=\"text-center\">:</td>\n                                  <td\n                                    class=\"text-right primary--text text-bold\"\n                                  >\n                                    {{ numberFormat(purchase.remainingAmount) }}\n                                  </td>\n                                </tr>\n                              </tbody>\n                            </template>\n                          </v-simple-table>\n                        </v-col>\n                      </v-row>\n                    </v-col>\n                  </v-row>\n                  <v-divider />\n                  <v-card outlined dense class=\"no_border function_footer\">\n                    <v-alert type=\"warning\" v-model=\"alert\" dismissible>\n                      <span v-html=\"errorMessage\" />\n                    </v-alert>\n                    <v-menu>\n                      <template v-slot:activator=\"{ on }\">\n                        <v-btn\n                          class=\"mr-2 float-left select_template\"\n                          v-on=\"on\"\n                        >\n                          {{ $t(\"select_template\") }}\n                          <v-icon size=\"\" class=\"ma-1\">expand_more</v-icon>\n                        </v-btn>\n                      </template>\n                      <v-list>\n                        <v-list-item\n                          v-for=\"(item, index) in templates\"\n                          :key=\"index\"\n                        >\n                          <v-list-item-title\n                            >{{ item.title }}\n                          </v-list-item-title>\n                        </v-list-item>\n                      </v-list>\n                    </v-menu>\n                    <v-btn\n                      outlined\n                      class=\"text-capitalize black--text float-left\"\n                      color=\"primary\"\n                      @click=\"cancel\"\n                      >{{ $t(\"cancel\") }}\n                    </v-btn>\n                    <v-btn\n                      class=\"float-right text-capitalize white--text\"\n                      @click=\"onSaveClose(false)\"\n                      color=\"primary\"\n                    >\n                      {{ $t(\"save_close\") }}\n                    </v-btn>\n                    <v-btn\n                      color=\"secondary\"\n                      style=\"margin-right: 10px !important\"\n                      class=\"white--text float-right text-capitalize\"\n                      @click=\"onSaveClose(true)\"\n                      :hidden=\"hiddenButton\"\n                      >{{ $t(\"save_new\") }}\n                    </v-btn>\n                  </v-card>\n                </v-col>\n              </v-row>\n            </v-form>\n          </v-card>\n        </v-col>\n      </v-row>\n      <LoadingMe :isLoading=\"showLoading\" :fullPage=\"false\" :myLoading=\"true\" />\n      <v-dialog v-model=\"dialogTax\" max-width=\"450px\">\n        <v-card>\n          <div class=\"modal_header\">\n            <v-card-title>{{ $t(\"tax_list\") }}</v-card-title>\n            <v-icon @click=\"dialogTax = false\">close</v-icon>\n          </div>\n          <v-card-text class=\"modal_text_content\">\n            <v-row>\n              <v-col sm=\"12\" cols=\"12\" class=\"py-0\">\n                <v-simple-table>\n                  <template v-slot:default>\n                    <tbody>\n                      <tr\n                        v-for=\"(value, name) in taxListTotal\"\n                        v-bind:key=\"name\"\n                      >\n                        <td class=\"text-left\" width=\"180px\">{{ name }}</td>\n                        <td class=\"text-center\">:</td>\n                        <td class=\"text-right\">\n                          {{ numberFormat(value) }}\n                        </td>\n                      </tr>\n                      <tr>\n                        <td class=\"text-left\" width=\"180px\">\n                          {{ $t(\"total\") }}\n                        </td>\n                        <td class=\"text-center\">:</td>\n                        <td class=\"text-right\">\n                          {{ numberFormat(purchase.totalTaxAmount) }}\n                        </td>\n                      </tr>\n                    </tbody>\n                  </template>\n                </v-simple-table>\n              </v-col>\n            </v-row>\n          </v-card-text>\n          <v-divider />\n        </v-card>\n      </v-dialog>\n    </v-container>\n  </v-app>\n</template>\n<script>\n// import kendo from \"@progress/kendo-ui\"\nimport { i18n } from \"@/i18n\";\nimport PurchaseModel from \"@/scripts/purchase/model/Purchase\";\nimport ItemLineModel from \"@/scripts/purchase/model/ItemLine\";\nimport { uuid } from \"vue-uuid\";\nimport { DropDownList } from \"@progress/kendo-vue-dropdowns\";\nimport kendo from \"@progress/kendo-ui\";\nimport PurchaseFormContentModel from \"@/scripts/model/PurchaseFormContent\";\nimport { dataStore, ShowResource } from \"@/observable/store\";\nimport paymentTermHandler_ from \"@/scripts/paymentterm/handler/paymentTermHandler\";\nimport creditLimitHandler from \"@/scripts/creditLimit/handler/creditLimitHandler\";\nimport saleOrderHandler from \"@/scripts/transactionHandler\";\nimport Helper from \"@/helper\";\nimport settingsHandler from \"@/scripts/settingsHandler\";\n\nconst supplierHandler = require(\"@/scripts/supplierHandler\");\n// import kendo from \"@progress/kendo-ui\";\n\nconst projectHandler = require(\"@/scripts/projectHandler\");\nconst priceLevelHandler = require(\"@/scripts/priceLevelHandler\");\nconst currencyHandler = require(\"@/scripts/currency/handler/currencyHandler\");\n\n// const settingsHandler = require(\"@/scripts/settingsHandler\");\nconst employeeHandler = require(\"@/scripts/employeeHandler\");\nconst locationHandler = require(\"@/scripts/locationHandler\");\n// const paymentTermHandler = require(\"@/scripts/paymentTermHandler\");\nconst accountHandler = require(\"@/scripts/handler/accounting/account\");\nconst productVariantHandler = require(\"@/scripts/productVariantHandler\");\nconst uomPriceHandler = require(\"@/scripts/uomPriceHandler\");\nconst discountItemHandler = require(\"@/scripts/discountItemHandler\");\nconst settingHandler = require(\"@/scripts/settingHandler\");\nconst otherChargeHandler = require(\"@/scripts/otherChargeHandler\");\nconst purchaseFormContentHandler = require(\"@/scripts/purchaseFormContentHandler\");\nconst prefixHandler = require(\"@/scripts/prefixHandler\");\nconst billingHandler = require(\"@/scripts/invoice/handler/billingHandler\");\n\nconst purchaseModel = new PurchaseModel({});\nconst itemLineModel = new ItemLineModel({});\nconst purchaseFormContentModel = new PurchaseFormContentModel({});\nconst $ = kendo.jQuery;\n\nconst textField = \"numberName\";\nconst keyField = \"id\";\nconst defaultItem = { [textField]: \"Select vendor...\", [keyField]: null };\nconst emptyItem = { [textField]: \"loading ...\" };\nconst pageSize = 10;\nconst itemLinePrefix = \"lin-\";\nconst loadingData = [];\nwhile (loadingData.length < pageSize) {\n  loadingData.push({ ...emptyItem });\n}\nconst { ClassEditor } = require(\"@/scripts/kendo_editor/Collections\");\nconst DISCOUNT_TYPE = \"?type=Purchase\";\nconst TRANSACTION_TYPE = \"Purchase\";\nconst cookieJS = require(\"@/cookie.js\");\nconst cookie = cookieJS.getCookie();\nconst NATURE = \"purchase\";\nexport default {\n  name: \"CreditPurchase\",\n  props: [\"id\", \"transactionDate\"],\n  components: {\n    LoadingMe: () => import(`@/components/Loading`),\n    \"app-datepicker\": () =>\n      import(\"@/components/custom_templates/DatePickerComponent\"),\n    // \"month-picker\": () => import(\"@/components/custom_templates/MonthPicker\"),\n    dropdownlist: DropDownList,\n  },\n  data: () => ({\n    isEdit: false,\n    showLoadingTxn: false,\n    showLoadingTxnAdditionalCost: false,\n    mOtherCharge: [],\n    mOtherChargeAmount: [],\n    purchaseOrders: [],\n    numSelect: [1],\n    dialogTax: false,\n    vendorList: [],\n    showLoading: false,\n    bill_date: \"\",\n    alert: false,\n    files: [],\n    // Form validation\n    valid: true,\n    itemLines: [],\n    txnDate: new Date().toISOString().substr(0, 10),\n    billDate: new Date().toISOString().substr(0, 10),\n    invoiceDate: new Date().toISOString().substr(0, 10),\n    monthOf: \"\",\n    templates: [{ title: \"Purchase\", value: \"Purchase\" }],\n    isHideBar: false,\n    vendor: {},\n    defaultItem: defaultItem,\n    purchase: purchaseModel,\n    transactionType: [\"Invoice\", \"Commercial Invoice\", \"Tax Invoice\"],\n    cusBaseUrl: supplierHandler.search(),\n    empBaseUrl: employeeHandler.search(),\n    init: { method: \"GET\", accept: \"application/json\", headers: [] },\n    pendingRequest: undefined,\n    requestStarted: false,\n    skip: 0,\n    tempSkip: null,\n    total: 0,\n    filter: \"\",\n    referenceNo: \"\",\n    filter_: \"\",\n    textField: \"numberName\",\n    dataItemKey: \"id\",\n    segments: [],\n    employees: [],\n    methods: [\"Qty Based\", \"Amount Based\"],\n    mEmployee: {},\n    customerProjects: [],\n    billingAddress: [],\n    deliveryAddress: [],\n    deliveryDateTime: new Date().toISOString().substr(0, 10),\n    priceLevel: [],\n    locations: [],\n    paymentTerms: [],\n    accPayable: [],\n    currencies: [],\n    itemLine: itemLineModel,\n    uoms: [],\n    tax: [],\n    specificDiscountItem: [],\n    otherChargeList: [],\n    depositBalance: 0,\n    schemaDefinition: {\n      model: {\n        id: \"id\",\n      },\n    },\n    purchaseFormContent: purchaseFormContentModel,\n    ClassEditor: ClassEditor,\n    taxListTotal: {},\n    purchaseTypes: [],\n    taxListDetail: [],\n    supplierDiscountItem: [],\n    lateFeeList: [],\n    loggedUser: {\n      id: cookie.creator,\n      name: cookie.email,\n    },\n    exchangeRate: {},\n    baseCurrencyCode: \"\",\n    currencyCode: \"\",\n    transactionRate: 1,\n    jRaw: [],\n    refFrom: [],\n    isPriceLevelChanged: false,\n    expenses: [],\n    additionalCostTotal: 0,\n    chkChecked: [],\n    accWithholdingExpense: [],\n  }),\n  methods: {\n    dataBound: function (e) {\n      const grid = kendo.jQuery(\"#gridItemLine\").data(\"kendoGrid\");\n      const items = e.sender.items();\n      if (grid) {\n        items.each(function () {\n          let dataItem = grid.dataItem(this);\n          $(\"tr[data-uid='\" + dataItem.uid + \"']\")\n            .find(\".isEditable\")\n            .each(function () {\n              if (dataItem.isEditable === false) {\n                $(this).addClass(\"k-state-disabled\");\n              }\n            });\n        });\n      }\n    },\n    onMethodChanged() {\n      if (this.isItem()) {\n        this.calculateAdditionalCost();\n        this.autoCalculate();\n      }\n    },\n    onCheckChanged() {\n      if (this.isItem()) {\n        this.additionalCostTotal = 0;\n        this.jRaw = [];\n        if (this.chkChecked) {\n          this.chkChecked.forEach((m) => {\n            if (m) {\n              const xAmount = m.exchangeAmount || 0;\n              this.additionalCostTotal += parseFloat(xAmount);\n            }\n          });\n          this.purchase.additionalCost = this.chkChecked;\n          this.purchase.additionalCostTotal = this.additionalCostTotal;\n          // if (this.purchase.additionalCostMethod === 'Qty Based') {\n          //     this.percentageApplied()\n          // } else {\n          //     this.amountApplied()\n          // }\n          this.calculateAdditionalCost();\n          this.autoCalculate();\n        }\n      }\n    },\n    onPriceLevelChange() {\n      this.isPriceLevelChanged = true;\n      this.loadTransactionRate();\n      this.clearUOMItem();\n    },\n    async clearUOMItem() {\n      let ds = this.$refs.itemLineDS.kendoWidget();\n      ds.data().map((n) => {\n        n.set(\"uom\", {});\n      });\n      this.isPriceLevelChanged = false;\n    },\n    async loadPaymentTermList() {\n      new Promise((resolve) => {\n        setTimeout(() => {\n          resolve(\"resolved\");\n          if (this.vendor) {\n            const strFilter =\n              \"?id=\" +\n              this.vendor.id +\n              \"&transactionDate=\" +\n              this.purchase.transactionDate +\n              \"&type=Vendor\";\n            this.purchase.paymentTerm = {};\n            paymentTermHandler_.get(strFilter).then((res) => {\n              if (res.data.statusCode === 200) {\n                const terms = res.data.data;\n                this.purchase.paymentTerm = terms.term;\n                this.onPaymentTermChanged();\n              }\n            });\n          }\n        }, 10);\n      });\n    },\n    async loadCreditLimit() {\n      new Promise((resolve) => {\n        setTimeout(() => {\n          resolve(\"resolved\");\n          if (this.vendor) {\n            const strFilter =\n              \"?id=\" +\n              this.vendor.id +\n              \"&transactionDate=\" +\n              this.purchase.transactionDate +\n              \"&type=Vendor\";\n            this.purchase.creditLimit = 0;\n            creditLimitHandler.get(strFilter).then((res) => {\n              if (res.data.statusCode === 200) {\n                const credit = res.data.data;\n                this.purchase.creditLimit = kendo.parseFloat(\n                  credit.amount || 0\n                );\n              }\n            });\n          }\n        }, 10);\n      });\n    },\n    async observerClean(obj) {\n      return Object.keys(obj).reduce(\n        (res, e) => Object.assign(res, { [e]: obj[e] }),\n        {}\n      );\n    },\n    Help(key_search) {\n      ShowResource(key_search);\n    },\n    AmountEditor(container, options) {\n      kendo\n        .jQuery('<input data-bind=\"value:' + options.field + '\"/>')\n        .appendTo(container)\n        .kendoNumericTextBox({\n          decimals: 30,\n          format: `${this.purchaseFormContent.decimal}`,\n        });\n    },\n    vatTemplate(dataItem) {\n      const vat = dataItem.vatTax || {};\n      if (vat) {\n        return `<span>${vat.defaultTax ? vat.defaultTax : ``}</span>`;\n      } else {\n        return ``;\n      }\n    },\n    itemTemplate(dataItem) {\n      const item = dataItem.item;\n      if (item) {\n        return `<span>${item.name ? item.name : ``}</span>`;\n      } else {\n        return ``;\n      }\n    },\n    UOMTemplate(dataItem) {\n      const uom = dataItem.uom || {};\n      const code = uom.code || \"\";\n      if (uom) {\n        return `<span>${uom.uom ? code : ``}</span>`;\n      } else {\n        return ``;\n      }\n    },\n    discountItemTemplate(dataItem) {\n      const discountItem = dataItem.discountItem;\n      if (discountItem) {\n        return `<span>${discountItem.code ? discountItem.code : ``} - ${\n          discountItem.name ? discountItem.name : ``\n        }</span>`;\n      } else {\n        return ``;\n      }\n    },\n    addSelect() {\n      let amount_num = this.numSelect.length;\n      let num = this.numSelect[amount_num - 1];\n      let new_num = num + 1;\n      let lenghtItem = this.specificDiscountItem.length;\n      if (new_num <= lenghtItem) {\n        this.numSelect.push(new_num);\n      }\n    },\n    removeSelect(index) {\n      this.numSelect.splice(index, 1);\n      // window.console.log(index, this.numSelect)\n      // this.selectDiscount.splice(index,1)\n      // window.console.log(\"remove\",this.selectDiscount)\n      // this.selectDiscount = this.selectDiscount.filter(item =>  item.id != val.id);\n    },\n    onOtherChargeChange() {\n      let otherCharge = 0;\n      this.mOtherCharge.forEach((m) => {\n        otherCharge += this.autoCalculateDiscount(m, this.purchase.subTotal);\n      });\n      this.purchase.otherChargeAmount = otherCharge;\n      this.autoCalculate();\n    },\n    onOtherAmount(value) {\n      return this.autoCalculateDiscount(value, this.purchase.subTotal);\n    },\n    onSpecificDiscountChanged() {\n      this.purchase.specificDiscountTotal = 0;\n      if (this.purchase.specificDiscountItem) {\n        // window.console.log('-changed', this.purchase.specificDiscountItem)\n        this.purchase.specificDiscountTotal =\n          this.autoCalculateDiscount(\n            this.purchase.specificDiscountItem,\n            this.purchase.subTotal\n          ) || 0;\n        this.purchase.total =\n          kendo.parseFloat(this.purchase.subTotal) -\n          (kendo.parseFloat(this.purchase.discountTotal) +\n            kendo.parseFloat(this.purchase.totalTaxAmount)) -\n          this.autoCalculateDiscount(\n            this.purchase.specificDiscountItem,\n            this.purchase.subTotal\n          );\n      }\n      this.autoCalculate();\n    },\n    empImpl(dataItem) {\n      let empIds = [];\n      dataItem.employee.forEach((m) => {\n        empIds.push(m.firstName + \" - \" + m.lastName);\n      });\n      // window.console.log(empIds.join(', '))\n      return `<span>${empIds.join(\", \")}</span>`;\n    },\n    uomTmp(dataItem) {\n      window.console.log(dataItem);\n      return dataItem;\n    },\n    onInvoiceTypeChanged() {\n      if (this.$route.params.id === null || this.$route.params.id === \"\") {\n        this.generateNumber();\n      }\n    },\n    autoCalculateTaxByType(tax) {\n      // return by a key\n      const groupAll = (list) =>\n        list.reduce((tax, item) => {\n          const taxAmount = tax[item.name] || 0;\n          return Object.assign({}, tax, {\n            [item.name]: taxAmount + parseFloat(item.amount),\n          });\n        }, {});\n      this.taxListTotal = groupAll(tax);\n      window.console.log(\"nimol\", groupAll(tax));\n    },\n    onDepositDeductionChange() {\n      const deduct = parseFloat(this.purchase.depositDeduction || 0);\n      if (deduct < 0) {\n        this.purchase.depositDeduction = 0;\n      }\n      if (\n        this.purchase.depositDeduction === \"\" ||\n        this.purchase.depositDeduction === undefined\n      ) {\n        this.purchase.depositDeduction = 0;\n      }\n      const deduction = parseFloat(this.purchase.depositDeduction) || 0;\n      if (deduction > this.purchase.depositAmount) {\n        this.purchase.depositDeduction = this.purchase.depositAmount;\n      }\n\n      this.autoCalculate();\n    },\n    async autoCalculate() {\n      let ds = this.$refs.itemLineDS.kendoWidget(),\n        subTotal = 0,\n        totalTax = 0,\n        discountTotal = 0,\n        spTax = 0,\n        pltax = 0,\n        otherTax = 0,\n        vatTax = 0,\n        discountInvoice = 0,\n        taxList = [],\n        taxListDetail = [],\n        discountItem = [],\n        discountLine = [],\n        inclusiveTax = 0,\n        taxTypeId = 0,\n        withholdingTaxAmount = 0,\n        whTaxAmount = 0,\n        itemSubtotal = 0,\n        txnItmSubtotal = 0,\n        serviceSubtotal = 0,\n        itemDiscount = 0,\n        serviceDiscount = 0,\n        txnDiscount = 0;\n      let nature = \"\";\n      this.jRaw = [];\n      const rows = ds.data().filter((m) => parseFloat(m.amount) > 0);\n      rows.forEach((value) => {\n        let modifierPrice = 0,\n          incTax = 0;\n        if (value.modifier) {\n          modifierPrice = kendo.parseFloat(value.modifier.price);\n        }\n\n        let discount = 0;\n        if (value.discountItem) {\n          const disItemField = value.discountItem;\n          let subTo =\n            kendo.parseFloat(value.cost) * kendo.parseFloat(value.qty);\n          discount = this.autoCalculateDiscount(value.discountItem, subTo);\n          value[\"discountAmount\"] = discount;\n          value[\"discountExchangeAmount\"] =\n            discount * kendo.parseFloat(this.purchase.txnRate);\n          if (value.discountItem.hasOwnProperty(\"id\")) {\n            discountItem.push(value.discountItem);\n          }\n          discountTotal += discount ? discount : 0;\n          if (discount * -1 > 0) {\n            nature = \"dr\";\n          } else {\n            nature = \"cr\";\n          }\n          if (disItemField.account) {\n            if (disItemField.account.hasOwnProperty(\"id\")) {\n              this.jRaw.push({\n                id: disItemField.account.id + \"-\" + nature,\n                line: new ItemLineModel(value),\n                description: \"Purchase Discount\",\n                account: disItemField.account,\n                accountId: disItemField.account.id,\n                amount: discount * -1,\n                exchangeAmount:\n                  discount * kendo.parseFloat(this.purchase.txnRate) * -1,\n                type: nature,\n                typeAs: \"discount\",\n              });\n            }\n          }\n        }\n        if (value.vatTax) {\n          // window.console.log('Vat Tax', value.tax)\n          let amt =\n            kendo.parseFloat(spTax ? spTax : 0) +\n            kendo.parseFloat(pltax ? pltax : 0) +\n            kendo.parseFloat(otherTax ? otherTax : 0) +\n            (kendo.parseFloat(value.amount ? value.amount : 0) -\n              (discount ? discount : 0));\n          vatTax = this.autoCalculateTax(value.vatTax, amt);\n          vatTax = kendo.parseFloat(vatTax) ? kendo.parseFloat(vatTax) : 0;\n          value[\"vatTaxAmount\"] = vatTax;\n          value[\"vatTaxExchangeAmount\"] =\n            vatTax * kendo.parseFloat(this.purchase.txnRate);\n          const tax = value.vatTax || {};\n          const baseAmount = tax.baseAmount || \"\";\n          window.console.log(tax, \"im tax\");\n          if (baseAmount) {\n            if (baseAmount.toLowerCase() === \"inclusive\") {\n              incTax = vatTax;\n            } else {\n              inclusiveTax += vatTax;\n            }\n          }\n          if (value.vatTax.hasOwnProperty(\"taxType\")) {\n            taxList.push({\n              name: value.vatTax.taxType.name,\n              amount: vatTax,\n              id: value.vatTax.taxType.id,\n            });\n            const vatTax_ = value.vatTax || {};\n            vatTax_[\"taxAmount_\"] = vatTax;\n            vatTax_[\"amount\"] = value.amount || 0;\n            vatTax_[\"discount\"] = discount || 0;\n            vatTax_[\"txnRate\"] = this.purchase.txnRate || 1;\n            vatTax_[\"isVat\"] = 1;\n            vatTax_.detail = {\n              specificTax: {},\n              publicLightingTax: {},\n              otherTax: {},\n            };\n            taxListDetail.push(vatTax_);\n            window.console.log(\"vat_\", vatTax_);\n          }\n          if (value.vatTax.hasOwnProperty(\"taxType\")) {\n            const taxType = value.vatTax.taxType || {};\n            taxTypeId = taxType.typeId || 0;\n          }\n          let taxAmount = vatTax;\n          let taxDescription = \"\";\n          if (taxTypeId === 1) {\n            nature = \"dr\";\n            taxAmount = vatTax;\n            taxDescription = \"Purchase Tax\";\n          } else if (taxTypeId === 2) {\n            withholdingTaxAmount += vatTax;\n            if (taxTypeId === 2 && baseAmount.toLowerCase() === \"net\") {\n              whTaxAmount += vatTax;\n            }\n            nature = \"cr\";\n            taxAmount = vatTax * -1;\n            taxDescription = \"Withholding Tax\";\n          } else if (taxTypeId === 10) {\n            nature = \"cr\";\n            taxAmount = 0;\n            taxDescription = \"No Tax\";\n          }\n          if (taxAmount > 0) {\n            nature = \"dr\";\n          } else {\n            nature = \"cr\";\n          }\n          const vatTaxField = value.vatTax || {};\n          if (taxAmount !== 0) {\n            if (vatTaxField) {\n              if (vatTaxField.account) {\n                if (vatTaxField.account.hasOwnProperty(\"id\")) {\n                  this.jRaw.push({\n                    id: vatTaxField.account.id + \"-\" + nature,\n                    line: new ItemLineModel(value),\n                    description: taxDescription,\n                    account: vatTaxField.account,\n                    accountId: vatTaxField.account.id,\n                    amount: taxAmount,\n                    exchangeAmount:\n                      taxAmount * kendo.parseFloat(this.purchase.txnRate),\n                    type: nature,\n                    typeAs: \"tax\",\n                  });\n                }\n              }\n            }\n          }\n        }\n        totalTax +=\n          kendo.parseFloat(spTax ? spTax : 0) +\n          kendo.parseFloat(pltax ? pltax : 0) +\n          kendo.parseFloat(otherTax ? otherTax : 0) +\n          kendo.parseFloat(vatTax ? vatTax : 0);\n        subTotal += kendo.parseFloat(value.amount) + modifierPrice - incTax;\n        const amount = kendo.parseFloat(value.amount) + modifierPrice;\n        const amt = this.excludeVATTaxInclusive(value.vatTax, amount, incTax);\n        // const xAmount = (kendo.parseFloat(amt) * kendo.parseFloat(this.purchase.txnRate))\n        const additc = value.additionalCost || 0;\n        const itemAmount = amt;\n        const itemXAmount =\n          itemAmount * kendo.parseFloat(this.purchase.txnRate);\n\n        const item = value.item;\n        const itmType = item.type || \"\";\n        if (itmType === \"Variant\") {\n          itemSubtotal +=\n            kendo.parseFloat(value.cost) * kendo.parseFloat(value.qty);\n          itemDiscount += kendo.parseFloat(discount);\n        } else if (itmType === \"Service\") {\n          serviceSubtotal +=\n            kendo.parseFloat(value.cost) * kendo.parseFloat(value.qty);\n          serviceDiscount += kendo.parseFloat(discount);\n        } else {\n          txnItmSubtotal +=\n            kendo.parseFloat(value.cost) * kendo.parseFloat(value.qty);\n          txnDiscount += kendo.parseFloat(discount);\n        }\n        if (amt > 0) {\n          nature = \"dr\";\n        } else {\n          nature = \"cr\";\n        }\n        if (item) {\n          if (item.type === \"Service\") {\n            const plan = item.isPan || false;\n            if (plan) {\n              if (item.hasOwnProperty(\"deferredIncomeAcc\")) {\n                if (item.deferredIncomeAcc.hasOwnProperty(\"id\")) {\n                  let deferredInAcc = item.deferredIncomeAcc;\n                  this.jRaw.push({\n                    id: deferredInAcc.id + \"-\" + nature,\n                    line: new ItemLineModel(value),\n                    description: this.purchase.journalNote,\n                    account: deferredInAcc,\n                    accountId: deferredInAcc.id,\n                    amount: itemAmount * -1, // qty*avg_cost ,\n                    exchangeAmount: itemXAmount, //,\n                    type: nature,\n                    typeAs: \"item\",\n                  });\n                }\n              }\n            } else {\n              if (item.hasOwnProperty(\"costOfGoodsSoldAcc\")) {\n                if (item.costOfGoodsSoldAcc.hasOwnProperty(\"id\")) {\n                  let costOfGoodsSoldAcc = item.costOfGoodsSoldAcc;\n                  this.jRaw.push({\n                    id: costOfGoodsSoldAcc.id + \"-\" + nature,\n                    line: new ItemLineModel(value),\n                    description: this.purchase.journalNote,\n                    account: item.costOfGoodsSoldAcc,\n                    accountId: item.costOfGoodsSoldAcc.id,\n                    amount: itemAmount, // qty*avg_cost ,\n                    exchangeAmount: itemXAmount, //xAmount,\n                    type: nature,\n                    typeAs: \"item\",\n                  });\n                }\n              }\n            }\n          } else if (item.type === \"Variant\") {\n            const amountWithAddict = itemAmount + (value.amountApplied || 0);\n            window.console.log(\"additc\", additc, \"-\", itemAmount);\n            if (item.hasOwnProperty(\"inventoryAcc\")) {\n              if (item.inventoryAcc.hasOwnProperty(\"id\")) {\n                let inventoryAcc = item.inventoryAcc;\n                this.jRaw.push({\n                  id: inventoryAcc.id + \"-\" + nature,\n                  line: new ItemLineModel(value),\n                  description: this.purchase.journalNote,\n                  account: item.inventoryAcc,\n                  accountId: item.inventoryAcc.id,\n                  amount: amountWithAddict, // qty*avg_cost ,\n                  exchangeAmount:\n                    amountWithAddict * (this.purchase.txnRate || 1), //xAmount,\n                  type: nature,\n                  typeAs: \"item\",\n                });\n              }\n            }\n          } else if (item.type === \"Fixed Asset\") {\n            if (item.hasOwnProperty(\"assetAcc\")) {\n              if (item.assetAcc.hasOwnProperty(\"id\")) {\n                let assetAcc = item.assetAcc;\n                this.jRaw.push({\n                  id: assetAcc.id + \"-\" + nature,\n                  line: new ItemLineModel(value),\n                  description: this.purchase.journalNote,\n                  account: item.assetAcc,\n                  accountId: item.assetAcc.id,\n                  amount: itemAmount, // qty*avg_cost ,\n                  exchangeAmount: itemXAmount, //xAmount,\n                  type: nature,\n                  typeAs: \"item\",\n                });\n              }\n            }\n          } else if (item.type === \"Transaction Item\") {\n            if (item.hasOwnProperty(\"account\")) {\n              if (item.account.hasOwnProperty(\"id\")) {\n                this.jRaw.push({\n                  id: item.account.id + \"-\" + nature,\n                  line: new ItemLineModel(value),\n                  description: this.purchase.journalNote,\n                  account: item.account,\n                  accountId: item.account.id,\n                  amount: itemAmount, // qty*avg_cost ,\n                  exchangeAmount: itemXAmount, //xAmount,\n                  type: nature,\n                  typeAs: \"item\",\n                });\n              }\n            }\n          }\n        }\n        //include Tax Amount\n        const amountNodiscount =\n          kendo.parseFloat(value.cost) * kendo.parseFloat(value.qty) - discount;\n        const includeTaxAmount =\n          amountNodiscount + vatTax + pltax + spTax + otherTax;\n        value[\"includeTaxAmount\"] = includeTaxAmount;\n        value[\"includeTaxExchangeAmount\"] =\n          includeTaxAmount * kendo.parseFloat(this.purchase.txnRate);\n      });\n      //todo: WithholdingTax expense\n      this.withholdingExpense(whTaxAmount, this.purchase.txnRate || 1);\n\n      this.purchase.itemSubtotal = itemSubtotal;\n      this.purchase.inclusiveTaxAmount = inclusiveTax;\n      this.purchase.exchangeItemSubtotal =\n        itemSubtotal * kendo.parseFloat(this.purchase.txnRate);\n\n      this.purchase.serviceSubtotal = serviceSubtotal;\n      this.purchase.exchangeServiceSubtotal =\n        serviceSubtotal * kendo.parseFloat(this.purchase.txnRate);\n      this.purchase.txnItmSubtotal = txnItmSubtotal;\n      this.purchase.exchangeTxnItmSubtotal =\n        txnItmSubtotal * kendo.parseFloat(this.purchase.txnRate);\n\n      this.purchase.itemDiscount = itemDiscount;\n      this.purchase.exchangeItemDiscount =\n        itemDiscount * kendo.parseFloat(this.purchase.txnRate);\n      this.purchase.serviceDiscount = serviceDiscount;\n      this.purchase.exchangeServiceDiscount =\n        serviceDiscount * kendo.parseFloat(this.purchase.txnRate);\n      this.purchase.txnItmDiscount = txnDiscount;\n      this.purchase.exchangeTxnItmDiscount =\n        txnDiscount * kendo.parseFloat(this.purchase.txnRate);\n\n      let total =\n        kendo.parseFloat(subTotal) -\n        kendo.parseFloat(discountTotal) +\n        kendo.parseFloat(totalTax);\n      this.purchase.subTotal = subTotal;\n      this.purchase.totalTaxAmount = kendo.parseFloat(totalTax);\n      this.purchase.discountTotal = kendo.parseFloat(discountTotal);\n      if (this.purchase.specificDiscountItem) {\n        discountInvoice = this.autoCalculateDiscount(\n          this.purchase.specificDiscountItem,\n          kendo.parseFloat(subTotal)\n        );\n        discountInvoice = discountInvoice ? discountInvoice : 0;\n      }\n      // this.onOtherChargeChange()\n      this.purchase.total =\n        kendo.parseFloat(total) -\n        discountInvoice +\n        kendo.parseFloat(this.purchase.otherChargeAmount); //- parseFloat(withholdingTaxAmount);\n      this.purchase.withholdingTaxAmount = withholdingTaxAmount;\n      // this.purchase.totalAfterWithholdingTax = kendo.parseFloat(this.purchase.total) - parseFloat(withholdingTaxAmount);\n      this.purchase.remainingAmount =\n        kendo.parseFloat(this.purchase.total) -\n        kendo.parseFloat(this.purchase.depositDeduction) -\n        parseFloat(withholdingTaxAmount);\n      this.purchase.amountDue =\n        kendo.parseFloat(this.purchase.total) -\n        kendo.parseFloat(this.purchase.depositDeduction) -\n        parseFloat(withholdingTaxAmount);\n      this.purchase.exchangeAmount =\n        kendo.parseFloat(this.purchase.amountDue) *\n        kendo.parseFloat(this.purchase.txnRate);\n      // window.console.log('Exchange Amount', this.purchase.exchangeAmount, this.purchase.amountDue)\n      this.autoCalculateTaxByType(taxList);\n      if (this.purchase.specificDiscountItem) {\n        const specificDiscount = this.purchase.specificDiscountItem || {};\n        if (specificDiscount.id) {\n          discountItem.push(specificDiscount);\n          discountLine.push({\n            id: specificDiscount.id,\n            name: specificDiscount.name,\n            amount: this.purchase.specificDiscountTotal,\n            exchangeAmount:\n              this.purchase.specificDiscountTotal * this.purchase.txnRate,\n          });\n        }\n      }\n      const uniqueDiscountItem = this.removeDuplicate(discountItem);\n      this.shrinkDiscountItem(uniqueDiscountItem, discountLine);\n      // window.console.log('discount ', this.customerDiscountItem)\n      // todo: raw Journal\n      const apAcc = this.purchase.apAcc || {};\n      if (this.purchase.amountDue * -1 > 0) {\n        nature = \"dr\";\n      } else {\n        nature = \"cr\";\n      }\n      if (apAcc) {\n        if (apAcc.hasOwnProperty(\"id\")) {\n          this.jRaw.push({\n            id: apAcc.id + \"-\" + nature,\n            line: new ItemLineModel({}),\n            description: this.purchase.journalNote,\n            account: apAcc,\n            accountId: apAcc.id,\n            exchangeAmount: this.purchase.exchangeAmount * -1,\n            amount: this.purchase.amountDue * -1,\n            type: nature,\n            typeAs: \"ap\",\n          });\n        }\n      }\n      const specificDisc = this.purchase.specificDiscountItem;\n      if (this.purchase.specificDiscountTotal * -1 > 0) {\n        nature = \"dr\";\n      } else {\n        nature = \"cr\";\n      }\n      // window.console.log(specificDisc, 'specificDisc', this.purchase.specificDiscountTotal)\n      if (specificDisc) {\n        if (specificDisc.hasOwnProperty(\"account\")) {\n          if (specificDisc.account) {\n            if (specificDisc.hasOwnProperty(\"id\")) {\n              this.jRaw.push({\n                id: specificDisc.account.id + \"-\" + nature,\n                line: new ItemLineModel({}),\n                description: \"Purchase Discount\",\n                account: specificDisc.account,\n                accountId: specificDisc.account.id,\n                exchangeAmount:\n                  kendo.parseFloat(this.purchase.specificDiscountTotal) *\n                  kendo.parseFloat(this.purchase.txnRate) *\n                  -1,\n                amount: this.purchase.specificDiscountTotal * -1,\n                type: nature,\n                typeAs: \"discount\",\n              });\n            }\n          }\n        }\n      }\n\n      if (this.purchase.depositDeduction * -1 > 0) {\n        nature = \"dr\";\n      } else {\n        nature = \"cr\";\n      }\n      if (this.purchase.depositDeduction) {\n        if (this.purchase.depositDeduction > 0) {\n          const purchaseDepositAcc = this.vendor.purchaseDepositAcc || {};\n          if (purchaseDepositAcc) {\n            if (purchaseDepositAcc.hasOwnProperty(\"id\")) {\n              this.jRaw.push({\n                id: purchaseDepositAcc.id + \"-\" + nature,\n                description: \"Purchase Deposit\",\n                line: new ItemLineModel({}),\n                account: purchaseDepositAcc,\n                accountId: purchaseDepositAcc.id,\n                exchangeAmount: this.purchase.exchangeDepositDeduction * -1,\n                amount: this.purchase.depositDeduction * -1,\n                type: nature,\n                typeAs: \"deposit\",\n              });\n            }\n          }\n        }\n      }\n      if (this.mOtherCharge.length > 0) {\n        let otherCharge = 0;\n        this.mOtherCharge.forEach((m) => {\n          otherCharge = this.autoCalculateDiscount(m, this.purchase.subTotal);\n          if (otherCharge > 0) {\n            nature = \"dr\";\n          } else {\n            nature = \"cr\";\n          }\n          if (m) {\n            if (m.hasOwnProperty(\"account\")) {\n              if (m.account.hasOwnProperty(\"id\")) {\n                const account = m.account;\n                if (account) {\n                  if (account.hasOwnProperty(\"id\")) {\n                    this.jRaw.push({\n                      id: account.id + \"-\" + nature,\n                      line: new ItemLineModel({}),\n                      description: \"Other Charge\",\n                      account: account,\n                      accountId: account.id,\n                      exchangeAmount:\n                        otherCharge * kendo.parseFloat(this.purchase.txnRate),\n                      amount: otherCharge,\n                      type: nature,\n                      typeAs: \"otherCharge\",\n                    });\n                  }\n                }\n              }\n            }\n          }\n        });\n        // this.purchase.otherChargeAmount = otherCharge\n        window.console.log(this.mOtherCharge);\n      }\n      this.taxListDetail = taxListDetail;\n      this.autoCalculateTaxDetail();\n      // todo: end raw Journal\n      // window.console.log(JSON.stringify(this.purchase), 'purchase')\n\n      await this.calculateAdditionalCost();\n      // todo: cook journal\n      this.shrinkData(this.jRaw);\n      // const unique = this.removeDuplicate(this.accounts)\n      // window.console.log(unique, 'unique')\n    },\n    withholdingExpense(amount, txnRate) {\n      // if (this.isItem()) {\n      if (amount > 0) {\n        const nature = \"dr\";\n        const account = this.accWithholdingExpense || [];\n        if (account.length > 0) {\n          const iacc = account[0];\n          this.jRaw.push({\n            id: iacc.id + \"-\" + nature,\n            line: new ItemLineModel({}),\n            description: \"Withholding Tax Expense\",\n            account: iacc,\n            accountId: iacc.id,\n            exchangeAmount: amount * txnRate,\n            amount: amount,\n            type: nature,\n            typeAs: \"Withholding\",\n          });\n        }\n      }\n      // }\n    },\n    shrinkData(obj) {\n      const uniques =\n        this.removeDuplicate(obj); /*[...new Set(accountId.map(i => {\n                return {\n                    id_: i.id_,\n                    id: i.id,\n                    type: i.type\n            }))]*/\n      uniques.forEach((n) => {\n        const found = obj.filter((m) => m.id === n.id);\n        let amount = 0;\n        found.forEach((z) => {\n          amount += parseFloat(z.amount || 0);\n        });\n        n.amount = parseFloat(amount); //this.numberFormat(amount)\n        n.exchangeAmount = parseFloat(\n          parseFloat(amount * parseFloat(this.purchase.txnRate))\n        ); //this.numberFormat(amount * parseFloat(this.purchase.txnRate)) //.toFixed(this.saleFormContent.decimal)\n      });\n      this.jRaw = uniques;\n      let dr = 0,\n        cr = 0;\n      this.jRaw.forEach((j) => {\n        switch (j.type) {\n          case \"cr\":\n            cr += parseFloat(j.exchangeAmount);\n            break;\n          case \"dr\":\n            dr += parseFloat(j.exchangeAmount);\n            break;\n          default:\n            break;\n        }\n      });\n      this.purchase.dr = dr;\n      this.purchase.cr = cr;\n      window.console.log(\"dr=\", dr, \"cr=\", cr, \"dr+cr = \", dr + cr);\n      window.console.log(JSON.stringify(uniques), \"uniques\");\n    },\n    shrinkDiscountItem(discountItem, discountLine) {\n      let uniqueDiscountItems = [];\n      const unique = this.removeDuplicate(discountItem);\n      unique.forEach((m) => {\n        const found = discountLine.filter((n) => n.id === m.id);\n        let amount = 0,\n          exchangeAmount = 0;\n        found.map((o) => {\n          amount += o.amount;\n        });\n        found.map((o) => {\n          exchangeAmount += o.exchangeAmount;\n        });\n        uniqueDiscountItems.push({\n          id: m.id,\n          name: m.name,\n          amount: amount,\n          exchangeAmount: exchangeAmount,\n        });\n      });\n      this.supplierDiscountItem = uniqueDiscountItems;\n      window.console.log(uniqueDiscountItems, \"uniqueDiscountItems\");\n    },\n    removeDuplicate(array) {\n      const result = [];\n      const map = new Map();\n      for (const item of array) {\n        if (!map.has(item.id)) {\n          map.set(item.id, true); // set any value to Map\n          result.push(item);\n        }\n      }\n      return result;\n    },\n    numberFormat(value) {\n      // window.console.log(this.saleFormContent.decimal,'nimol')\n      return kendo.toString(value, `n${this.purchaseFormContent.decimal}`);\n    },\n    autoCalculateDiscount(discountItem, subTotal) {\n      if (discountItem) {\n        const nature = discountItem.nature || \"\";\n        const amount = discountItem.amount || 0;\n        if (nature === \"Amount\") {\n          return parseFloat(amount);\n        } else if (nature === \"Percentage\") {\n          return subTotal * (parseFloat(amount) / 100);\n        } else {\n          return 0;\n        }\n      } else {\n        return 0;\n      }\n    },\n    autoCalculateTax(tax, amount) {\n      if (tax) {\n        var formula = tax.formula;\n        var inAmt = kendo.parseFloat(amount);\n        var nAmt = kendo.parseFloat(amount);\n        var taxBase = kendo.parseFloat(tax.taxBase) / 100;\n        var rate = kendo.parseFloat(tax.rate) / 100;\n        var total = eval(formula);\n        window.console.log(inAmt, nAmt, taxBase, rate, formula, total);\n        return total;\n      }\n      // return 0\n    },\n    taxMapping(objTax, tax) {\n      const taxId = tax.id || \"\";\n      const tax_ = objTax.filter((t) => t.id === taxId)[0];\n      return (\n        tax_ || {\n          id: \"\",\n          defaultTax: \"\",\n        }\n      );\n    },\n    dataSourceChanged(e) {\n      if (e.field) {\n        let dataRow = e.items[0],\n          buom = {},\n          vTax = {},\n          conversionRate = 1,\n          wac = 0,\n          qoh = 0,\n          amount = 0,\n          xAmount = 0;\n        switch (e.field) {\n          case \"item\":\n            // this.attribute_ = this.attributes.filter(m => m.type.id === dataRow.variant.id)\n            dataRow.set(\"description\", dataRow.item.description);\n            buom = dataRow.item.uom || {};\n            dataRow.set(\"buom\", buom);\n            // dataRow.set('uom', buom)\n            // window.console.log(dataRow.item,'row')\n            // await this.inventoryBalance(dataRow, dataRow.item.id)\n            break;\n          case \"cost\":\n            try {\n              amount = parseFloat(dataRow.cost) * parseFloat(dataRow.qty);\n              xAmount = amount * parseFloat(this.purchase.txnRate);\n\n              dataRow.set(\"cost\", parseFloat(dataRow.cost));\n              dataRow.set(\"amount\", amount);\n              dataRow.set(\"exchangeAmount\", xAmount);\n              // window.console.log('price',dataRow.price)\n            } catch {\n              dataRow.set(\"cost\", 0);\n              dataRow.set(\"amount\", 0);\n              dataRow.set(\"exchangeAmount\", 0);\n            }\n            break;\n          case \"uom\":\n            if (this.isPriceLevelChanged === false) {\n              try {\n                if (dataRow.uom) {\n                  buom = dataRow.uom.buom || {};\n                  qoh = dataRow.uom.qoh || 0;\n                  conversionRate = dataRow.uom.conversionRate || 1;\n                  wac = dataRow.uom.wac || 0;\n                  dataRow.set(\"buom\", buom);\n                  dataRow.set(\"wac\", wac);\n                  dataRow.set(\"qoh\", qoh);\n                  /* todo: mapping tax object */\n                  vTax = this.taxMapping(\n                    this.tax,\n                    dataRow.uom.purchaseTax || {}\n                  );\n\n                  dataRow.set(\"vatTax\", vTax);\n                  dataRow.set(\"conversionRate\", parseFloat(conversionRate));\n                  if (dataRow.uom) {\n                    amount =\n                      parseFloat(dataRow.uom.cost) * parseFloat(dataRow.qty);\n                    xAmount = amount * parseFloat(this.purchase.txnRate);\n\n                    dataRow.set(\"cost\", parseFloat(dataRow.uom.cost));\n                    dataRow.set(\"amount\", amount);\n                    dataRow.set(\"exchangeAmount\", xAmount);\n                  } else {\n                    amount = parseFloat(dataRow.cost) * parseFloat(dataRow.qty);\n                    xAmount = amount * parseFloat(this.purchase.txnRate);\n\n                    dataRow.set(\"cost\", parseFloat(dataRow.cost));\n                    dataRow.set(\"amount\", amount);\n                    dataRow.set(\"exchangeAmount\", xAmount);\n                  }\n                }\n              } catch (err) {\n                window.console.log(\"error\", err);\n                dataRow.set(\"buom\", {});\n                dataRow.set(\"conversionRate\", 1);\n                dataRow.set(\"cost\", 0);\n                dataRow.set(\"qoh\", 0);\n                dataRow.set(\"wac\", 0);\n                dataRow.set(\"amount\", 0);\n                dataRow.set(\"exchangeAmount\", 0);\n              }\n            }\n            break;\n          case \"qty\":\n            try {\n              amount = parseFloat(dataRow.cost) * parseFloat(dataRow.qty);\n              xAmount = amount * parseFloat(this.purchase.txnRate);\n\n              dataRow.set(\"cost\", parseFloat(dataRow.cost));\n              dataRow.set(\"amount\", amount);\n              dataRow.set(\"exchangeAmount\", xAmount);\n            } catch {\n              dataRow.set(\"cost\", 0);\n              dataRow.set(\"amount\", 0);\n              dataRow.set(\"exchangeAmount\", 0);\n            }\n            break;\n          case \"otherTax\":\n            // window.console.log(\"--\", dataRow)\n            break;\n          default:\n            break;\n        }\n        if (e.field) {\n          this.autoCalculate();\n          window.console.log(\"dataRow\", dataRow);\n        }\n      }\n    },\n    ServiceDateEditor(container, options) {\n      kendo\n        .jQuery('<input required name=\"' + options.field + '\"/>')\n        .appendTo(container)\n        .kendoDatePicker();\n\n      // let ds = this.$refs.itemLineDS.kendoWidget()\n      // window.console.log(ds.data())\n      // // const dateString = kendo.toString((new Date(options.model.items.serviceDate)), this.itemLine.dateFormat)\n      // // const dateString = kendo.toString(options.model.items.serviceDate)\n      // const $input = $(\"<input value=\" + options.model.serviceDate + \" />\").appendTo(container)\n      // $input.kendoDatePicker()\n      // // $input.appendTo(container)\n      // // options.model.items.serviceDate = dateString\n      // window.console.log($input)\n    },\n    ServiceDateToEditor(container, options) {\n      kendo\n        .jQuery('<input required name=\"' + options.field + '\"/>')\n        .appendTo(container)\n        .kendoDatePicker();\n    },\n    ItemDropDownEditor(container, options) {\n      kendo\n        .jQuery('<input name=\"' + options.field + '\"/>')\n        .appendTo(container)\n        .kendoDropDownList({\n          autoBind: true,\n          autoWidth: true,\n          height: 400,\n          filter: \"contains\",\n          dataTextField: \"name\",\n          dataValueField: \"id\",\n          headerTemplate:\n            '<div class=\"dropdown-header k-widget k-header\">' +\n            \"<span>Items </span>\" +\n            \"<span></span>\" +\n            \"</div>\",\n          template: \"<span>#=name#</span>\",\n          optionLabel: \"--- Select ---\",\n          dataSource: new kendo.data.DataSource({\n            serverFiltering: true,\n            transport: {\n              read: {\n                url: productVariantHandler.itemSearchURL(),\n              },\n              dataType: \"json\",\n            },\n            schema: {\n              model: {\n                id: \"id\",\n                fields: {\n                  id: { type: \"string\" },\n                  name: { type: \"string\" },\n                  sku: { type: \"string\" },\n                },\n              },\n              data: function (response) {\n                return response.data;\n              },\n              total: function (response) {\n                return response.data.count;\n              },\n            },\n            // data: this.variants\n          }),\n        });\n    },\n    UOMDropDownEditor(container, options) {\n      kendo\n        .jQuery('<input name=\"' + options.field + '\"/>')\n        .appendTo(container)\n        .kendoDropDownList({\n          autoBind: true,\n          autoWidth: true,\n          height: 400,\n          filter: \"startswith\",\n          dataTextField: \"code\",\n          dataValueField: \"uomConvertId\",\n          cascadeFrom: \"item\",\n          template: \"<span>#=code || ``#</span>\",\n          optionLabel: \"--- Select ---\",\n          dataSource: new kendo.data.DataSource({\n            serverFiltering: true,\n            transport: {\n              read: {\n                url: uomPriceHandler.uomPriceByPriceLevelURL(\n                  \"id=\" +\n                    options.model.item.id +\n                    \"&plId=\" +\n                    this.purchase.priceLevel.id +\n                    \"&date=\" +\n                    this.txnDate +\n                    \"&nature=purchase\"\n                ),\n              },\n              dataType: \"json\",\n            },\n            schema: {\n              model: {\n                id: \"id\",\n                fields: {\n                  id: { type: \"string\" },\n                  // name: {type: \"string\"},\n                  // sku: {type: \"string\"},\n                },\n              },\n              data: function (response) {\n                return response.data;\n              },\n              total: function (response) {\n                return response.data.count;\n              },\n            },\n            // data: this.variants\n          }),\n        });\n    },\n    DiscountItemDropDownEditor(container, options) {\n      kendo\n        .jQuery('<input name=\"' + options.field + '\"/>')\n        .appendTo(container)\n        .kendoDropDownList({\n          autoBind: true,\n          autoWidth: true,\n          height: 400,\n          filter: \"startswith\",\n          dataTextField: \"name\",\n          dataValueField: \"id\",\n          cascadeFrom: \"item\",\n          template: \"<span>#=code# - #=name#</span>\",\n          optionLabel: \"--- Select ---\",\n          dataSource: new kendo.data.DataSource({\n            serverFiltering: true,\n            transport: {\n              read: {\n                url: discountItemHandler.getURL(DISCOUNT_TYPE),\n              },\n              dataType: \"json\",\n            },\n            schema: {\n              model: {\n                id: \"id\",\n                fields: {\n                  id: { type: \"string\" },\n                  // name: {type: \"string\"},\n                  // sku: {type: \"string\"},\n                },\n              },\n              data: function (response) {\n                return response.data;\n              },\n              total: function (response) {\n                return response.data.count;\n              },\n            },\n          }),\n        });\n    },\n    VatTaxDropDownEditor(container, options) {\n      kendo\n        .jQuery('<input name=\"' + options.field + '\"/>')\n        .appendTo(container)\n        .kendoDropDownList({\n          autoBind: true,\n          autoWidth: true,\n          height: 400,\n          filter: \"startswith\",\n          dataTextField: \"defaultTax\",\n          dataValueField: \"id\",\n          template: \"<span>#=defaultTax#</span>\",\n          optionLabel: \"--Select--\",\n          dataSource: new kendo.data.DataSource({\n            data: this.tax,\n          }),\n        });\n    },\n    EmployeeDropDownEditor(container, options) {\n      kendo\n        .jQuery('<input data-bind=\"value:' + options.field + '\"/>')\n        .appendTo(container)\n        .kendoMultiSelect({\n          autoBind: true,\n          autoWidth: true,\n          height: 400,\n          suggest: true,\n          filter: \"contains\",\n          dataTextField: \"name\",\n          dataValueField: \"id\",\n          headerTemplate:\n            '<div class=\"dropdown-header k-widget k-header\">' +\n            \"<span>Employee </span>\" +\n            \"<span></span>\" +\n            \"</div>\",\n          template: \"<span>#=name#</span>\",\n          optionLabel: \"--- Select ---\",\n          dataSource: new kendo.data.DataSource({\n            serverFiltering: true,\n            transport: {\n              read: {\n                url: employeeHandler.searchURL(),\n              },\n              dataType: \"json\",\n            },\n            schema: {\n              model: {\n                id: \"id\",\n                fields: {\n                  id: { type: \"string\" },\n                  name: { type: \"string\" },\n                  firstName: { type: \"string\" },\n                  lastName: { type: \"string\" },\n                },\n              },\n              data: function (response) {\n                return response.data;\n              },\n              total: function (response) {\n                return response.data.count;\n              },\n            },\n          }),\n        });\n    },\n    rowNumberTmpl(dataItem) {\n      let ds = this.$refs.itemLineDS.kendoWidget(),\n        index = ds.indexOf(dataItem);\n      return index + 1;\n    },\n    addRow() {\n      let ds = this.$refs.itemLineDS.kendoWidget(),\n        total = ds.total();\n      this.itemLine.id = itemLinePrefix + uuid.v1();\n      this.itemLine.decimalFormat = \"n\" + this.purchaseFormContent.decimal;\n      this.itemLine.isEditable = true;\n      ds.insert(total, this.itemLine);\n\n      // kendo.jQuery().addClass('edit')\n      // this.itemLines.push(this.itemLine)\n      // window.console.log('item Line', this.itemLine)\n    },\n    onPaymentTermChanged() {\n      // this.onInvoiceDateChanged();\n      if (this.vendor) {\n        const paymentTerm = this.purchase.paymentTerm || {};\n        const netDue = paymentTerm.netDue || 0;\n        const someDate = new Date(this.purchase.transactionDate);\n        someDate.setDate(someDate.getDate() + parseInt(netDue)); //number  of days to add, e.x. 15 days\n        this.purchase.dueDate = someDate;\n        // window.console.log(\"im\", someDate, netDue);\n      }\n    },\n    async onInvoiceDateChanged() {\n      await this.loadPaymentTermList();\n      await this.loadCreditLimit();\n      await this.loadCustomerBalance(this.vendor.id);\n      await this.onPriceLevelChange();\n\n      this.monthOf = kendo.toString(new Date(this.txnDate), \"yyyy-MM\");\n      // if (this.vendor) {\n      //     if (this.purchase.hasOwnProperty(\"paymentTerm\")) {\n      //         if (this.purchase.paymentTerm.hasOwnProperty(\"netDue\")) {\n      //             const netDue = this.purchase.paymentTerm.netDue;\n      //             const someDate = new Date(this.txnDate);\n      //             someDate.setDate(someDate.getDate() + parseInt(netDue)); //number  of days to add, e.x. 15 days\n      //             this.purchase.dueDate = someDate.toISOString().substr(0, 10);\n      //             // window.console.log('im', someDate, netDue)\n      //         }\n      //     }\n      // }\n      if (this.$route.params.id === undefined) {\n        this.generateNumber();\n      }\n      this.loadTransactionRate();\n    },\n    async loadPrefix() {\n      new Promise((resolve) => {\n        setTimeout(() => {\n          resolve(\"resolved\");\n          prefixHandler.get(\"purchase\").then((res) => {\n            if (res.data.statusCode === 200) {\n              this.showLoading = false;\n              this.purchaseTypes = res.data.data;\n              if (this.purchaseTypes.length > 0) {\n                this.purchase.transactionType = this.purchaseTypes[0];\n                if (this.$route.params.id === undefined) {\n                  this.generateNumber();\n                }\n              }\n            }\n          });\n        }, 10);\n      });\n    },\n    async loadPriceLevel() {\n      new Promise((resolve) => {\n        setTimeout(() => {\n          resolve(\"resolved\");\n          const strFilter = \"?&nature=\" + NATURE;\n          priceLevelHandler.get(strFilter).then((res) => {\n            this.priceLevel = res;\n            if (this.priceLevel.length > 0) {\n              this.purchase.priceLevel = this.priceLevel[0];\n            }\n          });\n        }, 10);\n      });\n    },\n    async loadDiscountItem() {\n      new Promise((resolve) => {\n        setTimeout(() => {\n          resolve(\"resolved\");\n          discountItemHandler.list(DISCOUNT_TYPE).then((res) => {\n            if (res.data.statusCode === 200) {\n              this.specificDiscountItem = res.data.data;\n            }\n          });\n        }, 10);\n      });\n    },\n    async loadOtherCharge() {\n      new Promise((resolve) => {\n        setTimeout(() => {\n          resolve(\"resolved\");\n          otherChargeHandler.list().then((res) => {\n            if (res.data.statusCode === 200) {\n              this.otherChargeList = res.data.data;\n            }\n          });\n        }, 10);\n      });\n    },\n    async loadAccount() {\n      new Promise((resolve) => {\n        setTimeout(() => {\n          resolve(\"resolved\");\n          accountHandler.getAll().then((res) => {\n            this.showLoading = false;\n            //Receivable Account\n            this.accPayable = res.data\n              .filter((m) => m.account_type.number === 18)\n              .map((itm) => {\n                return {\n                  id: itm.uuid,\n                  uuid: itm.uuid,\n                  name: itm.name,\n                  local_name: itm.local_name,\n                  number: itm.number,\n                  is_taxable: itm.is_taxable,\n                  banhjiAccCode: itm.banhjiAccCode,\n                  group_code: itm.group_code,\n                  parent_account: itm.parent_account,\n                  type_code: itm.type_code,\n                  account_type: itm.account_type,\n                };\n              });\n            if (this.accPayable.length > 0) {\n              this.purchase.apAcc = this.accPayable[0];\n            }\n            this.accWithholdingExpense = res.data\n              .filter((m) => parseInt(m.banhjiAccCode) === 843000)\n              .map((itm) => {\n                return {\n                  id: itm.uuid,\n                  uuid: itm.uuid,\n                  name: itm.name,\n                  local_name: itm.local_name,\n                  number: itm.number,\n                  is_taxable: itm.is_taxable,\n                  banhjiAccCode: itm.banhjiAccCode,\n                  group_code: itm.group_code,\n                  parent_account: itm.parent_account,\n                  type_code: itm.type_code,\n                  account_type: itm.account_type,\n                };\n              });\n          });\n        }, 10);\n      });\n    },\n    async loadPaymentTerm() {\n      new Promise((resolve) => {\n        setTimeout(() => {\n          resolve(\"resolved\");\n          const strFilter = \"?type=pmt-supplier\";\n          this.paymentTerms = [];\n          settingsHandler.getPaymentTerm(strFilter).then((res) => {\n            this.showLoading = false;\n            this.paymentTerms = res.data.data;\n            if (this.paymentTerms.length > 0) {\n              this.purchase.paymentTerm = this.paymentTerms[0];\n            }\n          });\n        }, 10);\n      });\n    },\n    async loadLocation() {\n      this.locations = [];\n      const roleType = dataStore.roleType || 0;\n      window.console.log(\n        \" const roleType = dataStore.roleType || 0\",\n        dataStore\n      );\n      if (roleType === 0) {\n        if (dataStore.roleData) {\n          const roleData = dataStore.roleData || [];\n          const location = roleData.filter((itm) => itm.type === \"location\");\n          const locationDefault = location.filter((m) => m.isDefault === 1);\n          this.locations = location;\n          if (\n            this.$route.params.id === undefined ||\n            this.$route.params.id === \"\"\n          ) {\n            if (locationDefault.length > 0) {\n              this.purchase.location = locationDefault[0];\n            }\n          }\n        }\n      } else if (roleType === 1) {\n        new Promise((resolve) => {\n          setTimeout(() => {\n            resolve(\"resolved\");\n            this.locations = [];\n            locationHandler.list().then((res) => {\n              if (res.data.statusCode === 200) {\n                this.locations = res.data.data;\n                if (this.locations.length > 0) {\n                  this.purchase.location = this.locations[0];\n                }\n              } else {\n                this.showLoading = false;\n              }\n            });\n          }, 10);\n        });\n      }\n    },\n    async loadProjectByCustomer() {\n      this.customerProjects = [];\n      const roleType = dataStore.roleType || 0;\n      if (roleType === 0) {\n        if (dataStore.roleData) {\n          const roleData = dataStore.roleData || [];\n          const project = roleData.filter((itm) => itm.type === \"project\");\n          this.customerProjects = project;\n          // project.forEach(k => {\n          //     const customers = k.customers || []\n          //     const proCustomer = customers.filter(n => n.customer.id === this.customer.id)\n          //     if (proCustomer.length > 0) {\n          //         this.customerProjects.push(k)\n          //     }\n          // })\n          if (\n            this.$route.params.id === undefined ||\n            this.$route.params.id === \"\"\n          ) {\n            const projectDefault = this.customerProjects.filter(\n              (m) => m.isDefault === 1\n            );\n            if (projectDefault.length > 0) {\n              this.purchase.project = projectDefault[0];\n            }\n          }\n        }\n      } else if (roleType === 1) {\n        new Promise((resolve) => {\n          setTimeout(() => {\n            resolve(\"resolved\");\n            if (this.vendor) {\n              // projectHandler.getBySupplier(this.vendor.id).then(res => {\n              projectHandler.list().then((res) => {\n                if (res.data.statusCode === 200) {\n                  this.showLoading = false;\n                  this.customerProjects = res.data.data;\n                  // if (this.customerProjects.length > 0) {\n                  //     this.purchase.project = this.customerProjects[0];\n                  // }\n                } else {\n                  this.showLoading = false;\n                }\n              });\n            }\n          }, 10);\n        });\n      }\n    },\n    async loadCustomerBalance(id) {\n      new Promise((resolve) => {\n        setTimeout(() => {\n          resolve(\"resolved\");\n          const strFilter = id + \"?type=bal\";\n          this.purchase.currentBalance = 0;\n          billingHandler\n            .balance(strFilter)\n            .then((res) => {\n              if (res.data.statusCode === 200) {\n                const data = res.data.data;\n                if (data.length > 0) {\n                  this.purchase.currentBalance = data[0].balance;\n                }\n              }\n            })\n            .catch();\n          {\n            this.showLoading = false;\n          }\n        }, 10);\n      });\n    },\n    async loadCustomerDepositBalance(id) {\n      new Promise((resolve) => {\n        setTimeout(() => {\n          resolve(\"resolved\");\n          const strFilter = id + \"?type=dep\";\n          this.purchase.depositAmount = 0;\n          this.purchase.depositDeduction = 0;\n          billingHandler\n            .balance(strFilter)\n            .then((res) => {\n              if (res.data.statusCode === 200) {\n                const data = res.data.data;\n                if (data.length > 0) {\n                  const amountDeposit = data[0].balance;\n                  window.console.log(amountDeposit, \"bala\");\n                  this.purchase.depositAmount =\n                    amountDeposit / this.purchase.txnRate;\n                }\n              }\n            })\n            .catch();\n          {\n            this.showLoading = false;\n          }\n        }, 10);\n      });\n    },\n    creditLimitUsage(balance, creditLimit) {\n      return (\n        kendo.toString(\n          (balance / creditLimit) * 100,\n          `n${this.purchaseFormContent.decimal}`\n        ) + \" %\"\n      );\n    },\n    async loadEmployeeCenter() {\n      new Promise((resolve) => {\n        setTimeout(() => {\n          resolve(\"resolved\");\n          this.employees = [];\n          employeeHandler\n            .center(undefined)\n            .then((res) => {\n              this.showLoading = true;\n              if (res.data.statusCode === 200) {\n                this.showLoading = false;\n                this.employees = res.data.data;\n                if (this.employees.length > 0) {\n                  this.purchase.employee = this.employees[0];\n                }\n              }\n            })\n            .catch();\n          {\n            this.showLoading = false;\n          }\n        }, 10);\n      });\n    },\n    async loadSegment() {\n      this.segments = [];\n      const roleType = dataStore.roleType || 0;\n      if (roleType === 0) {\n        if (dataStore.roleData) {\n          const roleData = dataStore.roleData || [];\n          const segment = roleData.filter((itm) => itm.type === \"segment\");\n          const segmentDefault = segment.filter((m) => m.isDefault === 1);\n          this.segments = segment;\n          if (\n            this.$route.params.id === undefined ||\n            this.$route.params.id === \"\"\n          ) {\n            if (segmentDefault.length > 0) {\n              this.purchase.segment = segmentDefault[0];\n              window.console.log(\"dataStore--segmentDefault\", segmentDefault);\n            }\n          }\n        }\n      } else if (roleType === 1) {\n        new Promise((resolve) => {\n          setTimeout(() => {\n            resolve(\"resolved\");\n            this.segments = [];\n            settingsHandler.getSeg().then((res) => {\n              if (res.data.statusCode === 200) {\n                this.segments = res.data.data;\n                if (this.segments.length > 0) {\n                  this.purchase.segment = this.segments[0];\n                }\n              }\n            });\n          }, 10);\n        });\n      }\n    },\n    async loadTax() {\n      new Promise((resolve) => {\n        setTimeout(() => {\n          resolve(\"resolved\");\n          settingHandler.get().then((res) => {\n            const taxes = res;\n            this.tax = taxes.filter(\n              (m) =>\n                (m.taxType.typeId === 1 ||\n                  m.taxType.typeId === 10 ||\n                  m.taxType.typeId === 2) &&\n                m.transactionType === \"Purchase\"\n            ); // valuable tax\n          });\n        }, 10);\n      });\n    },\n    async onSaveClose(saveSend) {\n      if (!this.$refs.form.validate()) {\n        this.$refs.form.validate();\n        return;\n      }\n      if (this.transactionRate === 0) {\n        this.$snotify.error(i18n.t(\"set_exchange_rate\"));\n        return;\n      }\n\n      let id = \"\";\n      if (this.vendor.hasOwnProperty(\"id\")) {\n        id = this.vendor.id || \"\";\n      }\n      if (id === \"\") {\n        this.$snotify.error(\"vendor is required\");\n        return;\n      }\n      if (this.purchase.billNo == \"\") {\n        this.$snotify.error(\"Vendor Invoice No is required\");\n        return;\n      }\n      if (!this.$refs.form.validate()) {\n        this.$refs.form.validate();\n        return;\n      }\n      let ds = this.$refs.itemLineDS.kendoWidget();\n      let d1 = ds.data();\n      let dataValidate = 0;\n      await this.autoCalculate();\n      d1.forEach((value, index) => {\n        if (\n          value.item == undefined ||\n          value.item.id == undefined ||\n          value.item.id == null ||\n          value.uom == undefined ||\n          value.uom.uom.id == undefined ||\n          value.uom.uom.id == null\n        ) {\n          this.$snotify.error(\n            \"Please check Item or UOM  on row \" + (index + 1)\n          );\n        } else {\n          dataValidate += 1;\n        }\n      });\n      if (d1.length == dataValidate) {\n        new Promise((resolve) => {\n          setTimeout(() => {\n            resolve(\"resolved\");\n            let isAutoGenerate = 1;\n            if (this.$route.params.id) {\n              const tranDate = new Date(this.txnDate);\n              const tranDateInvoice = new Date(this.purchase.transactionDate);\n              const tranDateM = tranDate.getFullYear() + tranDate.getMonth();\n              const tranDateInvoiceM =\n                tranDateInvoice.getFullYear() + tranDateInvoice.getMonth();\n              if (tranDateM === tranDateInvoiceM) {\n                isAutoGenerate = 0;\n              }\n            }\n\n            let itemLineDS = this.$refs.itemLineDS.kendoWidget();\n            const dataRow = itemLineDS\n              .data()\n              .filter((o) => o.amount > 0)\n              .map((n) => {\n                return new ItemLineModel(n);\n              });\n            if (dataRow.length > 0) {\n              let data = {\n                id: this.purchase.id ? this.purchase.id : \"\",\n                uuid: this.purchase.uuid ? this.purchase.uuid : \"\",\n                journal_uuid: this.purchase.journal_uuid\n                  ? this.purchase.journal_uuid\n                  : \"\",\n                jRaw: this.jRaw,\n                type: TRANSACTION_TYPE,\n                number: this.purchase.number,\n                abbr: this.purchase.transactionType.abbr,\n                transactionDate: this.txnDate,\n                transactionDateTZ: Helper.toISODate(this.txnDate),\n                dueDate: this.purchase.dueDate,\n                monthOf: this.monthOf,\n                paymentCode: this.purchase.paymentCode,\n                billNo: this.purchase.billNo,\n                billDate: this.billDate,\n                supplier: this.purchase.supplier,\n                transactionType: this.purchase.transactionType,\n                paymentTerm: this.purchase.paymentTerm,\n                discountPromotion: {},\n                apAcc: this.purchase.apAcc,\n                currency: this.purchase.currency,\n                txnRate: this.purchase.txnRate,\n                rate: 1,\n                exchangeRate: this.purchase.exchangeRate,\n                exchangeAmount: this.purchase.exchangeAmount,\n                priceLevel: this.purchase.priceLevel,\n                itemLines: dataRow,\n                segment: this.purchase.segment,\n                location: this.purchase.location,\n                project: this.purchase.project,\n                employee: this.purchase.employee,\n                billingAddress: this.purchase.billingAddress,\n                deliveryAddress: this.purchase.deliveryAddress,\n                deliveryDateTime: this.purchase.deliveryDateTime,\n                transactionNote: this.purchase.transactionNote,\n                journalNote: this.purchase.journalNote,\n                subTotal: this.purchase.subTotal,\n                total: this.purchase.total,\n                discountTotal: this.purchase.discountTotal,\n                exchangeDiscountTotal:\n                  this.purchase.discountTotal * (this.purchase.txnRate || 1),\n                specificDiscountTotal: this.purchase.specificDiscountTotal,\n                deliveryFee: this.purchase.deliveryFee,\n                totalTaxAmount: this.purchase.totalTaxAmount,\n                depositAmount: this.purchase.depositAmount,\n                depositDeduction: this.purchase.depositDeduction,\n                remainingAmount: this.purchase.remainingAmount,\n                amountDue: this.purchase.amountDue,\n                currentBalance: this.purchase.currentBalance,\n                balance: this.purchase.balance,\n                creditLimit: this.purchase.creditLimit,\n                saveOption: this.purchase.saveOption,\n                status: 1,\n                approvedBy: this.purchase.approvedBy,\n                formTemplate: {},\n                specificDiscountItem: this.purchase.specificDiscountItem,\n                otherCharge: this.mOtherCharge,\n                otherChargeAmount: this.purchase.otherChargeAmount,\n                taxListTotal: this.taxListTotal,\n                supplierDiscountItem: this.supplierDiscountItem,\n                createdAt: this.purchase.createdAt,\n                itemSubtotal: this.purchase.itemSubtotal,\n                exchangeItemSubtotal: this.purchase.exchangeItemSubtotal,\n                serviceSubtotal: this.purchase.serviceSubtotal,\n                exchangeServiceSubtotal: this.purchase.exchangeServiceSubtotal,\n                txnItmSubtotal: this.purchase.txnItmSubtotal,\n                exchangeTxnItmSubtotal: this.purchase.exchangeTxnItmSubtotal,\n                itemDiscount: this.purchase.itemDiscount,\n                exchangeItemDiscount: this.purchase.exchangeItemDiscount,\n                serviceDiscount: this.purchase.serviceDiscount,\n                exchangeServiceDiscount: this.purchase.exchangeServiceDiscount,\n                txnItmDiscount: this.purchase.txnItmDiscount,\n                exchangeTxnItmDiscount: this.purchase.exchangeTxnItmDiscount,\n                withholdingTaxAmount: this.purchase.withholdingTaxAmount || 0,\n                inclusiveTaxAmount: this.purchase.inclusiveTaxAmount || 0,\n                loggedUser: this.loggedUser,\n                saveSend: saveSend,\n                refFrom: this.purchase.refFrom || [],\n                refTo: this.purchase.refTo || [],\n                saleTaxDetail: this.purchase.saleTaxDetail || [],\n                hasAdditionalCost: this.purchase.additionalCost.length > 0,\n                additionalCost: this.purchase.additionalCost || [],\n                additionalCostMethod: this.purchase.additionalCostMethod || \"\",\n                additionalCostTotal: this.additionalCostTotal || 0,\n                isAutoGenerate: isAutoGenerate,\n                actionType: this.$route.params.id\n                  ? this.$route.query.type\n                  : \"new\",\n              };\n              if (this.$route.query.type === \"recurring\") {\n                data.id = \"\";\n              }\n              this.showLoading = true;\n              billingHandler\n                .createPurchase(data)\n                .then((response) => {\n                  if (response.data.statusCode === 201) {\n                    // this.close(response.data.data)\n                    // this.$refs.form.reset()\n                    this.showLoading = false;\n                    this.$snotify.success(\"Successfully\");\n                    if (saveSend === true) {\n                      this.clear();\n                    } else {\n                      this.close(response.data.data);\n                    }\n                  }\n                })\n                .catch((e) => {\n                  this.showLoading = false;\n                  this.$snotify.error(\"Something went wrong\");\n                  this.errors.push(e);\n                });\n            }\n          }, 50);\n        });\n      }\n    },\n    async loadPurchaseFormContent() {\n      new Promise((resolve) => {\n        setTimeout(() => {\n          resolve(\"resolved\");\n          purchaseFormContentHandler.list().then((res) => {\n            if (res.data.statusCode === 200) {\n              const data = res.data.data;\n              if (data.length > 0) {\n                this.purchaseFormContent = data[0];\n                this.decimalFormat = \"n\" + this.purchaseFormContent.decimal;\n                this.initData();\n              }\n            }\n          });\n        }, 50);\n      });\n    },\n    close(data) {\n      if (this.$route.params.id === undefined) {\n        this.$router.push({\n          name: \"Vendors\",\n          params: {\n            data: data,\n          },\n        });\n      } else {\n        window.history.go(-1);\n        // this.$router.push({\n        //     path: \"invoice_view\",\n        //     name: \"Invoice View\",\n        //     params: {\n        //         data: data,\n        //     }\n        // })\n      }\n      // window.console.log(data, 'data')\n    },\n    saveNew() {},\n    removeRow(e) {\n      e.preventDefault();\n      const grid = kendo.jQuery(\"#gridItemLine\").data(\"kendoGrid\"),\n        dataSource = grid.dataSource,\n        dataItem = grid.dataItem($(e.currentTarget).closest(\"tr\"));\n\n      if (dataSource.total() > 1) {\n        dataSource.remove(dataItem);\n        this.autoCalculate();\n      }\n    },\n    generateNumber() {\n      if (this.$route.params.id) {\n        const tranDate = new Date(this.txnDate);\n        const tranDateInvoice = new Date(this.purchase.transactionDate);\n        const tranDateM = tranDate.getFullYear() + tranDate.getMonth();\n        const tranDateInvoiceM =\n          tranDateInvoice.getFullYear() + tranDateInvoice.getMonth();\n        if (tranDateM === tranDateInvoiceM) {\n          this.purchase.referenceNo = this.referenceNo;\n          return;\n        }\n      }\n\n      if (this.txnDate !== \"\" && this.purchaseTypes.length > 0) {\n        let data = {\n          abbr: this.purchase.transactionType.abbr,\n          structure: this.purchase.transactionType.structure,\n          transactionDate: this.txnDate,\n          sequcencing: this.purchase.transactionType.sequcencing,\n          type: \"Purchase\",\n          entity: 1,\n        };\n        billingHandler\n          .lastNumber(data)\n          .then((response) => {\n            if (response.data.statusCode === 200) {\n              const res = response.data.data;\n              const lastNumber = this.zeroPad(\n                parseInt(res.lastNumber),\n                this.purchase.transactionType.format\n              );\n              const number =\n                res.suffix +\n                this.purchase.transactionType.numberSeparator +\n                lastNumber;\n              this.purchase.number = number;\n            }\n          })\n          .catch((e) => {\n            this.errors.push(e);\n          });\n      }\n    },\n    zeroPad(num, places) {\n      return String(num).padStart(places, \"0\");\n    },\n    suffix(transactionDate) {\n      return kendo.toString(new Date(transactionDate), `yymm`);\n    },\n    errorMessage() {},\n    accountDropDownEditor() {},\n    cancel() {\n      this.$swal({\n        title: i18n.t(\"msg_title_warning\"),\n        text: i18n.t(\"msg_discard\"),\n        icon: \"warning\",\n        showCancelButton: true,\n        cancelButtonText: i18n.t(\"cancel\"),\n        confirmButtonColor: \"#4d4848\",\n        cancelButtonColor: \"#ED1A3A\",\n        confirmButtonText: i18n.t(\"discard\"),\n      }).then((resultCen) => {\n        window.console.log(resultCen);\n        if (resultCen.value) {\n          this.$destroy();\n          this.$router.go(-1);\n        }\n      });\n    },\n    hideSmallSidebar() {\n      this.isHideBar = !this.isHideBar;\n    },\n    requestData(skip, filter, baseUrl) {\n      const url = baseUrl + `?filter=${filter}`;\n      this.requestStarted = true;\n      fetch(url)\n        .then((response) => {\n          return response.json();\n        })\n        .then(this.afterFetch);\n    },\n    requestData_(skip, filter, baseUrl) {\n      const url = baseUrl + `/${filter}`;\n      this.requestStarted = true;\n      fetch(url)\n        .then((response) => {\n          return response.json();\n        })\n        .then(this.afterFetch_);\n    },\n    onChange(event) {\n      const value = event.value;\n      if (value && value[textField] === emptyItem[textField]) {\n        return;\n      }\n      this.vendor = value;\n      this.purchase.supplier = value;\n      // window.console.log(this.purchase.customer, 'Changed')\n      // this.invoice = value\n      this.purchase.apAcc = value.hasOwnProperty(\"apAcc\") ? value.apAcc : {};\n      this.purchase.paymentTerm = value.paymentTerm || {};\n      this.purchase.priceLevel = value.priceLevel || {};\n      const baseCurrency = value.baseCurrency || {};\n      if (baseCurrency.hasOwnProperty(\"code\")) {\n        this.baseCurrencyCode = \" \" + baseCurrency.code;\n      }\n      // this.loadTransactionRate();\n      this.billingAddress = value.hasOwnProperty(\"billingAddress\")\n        ? value.billingAddress\n        : [];\n      this.deliveryAddress = value.hasOwnProperty(\"deliveryAddress\")\n        ? value.deliveryAddress\n        : [];\n      if (this.billingAddress.length > 0) {\n        this.purchase.billingAddress = this.billingAddress[0];\n      }\n      if (this.deliveryAddress.length > 0) {\n        this.purchase.deliveryAddress = this.deliveryAddress[0];\n      }\n      this.expenses = [];\n      this.onInvoiceDateChanged();\n      this.loadProjectByCustomer();\n      // this.loadCustomerBalance(this.vendor.id);\n      // const creditLimit = value.hasOwnProperty(\"creditLimit\")\n      //     ? value.creditLimit\n      //     : 0;\n      // this.purchase.creditLimit = kendo.parseFloat(creditLimit);\n      // window.console.log(value, 'value')\n    },\n    onEmployeeChanged(event) {\n      const value = event.value;\n      if (value && value[textField] === emptyItem[textField]) {\n        return;\n      }\n      this.mEmployee = value;\n      this.purchase.employee = value;\n    },\n    afterFetch(json) {\n      this.vendorList = json.data;\n    },\n    afterFetch_(json) {\n      this.employees = json.data;\n    },\n    onFilterChange(event) {\n      const filter = event.filter.value;\n      this.requestData(0, filter, this.cusBaseUrl);\n      this.filter = filter;\n    },\n    onEmployeeFilterChanged(event) {\n      const filter = event.filter.value;\n      this.requestData_(0, filter, this.empBaseUrl);\n      this.filter_ = filter;\n    },\n    async initData() {\n      if (this.$route.params.id !== undefined) {\n        await this.loadViewCreditPurchase();\n      } else {\n        this.clear();\n        // this.addRow();\n      }\n    },\n    async loadViewCreditPurchase() {\n      new Promise((resolve) => {\n        setTimeout(() => {\n          resolve(\"resolved\");\n          this.showLoading = true;\n          if (this.$route.params.id) {\n            billingHandler\n              .viewPurchase(this.$route.params.id)\n              .then((res) => {\n                if (res.data.statusCode === 200) {\n                  this.showLoading = false;\n                  this.purchase = res.data.data[0];\n                  this.referenceNo = this.purchase.referenceNo;\n                  this.txnDate = new Date(this.purchase.transactionDate);\n                  this.vendor = this.purchase.supplier;\n                  this.mEmployee = this.purchase.employee;\n                  this.taxListTotal = this.purchase.taxListTotal;\n                  this.itemLines = this.purchase.itemLines;\n                  this.mOtherCharge = this.purchase.otherCharge;\n                  this.supplierDiscountItem =\n                    this.purchase.supplierDiscountItem || [];\n                  this.jRaw = this.purchase.jRaw || [];\n                  this.expenses = this.purchase.additionalCost || [];\n                  this.additionalCostTotal =\n                    this.purchase.additionalCostTotal || 0;\n                  this.purchaseOrders = this.purchase.refFrom || [];\n                  this.monthOf = kendo.toString(\n                    new Date(this.purchase.monthOf),\n                    \"yyyy-MM\"\n                  );\n                  for (let i = 0; i < this.mOtherCharge.length - 1; i++) {\n                    this.addSelect();\n                  }\n                  const priceLevel = this.purchase.priceLevel || {};\n                  const currency = priceLevel.currency || {};\n                  const curCode = currency.code || \"\";\n                  this.currencyCode = curCode;\n                  // this.loadProjectByCustomer()\n                  if (this.vendor) {\n                    if (this.vendor.hasOwnProperty(\"id\")) {\n                      this.loadCustomerBalance(this.vendor.id);\n                    }\n                  }\n                  if (this.$route.query.type === \"recurring\") {\n                    if (this.$route.params.hasOwnProperty(\"transactionDate\")) {\n                      window.console.log(\"type\", this.$route.params);\n                      this.purchase.transactionDate = new Date(\n                        this.$route.params.transactionDate\n                      );\n                      this.txnDate = new Date(\n                        this.$route.params.transactionDate\n                      );\n                      this.onInvoiceDateChanged();\n                      this.generateNumber();\n                    }\n                  }\n                }\n              })\n              .catch();\n            {\n              this.showLoading = false;\n            }\n          }\n        }, 10);\n      });\n    },\n    clear() {\n      // this.loadAccount()\n      this.loadPriceLevel();\n      let ds = this.$refs.itemLineDS.kendoWidget();\n      ds.data([]);\n      this.id = undefined;\n      this.vendor = {};\n      this.mEmployee = {};\n      this.mOtherCharge = {};\n      this.purchaseOrders = [];\n      this.purchase = new PurchaseModel({});\n      this.purchase.transactionType = this.purchaseTypes[0];\n      this.monthOf = kendo.toString(\n        new Date(this.purchase.transactionDate),\n        \"yyyy-MM\"\n      );\n      this.addRow();\n      this.generateNumber();\n      this.loadSegment();\n      this.loadLocation();\n    },\n    async loadTransactionRate() {\n      new Promise((resolve) => {\n        setTimeout(() => {\n          resolve(\"resolved\");\n          const date = new Date(this.txnDate).toISOString().substr(0, 10);\n          const priceLevel = this.purchase.priceLevel;\n          let code = \"\";\n          if (priceLevel.hasOwnProperty(\"currency\")) {\n            if (priceLevel.currency.hasOwnProperty(\"code\")) {\n              code = priceLevel.currency.code;\n            }\n          }\n          if (code !== undefined || code !== \"\") {\n            this.showLoading = true;\n            currencyHandler\n              .getLastExchangeRateByDate(date, code)\n              .then((res) => {\n                if (res.data.statusCode === 200) {\n                  this.showLoading = false;\n                  this.exchangeRate = res.data.data[0];\n                  this.currencyCode = this.exchangeRate.code || \"\";\n                  this.transactionRate = this.exchangeRate.rate || 0;\n                  this.purchase.txnRate = this.exchangeRate.rate || 0;\n                  this.purchase.exchangeRate = this.exchangeRate || {};\n                  if (this.transactionRate === 0) {\n                    this.$snotify.error(i18n.t(\"set_exchange_rate\"));\n                    return;\n                  }\n                  this.showLoading = false;\n                  this.loadCustomerDepositBalance(this.vendor.id);\n                }\n              });\n          }\n          this.loadPurchaseOrder();\n        }, 10);\n      });\n    },\n    reload() {\n      if (this.$route.params.id !== undefined) {\n        this.loadViewCreditPurchase();\n      } else {\n        this.clear();\n      }\n    },\n    async loadPurchaseOrder() {\n      new Promise((resolve) => {\n        setTimeout(() => {\n          resolve(\"resolved\");\n          let segmentId = \"\",\n            locationId = \"\",\n            priceLevelId = \"\",\n            customerId = \"\",\n            txnDate = \"\";\n          if (this.purchase.segment) {\n            segmentId = this.purchase.segment.id;\n          }\n          if (this.purchase.location) {\n            locationId = this.purchase.location.id;\n          }\n          if (this.purchase.supplier) {\n            customerId = this.purchase.supplier.id;\n          }\n          if (this.purchase.priceLevel) {\n            priceLevelId = this.purchase.priceLevel.id;\n          }\n          if (this.purchase.transactionDate) {\n            txnDate = this.purchase.transactionDate;\n          }\n          let strFilter = \"\";\n          if (\n            segmentId !== \"\" &&\n            customerId !== \"\" &&\n            locationId !== \"\" &&\n            priceLevelId !== \"\" &&\n            txnDate !== \"\"\n          ) {\n            strFilter =\n              \"?id=\" +\n              customerId +\n              \"&segId=\" +\n              segmentId +\n              \"&locId=\" +\n              locationId +\n              \"&plId=\" +\n              priceLevelId +\n              \"&date=\" +\n              txnDate +\n              \"&type=Purchase Order\";\n          }\n          if (strFilter !== \"\") {\n            this.purchase.refFrom = [];\n            this.showLoadingTxn = true;\n            saleOrderHandler.transactionFilter(strFilter).then((res) => {\n              if (res.data.statusCode === 200) {\n                this.showLoadingTxn = false;\n                this.purchaseOrders = res.data.data;\n              } else {\n                this.showLoadingTxn = false;\n              }\n            });\n          }\n        }, 10);\n      });\n      await this.getExpenseBySupplier();\n    },\n    addPurchaseOrder(item) {\n      if (item) {\n        const itemLine = item.itemLines || [];\n        this.refFrom.push({\n          id: item.id || \"\",\n          reference: item.referenceNo || \"\",\n        });\n        let ds = this.$refs.itemLineDS.kendoWidget(),\n          total = ds.total();\n        itemLine.forEach((o) => {\n          this.itemLine = new ItemLineModel(o);\n          this.itemLine.id = itemLinePrefix + uuid.v1();\n          this.itemLine.decimalFormat = \"n\" + this.purchaseFormContent.decimal;\n          this.itemLine.sourceTransaction = {\n            id: item.id,\n            referenceNo: item.referenceNo,\n          };\n          this.itemLine.sourceTransactionRef = item.referenceNo;\n          ds.insert(total, this.itemLine);\n        });\n        this.itemLine = new ItemLineModel({});\n        this.autoCalculate();\n        const index = this.purchaseOrders.findIndex((itm) => {\n          return item.id === itm.id;\n        });\n        this.purchaseOrders.splice(index, 1);\n        this.purchase.refFrom = this.removeDuplicate(this.refFrom);\n      }\n    },\n    totalQty() {\n      let ds = this.$refs.itemLineDS.kendoWidget();\n      let qty = 0;\n      ds.data()\n        .filter((n) => n.amount > 0)\n        .forEach((m) => {\n          const itm = m.item || {};\n          const uom = m.uom || {};\n          if (itm.id && uom.uom && itm.type === \"Variant\") {\n            qty += (m.qty || 0) * (m.conversionRate || 1);\n          }\n        });\n      window.console.log(\"qty\", qty);\n      return qty;\n    },\n    excludeVATTaxInclusive(tax, amount, incTax) {\n      if (tax) {\n        const baseAmount = tax.baseAmount || \"\";\n        const taxType = tax.taxType || {};\n        const taxTypeId = taxType.typeId || 0;\n        if (baseAmount) {\n          if (baseAmount.toLowerCase() === \"inclusive\" && taxTypeId === 1) {\n            return amount - incTax;\n          }\n        }\n      }\n      return amount;\n    },\n    totalAmount() {\n      let ds = this.$refs.itemLineDS.kendoWidget();\n      let amount = 0;\n      ds.data()\n        .filter((n) => n.amount > 0)\n        .forEach((m) => {\n          const itm = m.item || {};\n          const uom = m.uom || {};\n          let incluTax = 0;\n          if (itm.id && uom.uom && itm.type === \"Variant\") {\n            const tax = m.vatTax || {};\n            const amount_ = m.amount || 0;\n            const baseAmount = tax.baseAmount || \"\";\n            if (baseAmount) {\n              if (baseAmount.toLowerCase() === \"inclusive\") {\n                incluTax = this.autoCalculateTax(tax, amount_);\n              }\n            }\n            amount += amount_ - (incluTax || 0);\n          }\n        });\n      window.console.log(\"amount x-\", amount);\n      return amount;\n    },\n    percentageApplied() {\n      try {\n        const tAmount = this.totalAmount();\n        let ds = this.$refs.itemLineDS.kendoWidget();\n        ds.data()\n          .filter((n) => n.amount > 0)\n          .forEach((m) => {\n            const itm = m.item || {};\n            const uom = m.uom || {};\n            let incluTax = 0;\n            if (itm.id && uom.uom && itm.type === \"Variant\") {\n              const tax = m.vatTax || {};\n              const amount = m.amount || 0;\n              const baseAmount = tax.baseAmount || \"\";\n              if (baseAmount) {\n                if (baseAmount.toLowerCase() === \"inclusive\") {\n                  incluTax = this.autoCalculateTax(tax, amount);\n                }\n              }\n              const amountAfterTax = amount - (incluTax || 0);\n              const pAmount = amountAfterTax / tAmount;\n              m[\"percentageApplied\"] = pAmount;\n            }\n          });\n        window.console.log(\"Qty Based--\", ds.data());\n      } catch (e) {\n        window.console.log(\"error\", e);\n      }\n    },\n    amountApplied() {\n      try {\n        let ds = this.$refs.itemLineDS.kendoWidget();\n        const adc = this.additionalCostTotal || 0;\n        ds.data()\n          .filter((n) => n.amount > 0)\n          .forEach((m) => {\n            const itm = m.item || {};\n            const uom = m.uom || {};\n            window.console.log(\"amountApplied==\", uom.uom, \"---\", itm.type);\n            if (itm.id && uom.uom && itm.type === \"Variant\") {\n              const percentageApplied = m.percentageApplied || 0;\n              window.console.log(\n                \"percentageApplied--\",\n                adc,\n                \"---\",\n                percentageApplied * adc\n              );\n              m[\"amountApplied\"] = percentageApplied * adc;\n            }\n          });\n        window.console.log(\"AMount Based--\", ds.data());\n      } catch (e) {\n        window.console.log(\"error\", e);\n      }\n    },\n    amountAppliedQtyBased() {\n      try {\n        let ds = this.$refs.itemLineDS.kendoWidget();\n        ds.data()\n          .filter((n) => n.amount > 0)\n          .forEach((m) => {\n            const itm = m.item || {};\n            const uom = m.uom || {};\n            if (itm.id && uom.uom && itm.type === \"Variant\") {\n              const addc = m.additionalCost || 0;\n              const qty = (m.qty || 1) * (m.conversionRate || 1);\n              m[\"amountApplied\"] = addc * qty;\n            }\n          });\n        window.console.log(\"amountAppliedQtyBased Based--\", ds.data());\n      } catch (e) {\n        window.console.log(\"error\", e);\n      }\n    },\n    async calculateAdditionalCost() {\n      try {\n        // todo: additional Cost\n        if (this.purchase.additionalCostMethod === \"Qty Based\") {\n          this.percentageApplied();\n        } else {\n          this.percentageApplied();\n          this.amountApplied();\n        }\n        if (this.purchase.additionalCostMethod === \"Qty Based\") {\n          const tQty = this.totalQty();\n          const addc = this.additionalCostTotal || 0;\n          let ds = this.$refs.itemLineDS.kendoWidget();\n          ds.data()\n            .filter((n) => n.amount > 0)\n            .forEach((m) => {\n              const itm = m.item || {};\n              const uom = m.uom || {};\n              if (itm.id && uom.uom && itm.type === \"Variant\") {\n                m[\"additionalCost\"] = addc / tQty;\n              }\n            });\n          window.console.log(\"qty based\", ds.data());\n        } else {\n          let ds = this.$refs.itemLineDS.kendoWidget();\n          ds.data()\n            .filter((n) => n.amount > 0)\n            .forEach((m) => {\n              const itm = m.item || {};\n              const uom = m.uom || {};\n              if (itm.id && uom.uom && itm.type === \"Variant\") {\n                const amountApplied = m.amountApplied || 0;\n                const qty = (m.qty || 0) * (m.conversionRate || 1);\n                m[\"additionalCost\"] = amountApplied / qty;\n              }\n            });\n        }\n        if (this.purchase.additionalCostMethod === \"Qty Based\") {\n          this.amountAppliedQtyBased();\n        }\n        await this.clearingAccount();\n      } catch (e) {\n        window.console.log(\"error\", e);\n      }\n    },\n    autoCalculateTaxDetail() {\n      let ids = [];\n      this.taxListDetail.forEach((n) => {\n        ids.push(n.id || \"\");\n      });\n      const unique = [...new Set(ids)];\n      let result = [];\n      unique.forEach((m) => {\n        let amount = 0,\n          row = {},\n          discount = 0,\n          xDiscount = 0,\n          xAmount = 0,\n          taxAmount = 0,\n          xTaxAmount = 0;\n        let taxDetail = [],\n          isVat = 0;\n        const found = this.taxListDetail.filter((n) => n.id === m);\n        // window.console.log('taxListDetailids', found)\n        found.forEach((k) => {\n          row = k;\n          if (k.isVat === 1) {\n            isVat = 1;\n            const detail_ = k.detail || {};\n            taxDetail.push(detail_);\n          }\n          taxAmount += k.taxAmount_ || 0;\n          xTaxAmount += (k.taxAmount_ || 0) * (k.txnRate || 1);\n          amount += k.amount || 0;\n          xAmount += (k.amount || 0) * (k.txnRate || 1);\n          discount += k.discount || 0;\n          xDiscount += (k.discount || 0) * (k.txnRate || 1);\n        });\n        let spTaxAmt = 0,\n          spXTaxAmt = 0,\n          plTaxAmt = 0,\n          plXTaxAmt = 0,\n          otTaxAmt = 0,\n          otXTaxAmt = 0,\n          spTaxName = \"\",\n          plTaxName = \"\",\n          otTaxName = \"\",\n          spTaxNameLocale = \"\",\n          plTaxNameLocale = \"\",\n          otTaxNameLocale = \"\",\n          spAccId = \"\",\n          plAccId = \"\",\n          otAccId = \"\",\n          spRate = \"\",\n          plRate = \"\",\n          otRate = \"\";\n        taxDetail.forEach((n) => {\n          const spTax = n.specificTax || {};\n          const plTax = n.publicLightingTax || {};\n          const otherTax = n.otherTax || {};\n          if (Object.keys(spTax).length > 0) {\n            spTaxAmt += spTax.taxAmount_ || 0;\n            spXTaxAmt += (spTax.taxAmount_ || 0) * (spTax.taxRate || 1);\n            spTaxName = spTax.defaultTax || \"\";\n            spTaxNameLocale = spTax.defaultTaxLocale || \"\";\n            spAccId = spTax.account ? spTax.account.id : \"\";\n            spRate = spTax.rate || 1;\n          }\n          if (Object.keys(plTax).length > 0) {\n            plTaxAmt += plTax.taxAmount_ || 0;\n            plXTaxAmt += (plTax.taxAmount_ || 0) * (plTax.taxRate || 1);\n            plTaxName = plTax.defaultTax || \"\";\n            plTaxNameLocale = plTax.defaultTaxLocale || \"\";\n            plAccId = plTax.account ? plTax.account.id : \"\";\n            plRate = plTax.rate || 1;\n          }\n          if (Object.keys(otherTax).length > 0) {\n            otTaxAmt += otherTax.taxAmount_ || 0;\n            otXTaxAmt += (otherTax.taxAmount_ || 0) * (plTax.taxRate || 1);\n            otTaxName = otherTax.defaultTax || \"\";\n            otTaxNameLocale = otherTax.defaultTaxLocale || \"\";\n            otAccId = otherTax.account ? otherTax.account.id : \"\";\n            otRate = otherTax.rate || 1;\n          }\n        });\n        if (isVat === 1) {\n          row.detail = {\n            specificTax: {\n              name: spTaxName,\n              nameLocale: spTaxNameLocale,\n              amount: spTaxAmt,\n              exchangeAmount: spXTaxAmt,\n              accountId: spAccId,\n              rate: spRate,\n            },\n            publicLightingTax: {\n              name: plTaxName,\n              nameLocale: plTaxNameLocale,\n              amount: plTaxAmt,\n              exchangeAmount: plXTaxAmt,\n              accountId: plAccId,\n              rate: plRate,\n            },\n            otherTax: {\n              name: otTaxName,\n              nameLocale: otTaxNameLocale,\n              amount: otTaxAmt,\n              exchangeAmount: otXTaxAmt,\n              accountId: otAccId,\n              rate: otRate,\n            },\n          };\n        } else {\n          row.detail = {};\n        }\n\n        row[\"amount\"] = amount;\n        row[\"exchangeAmount\"] = xAmount;\n        row[\"taxAmount\"] = taxAmount;\n        row[\"exchangeTaxAmount\"] = xTaxAmount;\n        row[\"discount\"] = discount;\n        row[\"exchangeDiscount\"] = xDiscount;\n        row[\"currency\"] = this.purchase.exchangeRate || {};\n        result.push(row);\n        taxDetail = [];\n      });\n      this.purchase.saleTaxDetail = result;\n      window.console.log(\"saleTaxDetail\", result);\n    },\n    async getExpenseBySupplier() {\n      new Promise((resolve) => {\n        setTimeout(() => {\n          resolve(\"resolved\");\n          const segment = this.purchase.segment || {};\n          const segmentId = segment.id || \"\";\n          const location = this.purchase.location || {};\n          const locationId = location.id || \"\";\n          const supplier = this.purchase.supplier || {};\n          const supplierId = supplier.id || \"\";\n          const strFilter =\n            \"?id=\" +\n            supplierId +\n            \"&segId=\" +\n            segmentId +\n            \"&locId=\" +\n            locationId;\n          this.expenses = [];\n          this.purchase.additionalCostTotal = 0;\n          this.showLoadingTxnAdditionalCost = false;\n          this.purchase.additionalCost = [];\n          billingHandler.listPurchase(strFilter).then((res) => {\n            if (res.data.statusCode === 200) {\n              this.showLoadingTxnAdditionalCost = true;\n              this.showLoadingTxnAdditionalCost = false;\n              this.expenses = res.data.data;\n              this.onMethodChanged();\n            } else {\n              this.showLoadingTxnAdditionalCost = false;\n            }\n          });\n        }, 10);\n      });\n    },\n    async clearingAccount() {\n      try {\n        if (this.isItem()) {\n          /* todo: clearing account for additional cost */\n          const amount = (this.purchase.additionalCostTotal || 0) * -1;\n          const xAmount = amount * this.purchase.txnRate || 1;\n          const addict = this.purchase.additionalCost || [];\n\n          if (addict.length > 0) {\n            if (addict[0]) {\n              const account = addict[0].account || {};\n              const nature = \"cr\";\n              this.jRaw.push({\n                id: account.id + \"-\" + nature,\n                line: new ItemLineModel(),\n                description: \"Additional Cost\",\n                account: account,\n                accountId: account.id,\n                amount: amount,\n                exchangeAmount: xAmount,\n                type: nature,\n                typeAs: \"clearing\",\n              });\n            }\n          }\n        }\n      } catch (e) {\n        window.console.log(\"error\", e);\n      }\n    },\n    isItem() {\n      const ds = this.$refs.itemLineDS.kendoWidget();\n      const row = ds.data().filter((n) => n.amount > 0);\n      const found = row.filter((n) => n.item.type === \"Variant\");\n      if (found) {\n        return found.length > 0;\n      }\n      return false;\n    },\n  },\n  computed: {\n    abbr() {\n      if (this.purchase) {\n        const txnType = this.purchase.transactionType || {};\n        const abbr = txnType.abbr || \"\";\n        return abbr;\n      } else {\n        return \"\";\n      }\n    },\n    validVendor() {\n      let vendor = this.vendor;\n      return vendor.id !== undefined && vendor.id !== null;\n    },\n    disableMe() {\n      return !!this.$route.params.id;\n    },\n    hiddenButton() {\n      return !!this.$route.params.id;\n    },\n    disabledSLP() {\n      if (this.$route.params.id) {\n        const refF = this.purchase.refFrom || [];\n        if (refF.length > 0) {\n          return !!refF.length > 0;\n        }\n        const adc = this.purchase.additionalCost || [];\n        if (adc.length > 0) {\n          return !!adc.length > 0;\n        }\n      }\n      return false;\n    },\n  },\n  watch: {\n    // id() {\n    //   if (this.$route.params.id === undefined) {\n    //     this.clear();\n    //   } else {\n    //     this.showLoading = true;\n    //     this.loadViewCreditPurchase();\n    //   }\n    // },\n    $route: \"reload\",\n  },\n  created() {\n    this.loadTax();\n    this.loadPrefix();\n    this.loadProjectByCustomer();\n  },\n  mounted: async function () {\n    this.requestData(0, this.filter, this.cusBaseUrl);\n    await this.loadSegment();\n    await this.loadLocation();\n    await this.loadDiscountItem();\n    await this.loadEmployeeCenter();\n    await this.loadPaymentTerm();\n    await this.loadAccount();\n    await this.loadPriceLevel();\n    await this.loadOtherCharge();\n    await this.loadPurchaseFormContent();\n    await this.initData();\n  },\n};\n</script>\n\n<style scoped>\n.k-dropdown {\n  width: 100%;\n  margin-top: 3px;\n}\n\n.function_wrapper {\n  box-shadow: none !important;\n}\n\n.v-application--is-ltr .v-text-field .v-input__append-inner {\n  margin-top: 0 !important;\n}\n\n.v-input__slot {\n  background-color: #fff !important;\n}\n\n.function_content .label {\n  margin-bottom: 10px;\n  display: inline-block;\n}\n\n.border_radius10 {\n  border-radius: 10px !important;\n  background-color: #f2f2f2;\n}\n\n.pa-3.v-card h4 {\n  font-size: 18px;\n  color: #333;\n}\n\n.pa-3.v-card p {\n  font-size: 12px;\n  color: #b5b5b5;\n}\n\n.attachment_file {\n  background-color: #efeded;\n  border-radius: 0 !important;\n}\n\n.attachment_table.v-data-table table {\n  border: thin solid rgba(0, 0, 0, 0.12);\n}\n\n.attachment_table table tr th {\n  border-left: thin solid rgba(0, 0, 0, 0.12);\n  height: 35px;\n  border-right: thin solid rgba(0, 0, 0, 0.12);\n}\n\n.block_debit,\n.block_credit {\n  border-bottom: 1px solid #fff;\n}\n\n.block_debit p.number,\n.block_credit p.number {\n  font-size: 25px;\n  color: #7f7f7f;\n}\n\n.block_debit h5,\n.block_credit h5,\n.block_difference h5 {\n  text-transform: uppercase;\n  color: #7f7f7f;\n  font-size: 15px;\n  font-weight: normal;\n}\n\n.block_difference h5 {\n  font-size: 18px;\n}\n\n.block_difference h5 span {\n  font-size: 15px;\n}\n\n.custom_grid table th:last-child {\n  text-align: right !important;\n}\n\n@media (min-width: 1264px) {\n  .container {\n    max-width: 1250px;\n  }\n}\n\n@media (max-width: 576px) {\n  .pt-6.col-sm-5.col-12 {\n    padding-top: 0 !important;\n  }\n\n  .code_text {\n    width: 100%;\n  }\n\n  .phone_no_pt {\n    padding-top: 0 !important;\n  }\n\n  .select_template,\n  .save_option {\n    margin-bottom: 10px;\n  }\n}\n\n.hide_small_bar_class {\n  max-width: 0;\n  transition: 0.5s ease-in;\n  flex: 0 0 0;\n}\n\n.hide_big_bar_class {\n  max-width: 100%;\n  transition: 0.5s ease-in;\n  flex: 0 0 100%;\n}\n\n.info_add {\n  background-color: #ffffff;\n}\n\n.small_sidebar {\n  height: 98%;\n  position: relative;\n  padding: 12px;\n  background-color: #edf1f5;\n}\n\n.iconArrow {\n  right: -35px;\n  position: absolute;\n  bottom: -10px;\n}\n\n.iconArrowHide {\n  position: absolute;\n  right: -7px;\n  bottom: -10px;\n}\n\n.color_grey {\n  color: #808080;\n}\n\n.card_green {\n  min-height: 70px;\n  background-color: #00b050 !important;\n  color: #ffffff;\n}\n\n.lb_bold {\n  font-size: 12px;\n}\n\n.detial_smallside_p {\n  position: absolute;\n  bottom: 10px;\n}\n\n.card_background {\n  background-color: #edf1f5;\n  min-height: 120px;\n}\n\n.deposite_input {\n  width: 100px;\n}\n\n.btn_save_draft {\n  color: #ffffff;\n  background-color: #00b0f0 !important;\n  text-transform: capitalize;\n}\n\n.save_option {\n  background-color: #203864 !important;\n}\n\n.btn_add_small {\n  height: 27px !important;\n  min-width: 25px !important;\n  font-size: 10px;\n  padding: 0 22px !important;\n  background-color: #00b050 !important;\n  color: #ffffff;\n  border-radius: 0 !important;\n}\n\n.list_site_inv {\n  background-color: #92d050;\n  color: #ffffff;\n  font-size: 12px;\n}\n\n.list_site_exp {\n  background-color: #c5e0b4;\n  color: #000000;\n  font-size: 12px;\n  line-height: 16px;\n  min-height: 40px;\n}\n\n.checkbox_inv {\n  padding: 2px;\n  margin-top: 3px;\n  margin-right: 2px;\n}\n\n.exp_select {\n  font-size: 12px !important;\n}\n\n.theme--light.v-data-table\n  > .v-data-table__wrapper\n  > table\n  > tbody\n  > tr:hover:not(.v-data-table__expanded__content):not(.v-data-table__empty-wrapper) {\n  background-color: transparent !important;\n}\n</style>\n"]}]}