{"remainingRequest":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/macos/Desktop/banhji-0.2/banhji-commerce/src/views/compliance/monthly_tax/new_tax_return/newTaxReturn.vue?vue&type=style&index=0&id=24cd93d7&scoped=true&lang=css&","dependencies":[{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/src/views/compliance/monthly_tax/new_tax_return/newTaxReturn.vue","mtime":1640595536796},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/@vue/cli-service/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLmZ1bmN0aW9uX2NvbnRlbnQgewogICAgcGFkZGluZzogMCAxMnB4IDEycHg7CiAgICBib3JkZXItYm90dG9tOiAwOwogICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZiAhaW1wb3J0YW50Owp9CgoubV9hdXRvIHsKICAgIG1hcmdpbjogYXV0bzsKfQoKQG1lZGlhIChtaW4td2lkdGg6IDEyNjRweCkgewogICAgLmNvbnRhaW5lciB7CiAgICAgICAgLyogbWF4LXdpZHRoOiAxMTg1cHg7ICovCiAgICAgICAgbWF4LXdpZHRoOiAxMDgwcHggIWltcG9ydGFudDsKICAgIH0KfQoKLmdyYXlCZyB7CiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjRjhGOEY5Owp9CgpAbWVkaWEgKG1heC13aWR0aDogNTc2cHgpIHsKICAgIC5tYi02IHsKICAgICAgICBtYXJnaW4tYm90dG9tOiAwICFpbXBvcnRhbnQ7CiAgICB9Cn0KCi5ib3JkZXJfZ3JleSB7CiAgICBib3JkZXI6IDFweCBzb2xpZCAjZDZkN2Q4Owp9CgouYXR0YWNobWVudF90YWJsZSB7CiAgICB3aWR0aDogMTAwJTsKfQoKLm15X2NoZWNrYm94IGlucHV0W3R5cGU9Y2hlY2tib3hdICsgbGFiZWwgewogICAgZGlzcGxheTogZ3JpZDsKICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogMjAlIDgwJTsKICAgIG1hcmdpbjogMC4yZW0gMHB4OwogICAgY3Vyc29yOiBwb2ludGVyOwogICAgbGluZS1oZWlnaHQ6IDE2cHg7CiAgICBwYWRkaW5nOiAwLjJlbTsKfQo="},{"version":3,"sources":["newTaxReturn.vue"],"names":[],"mappingswpCA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"newTaxReturn.vue","sourceRoot":"src/views/compliance/monthly_tax/new_tax_return","sourcesContent":["<template>\n    <v-app>\n        <v-container>\n            <v-row>\n                <v-col cols=\"12\" sm=\"12\">\n                    <v-card\n                        outlined\n                        dense\n                        class=\"pa-4 no_border rounded-sm\"\n                        color=\"white\">\n                        <v-form ref=\"form\" v-model=\"valid\" lazy-validation>\n                            <v-card outlined dense class=\"no_border\">\n                                <h2 class=\"mb-0\">{{ $t('make_new_monthly_return') }}</h2>\n                                <v-icon\n                                    @click=\"onClose\"\n                                    style=\"cursor: pointer; color: #333; font-size: 40px;\"\n                                    class=\"float-right\"\n                                >close\n                                </v-icon>\n\n                            </v-card>\n\n                            <v-row>\n                                <v-col sm=\"12\" cols=\"12\">\n                                    <div class=\"function_content\">\n                                        <v-form ref=\"form\" v-model=\"valid\" lazy-validation>\n                                            <div>\n                                                <v-row>\n                                                    <v-col sm=\"4\" class=\"py-0\">\n                                                        <label>{{ $t('for_the_month_of') }}</label>\n                                                        <v-menu\n                                                            v-model=\"menu\"\n                                                            :disabled=\"DateState\"\n                                                            class=\"mt-1\"\n                                                            :close-on-content-click=\"false\"\n                                                            max-width=\"290\">\n                                                            <template v-slot:activator=\"{ on,attrs }\">\n                                                                <v-text-field class=\"disable_alert my-0 mt-1\"\n                                                                              v-model=\"monthlyReturn.monthOf\"\n                                                                              readonly\n                                                                              outlined\n                                                                              :disabled=\"DateState\"\n                                                                              append-icon=\"event\"\n                                                                              v-on=\"on\"\n                                                                              v-bind=\"attrs\"\n                                                                              @click:clear=\"monthlyReturn.monthOf\"\n                                                                              @click:append=\"menu = true\"\n                                                                              required/>\n                                                            </template>\n                                                            <v-date-picker\n                                                                :type=\"'month'\"\n                                                                @change=\"menu = false\"\n                                                                v-model=\"monthlyReturn.monthOf\"\n                                                                no-title\n                                                            />\n                                                        </v-menu>\n                                                    </v-col>\n                                                    <v-col sm=\"5\" class=\"py-0 mt-5 px-0\">\n                                                        <v-btn :disabled=\"DateState\" @click=\"startReturn\"\n                                                               class=\"ma-1 ml-2\"\n                                                               color=\"primary white--text text-capitalize\">\n                                                            {{ $t('start_new_return') }}\n                                                        </v-btn>\n                                                    </v-col>\n                                                </v-row>\n                                            </div>\n                                            <div v-if=\"start_return\">\n                                                <v-divider/>\n                                                <v-card elevation=\"0\" class=\"pa-3 mt-3\" color=\"grayBg\">\n                                                    <v-row>\n                                                        <v-col class=\"py-0\" cols=\"12\" sm=\"4\">\n                                                            <label>{{ $t('submission_id') }}</label>\n                                                            <v-row class=\"pt-1 pb-0\">\n                                                                <v-col sm=\"3\" cols=\"3\" class=\"py-0 pr-0\">\n                                                                    <div class=\"code_text text-uppercase\">\n                                                                        {{ monthlyReturn.abbr }}\n                                                                    </div>\n                                                                </v-col>\n                                                                <v-col sm=\"9\" cols=\"8\" class=\"py-0 pl-0 pr-1\">\n                                                                    <v-text-field\n                                                                        v-model=\"monthlyReturn.number\"\n                                                                        disabled\n                                                                        class=\"custom-border \"\n                                                                        outlined\n                                                                        :rules=\"[(v) => !!v || 'Number is required']\"\n                                                                        required\n                                                                    />\n                                                                </v-col>\n                                                            </v-row>\n                                                        </v-col>\n                                                        <v-col class=\"py-0\" cols=\"12\" sm=\"4\">\n                                                            <p class=\"mb-0 mt-5\">\n                                                                {{ $t('approved_exch_rate_month') }}</p>\n                                                        </v-col>\n                                                        <v-col class=\"py-0\" cols=\"12\" sm=\"4\">\n                                                            <h3 class=\"primary--text font_20 mt-5\">\n                                                                {{ numberFormat(this.$store.state.institute.institute.baseCurrency.code !== 'KHR' ? 1/(currency.rate) : currency.rate) }}</h3>\n                                                        </v-col>\n                                                    </v-row>\n                                                </v-card>\n                                                <v-row>\n                                                    <v-col sm=\"2\" class=\"align-center justify-center d-flex \">\n                                                        <div>\n                                                            <v-card @click=\"ClickSteps(1)\" width=\"44\" height=\"44\"\n                                                                    outlined dense :color=\"activeColor1\"\n                                                                    class=\"pointer  m_auto no_border align-center justify-center d-flex rounded-circle \">\n                                                                <h3 class=\"mt-2 white--text\" style=\"font-size: 24px\">\n                                                                    1</h3>\n                                                            </v-card>\n                                                            <p class=\"text-uppercase mt-2\">{{ $t('input') }}</p>\n                                                        </div>\n                                                    </v-col>\n                                                    <v-col sm=\"2\" class=\"align-center justify-center d-flex \">\n                                                        <div>\n                                                            <v-card @click=\"ClickSteps(2)\" width=\"44\" height=\"44\"\n                                                                    outlined dense :color=\"activeColor2\"\n                                                                    class=\"pointer m_auto no_border align-center justify-center d-flex rounded-circle \">\n                                                                <h3 class=\"mt-2 white--text\" style=\"font-size: 24px\">\n                                                                    2</h3>\n                                                            </v-card>\n                                                            <p class=\"text-uppercase mt-2\">{{ $t('review') }}</p>\n                                                        </div>\n                                                    </v-col>\n                                                    <v-col sm=\"2\" class=\"align-center justify-center d-flex \">\n                                                        <div>\n                                                            <v-card @click=\"ClickSteps(3)\" width=\"44\" height=\"44\"\n                                                                    outlined dense :color=\"activeColor3\"\n                                                                    class=\"pointer m_auto  no_border align-center justify-center d-flex rounded-circle \">\n                                                                <h3 class=\"mt-2 white--text\" style=\"font-size: 24px\">\n                                                                    3</h3>\n                                                            </v-card>\n                                                            <p class=\"text-uppercase mt-2\">{{ $t('confirm') }}</p>\n                                                        </div>\n                                                    </v-col>\n                                                    <v-col sm=\"2\" class=\"align-center justify-center d-flex \">\n                                                        <div>\n                                                            <v-card @click=\"new ClickSteps(4)\" width=\"44\" height=\"44\"\n                                                                    outlined dense :color=\"activeColor4\"\n                                                                    class=\"pointer m_auto  no_border align-center justify-center d-flex rounded-circle \">\n                                                                <h3 class=\"mt-2 white--text\" style=\"font-size: 24px\">\n                                                                    4</h3>\n                                                            </v-card>\n                                                            <p class=\"text-uppercase mt-2\">{{ $t('finalize') }}</p>\n                                                        </div>\n                                                    </v-col>\n                                                </v-row>\n                                                <v-divider/>\n                                                <!-- Body function to input -->\n                                                <div v-show=\"steps===1\">\n                                                    <InputTab :currency=\"currency\" :monthlyReturn=\"monthlyReturn\"\n                                                              @getSale=\"getInputSale\"\n                                                              @getPurchase=\"getInputPurchase\"\n                                                              @getSalary=\"getSalary\"\n                                                              @getWithholding=\"getWithholding\"/>\n                                                </div>\n                                                <!-- Steps 2 Adjustemnt -->\n                                                <div v-show=\"steps===2\">\n                                                    <ReviewTab :monthlyReturn=\"monthlyReturn\"\n                                                               :sale=\"sales\"\n                                                               :currency=\"currency\"\n                                                               :purchase=\"purchases\"\n                                                               :salary=\"salaries\"\n                                                               :withholding=\"withholdings\"\n                                                               @getOtherAmount=\"getOtherAmount\"\n                                                               @getAmountWht=\"getAmountWht\"\n                                                               @getTaxSalary=\"getAmountSalary\"\n                                                               @getTaxBenefit=\"getAmountTax\"\n                                                               @getAmountSaleExcul=\"getAmountSaleExcul\"\n                                                               @getTotalAmountPurchase=\"getTotalAmountPurchase\"\n                                                               @getAmountPurchaseExcul=\"getAmountPurchaseExcul\"\n                                                               @getAmountSale=\"getAmountSale\"\n                                                               :alertForm2=\"AlertValidate2\"/>\n                                                </div>\n                                                <!-- Steps there -->\n                                                <div v-show=\"steps===3\">\n                                                    <Confirm :currency=\"currency\" :monthlyReturn=\"monthlyReturn\"\n                                                             :totalAmountPurchase=\"amountTotalPurchase\"\n                                                             :otherAmount=\"otherAmount\"\n                                                             :amountPurchaseExcul=\"amountPurchaseExcul\"\n                                                             :amountSalary=\"amountSalary\"\n                                                             :amountBenefit=\"amountBenefit\"\n                                                             :amountSaleExcul=\"amountSaleExcul\" :amountSale=\"amountSale\"\n                                                             :amountWht=\"amountWht\" @getStep=\"getStep\"\n                                                             @getTotalAmountPaid=\"getTotalAmountPaid\"\n                                                             @getBalanceVat=\"getBalanceVat\"\n                                                             @getBalancePpi=\"getBalancePpi\"/>\n                                                </div>\n                                                <div v-show=\"steps===4\">\n                                                    <Finalize :sale=\"sales\" :purchase=\"purchases\"\n                                                              :salary=\"salaries\"\n                                                              :withholding=\"withholdings\" :monthlyReturn=\"monthlyReturn\"\n                                                              @getDatePurchase=\"getDatePurchase\"\n                                                              @getPurchase=\"getFinalPurchase\"\n                                                              @getDateWht=\"getDateWht\"\n                                                              @getDateSale=\"getDateSale\"/>\n                                                </div>\n                                            </div>\n                                        </v-form>\n                                    </div>\n                                </v-col>\n                            </v-row>\n                            <div class=\"function_footer px-4\">\n                                <!-- Warning Message -->\n                                <v-btn color=\"black\" class=\"float-left  white--text\">{{\n                                        $t('cancel')\n                                    }}\n                                </v-btn>\n                                <v-btn :disabled=\"!start_return\" class=\"float-right  btn_save_close\"\n                                       @click=\"nextStpes\">\n                                    {{ $t(save_next) }}\n                                </v-btn>\n                                <v-btn v-if=\"steps >= 1 && this.monthlyReturn.number !== ''\" @click=\"saveDraft\"\n                                       class=\"float-right mx-3 capitalize white--text \" color=\"primary\">\n                                    {{ $t('save_draft') }}\n                                </v-btn>\n                            </div>\n                        </v-form>\n                    </v-card>\n                </v-col>\n            </v-row>\n            <LoadingMe\n                :isLoading=\"showLoading\"\n                :fullPage=\"true\"\n                :type=\"'loading'\"\n                :myLoading=\"true\"\n            />\n        </v-container>\n    </v-app>\n</template>\n\n<script>\nimport LoadingMe from '@/components/Loading'\nimport MonthlyReturn from \"@/scripts/compliance/model/MonthlyReturn\";\nimport {i18n} from \"@/i18n\";\nimport kendo from '@progress/kendo-ui'\nimport {uuid} from 'vue-uuid'\nimport taxSettingHandler from \"@/scripts/taxSettingHandler\";\nconst monthlyReturnHandler = require(\"@/scripts/compliance/handler/monthlyReturnHandler\")\nconst saleHandler = require(\"@/scripts/compliance/handler/saleHandler\")\nconst purchaseHandler = require(\"@/scripts/compliance/handler/purchaseHandler\")\nconst salaryHandler = require(\"@/scripts/compliance/handler/salaryHandler\")\nconst withholdingHandler = require(\"@/scripts/compliance/handler/withholdingTaxHandler\")\nconst monthlyReturn = new MonthlyReturn({})\nconst prefixHandler = require(\"@/scripts/compliance/handler/prefixHandler\")\nconst summaryHandler = require(\"@/scripts/compliance/handler/summaryHandler\")\nconst currencyHandler = require(\"@/scripts/currency/handler/currencyHandler\")\nconst apiUrl = require('@/apiUrl')\n// const taxSetting = require('@/store/taxSetting');\nconst currencyType = {\n    TAX_EXCHANGE_CURRENCY: 'tax-c',\n}\n// const axios = require('axios')\nexport default {\n    name: \"TaxReturn\",\n    components: {\n        'LoadingMe': LoadingMe,\n        // 'month-picker': () => import('@/components/custom_templates/MonthPicker'),\n        InputTab: () => import('./input/InputTab'),\n        ReviewTab: () => import('./review/ReviewTab'),\n        Confirm: () => import('./confirm/ConfirmTab'),\n        Finalize: () => import('./finalize/Finalize')\n    },\n    data: () => ({\n        menu: false,\n        templates: [],\n        month: '',\n        showLoading: false,\n        valid: '',\n        bill_date: \"\",\n        journal_date: '',\n        steps: 1,\n        reachTopStep: 0,\n        check: false,\n        save_next: 'save_next',\n        activeColor1: \"primary\",\n        activeColor2: \"third\",\n        activeColor3: \"third\",\n        activeColor4: \"third\",\n        isFinal: false,\n        // third\n        check1: false,\n        check2: false,\n        check3: false,\n        payroll_id: '',\n        loadPayrolls: [],\n        // start_return: false,\n\n        isCreate: false,\n        transactionTypes: [],\n        monthlyReturn: monthlyReturn,\n        // isGetAmount: false,\n        AlertValidate2: false,\n\n        currency: {},\n        sales: [],\n        purchases: [],\n        salaries: [],\n        withholdings: [],\n        amountSale: 0,\n        amountSaleExcul: 0,\n        amountTotalPurchase: 0,\n        amountPurchaseExcul: 0,\n        amountWht: 0,\n        amountSalary: 0,\n        amountBenefit: 0,\n        otherAmount: 0,\n        totalAmountPaid: 0,\n        summary: {},\n        isRoute: false,\n        balanceVat: {},\n        balancePpi: {},\n        dateSale: '',\n        datePurchase: '',\n        dateWht: '',\n        dateSalary: '',\n        statusMr: false,\n        journalSummary: [],\n        listTaxs: []\n    }),\n    computed: {\n        start_return() {\n            return this.monthlyReturn.number !== '' && this.$route.params.id !== '';\n        },\n        id() {\n            if (this.$route.params.id) {\n                return this.$route.params.id\n            } else {\n                return ''\n            }\n        },\n        DateState() {\n            return this.$route.params.id !== undefined || this.$route.query.type === 'edit' || this.$route.query.type === 'view';\n        },\n        // listTaxs: {\n        //     set(listTax) {\n        //         taxSetting.default.commit(\"setListTax\", listTax)\n        //     },\n        //     get() {\n        //         return taxSetting.default.state.listTax\n        //     }\n        // },\n    },\n    watch: {\n        'id': 'initData',\n    },\n    beforeRouteLeave (to, from , next) {\n        if (to.name === 'Add Purchase' || to.name === 'Add Sale' || to.name === 'Add Withholding Tax') {\n            next()\n        } else {\n            const sales = this.$store.state.compliance.sale\n            if (sales.length > 0 && sales.filter(p => p.isSave === false)) {\n                this.$swal({\n                    title: i18n.t('msg_title_warning'),\n                    text: i18n.t('msg_leave'),\n                    icon: \"warning\",\n                    cancelButtonText: i18n.t('force_leave'),\n                    confirmButtonColor: \"#4d4848\",\n                    cancelButtonColor: \"#ED1A3A\",\n                    showDenyButton: true,\n                    confirmButtonText: i18n.t('leave'),\n                    showCancelButton: true,\n                    showCloseButton: true,\n                }).then(res => {\n                    if (res.isConfirmed || res.isDismissed && res.dismiss === 'cancel') {\n                        next()\n                        this.clear()\n                        this.amountSale = 0\n                        this.amountSaleExcul = 0\n                        this.amountPurchase = 0\n                        this.amountWht = 0\n                        this.otherAmount = 0\n                        this.totalAmountPaid = 0\n                    } else {\n                        next(false)\n                    }\n                    window.console.log(res, 'discard')\n                })\n            } else {\n                if (this.monthlyReturn.progress === '' && this.isRoute) {\n                    this.$swal({\n                        title: i18n.t('msg_title_warning'),\n                        text: i18n.t('msg_discard'),\n                        icon: \"warning\",\n                        showCancelButton: true,\n                        cancelButtonText: i18n.t('cancel'),\n                        confirmButtonColor: \"#4d4848\",\n                        cancelButtonColor: \"#ED1A3A\",\n                        confirmButtonText: i18n.t('discard'),\n                    }).then(res => {\n                        if (res.isConfirmed) {\n                            next()\n                            this.clear()\n                            this.amountSale = 0\n                            this.amountSaleExcul = 0\n                            this.amountPurchase = 0\n                            this.amountWht = 0\n                            this.otherAmount = 0\n                            this.totalAmountPaid = 0\n                        } else {\n                            next(false)\n                        }\n                    })\n                } else {\n                    next()\n                }\n            }\n        }\n    },\n    methods: {\n        async checkMonthlyReturn() {\n            monthlyReturnHandler.getByMonth(this.monthlyReturn.monthOf).then(res => {\n                window.console.log(res, 'get month123')\n                if (res.data.data === 1) {\n                    this.statusMr = true\n                }\n            })\n        },\n        getFinalPurchase(purchase) {\n            if (this.purchases.length === 0) {\n                this.purchases = purchase\n            }\n        },\n        getBalanceVat(balance) {\n            this.balanceVat = balance\n            window.console.log(this.balanceVat.credit, this.balanceVat.payment, 'balanceVat')\n        },\n        getBalancePpi(balance) {\n            this.balancePpi = balance\n            window.console.log(this.balancePpi, 'balancePpi')\n        },\n        getSummary(summary) {\n            window.console.log('new tax tab summary', summary)\n            this.summary = summary\n        },\n        getDateWht(date) {\n            this.dateWht = date\n        },\n        getSalary(salary) {\n            this.salaries = salary\n        },\n        getDatePurchase(date) {\n            this.datePurchase = date\n        },\n        getDateSale(date) {\n            this.dateSale = date\n        },\n        getTotalAmountPaid(amount) {\n            this.totalAmountPaid = amount\n        },\n        getOtherAmount(amount) {\n            this.otherAmount = amount\n        },\n        getAmountSaleExcul(saleExcul) {\n            window.console.log('new tax tab sale excul', saleExcul)\n            this.amountSaleExcul = saleExcul\n        },\n        getWithholding(withholding) {\n            window.console.log('new tax tab withholding', withholding)\n            this.withholdings = withholding\n        },\n        getAmountSalary(amount) {\n            window.console.log('new tax tab salary', amount)\n            this.amountSalary = amount\n        },\n        getAmountTax(amount) {\n            window.console.log('new tax tab benefit', amount)\n            this.amountBenefit = amount\n        },\n        getInputPurchase(purchase) {\n            window.console.log('new tax tab purchase', purchase)\n            this.purchases = purchase\n        },\n        getInputSale(sale) {\n            window.console.log('new tax tab sale', sale)\n            this.sales = sale\n        },\n        getAmountWht(amount) {\n            window.console.log('new tax tab wht', amount)\n            this.amountWht = amount\n        },\n        getStep(step) {\n            this.steps = step\n            if (this.reachTopStep <= this.steps) {\n                this.reachTopStep = this.steps\n            }\n            this.stepsCondition(this.steps)\n        },\n        getTotalAmountPurchase(amount) {\n            this.amountTotalPurchase = amount\n            window.console.log(this.amountTotalPurchase, 'New Tax Tab Purchase')\n        },\n        getAmountPurchaseExcul(amount) {\n            this.amountPurchaseExcul = amount\n        },\n        getAmountSale(amount) {\n            this.amountSale = amount\n            window.console.log(this.amountSale, 'New Tax Tab Sale')\n        },\n        async initData() {\n            this.showLoading = true\n            if (this.$route.params.id !== undefined && this.$route.params.monthlyReturn === undefined) {\n                await this.onLoadOneReturn()\n                window.console.log(this.steps)\n            } else if (this.$route.params.monthlyReturn !== undefined) {\n                this.monthlyReturn = this.$route.params.monthlyReturn\n                if (this.monthlyReturn.status.id === 2) {\n                    this.$router.push({\n                        name: 'View Tax Return',\n                        path: 'view_monthly_return/' + this.monthlyReturn.id,\n                        params: {id: this.monthlyReturn.id, monthlyReturn: this.monthlyReturn},\n                        query: {type: 'view'}\n                    })\n                }\n                window.console.log(this.monthlyReturn, 'dafasdf34')\n                this.initLocalStorage(this.monthlyReturn.abbr, this.monthlyReturn.number)\n                const step = JSON.parse(localStorage.getItem(this.monthlyReturn.abbr + this.monthlyReturn.number + '&Step'))\n                let steps = 1\n                if (this.monthlyReturn.step !== '') {\n                    steps = this.monthlyReturn.step\n                }\n                if (step > 0) {\n                    window.console.log('step12', step)\n                    if (this.monthlyReturn.step > step) {\n                        steps = this.monthlyReturn.step\n                    } else {\n                        steps = step\n                    }\n                }\n                this.steps = steps\n                if (this.reachTopStep <= this.steps) {\n                    this.reachTopStep = this.steps\n                }\n                this.stepsCondition(this.steps)\n                // this.start_return = true\n                this.showLoading = false\n                window.console.log(this.steps)\n            } else {\n                this.clear()\n            }\n        },\n        clear() {\n            this.monthlyReturn = new MonthlyReturn({})\n            this.showLoading = false\n        },\n        initLocalStorage(abbr, number) {\n            const sale = JSON.parse(localStorage.getItem(abbr + number + '&Sale'))\n            const purchase = JSON.parse(localStorage.getItem(abbr + number + '&Purchase'))\n            const withholding = JSON.parse(localStorage.getItem(abbr + number + '&Withholding'))\n            const salary = JSON.parse(localStorage.getItem(abbr + number + '&Salary'))\n            const step = JSON.parse(localStorage.getItem(abbr + number + '&Step'))\n            if (sale === null) {\n                localStorage.setItem(abbr + number + '&Sale', JSON.stringify([]))\n            }\n            if (purchase === null) {\n                localStorage.setItem(abbr + number + '&Purchase', JSON.stringify([]))\n            }\n            if (withholding === null) {\n                localStorage.setItem(abbr + number + '&Withholding', JSON.stringify([]))\n            }\n            if (salary === null) {\n                localStorage.setItem(abbr + number + '&Salary', JSON.stringify([]))\n            }\n            if (step === null) {\n                localStorage.setItem(abbr + number + '&Step', JSON.stringify(1))\n            }\n        },\n        onClose() {\n            const sales = this.$store.state.compliance.sale\n            const purchases = this.$store.state.compliance.purchase\n            const withholding = this.$store.state.compliance.withholding\n            if (sales.length > 0 && sales.filter(p => p.isSave === false) || purchases.length > 0 && purchases.filter(p => p.isSave === false) || withholding.length > 0 && withholding.filter(p => p.isSave === false)) {\n                this.$swal({\n                    title: i18n.t('msg_title_warning'),\n                    text: i18n.t('msg_leave'),\n                    icon: \"warning\",\n                    cancelButtonText: i18n.t('force_leave'),\n                    confirmButtonColor: \"#4d4848\",\n                    cancelButtonColor: \"#ED1A3A\",\n                    showDenyButton: true,\n                    confirmButtonText: i18n.t('leave'),\n                    showCancelButton: true,\n                    showCloseButton: true,\n                }).then(res => {\n                    if (res.isConfirmed || res.isDismissed && res.dismiss === 'cancel') {\n                        this.clean()\n                    }\n                    window.console.log(res, 'discard')\n                })\n            } else {\n                if (this.monthlyReturn.progress === '' && this.isRoute) {\n                    this.$swal({\n                        title: i18n.t('msg_title_warning'),\n                        text: i18n.t('msg_discard'),\n                        icon: \"warning\",\n                        showCancelButton: true,\n                        cancelButtonText: i18n.t('cancel'),\n                        confirmButtonColor: \"#4d4848\",\n                        cancelButtonColor: \"#ED1A3A\",\n                        confirmButtonText: i18n.t('discard'),\n                    }).then(res => {\n                        if (res.isConfirmed) {\n                            this.clean()\n                        }\n                    })\n                }\n            }\n\n            // const sale = JSON.parse(localStorage.getItem(this.monthlyReturn.abbr + this.monthlyReturn.number + '&Sale'))\n            // const purchase = JSON.parse(localStorage.getItem(this.monthlyReturn.abbr + this.monthlyReturn.number + '&Purchase'))\n            // const withholding = JSON.parse(localStorage.getItem(this.monthlyReturn.abbr + this.monthlyReturn.number + '&Withholding'))\n            // const salary = JSON.parse(localStorage.getItem(this.monthlyReturn.abbr + this.monthlyReturn.number + '&Salary'))\n            // const step = JSON.parse(localStorage.getItem(this.monthlyReturn.abbr + this.monthlyReturn.number + '&Step'))\n            // if (sale === null) {\n            //     localStorage.setItem(this.monthlyReturn.abbr + this.monthlyReturn.number + '&Sale', JSON.stringify([]))\n            // }\n            // if (purchase === null) {\n            //     localStorage.setItem(this.monthlyReturn.abbr + this.monthlyReturn.number + '&Purchase', JSON.stringify([]))\n            // }\n            // if (withholding === null) {\n            //     localStorage.setItem(this.monthlyReturn.abbr + this.monthlyReturn.number + '&Withholding', JSON.stringify([]))\n            // }\n            // if (salary === null) {\n            //     localStorage.setItem(this.monthlyReturn.abbr + this.monthlyReturn.number + '&Salary', JSON.stringify([]))\n            // }\n            // if (step === null) {\n            //     localStorage.setItem(this.monthlyReturn.abbr + this.monthlyReturn.number + '&Step', JSON.stringify(1))\n            // }\n            // if (sale !== null || purchase !== null || withholding !== null || salary !== null) {\n            //     if (sale.length > 0 || purchase.length > 0 || withholding.length > 0 || salary.length > 0) {\n            //         this.$swal({\n            //             title: i18n.t('msg_title_warning'),\n            //             text: i18n.t('msg_leave'),\n            //             icon: \"warning\",\n            //             cancelButtonText: i18n.t('force_leave'),\n            //             confirmButtonColor: \"#4d4848\",\n            //             cancelButtonColor: \"#ED1A3A\",\n            //             showDenyButton: true,\n            //             confirmButtonText: i18n.t('leave'),\n            //             showCancelButton: true,\n            //             showCloseButton: true,\n            //         }).then(res => {\n            //             if (res.isConfirmed) {\n            //                 localStorage.setItem(this.monthlyReturn.abbr + this.monthlyReturn.number + '&Step', this.steps)\n            //                 this.clean()\n            //             } else if (res.isDismissed && res.dismiss === 'cancel') {\n            //                 localStorage.removeItem(this.monthlyReturn.abbr + this.monthlyReturn.number + '&Sale')\n            //                 localStorage.removeItem(this.monthlyReturn.abbr + this.monthlyReturn.number + '&Purchase')\n            //                 localStorage.removeItem(this.monthlyReturn.abbr + this.monthlyReturn.number + '&Salary')\n            //                 localStorage.removeItem(this.monthlyReturn.abbr + this.monthlyReturn.number + '&Withholding')\n            //                 localStorage.removeItem(this.monthlyReturn.abbr + this.monthlyReturn.number + '&Step')\n            //                 this.clean()\n            //             }\n            //             window.console.log(res, 'discard')\n            //         })\n            //     } else {\n            //         if (this.monthlyReturn.progress === '' && this.isRoute) {\n            //             this.$swal({\n            //                 title: i18n.t('msg_title_warning'),\n            //                 text: i18n.t('msg_discard'),\n            //                 icon: \"warning\",\n            //                 showCancelButton: true,\n            //                 cancelButtonText: i18n.t('cancel'),\n            //                 confirmButtonColor: \"#4d4848\",\n            //                 cancelButtonColor: \"#ED1A3A\",\n            //                 confirmButtonText: i18n.t('discard'),\n            //             }).then(res => {\n            //                 if (res.isConfirmed) {\n            //                     localStorage.removeItem(this.monthlyReturn.abbr + this.monthlyReturn.number + '&Sale')\n            //                     localStorage.removeItem(this.monthlyReturn.abbr + this.monthlyReturn.number + '&Purchase')\n            //                     localStorage.removeItem(this.monthlyReturn.abbr + this.monthlyReturn.number + '&Salary')\n            //                     localStorage.removeItem(this.monthlyReturn.abbr + this.monthlyReturn.number + '&Withholding')\n            //                     localStorage.removeItem(this.monthlyReturn.abbr + this.monthlyReturn.number + '&Step')\n            //                     this.clean()\n            //                 }\n            //                 window.console.log(res, 'discard')\n            //             })\n            //         } else {\n            //             this.clean()\n            //         }\n            //     }\n            // }\n        },\n        clean() {\n            this.clear()\n            this.amountSale = 0\n            this.amountSaleExcul = 0\n            this.amountPurchase = 0\n            this.amountWht = 0\n            this.otherAmount = 0\n            this.totalAmountPaid = 0\n            // this.start_return = false\n            if (!this.isRoute) {\n                this.isRoute = false\n                window.history.go(-1)\n\n            } else {\n                this.isRoute = false\n                window.history.go(-1)\n                window.history.go(-1)\n            }\n\n        },\n        async loadCurrencyData(type) {\n            new Promise(resolve => {\n                setTimeout(() => {\n                    resolve('resolved')\n                    this.showLoading = true\n                    currencyHandler.list(type).then(response => {\n                        if (response.data.statusCode === 200) {\n                            window.console.log('response','')\n                            if (type === currencyType.TAX_EXCHANGE_CURRENCY) {\n                                this.currency = response.data.data[0]\n                            }\n                        }\n                    }).catch()\n                    {\n                        this.showLoading = false\n                    }\n                }, 300)\n            })\n        },\n        async onloadCurrency() {\n            const date = this.monthlyReturn.monthOf + '-' + '30'\n            const code = 'KHR'\n            currencyHandler.getLastExchangeRateTaxByDate(date, code).then(res => {\n                this.currency = res.data.data[0]\n                window.console.log(res, 'currency')\n            })\n        },\n        async onLoadOneReturn() {\n            new Promise(resolve => {\n                setTimeout(() => {\n                    resolve('resolved');\n                    const id = this.$route.params.id\n                    monthlyReturnHandler.getOne(id).then(res => {\n                        window.console.log(res, 'data load monthly return')\n                        this.monthlyReturn = res.data.data[0]\n                        if (this.monthlyReturn.status.id === 2) {\n                            this.$router.push({\n                                name: 'View Tax Return',\n                                path: 'view_monthly_return/' + this.monthlyReturn.id,\n                                params: {id: this.monthlyReturn.id, monthlyReturn: this.monthlyReturn},\n                                query: {type: 'view'}\n                            })\n                        }\n                        window.console.log(this.monthlyReturn)\n                        this.initLocalStorage(this.monthlyReturn.number)\n                        this.steps = this.monthlyReturn.step\n                        if (this.reachTopStep <= this.steps) {\n                            this.reachTopStep = this.steps\n                        }\n                        this.stepsCondition(this.steps)\n                        // this.start_return = true\n                        this.showLoading = false\n                    })\n                })\n            })\n        },\n        async startReturn() {\n            this.showLoading = true\n            await this.checkMonthlyReturn()\n            if (this.statusMr) {\n                this.$snotify.error('This month of is exist')\n                this.statusMr = false\n                this.showLoading = false\n                return\n            }\n            await this.generateNumber()\n            // this.start_return = true\n        },\n        async loadPrefix() {\n            prefixHandler.get('monthly return').then(res => {\n                if (res.data.statusCode === 200) {\n                    this.transactionTypes = res.data.data\n                    if (this.transactionTypes.length > 0) {\n                        this.monthlyReturn.transactionType = this.transactionTypes[0]\n                    }\n                }\n            })\n        },\n        async generateNumber() {\n            if (this.monthlyReturn.transactionType.abbr === undefined) {\n                await this.loadPrefix()\n            }\n            new Promise(resolve => {\n                setTimeout(() => {\n                    resolve('resolved');\n                    let data = {\n                        abbr: this.monthlyReturn.transactionType.abbr,\n                        structure: this.monthlyReturn.transactionType.structure,\n                        transactionDate: this.monthlyReturn.monthOf,\n                        sequcencing: this.monthlyReturn.transactionType.sequcencing,\n                        type: 'Monthly Return',\n                    }\n                    this.monthlyReturn.abbr = data.abbr\n                    this.monthlyReturn.structure = data.structure\n                    this.monthlyReturn.sequcencing = data.sequcencing\n                    this.monthlyReturn.type = data.type\n                    this.monthlyReturn.transactionDate = data.transactionDate\n                    prefixHandler.lastNumber(data).then(async response => {\n                        if (response.data.statusCode === 200) {\n                            const res = response.data.data\n                            const lastNumber = this.zeroPad(parseInt(res.lastNumber), this.monthlyReturn.transactionType.format)\n                            this.monthlyReturn.number = res.suffix + this.monthlyReturn.transactionType.numberSeparator + lastNumber\n                            this.monthlyReturn.lastNumber = res.suffix + lastNumber\n                            window.console.log(this.monthlyReturn.number, 'monthly return')\n                            // await this.saveReturn()\n\n                            this.monthlyReturn.id = `mr-${uuid.v1()}`\n                            this.monthlyReturn.status = {id: 1, name: 'Drafted'}\n                            this.monthlyReturn.editDate = new Date().toISOString().substr(0, 10)\n                            this.monthlyReturn.amountPaid = 0\n                            this.monthlyReturn.exChangeRate = 4000\n                            this.monthlyReturn.step = 1\n                            window.console.log('monthly return', this.monthlyReturn)\n                            this.$router.push({\n                                path: 'new_tax_return' + `/${this.monthlyReturn.id}`,\n                                name: 'New Tax Return',\n                                params: {id: this.monthlyReturn.id, monthlyReturn: this.monthlyReturn},\n                                query: {type: 'edit'}\n                            })\n                            this.isRoute = true\n                            if (this.monthlyReturn.progress === '' && this.isRoute) {\n                                window.addEventListener('beforeunload', function (event) {\n                                    event.returnValue = 'Please make sure you already save draft'\n                                })\n                                window.removeEventListener('beforeunload', function (event) {\n                                    event.returnValue = ''\n                                })\n                            }\n                            this.showLoading = false\n                        }\n                    }).catch(e => {\n                        window.console.error(e)\n                    })\n                    this.menu = false\n                }, 300)\n            })\n        },\n        zeroPad(num, places) {\n            return String(num).padStart(places, '0')\n        },\n        async loadListTax() {\n            await taxSettingHandler.get(apiUrl.tax_setting.tax_list_get, \"listTax\", \"setListTax\")\n        },\n        async saveReturn() {\n            monthlyReturnHandler.create(this.monthlyReturn).then(res => {\n                window.console.log(res)\n                this.monthlyReturn = res.data.data\n                this.$router.push({\n                    path: 'new_tax_return' + `/${this.monthlyReturn.id}`,\n                    name: 'New Tax Return',\n                    params: {id: this.monthlyReturn.id},\n                    query: {type: 'edit'}\n                })\n                this.isCreate = true\n                this.showLoading = false\n            }).catch(e => {\n                window.console.error(e.message)\n            })\n        },\n        async saveDraft() {\n            this.showLoading = true\n            this.monthlyReturn.step = this.steps\n            let progressName = ''\n            if (this.steps === 1) {\n                progressName = 'Input'\n            } else if (this.steps === 2) {\n                progressName = 'Review'\n            } else if (this.steps === 3) {\n                progressName = 'Confirm'\n                this.monthlyReturn.amountPaid = this.totalAmountPaid.amount\n                if (this.totalAmountPaid.summary !== undefined) {\n                    this.totalAmountPaid.summary.monthOf = this.monthlyReturn.monthOf\n                    summaryHandler.create(this.totalAmountPaid.summary).then(res => {\n                        window.console.log(res, 'summary create')\n                    })\n                }\n                if (this.balanceVat.credit && this.balanceVat.credit > 0 || this.balanceVat.payment && this.balanceVat.payment > 0) {\n                    const data = {\n                        credit: this.balanceVat.credit,\n                        payment: this.balanceVat.payment,\n                        monthOf: this.monthlyReturn.monthOf,\n                        type: 'vat monthly',\n                        date: new Date().toJSON()\n                    }\n                    await monthlyReturnHandler.addTxnVAT(data, this.monthlyReturn.monthOf, 'monthly').then(res => {\n                        window.console.log(res)\n                    })\n                }\n                if (this.balancePpi.balance && this.balancePpi.balance > 0 || this.balancePpi.credit && this.balancePpi.credit > 0) {\n                    const data = {\n                        amount: this.balancePpi.balance,\n                        monthOf: this.monthlyReturn.monthOf,\n                        type: 'ppi monthly',\n                        date: new Date().toJSON()\n                    }\n                    await monthlyReturnHandler.addTxnPPI(data, this.monthlyReturn.monthOf, 'monthly').then(res => {\n                        window.console.log(res)\n                    })\n                }\n            } else if (this.steps === 4) {\n                await this.loadListTax()\n                window.console.log(this.sales, 'sales')\n                window.console.log(this.purchases, 'purchases')\n                window.console.log(this.withholdings, 'withholdings')\n                window.console.log(this.salaries, 'salaries')\n                let amtSale = 0, accSale = {},\n                    amtPurchase = 0, accPurchase = {},\n                    amtWht = 0, accWht = {},\n                    amtPPi = 0, accPPi = {},\n                    amtOther = 0, accOther = {},\n                    amtSalary = 0, accSalary = {},\n                    amtFBT = 0, accFBT = {}\n                window.console.log(this.listTaxs, progressName, 'listTax')\n                accSale = this.listTaxs.filter(o => o.taxType.typeId === 1 && o.transactionType === 'Sale')[0].account\n                accPurchase = this.listTaxs.filter(o => o.taxType.typeId === 1 && o.transactionType === 'Purchase')[0].account\n                accWht = this.listTaxs.filter(o => o.taxType.typeId === 2 && o.transactionType === 'Purchase')[0].account\n                accPPi = this.listTaxs.filter(o => o.taxType.typeId === 6)[0].account\n                accOther = this.listTaxs.filter(o => o.taxType.typeId === 7)[0].account\n                accSalary = this.listTaxs.filter(o => o.taxType.typeId === 3)[0].account\n                accFBT = this.listTaxs.filter(o => o.taxType.typeId === 4)[0].account\n                this.sales.forEach(i => {\n                    if (i.itemLine[0].taxName.accountId === accSale.id) {\n                        amtSale += i.totalVAT\n                    }\n                    if (i.itemLine[0].specificTax.accountId === accOther.id) {\n                        amtOther += i.totalSpecificTax\n                    }\n                    if (i.itemLine[0].pubTax.accountId === accOther.id) {\n                        amtOther += i.totalPubTax\n                    }\n                    if (i.itemLine[0].accomTax.accountId === accOther.id) {\n                        amtOther += i.totalAccomTax\n                    }\n                })\n                this.purchases.forEach(i => {\n                    if (i.itemLine[0].taxName.accountId === accPurchase.id) {\n                        amtPurchase += i.totalVAT\n                    }\n                })\n                this.withholdings.forEach(i => {\n                    if (i.itemLine[0].taxName.accountId === accWht.id) {\n                        amtWht += i.totalVAT\n                    }\n                })\n                this.salaries.forEach(i => {\n                    amtSalary += i.amountTaxSalary\n                    amtFBT += i.taxAmountBenefit\n                })\n                amtPPi = this.balancePpi.balance\n                if (this.journalSummary.length === 0) {\n                    this.journalSummary = [\n                        {\n                            id: `mr-${uuid.v1()}`,\n                            exchange_rate: this.currency.rate,\n                            currency: this.currency,\n                            account: accSale,\n                            amount: kendo.parseFloat(amtSale)\n                        },\n                        {\n                            id: `mr-${uuid.v1()}`,\n                            exchange_rate: this.currency.rate,\n                            currency: this.currency,\n                            account: accPurchase,\n                            amount: kendo.parseFloat(amtPurchase) * (-1)\n                        },\n                        {\n                            id: `mr-${uuid.v1()}`,\n                            exchange_rate: this.currency.rate,\n                            currency: this.currency,\n                            account: accWht,\n                            amount: amtWht\n                        },\n                        {\n                            id: `mr-${uuid.v1()}`,\n                            exchange_rate: this.currency.rate,\n                            currency: this.currency,\n                            account: accOther,\n                            amount: amtOther\n                        },\n                        {\n                            id: `mr-${uuid.v1()}`,\n                            exchange_rate: this.currency.rate,\n                            currency: this.currency,\n                            account: accPPi,\n                            amount: amtPPi\n                        },\n                        {\n                            id: `mr-${uuid.v1()}`,\n                            exchange_rate: this.currency.rate,\n                            currency: this.currency,\n                            account: accSalary,\n                            amount: amtSalary\n                        },\n                        {\n                            id: `mr-${uuid.v1()}`,\n                            exchange_rate: this.currency.rate,\n                            currency: this.currency,\n                            account: accFBT,\n                            amount: amtFBT\n                        }\n                    ]\n                }\n                window.console.log(this.journalSummary, 'journalSummary')\n                await monthlyReturnHandler.createJournal(this.journalSummary).then(res => {\n                    window.console.log(res, 'create journal monthly return')\n                })\n                window.console.log(amtSale, accSale, 'amount sale acc')\n                window.console.log(amtPurchase, accPurchase, 'amount purchase acc')\n                window.console.log(amtWht, accWht, 'amount wht acc')\n                window.console.log(amtOther, accOther, 'amount other acc')\n                window.console.log(amtPPi, accPPi, 'amount PPi acc')\n                window.console.log(amtSalary, accSalary, 'amount Salary acc')\n                progressName = 'Finalize'\n                this.monthlyReturn.amountPaid = this.totalAmountPaid.amount\n                if (this.totalAmountPaid.summary !== undefined) {\n                    this.totalAmountPaid.summary.monthOf = this.monthlyReturn.monthOf\n                    summaryHandler.create(this.totalAmountPaid.summary).then(res => {\n                        window.console.log(res, 'summary create')\n                    })\n                }\n                if (this.balanceVat.credit && this.balanceVat.credit > 0 || this.balanceVat.payment && this.balanceVat.payment > 0) {\n                    const data = {\n                        credit: this.balanceVat.credit,\n                        payment: this.balanceVat.payment,\n                        monthOf: this.monthlyReturn.monthOf,\n                        type: 'vat monthly',\n                        date: new Date().toJSON()\n                    }\n                    await monthlyReturnHandler.addTxnVAT(data, this.monthlyReturn.monthOf, 'monthly').then(res => {\n                        window.console.log(res)\n                    })\n                }\n                if (this.balancePpi.balance && this.balancePpi.balance > 0 || this.balancePpi.credit && this.balancePpi.credit > 0) {\n                    const data = {\n                        amount: this.balancePpi.balance,\n                        monthOf: this.monthlyReturn.monthOf,\n                        type: 'ppi monthly',\n                        date: new Date().toJSON()\n                    }\n                    await monthlyReturnHandler.addTxnPPI(data, this.monthlyReturn.monthOf, 'monthly').then(res => {\n                        window.console.log(res)\n                    })\n                }\n                this.monthlyReturn.dateSale = this.dateSale.date\n                this.monthlyReturn.datePurchase = this.datePurchase.date\n                this.monthlyReturn.dateWht = this.dateWht.date\n                this.monthlyReturn.dateSalary = this.dateSalary.date\n                this.monthlyReturn.amountDlSale = this.dateSale.amount\n                this.monthlyReturn.amountDlPurchase = this.datePurchase.amount\n                this.monthlyReturn.amountDlWht = this.dateWht.amount\n                this.monthlyReturn.amountDlSalary = this.dateSalary.amount\n            }\n            this.monthlyReturn.progress = progressName\n            window.console.log(this.monthlyReturn, 'monthlyReturn')\n            await monthlyReturnHandler.create(this.monthlyReturn).then(async res => {\n                window.console.log(res)\n                this.monthlyReturn = res.data.data\n                if (this.sales.length > 0) {\n                    await saleHandler.create(this.sales).then(res => {\n                        localStorage.removeItem(this.monthlyReturn.abbr + this.monthlyReturn.number + '&Sale')\n                        window.console.log(res)\n                    })\n                }\n                if (this.purchases.length > 0) {\n                    await purchaseHandler.create(this.purchases).then(res => {\n                        localStorage.removeItem(this.monthlyReturn.abbr + this.monthlyReturn.number + '&Purchase')\n                        window.console.log(res)\n                    })\n                }\n                if (this.withholdings.length > 0) {\n                    await withholdingHandler.create(this.withholdings).then(res => {\n                        localStorage.removeItem(this.monthlyReturn.abbr + this.monthlyReturn.number + '&Withholding')\n                        window.console.log(res)\n                    })\n                }\n                if (this.salaries.length > 0) {\n                    await salaryHandler.create(this.salaries).then(res => {\n                        localStorage.removeItem(this.monthlyReturn.abbr + this.monthlyReturn.number + '&Salary')\n                        window.console.log(res)\n                    })\n                }\n                // localStorage.setItem(this.monthlyReturn.abbr + this.monthlyReturn.number + '&Sale', JSON.stringify([]))\n                // localStorage.setItem(this.monthlyReturn.abbr + this.monthlyReturn.number + '&Purchase', JSON.stringify([]))\n                // localStorage.setItem(this.monthlyReturn.abbr + this.monthlyReturn.number + '&Withholding', JSON.stringify([]))\n                // localStorage.setItem(this.monthlyReturn.abbr + this.monthlyReturn.number + '&Salary', JSON.stringify([]))\n                // localStorage.setItem(this.monthlyReturn.abbr + this.monthlyReturn.number + '&Step', JSON.stringify(this.steps))\n            //     this.showLoading = false\n            }).catch(e => {\n                window.console.error(e.message)\n            })\n        },\n        async nextStpes() {\n            if (this.steps == 4) {\n                this.save_next = \"confirm_close\"\n                await this.saveDraft()\n                // await this.clean()\n            } else {\n                this.save_next = \"confirm_next\"\n                this.steps = this.steps + 1\n                if (this.reachTopStep <= this.steps) {\n                    this.reachTopStep = this.steps\n                }\n                this.stepsCondition(this.steps)\n            }\n        },\n        async ClickSteps(step) {\n            if (this.steps === step) {\n                return\n            }\n            if (step > this.reachTopStep) {\n                return\n            }\n            if (step !== 4) {\n                this.save_next = \"confirm_next\"\n            } else {\n                this.save_next = \"confirm_close\"\n            }\n            this.steps = step\n            this.stepsCondition(this.steps)\n        },\n        stepsCondition(val) {\n            switch (val) {\n                case 1:\n                    this.activeColor1 = \"primary\"\n                    this.activeColor2 = \"third\"\n                    this.activeColor3 = \"third\"\n                    this.activeColor4 = \"third\"\n                    break\n                case 2:\n                    this.activeColor1 = \"third\"\n                    this.activeColor2 = \"primary\"\n                    this.activeColor3 = \"third\"\n                    this.activeColor4 = \"third\"\n                    break\n                case 3:\n                    this.activeColor1 = \"third\"\n                    this.activeColor2 = \"third\"\n                    this.activeColor3 = \"primary\"\n                    this.activeColor4 = \"third\"\n                    break\n                default:\n                    this.activeColor1 = \"third\"\n                    this.activeColor2 = \"third\"\n                    this.activeColor3 = \"third\"\n                    this.activeColor4 = \"primary\"\n                    this.isFinal = true\n                    this.save_next = \"confirm_close\"\n                    break\n            }\n        },\n        numberFormat(value) {\n            // window.console.log(this.saleFormContent.decimal,'nimol')\n            if (value >= 0) {\n                return value.toLocaleString()\n            } else {\n                return value\n            }\n\n        },\n    },\n    created() {\n        this.loadListTax()\n    },\n    async mounted() {\n        await this.onloadCurrency()\n        // await this.loadCurrencyData(currencyType.TAX_EXCHANGE_CURRENCY)\n        await this.initData()\n        await this.loadPrefix()\n    },\n}\n\n</script>\n\n<style scoped>\n.function_content {\n    padding: 0 12px 12px;\n    border-bottom: 0;\n    background-color: #fff !important;\n}\n\n.m_auto {\n    margin: auto;\n}\n\n@media (min-width: 1264px) {\n    .container {\n        /* max-width: 1185px; */\n        max-width: 1080px !important;\n    }\n}\n\n.grayBg {\n    background-color: #F8F8F9;\n}\n\n@media (max-width: 576px) {\n    .mb-6 {\n        margin-bottom: 0 !important;\n    }\n}\n\n.border_grey {\n    border: 1px solid #d6d7d8;\n}\n\n.attachment_table {\n    width: 100%;\n}\n\n.my_checkbox input[type=checkbox] + label {\n    display: grid;\n    grid-template-columns: 20% 80%;\n    margin: 0.2em 0px;\n    cursor: pointer;\n    line-height: 16px;\n    padding: 0.2em;\n}\n</style>\n"]}]}