{"remainingRequest":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/src/views/payroll/employee/TimesheetAddListRecord.vue?vue&type=style&index=0&id=20fb148b&scoped=true&lang=css&","dependencies":[{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/src/views/payroll/employee/TimesheetAddListRecord.vue","mtime":1638499443253},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/@vue/cli-service/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgouc21hbGxfc2lkZWJhciB7CiAgICBoZWlnaHQ6IDk3JTsKICAgIHBvc2l0aW9uOiByZWxhdGl2ZTsKICAgIHBhZGRpbmc6IDEycHg7Cn0KLmhpZGVfc21hbGxfYmFyX2NsYXNzIHsKICAgIG1heC13aWR0aDogMDsKICAgIHRyYW5zaXRpb246IC41cyBlYXNlLWluOwogICAgZmxleDogMCAwIDA7CiAgICBwYWRkaW5nOiAwOwp9CgouaGlkZV9iaWdfYmFyX2NsYXNzIHsKICAgIG1heC13aWR0aDogMTAwJTsKICAgIHRyYW5zaXRpb246IC41cyBlYXNlLWluOwogICAgZmxleDogMCAwIDEwMCU7Cn0KLmljb25BcnJvdyB7CiAgICByaWdodDogLTM1cHg7CiAgICBwb3NpdGlvbjogYWJzb2x1dGU7CiAgICBib3R0b206IC0xMHB4Owp9Ci5pY29uQXJyb3dIaWRlIHsKICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICAgIHJpZ2h0OiAtN3B4OwogICAgYm90dG9tOiAtMTBweDsKfQoudGhlbWUtLWxpZ2h0LnYtZGF0YS10YWJsZSA+IC52LWRhdGEtdGFibGVfX3dyYXBwZXIgPiB0YWJsZSA+IHRib2R5ID4gdHI6aG92ZXI6bm90KC52LWRhdGEtdGFibGVfX2V4cGFuZGVkX19jb250ZW50KTpub3QoLnYtZGF0YS10YWJsZV9fZW1wdHktd3JhcHBlcil7CiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudCAhaW1wb3J0YW50Owp9Ci5kZXRpYWxfc21hbGxzaWRlX3B7CiAgICBwb3NpdGlvbjogYWJzb2x1dGU7CiAgICBib3R0b206IDEwcHg7Cn0gICAKLmstc2Nyb2xsYmFyIC5rLXNjcm9sbGJhci12ZXJ0aWNhbCAuay1ncmlkLWhlYWRlcnsKICAgIHdpZHRoOiAwcHghaW1wb3J0YW50OwogICAgcGFkZGluZy1yaWdodDogMTZweCFpbXBvcnRhbnQ7CiAgICAKfQo="},{"version":3,"sources":["TimesheetAddListRecord.vue"],"names":[],"mappingsktBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","file":"TimesheetAddListRecord.vue","sourceRoot":"src/views/payroll/employee","sourcesContent":["<template>\n    <v-app>\n        <v-container>\n            <v-row>\n                <v-col cols=\"12\" sm=\"12\">\n                    <v-card outlined dense class=\"pa-4 no_border rounded-sm\" color=\"white\">\n                        <v-form ref=\"form\" lazy-validation>\n                            <v-card outlined dense class=\"no_border\">\n                                <h2 class=\"mb-0\">{{ $t('timesheet') }}</h2>\n                                <v-icon\n                                        onclick=\"window.history.go(-1); return false;\"\n                                        style=\"cursor: pointer; color: #333; font-size: 40px;\"\n                                        class=\"float-right\"\n                                >close\n                                </v-icon>\n                            </v-card>\n                            <v-card outlined dense class=\"px-3 no_border\" color=\"grayBg\" height=\"92px\">\n                                <v-row>\n                                    <v-col sm=\"4\" cols=\"12\" class=\"pb-0\">\n                                        <label class=\"label\">{{ $t('employee_name') }}</label>\n                                        <v-text-field class=\"mt-1\"\n                                            outlined\n                                            v-model=\"name\"\n                                            tage=\"Employee Name\"\n                                            readonly/>\n                                    </v-col>\n                                    <v-col sm=\"4\" cols=\"12\" class=\"pb-0\">\n                                        <label class=\"label\">{{ $t('business_unit_branch') }}</label>\n                                        <v-select class=\"mt-1\"\n                                            outlined\n                                            :items=\"location\"\n                                            item-text=\"name\"\n                                            item-value=\"id\"\n                                            v-model=\"locationSelected\"\n                                            tage=\"Business Unit/Branch\"\n                                            return-object/>\n                                    </v-col>\n                                    <v-col sm=\"4\" cols=\"12\" class=\"pb-0\">\n                                        <label class=\"label\">{{$t('for_the_month_of')}}</label>\n                                        <month-picker :initialMonth=\"monthOf\" @emitMonth=\"monthOf = $event\"/>\n                                    </v-col>\n                                </v-row>\n                            </v-card>\n                            <v-card outlined dense class=\"no_border\" color=\"white\">\n                                <v-row>\n                                    <v-col sm=\"12\" cols=\"12\" class=\"pt-3\">\n                                        <kendo-datasource ref=\"dataSource\"\n                                            :data=\"timesheetList\"\n                                            :change=\"onChanges\"/>\n                                        <kendo-grid id=\"gridTimesheetList\" class=\"grid-function\"\n                                            :data-source-ref=\"'dataSource'\"\n                                            :editable=\"true\"\n                                            :scrollable-virtual=\"true\">\n                                            <kendo-grid-column\n                                                :field=\"'no'\"\n                                                :title=\"$t('no')\"\n                                                :template=\"rowNumberTmpl\"\n                                                :width=\"60\"\n                                                :editable=\"() => {return false;}\"\n                                                :column-menu=\"false\"\n                                                :headerAttributes=\"{ style: 'background-color: #EDF1F5;', class: 'text-center'\t}\"\n                                                :attributes=\"{style: 'text-align: center'}\"/>\n                                            <kendo-grid-column\n                                                    :field=\"'date'\"\n                                                    :title=\"$t('date')\"\n                                                    :width=\"120\"\n                                                    :template=\"'<span>#= kendo.toString(new Date(date), `yyyy-MM-dd`)#</span>'\"\n                                                    :editor=\"TimesheetDateEditor\"\n                                                    :headerAttributes=\"{\n                                                        style: 'background-color: #EDF1F5'\n                                                    }\"/>\n                                            <kendo-grid-column\n                                                    :field=\"'checkIn'\"\n                                                    :title=\"$t('check_in')\"\n                                                    :width=\"120\"\n                                                    :template=\"'<span>#= kendo.toString(new Date(checkIn), `HH:mm tt`)#</span>'\"\n                                                    :editor=\"TimesheetCheckInEditor\"\n                                                    :headerAttributes=\"{\n                                                        style: 'background-color: #EDF1F5'\n                                                    }\"/>\n                                            <kendo-grid-column\n                                                    :field=\"'checkOut'\"\n                                                    :title=\"$t('check_out')\"\n                                                    :width=\"120\"\n                                                    :template=\"'<span>#= kendo.toString(new Date(checkOut), `HH:mm tt`)#</span>'\"\n                                                    :editor=\"TimesheetcheckOutEditor\"\n                                                    :headerAttributes=\"{\n                                                        style: 'background-color: #EDF1F5'\n                                                    }\"/>\n                                            <kendo-grid-column\n                                                    :field=\"'hours'\"\n                                                    :title=\"$t('hours')\"\n                                                    :width=\"100\"\n                                                    :editable=\"() => {return false;}\"\n                                                    :headerAttributes=\"{style: 'text-align: right; background-color: #EDF1F5'}\"/>\n                                             <kendo-grid-column\n                                                    :field=\"'overTimeType'\"\n                                                    :title=\"$t('over_time')\"\n                                                    :width=\"120\"\n                                                    :template=\"'<span>#=overTimeType.name#</span>'\"\n                                                    :editor=\"overTimeDropDownEditor\"\n                                                    :headerAttributes=\"{ style: 'background-color: #EDF1F5' }\"/>\n                                            <kendo-grid-column\n                                                    :field=\"'typeOFWork'\"\n                                                    :title=\"$t('type_of_work')\"\n                                                    :width=\"200\"\n                                                    :template=\"'<span>#=typeOFWork.name#</span>'\"\n                                                    :editor=\"typeOfWordDropDownEditor\"\n                                                    :headerAttributes=\"{ style: 'background-color: #EDF1F5' }\"/>\n                                            <kendo-grid-column\n                                                    :field=\"'specificWork'\"\n                                                    :title=\"$t('specific_work')\"\n                                                    :width=\"150\"\n                                                    :template=\"'<span>#=specificWork.name ? specificWork.name: ``#</span>'\"\n                                                    :editor=\"spesificDropDownEditor\"\n                                                    :headerAttributes=\"{ style: 'background-color: #EDF1F5' }\"/>\n                                            <kendo-grid-column\n                                                    :field=\"'engagement_project'\"\n                                                    :title=\"$t('engagement_project')\"\n                                                    :width=\"240\"\n                                                    :template=\"'<span>#=engagement_project.name || ``#</span>'\"\n                                                    :editor=\"projectDropDownEditor\"\n                                                    :headerAttributes=\"{style: 'text-align: right; background-color: #EDF1F5'}\"/>\n                                            <kendo-grid-column\n                                                    :field=\"'description'\"\n                                                    :title=\"$t('description')\"\n                                                    :width=\"250\"\n                                                    :headerAttributes=\"{style: 'text-align: right; background-color: #EDF1F5'}\"/>\n                                            <kendo-grid-column\n                                                    :width=\"60\"\n                                                    :command=\"{ iconClass: 'k-icon k-i-trash', text: ' ', click: removeRow, class: 'btn-plus' }\"\n                                                    :title=\"$t('action')\"\n                                                    :headerAttributes=\"{style: 'text-align: center; background-color: #EDF1F5'}\"\n                                                    :attributes=\"{style: 'text-align: center'}\"/>\n                                        </kendo-grid>\n                                        <v-btn color=\"primary\"\n                                               class=\"float-left rounded-0 white--text mt-3\"\n                                               @click=\"addRow\">\n                                            <v-icon size=\"\" class=\"ma-1\">mdi-plus</v-icon>\n                                        </v-btn>\n                                    </v-col>\n                                </v-row>\n                            </v-card>\n                            <v-divider/>\n                            <v-card outlined dense class=\"no_border function_footer\">\n                                <v-btn color=\"primary\" class=\"float-right white--text text-capitalize \" @click=\"onSaveClose\">\n                                    {{$t('save')}}\n                                </v-btn>\n                                <v-btn color=\"black\"  class=\"text-capitalize  white--text float-left\" @click=\"cancel\">{{$t('cancel')}}</v-btn>\n                            </v-card>\n                        </v-form>\n                    </v-card>\n                </v-col>\n            </v-row>\n            <LoadingMe\n                :isLoading=\"showLoading\"\n                :fullPage=\"true\"\n                :myLoading=\"true\"/>\n        </v-container>\n    </v-app>\n</template>\n\n<script>\n    import Timesheet from \"@/scripts/model/Timesheet\";\n    import TimesheetLine from \"@/scripts/model/TimesheetLine\";\n    import kendo from \"@progress/kendo-ui\";\n    const timesheetModel = new Timesheet({})\n    const timesheetLineModel = new TimesheetLine({})\n    const employeeHandler = require(\"@/scripts/employeeHandler\")\n    const locationHandler = require(\"@/scripts/locationHandler\")\n    const payrollHandler = require(\"@/scripts/payrollHandler\")\n    const projectHandler = require(\"@/scripts/projectHandler\")\n    const $ = require(\"jquery\")\n    const cookieJS = require(\"@/cookie.js\");\n    const cookie = cookieJS.getCookie();\n    export default {\n        name: \"AddTimesheet\",\n        props: ['id'],\n        components: {\n            LoadingMe: () => import(`@/components/Loading`),\n            'month-picker' : ()=> import('@/components/custom_templates/MonthPicker')\n        },\n        data: () => ({\n            showLoading: false,\n            locationSelected: '',\n            location:[],\n            name:'',\n            monthOf: '',\n            timesheet: timesheetModel,\n            timesheetLine: timesheetLineModel,\n            date: new Date().toISOString().substr(0, 7),\n            menu: false,\n            modal: false,\n            is_month: false,\n            specificWork: {\n                'name': ''\n            },\n            timesheetList: [\n            ],\n            engagement_project:{\n                name: ''\n            },\n            mTypeOFWork: {},\n            mSpesificWork: {},\n            mProject: {\n                name: ''\n            },\n            period: {\n                id:                         '',\n                paymentPeriod:              {},\n                hourPerDay:                 0,\n                overtimeForWeekend:         0,\n                overtimeForNationalHoliday: 0,\n                dayToPayroll:               0,\n                workingDay:                 0,\n                overtimeNight:              0,\n                nightTime:                  0,\n            },\n            leaves: [],\n            overTimeType:[\n                { id: \"none\", name: \"N/A\"},\n                { id: \"weekend\", name: \"Weekend\"},\n                { id: \"national_holiday\", name: \"National Holiday\"},\n                { id: \"night\", name: \"Night\"}\n            ],\n            overTime: {\n                overTimeWeekend:           0,\n                overTimeNationalHoliday:   0,\n                overTimeNight:             0,\n                totalOverTime:          0,\n                workingHours:           0,\n                workingTime:            0,\n                totalUnpaid:            0,\n            },\n            loggedUser: {\n                id: cookie.creator,\n                name: cookie.email\n            },\n            project: []\n        }),\n        methods: {\n            TimesheetDateEditor(container, options) {\n                kendo.jQuery('<input required name=\"' + options.field + '\"/>')\n                    .appendTo(container)\n                    .kendoDatePicker()\n            },\n            TimesheetCheckInEditor(container, options){\n                kendo.jQuery('<input id=\"timeIn\" required name=\"' + options.field + '\"/>')\n                    .appendTo(container)\n                    .kendoTimePicker()\n            },\n            TimesheetcheckOutEditor(container, options){\n                kendo.jQuery('<input required name=\"' + options.field + '\"/>')\n                    .appendTo(container)\n                    .kendoTimePicker()\n            },\n            onChanges(e){\n                let dataRow = e.items[0]\n                if (e.field === \"typeOFWork\") {\n                    this.typeofworkclick = e.items[0].typeOFWork\n                    this.loadSpecificByType(this.typeofworkclick.id)\n                }\n                if(e.field === \"checkIn\"){\n                    let cin = dataRow.checkIn\n                    let cinM = cin.getTime()\n                    this.CIN = cinM\n                }\n                if(e.field === \"checkOut\"){\n                    let cOut = dataRow.checkOut\n                    let cOutM = cOut.getTime()\n                    this.COUT = cOutM\n                }\n                this.hours = parseFloat((this.COUT - this.CIN) / (1000 * 60 * 60));\n                if(this.hours){\n                    dataRow.set('hours',this.hours)\n                }\n                this.autoCalculate()\n            },\n            async loadSpecificByType(id){\n                new Promise(resolve => {\n                    setTimeout(() => {\n                        resolve('resolved');\n                        payrollHandler.getSpecificByType(id).then(res => {\n                            if(res.data.statusCode === 200){\n                                this.spesificWork = res.data.data\n                                if(this.spesificWork.length > 0){\n                                    this.mSpesificWork = this.spesificWork[0]\n                                }\n                            }\n                        })\n                    }, 300);\n                })\n            },\n            async loadLocation() {\n                 new Promise(resolve => {\n                    setTimeout(() => {\n                        resolve('resolved');\n                        locationHandler.list().then(res => {\n                            if(res.data.statusCode === 200){\n                                this.location = res.data.data\n                                if(this.location.length > 0){\n                                    this.locationSelected = this.location[0]\n                                }\n                            }\n                        })\n                    }, 300);\n                })\n            },\n            async loadProject() {\n                 new Promise(resolve => {\n                    setTimeout(() => {\n                        resolve('resolved');\n                        projectHandler.list().then(res => {\n                            if(res.data.statusCode === 200){\n                                this.project = res.data.data\n                                if(this.project.length > 0){\n                                    this.mProject  = this.project[0]\n                                }\n                            }\n                        })\n                    }, 300);\n                })\n            },\n            rowNumberTmpl(dataItem) {\n                var ds = this.$refs.dataSource.kendoWidget(),\n                    index = ds.indexOf(dataItem);\n                return index + 1;\n            },\n            addRow() {\n                let ds = this.$refs.dataSource.kendoWidget(),\n                    total = ds.total();\n                ds.insert(total, {\n                    date: new Date(),\n                    hours: 0,\n                    overTimeType: {\n                        id: 'none', \n                        name: 'None'\n                    },\n                    checkIn: new Date(),\n                    checkOut: new Date(),\n                    typeOFWork: this.mTypeOFWork,\n                    specificWork: this.mSpesificWork,\n                    engagement_project: {\n                        name: ''\n                    },\n                    description: '',\n                });\n            },\n            removeRow(e) {\n                e.preventDefault();\n                const grid = kendo.jQuery(\"#gridTimesheetList\").data(\"kendoGrid\"),\n                    dataSource = grid.dataSource,\n                    dataItem = grid.dataItem($(e.currentTarget).closest(\"tr\"));\n                if (dataSource.total() > 1) {\n                    dataSource.remove(dataItem);\n                }\n            },\n            async loadTypeOfWork() {\n                new Promise(resolve => {\n                    setTimeout(() => {\n                        resolve('resolved');\n                        payrollHandler.getTypeOfWork().then(res => {\n                            if(res.statusCode === 200){\n                                this.typeOFWork = res.data\n                                if(this.typeOFWork.length > 0){\n                                    let resultType = this.typeOFWork.filter(word => word.name ==\"Administration\")\n                                    this.mTypeOFWork = resultType[0]\n                                    window.console.log(this.mTypeOFWork)\n                                    this.loadSpecificByType(this.mTypeOFWork.id)\n                                    this.initData()\n                                }\n                            }\n                        })\n                    }, 300);\n                })\n            },\n            overTimeDropDownEditor(container, options){\n                kendo.jQuery('<input name=\"' + options.field + '\"/>')\n                .appendTo(container)\n                .kendoDropDownList({\n                    autoBind: false,\n                    autoWidth: true,\n                    height: 400,\n                    dataTextField: \"name\",\n                    dataValueField: \"id\",\n                    template: \"<span>#=name#</span>\",\n                    optionLabel: \"--- Select ---\",\n                    dataSource: new kendo.data.DataSource({\n                       data: this.overTimeType,\n                    })\n                })\n            },\n            typeOfWordDropDownEditor(container, options) {\n                kendo.jQuery('<input name=\"' + options.field + '\"/>')\n                .appendTo(container)\n                .kendoDropDownList({\n                    autoBind: false,\n                    autoWidth: true,\n                    height: 400,\n                    dataTextField: \"name\",\n                    dataValueField: \"id\",\n                    template: \"<span>#=name#</span>\",\n                    optionLabel: \"--- Select ---\",\n                    dataSource: new kendo.data.DataSource({\n                        data: this.typeOFWork,\n                    })\n                })\n            },\n            spesificDropDownEditor(container, options) {\n                kendo.jQuery('<input name=\"' + options.field + '\"/>')\n                .appendTo(container)\n                .kendoDropDownList({\n                    autoBind: false,\n                    autoWidth: true,\n                    height: 400,\n                    dataTextField: \"name\",\n                    dataValueField: \"id\",\n                    template: \"<span>#=name#</span>\",\n                    optionLabel: \"--- Select ---\",\n                    dataSource: new kendo.data.DataSource({\n                       data: this.spesificWork,\n                    })\n                })\n            },\n            projectDropDownEditor(container, options){\n                kendo.jQuery('<input name=\"' + options.field + '\"/>')\n                .appendTo(container)\n                .kendoDropDownList({\n                    autoBind: true,\n                    autoWidth: true,\n                    height: 400,\n                    dataTextField: \"name\",\n                    dataValueField: \"name\",\n                    template: \"<span>#=name#</span>\",\n                    optionLabel: \"--- Select ---\",\n                    dataSource: new kendo.data.DataSource({\n                       data: this.project,\n                    })\n                })\n            },\n            calculateOvertime(){\n                let ds = this.$refs.dataSource.kendoWidget()\n                let timesheetData = ds.data()\n                let leave = {id: ''}\n                let timesheet_list = timesheetData.map(item => {\n                    leave      = item.specificWork.leave ? item.specificWork.leave: {id: ''}\n                    return {\n                        date:                 item.date ? item.date: ``,\n                        dateFormate:          kendo.toString(new Date(item.date),'yyyy-MM-dd'),\n                        hours:                item.hours ? item.hours: 0,\n                        checkIn:              item.checkIn ? item.checkIn: ``,\n                        checkOut:             item.checkOut ? item.checkOut: '',\n                        leaveId:              leave.id ? leave.id: '',\n                        overTimeType:         item.overTimeType ? item.overTimeType: {id: 'none', name: 'N/A'},\n                        nature:               item.specificWork.nature ? item.specificWork.nature: {},\n                        typeOFWork:           item.typeOFWork ? item.typeOFWork: {name: ''},\n                        specificWork:         item.specificWork ?item.specificWork: {name: ''},\n                        engagement_project:   item.engagement_project ? item.engagement_project: {name: ''},\n                        description:          item.description ? item.description: ``\n                    }\n                });\n                \n                let overTime_weekend            = 0\n                let overTime_national_holiday   = 0\n                let overTime_night              = 0\n                let working_hours               = 0\n                let total_unpaid                = 0\n                timesheet_list.forEach(k =>{\n                    if(k.overTimeType.id == 'weekend'){\n                        overTime_weekend += k.hours\n                    }else if(k.overTimeType.id == 'national_holiday'){\n                        overTime_national_holiday += k.hours\n                    }else if(k.overTimeType.id == 'night'){\n                        overTime_night += k.hours\n                    }else if(k.overTimeType.id == 'none' &&k.typeOFWork.name !='General' && k.typeOFWork.name != 'National Holiday/ Weekend'){\n                        working_hours += k.hours\n                    }\n                    if(k.nature.id == 'unpaid_hours'){\n                        total_unpaid    += k.hours\n                    }\n                })\n                let totalOverTime =            parseFloat(overTime_weekend) + parseFloat(overTime_national_holiday) + parseFloat(overTime_night);\n                this.overTime = {\n                    overTimeWeekend:            parseFloat(overTime_weekend),\n                    overTimeNationalHoliday:    parseFloat(overTime_national_holiday),\n                    overTimeNight:              parseFloat(overTime_night),\n                    totalOverTime:              totalOverTime,\n                    totalUnpaid:                parseFloat(total_unpaid),\n                    workingHours:               parseFloat(working_hours),\n                    totalWorkinghours:          parseFloat(working_hours) + parseFloat(totalOverTime),\n                    defaultWorkingHours:        parseFloat(this.period.hourPerDay) * parseFloat(this.period.workingDay),\n                }\n                window.console.log('overTime',this.overTime)\n            },\n            onSaveClose(){\n                this.calculateOvertime()\n                this.showLoading = true\n                let ds = this.$refs.dataSource.kendoWidget()\n                let timesheetData = ds.data()\n                let leave = {id: ''}\n                let timesheet_list = timesheetData.map(item => {\n                    leave      = item.specificWork.leave ? item.specificWork.leave: {id: ''}\n                    return {                 \n                        date:                 item.date ? item.date: ``,\n                        dateFormate:          kendo.toString(new Date(item.date),'yyyy-MM-dd'),\n                        hours:                item.hours ? item.hours: 0,\n                        checkIn:              item.checkIn ? item.checkIn: ``,\n                        checkOut:             item.checkOut ? item.checkOut: '',\n                        leaveId:              leave.id ? leave.id: '',\n                        typeOFWork:           item.typeOFWork ? item.typeOFWork: {name: ''},\n                        specificWork:         item.specificWork ?item.specificWork: {name: ''},\n                        overTimeType:         item.overTimeType ? item.overTimeType: {id: 'none', name: 'N/A'},\n                        engagement_project:   item.engagement_project ? item.engagement_project: {name: ''},\n                        description:          item.description ? item.description: ``\n                    }\n                });\n                let helper = {};\n                let results = timesheet_list.reduce(function(r, o) {\n                let key = o.dateFormate + o.leaveId; \n                if(!helper[key]) {\n                    helper[key] = Object.assign({}, o); // create a copy of o\n                    r.push(helper[key]);\n                } else {\n                    helper[key].hours             += o.hours;\n                }\n                return r;\n                }, []);\n                let results_timesheet = []\n                let leaves = this.leaves\n                results.forEach(index=>{\n                    let leave  = leaves.filter(i=>i.id === index.leaveId)\n                    window.console.log(1,index)\n                    results_timesheet.push({\n                        specificWork:       index.specificWork,\n                        hours:              index.hours,\n                        typeOFWork:         index.typeOFWork,\n                        dateFormate:        index.dateFormate,\n                        employeeUuid:       index.employeeUuid,\n                        leaveId:            index.leaveId,\n                        description:        index.description,\n                        leave:              leave[0] || {},\n                        engagement_project: index.engagement_project || {},\n                        type:               index.type\n\n                    })\n                })\n\n                if(timesheet_list.length > 0){\n                    let totalHN                  = this.totaleHoursByNature;\n                    this.paid_hours              = totalHN.paid_hours? totalHN.paid_hours: 0;\n                    this.unpaid_hours            = totalHN.unpaid_hours? totalHN.unpaid_hours: 0;\n                    this.overtime_hours_weekend  = totalHN.overtime_hours_weekend? totalHN.overtime_hours_weekend:0;\n                    this.overtime_hours_holiday  = totalHN.overtime_hours_holiday? totalHN.overtime_hours_holiday: 0;\n                    new Promise(resolve => {\n                        setTimeout(() => {\n                            resolve('resolved');\n                            let data = {\n                                id:                       this.timesheet.id || '',\n                                employee:                 this.employee ? this.employee : {},\n                                monthOf:                  kendo.toString(new Date(this.monthOf),'yyyy-MM-dd'),\n                                location:                 this.locationSelected,\n                                timeSheetRecord:          timesheet_list,\n                                results_timesheet:        results_timesheet,\n                                totalHours:               this.totalHours,\n                                totalHoursBytype:         this.totaleHoursByNature,\n                                paidHours:                this.paid_hours,\n                                unpaidHours:              this.unpaid_hours,\n                                period:                   this.period,\n                                overTime:                 this.overTime,\n                                overtimeHoursWeekend:     this.overTime.overTimeWeekend,\n                                overtimeHoursHoliday:     this.overTime.overTimeNationalHoliday,\n                                overTimeNight:            this.overTime.overTimeNight,\n                                totalOverTime:            this.overTime.totalOverTime,\n                                totalUnpaid:              this.overTime.totalUnpaid,\n                                totalWorkinghours:        this.overTime.totalWorkinghours,\n                                defaultWorkingHours:      this.overTime.defaultWorkingHours,\n                                loggedUser:               this.loggedUser\n                            }\n                            window.console.log(1,data)\n                            this.showLoading = true\n                            employeeHandler.createTimesheet(data).then(response => {\n                                this.showLoading = true\n                                if (response.data.statusCode === 201) {\n                                    this.$snotify.success('Success')\n                                    this.cancel()\n                                    this.showLoading = false\n                                }\n                            }).catch(e => {\n                                this.$snotify.error('Something went wrong')\n                                this.errors.push(e)\n                            })\n                        }, 300);\n                    })\n                }else {\n                    this.$snotify.error('Data not found')\n                }\n            },\n            cancel(){\n                this.timesheetList = ''\n                this.monthOf = kendo.toString(new Date(),'yyyy-MM-dd')\n                this.close()\n            },\n            close(){\n                window.history.go(-1)\n            },\n            async initData() {\n                if (this.$route.params.timesheet_id !== undefined) {\n                    await this.loadTimesheetSingle()\n                }else {\n                    let ds = this.$refs.dataSource.kendoWidget()\n                    ds.data([])\n                    this.addRow()\n                }\n            },\n            async loadSingleEmployee() {\n                new Promise(resolve => {\n                    setTimeout(() => {\n                        resolve('resolved');\n                        this.showLoading = true\n                        employeeHandler.get(this.$route.params.id).then(res => {\n                            this.showLoading = true\n                            if (res.data.statusCode === 200) {\n                                this.employee = res.data.data[0]\n                                if(this.employee){\n                                    this.showLoading = false\n                                    this.name = this.employee.employeeId +'-'+this.employee.firstName + ' ' + this.employee.lastName \n                                    let month_of = this.monthOf ? this.monthOf: new Date() \n                                    this.monthOf = kendo.toString(new Date(month_of),'yyyy-MM')\n                                    this.showLoading = false   \n                                }\n                                this.loadTypeOfWork()\n                            }\n                        })\n                    }, 300);\n                })\n            },\n            loadTimesheetSingle(){\n                new Promise(resolve => {\n                    setTimeout(() => {\n                        resolve('resolved');\n                        this.showLoading = true\n                        employeeHandler.getTimesheetSingle(this.$route.params.timesheet_id).then(res => {\n                            this.showLoading = true\n                            this.timesheetDS = res.data[0]\n                            if(this.timesheetDS){\n                                this.timesheet       = this.timesheetDS\n                                this.locationSelected    = this.timesheetDS.location \n                                this.monthOf = this.timesheetDS.monthOf\n                                this.timesheetList = this.timesheetDS.timeSheetRecord\n                            } \n                            let month_of = this.monthOf ? this.monthOf: new Date() \n                            this.monthOf = kendo.toString(new Date(month_of),'yyyy-MM')\n                            this.showLoading = false             \n                        })\n                    }, 300);\n                })\n            },\n            autoCalculate() {\n                let ds = this.$refs.dataSource.kendoWidget(),\n                    specificWorks = [],\n                    totalHours = 0;\n                    ds.data().forEach(value => {\n                        totalHours += kendo.parseFloat(value.hours)\n                        if(value.specificWork){\n                            if (value.specificWork.hasOwnProperty('id')) {\n                                specificWorks.push({\n                                    name: value.specificWork.nature.id,\n                                    hour: value.hours,\n                                    id: value.typeOFWork.id\n                                })\n\n                            }\n                        }\n                    })\n                    this.totalHours  = totalHours\n                    this.autoCalculateSpicificWork(specificWorks)\n            },\n            autoCalculateSpicificWork(works) {\n            // return by a key\n                const groupAll = list => list.reduce((works, item) => {\n                    const totalHours = works[item.name] || 0\n                    return Object.assign({}, works, {[item.name]: totalHours + parseFloat(item.hour)})\n                }, {})\n                this.totaleHoursByNature = groupAll(works)\n            },\n            async loadPeriod(){\n                new Promise(resolve => {\n                    setTimeout(() => {\n                        resolve('resolved');\n                        payrollHandler.getPeriiod().then(res => {\n                            this.period = res[0]\n                        })\n                    }, 300);\n                })\n            },\n            async loadLeave(){\n                new Promise(resolve => {\n                    setTimeout(() => {\n                        resolve('resolved');\n                        payrollHandler.getLeave().then(res => {\n                            if(res.statusCode === 200){\n                                this.leaves = res.data\n                            }\n                        })\n                    }, 300);\n                })\n            },\n        },\n        mounted: async function () {\n            await this.loadLocation()\n            await this.loadSingleEmployee()\n            await this.loadProject()\n            await this.loadPeriod()\n            await this.loadLeave()\n        },\n        watch: {\n            '$route': 'loadSingleEmployee'\n        }\n    }\n\n</script>\n<style scoped>\n    .small_sidebar {\n        height: 97%;\n        position: relative;\n        padding: 12px;\n    }\n    .hide_small_bar_class {\n        max-width: 0;\n        transition: .5s ease-in;\n        flex: 0 0 0;\n        padding: 0;\n    }\n\n    .hide_big_bar_class {\n        max-width: 100%;\n        transition: .5s ease-in;\n        flex: 0 0 100%;\n    }\n    .iconArrow {\n        right: -35px;\n        position: absolute;\n        bottom: -10px;\n    }\n    .iconArrowHide {\n        position: absolute;\n        right: -7px;\n        bottom: -10px;\n    }\n    .theme--light.v-data-table > .v-data-table__wrapper > table > tbody > tr:hover:not(.v-data-table__expanded__content):not(.v-data-table__empty-wrapper){\n        background-color: transparent !important;\n    }\n    .detial_smallside_p{\n        position: absolute;\n        bottom: 10px;\n    }   \n    .k-scrollbar .k-scrollbar-vertical .k-grid-header{\n        width: 0px!important;\n        padding-right: 16px!important;\n        \n    }\n</style>"]}]}