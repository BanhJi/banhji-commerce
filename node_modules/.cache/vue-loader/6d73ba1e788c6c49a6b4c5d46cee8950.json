{"remainingRequest":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/macos/Desktop/banhji-0.2/banhji-commerce/src/views/suppliers/RequestPayment.vue?vue&type=style&index=0&id=5fd6a619&scoped=true&lang=css&","dependencies":[{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/src/views/suppliers/RequestPayment.vue","mtime":1642155812741},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/@vue/cli-service/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi50aGVtZS0tbGlnaHQudi1kYXRhLXRhYmxlCj4gLnYtZGF0YS10YWJsZV9fd3JhcHBlcgo+IHRhYmxlCj4gdGJvZHkKPiB0cjpub3QoOmxhc3QtY2hpbGQpCj4gdGQ6bm90KC52LWRhdGEtdGFibGVfX21vYmlsZS1yb3cpLAoudGhlbWUtLWxpZ2h0LnYtZGF0YS10YWJsZQo+IC52LWRhdGEtdGFibGVfX3dyYXBwZXIKPiB0YWJsZQo+IHRib2R5Cj4gdHI6bm90KDpsYXN0LWNoaWxkKQo+IHRoOm5vdCgudi1kYXRhLXRhYmxlX19tb2JpbGUtcm93KSB7CiAgICBib3JkZXItYm90dG9tOiB0aGluIHNvbGlkICNkZmRmZGY7Cn0KCi50aGVtZS0tbGlnaHQudi1kYXRhLXRhYmxlCj4gLnYtZGF0YS10YWJsZV9fd3JhcHBlcgo+IHRhYmxlCj4gdGJvZHkKPiB0cjpsYXN0LWNoaWxkCnRkIHsKICAgIGJvcmRlci1ib3R0b206IHRoaW4gc29saWQgI2RmZGZkZjsKfQoKLnRoZW1lLS1saWdodC52LWRhdGEtdGFibGUKPiAudi1kYXRhLXRhYmxlX193cmFwcGVyCj4gdGFibGUKPiB0Ym9keQo+IHRyOmZpcnN0LWNoaWxkCnRkIHsKICAgIGJvcmRlci10b3A6IHRoaW4gc29saWQgI2RmZGZkZjsKfQoKLnYtZGF0YS10YWJsZSA+IC52LWRhdGEtdGFibGVfX3dyYXBwZXIgPiB0YWJsZSA+IHRib2R5ID4gdHIgPiB0ZCB7CiAgICBoZWlnaHQ6IDMycHggIWltcG9ydGFudDsKfQoKQG1lZGlhIChtaW4td2lkdGg6IDEyNjRweCkgewogICAgLmNvbnRhaW5lciB7CiAgICAgICAgbWF4LXdpZHRoOiAxMjgwcHggIWltcG9ydGFudDsKICAgIH0KfQo="},{"version":3,"sources":["RequestPayment.vue"],"names":[],"mappingsiDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"RequestPayment.vue","sourceRoot":"src/views/suppliers","sourcesContent":["<template>\n    <v-app>\n        <v-container>\n            <v-row>\n                <v-col cols=\"12\" sm=\"12\">\n                    <v-card\n                        outlined\n                        dense\n                        class=\"pa-4 no_border rounded-sm\"\n                        color=\"white\"\n                    >\n                        <v-form ref=\"form\" v-model=\"valid\" lazy-validation>\n                            <v-card outlined dense class=\"no_border mb-1\">\n                                <h2 class=\"mb-0 \">{{ $t(\"payment_request\") }}</h2>\n                                <v-icon\n                                    @click=\"cancel()\"\n                                    style=\"cursor: pointer; color: #333; font-size: 40px;\"\n                                    class=\"float-right\"\n                                >close\n                                </v-icon>\n                            </v-card>\n\n                            <v-card outlined dense class=\"px-3 no_border mb-3\" color=\"white\">\n                                <v-row style=\"background: #F8F8F9;\">\n                                    <v-col\n                                        sm=\"3\"\n                                        cols=\"12\"\n                                        class=\"kendo_dropdown_custom pt-3 pb-0\"\n                                    >\n                                        <label>{{ $t(\"vendor_name\") }}</label>\n                                        <vendor-dropdownlist\n                                            :initVendor=\"requestPayment.supplier\"\n                                            @emitVendor=\"requestPayment.supplier = $event\"\n                                            @onChange=\"onVendorChanged\"\n                                        />\n                                    </v-col>\n                                    <v-col\n                                        sm=\"3\"\n                                        cols=\"12\"\n                                        class=\"kendo_dropdown_custom pt-3 pb-0\"\n                                    >\n                                        <label>{{ $t(\"request_date\") }}</label>\n                                        <app-datepicker\n                                            :initialDate=\"requestPayment.transactionDate\"\n                                            @emitDate=\"requestPayment.transactionDate = $event\"\n                                        />\n                                    </v-col>\n                                    <v-col sm=\"4\">\n                                        <label>{{ $t(\"number\") }}</label>\n                                        <div class=\"d-flex mt-1\">\n                                            <div class=\"code_text flex-1 text-bold\">\n                                                {{ requestPayment.transactionType.abbr }}\n                                            </div>\n\n                                            <v-text-field\n                                                class=\" custom-border flex-2\"\n                                                v-model=\"requestPayment.number\"\n                                                outlined\n                                                disabled\n                                                :rules=\"[(v) => !!v || 'Number is required']\"\n                                                required\n                                            />\n                                            <v-icon\n                                                color=\"black\"\n                                                size=\"30\"\n                                                style=\" height: 40px;\"\n                                                class=\"border_qrcode ml-2\"\n                                                @click=\"generateNumber\"\n                                            >mdi-qrcode\n                                            </v-icon>\n                                        </div>\n                                    </v-col>\n                                    <v-col sm=\"1\" cols=\"1\" class=\"pb-0\">\n                                        <v-btn\n                                            color=\"primary mt-6 white--text\"\n                                            @click=\"searchPurchaseOrderExpense\"\n                                        >\n                                            <i\n                                                class=\"b-search\"\n                                                style=\"font-size: 15px; color:#fff !important;\"\n                                            />\n                                        </v-btn>\n                                    </v-col>\n                                </v-row>\n                                <v-row style=\"background: #F8F8F9;\"></v-row>\n                                <v-row>\n                                    <v-col cols=\"12\" class=\"pt-0\">\n                                        <template>\n                                            <LoadingMe\n                                                :isLoading=\"showLoading\"\n                                                :fullPage=\"false\"\n                                                :myLoading=\"true\"\n                                            />\n                                            <kendo-datasource\n                                                ref=\"itemLineDS\"\n                                                :change=\"onDataSourceChange\"\n                                                :schema=\"schemaDefinition\"\n                                                :data=\"itemLines\"\n                                            />\n                                            <kendo-grid\n                                                id=\"gridRequestPayment_\"\n                                                class=\"grid-function\"\n                                                :data-source-ref=\"'itemLineDS'\"\n                                                ref=\"gridRequestPayment\"\n                                                :sortable=\"false\"\n                                                :filterable=\"false\"\n                                                :column-menu=\"true\"\n                                                :editable=\"true\"\n                                                :change=\"onGridRequestChange\"\n                                                :noRecords=\"true\"\n                                            >\n                                                <kendo-grid-column\n                                                    :locked=\"true\"\n                                                    :selectable=\"true\"\n                                                    :width=\"40\"\n                                                />\n                                                <kendo-grid-column\n                                                    :field=\"'billNumber'\"\n                                                    :title=\"$t('bill_number')\"\n                                                    :width=\"180\"\n                                                    :editable=\"\n                            () => {\n                              return false;\n                            }\n                          \"\n                                                    :template=\"billNumberTmp\"\n                                                    :locked=\"true\"\n                                                    :headerAttributes=\"{\n                            style: 'background-color: #EDF1F5',\n                          }\"\n                                                />\n                                                <kendo-grid-column\n                                                    :field=\"'referenceNo'\"\n                                                    :title=\"$t('transaction_num')\"\n                                                    :width=\"210\"\n                                                    :hidden=\"false\"\n                                                    :locked=\"true\"\n                                                    :editable=\"\n                            () => {\n                              return false;\n                            }\n                          \"\n                                                    :template=\"referenceNoTmp\"\n                                                    :headerAttributes=\"{\n                            style: 'background-color: #EDF1F5',\n                          }\"\n                                                />\n                                                <kendo-grid-column\n                                                    :field=\"'dueDate'\"\n                                                    :title=\"$t('due_date')\"\n                                                    :width=\"150\"\n                                                    :lockable=\"false\"\n                                                    :template=\"formatDate\"\n                                                    :editable=\"\n                            () => {\n                              return false;\n                            }\n                          \"\n                                                    :headerAttributes=\"{\n                            style: 'background-color: #EDF1F5',\n                          }\"\n                                                />\n                                                <kendo-grid-column\n                                                    :field=\"'txnNote'\"\n                                                    :title=\"$t('note')\"\n                                                    :width=\"200\"\n                                                    :hidden=\"false\"\n                                                    :lockable=\"false\"\n                                                    :headerAttributes=\"{\n                            style:\n                              'text-align: left; background-color: #EDF1F5',\n                          }\"\n                                                    :attributes=\"{ style: 'text-align: left; ' }\"\n                                                />\n                                                <kendo-grid-column\n                                                    :field=\"'currencyCode'\"\n                                                    :title=\"$t('currency')\"\n                                                    :width=\"150\"\n                                                    :lockable=\"false\"\n                                                    :editable=\"\n                            () => {\n                              return false;\n                            }\n                          \"\n                                                    :template=\"currency\"\n                                                    :headerAttributes=\"{\n                            style: 'background-color: #EDF1F5',\n                          }\"\n                                                />\n                                                <kendo-grid-column\n                                                    :field=\"'amount'\"\n                                                    :title=\"$t('amount')\"\n                                                    :width=\"150\"\n                                                    :lockable=\"false\"\n                                                    :editable=\"\n                            () => {\n                              return false;\n                            }\n                          \"\n                                                    :template=\"amount\"\n                                                    :attributes=\"{ style: 'text-align: right' }\"\n                                                    :headerAttributes=\"{\n                            style: 'background-color: #EDF1F5',\n                          }\"\n                                                />\n                                                <kendo-grid-column\n                                                    :field=\"'discount'\"\n                                                    :title=\"$t('discount')\"\n                                                    :editor=\"discountEditor\"\n                                                    :template=\"discount\"\n                                                    :width=\"150\"\n                                                    :lockable=\"false\"\n                                                    :headerAttributes=\"{\n                            style:\n                              'text-align: right; background-color: #EDF1F5',\n                          }\"\n                                                    :attributes=\"{ style: 'text-align: right' }\"\n                                                />\n                                                <kendo-grid-column\n                                                    :field=\"'amountTobePaid'\"\n                                                    :title=\"$t('amount_to_be_paid')\"\n                                                    :width=\"210\"\n                                                    :lockable=\"false\"\n                                                    :editable=\"\n                            () => {\n                              return false;\n                            }\n                          \"\n                                                    :template=\"amountTobePaid\"\n                                                    :attributes=\"{ style: 'text-align: right; ' }\"\n                                                    :headerAttributes=\"{\n                            style: 'background-color: #EDF1F5',\n                          }\"\n                                                />\n                                                <kendo-grid-column\n                                                    :field=\"'paidAmount'\"\n                                                    :title=\"$t('paid_amount')\"\n                                                    :width=\"200\"\n                                                    :lockable=\"false\"\n                                                    :editor=\"paidAmountEditor\"\n                                                    :template=\"paidAmountTmp\"\n                                                    :headerAttributes=\"{\n                            style:\n                              'text-align: right; background-color: #EDF1F5',\n                          }\"\n                                                    :attributes=\"{ style: 'text-align: right; ' }\"\n                                                />\n                                                <kendo-grid-column\n                                                    :field=\"'overDue'\"\n                                                    :title=\"$t('over_due')\"\n                                                    :width=\"130\"\n                                                    :lockable=\"false\"\n                                                    :hidden=\"true\"\n                                                    :editable=\"\n                            () => {\n                              return false;\n                            }\n                          \"\n                                                    :template=\"overDue\"\n                                                    :headerAttributes=\"{\n                            style: 'background-color: #EDF1F5',\n                          }\"\n                                                />\n                                                <kendo-grid-column\n                                                    :field=\"'paymentTerm'\"\n                                                    :title=\"$t('payment_term')\"\n                                                    :width=\"200\"\n                                                    :lockable=\"false\"\n                                                    :hidden=\"true\"\n                                                    :template=\"settlementDiscount\"\n                                                    :editable=\"\n                            () => {\n                              return false;\n                            }\n                          \"\n                                                    :headerAttributes=\"{\n                            style:\n                              'text-align: right; background-color: #EDF1F5',\n                          }\"\n                                                    :attributes=\"{ style: 'text-align: right; ' }\"\n                                                />\n                                                <kendo-grid-column\n                                                    :field=\"'bankReferenceNo'\"\n                                                    :title=\"$t('bank_reference_no')\"\n                                                    :width=\"180\"\n                                                    :lockable=\"false\"\n                                                    :hidden=\"true\"\n                                                    :template=\"bankReferenceNo\"\n                                                    :headerAttributes=\"{\n                            style:\n                              'text-align: right; background-color: #EDF1F5',\n                          }\"\n                                                    :attributes=\"{ style: 'text-align: right; ' }\"\n                                                />\n                                                <kendo-grid-column\n                                                    :field=\"'status'\"\n                                                    :title=\"$t('status')\"\n                                                    :width=\"150\"\n                                                    :lockable=\"false\"\n                                                    :template=\"status\"\n                                                    :hidden=\"true\"\n                                                    :editable=\"\n                            () => {\n                              return false;\n                            }\n                          \"\n                                                    :headerAttributes=\"{\n                            style:\n                              'text-align: right; background-color: #EDF1F5',\n                          }\"\n                                                    :attributes=\"{ style: 'text-align: right; ' }\"\n                                                />\n                                            </kendo-grid>\n                                        </template>\n                                    </v-col>\n                                    <v-col sm=\"12\" cols=\"12\" class=\"pb-0\">\n                                        <v-row>\n                                            <v-col sm=\"6\" cols=\"12\" class=\"\"></v-col>\n                                            <v-col sm=\"6\" cols=\"12\">\n                                                <v-simple-table>\n                                                    <template v-slot:default>\n                                                        <tbody>\n                                                        <tr>\n                                                            <td class=\"text-left text-uppercase\">\n                                                                {{ $t(\"discount\") }}\n                                                            </td>\n                                                            <td class=\"text-center\">:</td>\n                                                            <td class=\"text-left primary--text text-bold\">\n                                                                {{ numberFormat(requestPayment.discount) }}\n                                                            </td>\n                                                        </tr>\n                                                        <tr>\n                                                            <td class=\"text-left text-uppercase\">\n                                                                {{ $t(\"exchange_amount\") }} -\n                                                                {{ baseCurrencyCode }}\n                                                            </td>\n                                                            <td class=\"text-center\">:</td>\n                                                            <td class=\"text-left primary--text text-bold\">\n                                                                {{\n                                                                    numberFormat(requestPayment.exchangeAmount)\n                                                                }}\n                                                            </td>\n                                                        </tr>\n                                                        <tr hidden>\n                                                            <td class=\"text-left text-uppercase\">\n                                                                {{ $t(\"dr\") }}\n                                                            </td>\n                                                            <td class=\"text-center\">:</td>\n                                                            <td class=\"text-left primary--text text-bold\">\n                                                                {{ numberFormat(dr) }}\n                                                            </td>\n                                                        </tr>\n                                                        <tr hidden>\n                                                            <td class=\"text-left text-uppercase\">\n                                                                {{ $t(\"cr\") }}\n                                                            </td>\n                                                            <td class=\"text-center\">:</td>\n                                                            <td class=\"text-left primary--text text-bold\">\n                                                                {{ numberFormat(cr) }}\n                                                            </td>\n                                                        </tr>\n                                                        </tbody>\n                                                    </template>\n                                                </v-simple-table>\n                                            </v-col>\n                                        </v-row>\n                                    </v-col>\n                                </v-row>\n                                <!-- Payment Options & Position Analysis -->\n                                <v-row>\n                                    <v-col sm=\"4\" cols=\"4\" class=\"kendo_dropdown_custom\">\n                                        <v-card outlined dense class=\"no_border pa-4\" color=\"grayBg\">\n                                            <h3 class=\"mb-1\">{{ $t(\"payment_option_position\") }}</h3>\n                                            <label>{{ $t(\"payment_option\") }}</label>\n                                            <div class=\"mb-3\">\n                                                <paymentoption-dropdownlist\n                                                    :initPaymentOption=\"requestPayment.paymentOption\"\n                                                    :initType=\"'Supplier'\"\n                                                    @onChange=\"onPaymentOptionChanged\"\n                                                />\n                                            </div>\n\n                                            <label>{{ $t(\"expected_payment_date\") }}</label>\n                                            <app-datepicker\n                                                :initialDate=\"requestPayment.expectedPaymentDate\"\n                                                @emitDate=\"requestPayment.expectedPaymentDate = $event\"\n                                            />\n                                        </v-card>\n                                    </v-col>\n                                    <v-col sm=\"4\" cols=\"4\" class=\"kendo_dropdown_custom\">\n                                        <!-- Fund Position  -->\n                                        <v-card outlined dense class=\"no_border pa-4\" color=\"grayBg\" mind>\n                                            <h3 class=\"mb-1\">{{ $t(\"fund_position\") }}</h3>\n                                            <label>{{ $t(\"current_balance\") }}</label>\n                                            <h1 class=\"font_16 primary--text my-3 text-right\">{{ fundBalance }}</h1>\n\n                                            <label>{{ $t(\"remaining_balance\") }}</label>\n                                            <h1 class=\"font_16 primary--text my-3 text-right\">\n                                                {{ fundRemainBalance }}</h1>\n                                        </v-card>\n                                    </v-col>\n                                    <v-col sm=\"4\" cols=\"4\">\n                                        <!-- \tPayable Position  -->\n                                        <v-card outlined dense class=\"no_border pa-4\" color=\"grayBg\">\n                                            <h3 class=\"mb-1\">{{ $t(\"payable_position\") }}</h3>\n                                            <label>{{ $t(\"current_balance\") }}</label>\n                                            <v-text-field\n                                                outlined\n                                                :disabled=\"true\"\n                                                v-model=\"balance\"\n                                                class=\"mt-1\"\n                                            />\n                                            <label>{{ $t(\"remaining_balance\") }}</label>\n                                            <v-text-field\n                                                outlined\n                                                :disabled=\"true\"\n                                                v-model=\"vendorRemainingBalance\"\n                                                class=\"mt-1\"\n                                            />\n                                        </v-card>\n                                    </v-col>\n                                </v-row>\n                            </v-card>\n                            <v-divider class=\"mt-4\"/>\n                            <v-card outlined dense class=\"no_border function_footer\">\n                                <!--                                <v-menu>-->\n                                <!--                                    <template v-slot:activator=\"{ on }\">-->\n                                <!--                                        <v-btn-->\n                                <!--                                            color=\"black\"-->\n                                <!--                                            outlined-->\n                                <!--                                            class=\"mr-2 text-capitalize  black&#45;&#45;text float-left\"-->\n                                <!--                                            v-on=\"on\"-->\n                                <!--                                        >-->\n                                <!--                                            {{ $t(\"select_template\") }}-->\n                                <!--                                            <v-icon size=\"\" class=\"ma-1\">expand_more</v-icon>-->\n                                <!--                                        </v-btn>-->\n                                <!--                                    </template>-->\n                                <!--                                    <v-list>-->\n                                <!--                                        <v-list-item-->\n                                <!--                                            v-for=\"(item, index) in templates\"-->\n                                <!--                                            :key=\"index\"-->\n                                <!--                                        >-->\n                                <!--                                            <v-list-item-title>{{ item.title }}</v-list-item-title>-->\n                                <!--                                        </v-list-item>-->\n                                <!--                                    </v-list>-->\n                                <!--                                </v-menu>-->\n                                <v-btn\n                                    color=\"black\"\n                                    class=\"text-capitalize  white--text float-left\"\n                                    @click=\"cancel()\"\n                                >{{ $t(\"cancel\") }}\n                                </v-btn>\n                                <!--                                <v-btn-->\n                                <!--                                    color=\"third\"-->\n                                <!--                                    class=\"ml-3 float-right text-capitalize  white&#45;&#45;text\">-->\n                                <!--                                    {{ $t(\"save_new\") }}-->\n                                <!--                                </v-btn>-->\n                                <v-btn\n                                    @click=\"onSaveClose\"\n                                    color=\"primary\"\n                                    class=\" float-right text-capitalize  white--text\"\n                                >\n                                    {{ $t(\"save_close\") }}\n                                </v-btn>\n                            </v-card>\n                        </v-form>\n                    </v-card>\n                </v-col>\n            </v-row>\n        </v-container>\n    </v-app>\n</template>\n\n<script>\nimport {i18n} from \"@/i18n\";\nimport DatePickerComponent from \"@/components/custom_templates/DatePickerComponent\";\nimport supplierHandler from \"@/scripts/supplierHandler\";\nimport journalHandler from \"@/scripts/journalHandler\";\nimport RequestPaymentModel from \"@/scripts/request-payment/model/RequestPayment\";\nimport ItemLineModel from \"@/scripts/request-payment/model/ItemLine\";\nimport kendo from \"@progress/kendo-ui\";\nimport billingHandler from \"@/scripts/invoice/handler/billingHandler\";\nimport prefixHandler from \"@/scripts/prefixHandler\";\nimport purchaseFormContentHandler from \"@/scripts/purchaseFormContentHandler\";\nimport settingHandler from \"@/scripts/settingsHandler\";\nimport {CurrencyModel, PaymentTermModel} from \"@/scripts/model/AppModels\";\nimport PaymentOptionModel from \"@/scripts/model/PaymentOption\";\nimport AccountMappingModel from \"@/scripts/account-map/Account\";\nimport SupplierModel from \"@/scripts/model/Supplier\";\nimport Helper from \"@/helper\";\n\nconst cookieJS = require(\"@/cookie.js\");\nconst cookie = cookieJS.getCookie();\nconst requestPaymentModel = new RequestPaymentModel({});\nconst itemLineModel = new ItemLineModel({});\n\nconst OPTION_TYPE = \"Supplier\";\nconst TRANSACTION_TYPE = \"Request Payment\";\nconst TXN_TYPE = \"request payment\";\n\nexport default {\n    name: \"RequestPayment\",\n    components: {\n        LoadingMe: () => import(`@/components/Loading`),\n        \"app-datepicker\": DatePickerComponent,\n        \"vendor-dropdownlist\": () =>\n            import(\"@/components/dropdownlist/VendorDropdown\"),\n        \"paymentoption-dropdownlist\": () =>\n            import(\"@/components/dropdownlist/PaymentOptionDropDownList\"),\n    },\n    data: () => ({\n        showLoading: false,\n        customerList: [],\n        group: [],\n        suppliers: [],\n        customer: {},\n        overDueAmount: 0,\n        receivableBalance: 0,\n        tobeCollected: 0,\n        valid: true,\n        template: [],\n        templates: [],\n        itemLines: [],\n        transactionTypes: [],\n        receivableList: [],\n        requestPayment: requestPaymentModel,\n        itemLine: itemLineModel,\n        supBaseUrl: supplierHandler.search(),\n        selectedExpenseIds: [],\n        purchaseFormContent: {},\n        balance: 0,\n        jRaw: [],\n        txnList: [],\n        gainLossAcc: {},\n        otherRevenueAcc: {},\n        gainOrLossDescription: \"gain/loss on exchange rate\",\n        penaltyDescription: \"penalty\",\n        baseCurrencyCode: \"\",\n        loggedUser: {\n            id: cookie.creator,\n            name: cookie.email,\n        },\n        cr: 0,\n        dr: 0,\n        fundBalance: 0,\n        vendorRemainingBalance: 0,\n        fundRemainBalance: 0,\n        schemaDefinition: {\n            model: {id: \"lineId\"},\n        },\n        isCheckChanged: false,\n    }),\n    methods: {\n        onVendorChanged(value) {\n            this.requestPayment.supplier = value;\n            const supplier = this.requestPayment.supplier || {};\n            const supplierId = supplier.id || \"\";\n            if (supplierId) {\n                this.loadVendorBalance(supplierId);\n            }\n        },\n        cancel() {\n            this.$swal({\n                title: i18n.t(\"msg_title_warning\"),\n                text: i18n.t(\"msg_discard\"),\n                icon: \"warning\",\n                showCancelButton: true,\n                cancelButtonText: i18n.t(\"cancel\"),\n                confirmButtonColor: \"#4d4848\",\n                cancelButtonColor: \"#ED1A3A\",\n                confirmButtonText: i18n.t(\"discard\"),\n            }).then((result) => {\n                if (result.value) {\n                    this.$router.go(-1);\n                }\n            });\n        },\n        currency(dataItem) {\n            if (dataItem) {\n                if (dataItem.hasOwnProperty(\"currencyCode\")) {\n                    return dataItem.currencyCode;\n                }\n            }\n            return \"\";\n        },\n        referenceNoTmp(dataItem) {\n            if (dataItem) {\n                if (dataItem.hasOwnProperty(\"referenceNo\")) {\n                    return dataItem.referenceNo;\n                }\n            }\n            return \"\";\n        },\n        billNumberTmp(dataItem) {\n            if (dataItem) {\n                if (dataItem.hasOwnProperty(\"billNumber\")) {\n                    return dataItem.billNumber;\n                }\n            }\n            return \"\";\n        },\n        paidAmountTmp(dataItem) {\n            if (dataItem) {\n                if (dataItem.hasOwnProperty(\"paidAmount\")) {\n                    return kendo.toString(dataItem.paidAmount, dataItem.decimalFormat);\n                }\n            }\n            return \"\";\n        },\n        amountTobePaid(dataItem) {\n            if (dataItem) {\n                if (dataItem.hasOwnProperty(\"amountTobePaid\")) {\n                    return kendo.toString(\n                        dataItem.amountTobePaid,\n                        dataItem.decimalFormat\n                    );\n                }\n            }\n            return \"\";\n        },\n        discount(dataItem) {\n            if (dataItem) {\n                if (dataItem.hasOwnProperty(\"discount\")) {\n                    const discount = dataItem.discount || 0;\n                    return kendo.toString(discount, dataItem.decimalFormat);\n                }\n            }\n            return 0;\n        },\n        amount(dataItem) {\n            if (dataItem) {\n                if (dataItem.hasOwnProperty(\"amount\")) {\n                    const amount = dataItem.amount || 0;\n                    return kendo.toString(amount, dataItem.decimalFormat);\n                }\n            }\n            return 0;\n        },\n        bankReferenceNo(dataItem) {\n            if (dataItem) {\n                if (dataItem.hasOwnProperty(\"overDue\")) {\n                    return dataItem.bankReferenceNo;\n                }\n            }\n            return \"\";\n        },\n        overDue(dataItem) {\n            if (dataItem) {\n                if (dataItem.hasOwnProperty(\"overDue\")) {\n                    return dataItem.overDue;\n                }\n            }\n            return 0;\n        },\n        paidAmountEditor(container, options) {\n            kendo\n                .jQuery('<input data-bind=\"value:' + options.field + '\"/>')\n                .appendTo(container)\n                .kendoNumericTextBox({\n                    decimals: 5,\n                    format: `n${this.purchaseFormContent.decimal}`,\n                    min: 0,\n                });\n        },\n        discountEditor(container, options) {\n            kendo\n                .jQuery('<input data-bind=\"value:' + options.field + '\"/>')\n                .appendTo(container)\n                .kendoNumericTextBox({\n                    decimals: 30,\n                    format: `n${this.purchaseFormContent.decimal}`,\n                    min: 0,\n                });\n        },\n        onTransactionDateChanged() {\n            if (this.requestPayment.supplier) {\n                const supplier = this.requestPayment.supplier || {};\n                const supId = supplier.id || \"\";\n                if (supId) {\n                    this.generateNumber();\n                    this.searchPurchaseOrderExpense();\n                }\n            }\n        },\n        generateNumber() {\n            if (this.$route.params.id) {\n                const tranDate = new Date(this.requestPayment.transactionDate);\n                const tranDateReceipt = new Date(this.requestPayment.transactionDate);\n                const tranDateM = tranDate.getFullYear() + tranDate.getMonth();\n                const tranDateReceiptM =\n                    tranDateReceipt.getFullYear() + tranDateReceipt.getMonth();\n                if (tranDateM === tranDateReceiptM) {\n                    this.requestPayment.referenceNo = this.referenceNo;\n                    return;\n                }\n            }\n            // window.console.log(\"abbr\", this.requestPayment.transactionType);\n            if (this.requestPayment.transactionDate !== \"\") {\n                let data = {\n                    abbr: this.requestPayment.transactionType.abbr,\n                    structure: this.requestPayment.transactionType.structure,\n                    transactionDate: new Date(this.requestPayment.transactionDate)\n                        .toISOString()\n                        .substr(0, 10),\n                    prefixSeparator: this.requestPayment.transactionType.prefixSeparator || '',\n                    numberSeparator: this.requestPayment.transactionType.numberSeparator || '',\n                    format: this.requestPayment.transactionType.format || 5,\n                    sequcencing: this.requestPayment.transactionType.sequcencing,\n                    type: TRANSACTION_TYPE,\n                    entity: 1,\n                };\n                billingHandler\n                    .lastNumber(data)\n                    .then((response) => {\n                        if (response.data.statusCode === 200) {\n                            const res = response.data.data;\n                            const lastNumber = this.zeroPad(\n                                parseInt(res.lastNumber),\n                                this.requestPayment.transactionType.format\n                            );\n                            const number =\n                                res.suffix +\n                                this.requestPayment.transactionType.numberSeparator +\n                                lastNumber;\n                            this.requestPayment.number = number;\n                            if (\n                                this.requestPayment.transactionType.hasOwnProperty(\n                                    \"prefixSeparator\"\n                                )\n                            ) {\n                                const prefixSep = this.requestPayment.transactionType\n                                    .prefixSeparator;\n                                this.requestPayment.referenceNo =\n                                    this.requestPayment.transactionType.abbr + prefixSep + number;\n                            }\n                        }\n                    })\n                    .catch((e) => {\n                        this.errors.push(e);\n                    });\n            }\n        },\n        zeroPad(num, places) {\n            return String(num).padStart(places, \"0\");\n        },\n        removeDuplicate(array) {\n            const result = [];\n            const map = new Map();\n            for (const item of array) {\n                if (!map.has(item.id)) {\n                    map.set(item.id, true); // set any value to Map\n                    result.push(item);\n                }\n            }\n            return result;\n        },\n        formatDate(dataItem) {\n            if (dataItem.hasOwnProperty(\"dueDate\")) {\n                return kendo.toString(new Date(dataItem.dueDate), dataItem.dateFormat);\n            }\n            return \"\";\n        },\n        settlementDiscount(dataItem) {\n            if (dataItem.hasOwnProperty(\"paymentTerm\")) {\n                return dataItem.paymentTerm.name || \"\";\n            }\n            return \"\";\n        },\n        status(dataItem) {\n            if (dataItem) {\n                if (dataItem.hasOwnProperty(\"status\")) {\n                    const status = dataItem.status;\n                    let statusText = \"\";\n                    switch (status) {\n                        case 1:\n                            statusText = \"OPEN\";\n                            break;\n                        case 2:\n                            statusText = \"Partially Paid\";\n                            break;\n                        case 4:\n                            statusText = \"VOID\";\n                            break;\n                        case 3:\n                            statusText = \"PAID\";\n                            break;\n                    }\n                    return statusText;\n                }\n            }\n            return \"\";\n        },\n        onPaymentOptionChanged(value) {\n            this.requestPayment.paymentOption = value;\n            const account = value.account || {};\n            const accountId = account.uuid || \"\";\n            if (accountId) {\n                let currentFiscalDate = Helper.getFiscalDateByDate(new Date());\n                let startDate = currentFiscalDate.start_date;\n                const strParam = {\n                    params: {\n                        start_date:\n                            kendo.toString(new Date(startDate), \"yyyy-MM-dd\") +\n                            \"T00:00:00.000Z\",\n                        end_date:\n                            kendo.toString(\n                                new Date(this.requestPayment.transactionDate),\n                                \"yyyy-MM-dd\"\n                            ) + \"T23:59:59.999Z\",\n                    },\n                };\n                this.loadEntryDetailByAccount(accountId, strParam);\n            }\n            // window.console.log(value, \"paymentOption\");\n        },\n        async loadPrefix() {\n            new Promise((resolve) => {\n                setTimeout(() => {\n                    resolve(\"resolved\");\n                    prefixHandler.get(TXN_TYPE).then((res) => {\n                        if (res.data.statusCode === 200) {\n                            const response = res.data.data;\n                            this.transactionTypes = response;\n                            if (response.length > 0) {\n                                this.requestPayment.transactionType = response[0];\n                                if (!this.$route.params.id) {\n                                    this.generateNumber();\n                                }\n                            }\n                        }\n                    });\n                }, 10);\n            });\n        },\n        async searchPurchaseOrderExpense() {\n            new Promise((resolve) => {\n                setTimeout(() => {\n                    resolve(\"resolved\");\n                    let data = {};\n                    this.showLoading = true;\n                    const supplier = this.requestPayment.supplier || {};\n                    data = {\n                        search: supplier.id || \"\",\n                        type: \"Vendor\",\n                        transactionDate: new Date(this.requestPayment.transactionDate)\n                            .toISOString()\n                            .substr(0, 10),\n                    };\n                    this.itemLines = [];\n                    if (data.search) {\n                        if (data.search.length > 4) {\n                            this.showLoading = true;\n                            try {\n                                billingHandler.searchCashPayment(data).then((res) => {\n                                    this.showLoading = false;\n                                    if (res.data.statusCode === 200) {\n                                        const response = res.data.data;\n                                        const result = res.data.result;\n                                        this.showLoading = false;\n                                        if (response.length > 0) {\n                                            this.itemLines = response;\n                                            const obj = response[0];\n                                            if (obj.hasOwnProperty(\"supplier\")) {\n                                                this.requestPayment.supplier = obj.supplier;\n                                                if (obj.supplier.hasOwnProperty(\"name\")) {\n                                                    this.name = obj.supplier.name;\n                                                }\n                                            }\n                                        }\n                                        const baseCurrency = result;\n                                        this.baseCurrency = baseCurrency;\n                                        this.requestPayment.currency = new CurrencyModel(\n                                            baseCurrency\n                                        );\n                                        if (baseCurrency) {\n                                            if (baseCurrency.hasOwnProperty(\"code\")) {\n                                                this.baseCurrencyCode = baseCurrency.code;\n                                                // if (code) {\n                                                //     this.loadTransactionRate(baseCurrency.code)\n                                                // }\n                                            }\n                                        }\n                                    }\n                                });\n                            } catch (e) {\n                                this.showLoading = false;\n                            }\n                        } else {\n                            this.showLoading = false;\n                        }\n                    } else {\n                        this.showLoading = false;\n                    }\n                }, 10);\n            });\n        },\n        onGridRequestChange() {\n            const grid = this.$refs.gridRequestPayment.kendoWidget();\n            this.selectedExpenseIds = grid.selectedKeyNames();\n            // let ds = this.$refs.itemLineDS.kendoWidget()\n            // this.isCheckChanged = true\n            // const rows = ds.data();\n            // rows.forEach((value) => {\n            //     if (~this.selectedExpenseIds.indexOf(value.lineId)) {\n            //         // window.console.log(value, 'value')\n            //         if (value.paidAmount === 0) {\n            //             const tobePaid = value.amountTobePaid || 0\n            //             value.set('paidAmount', tobePaid)\n            //         }\n            //     }\n            // })\n            // this.$refs.gridRequestPayment.kendoWidget().read()\n            // this.isCheckChanged = false\n            this.autoCalculate();\n        },\n        onDataSourceChange(e) {\n            let amtTobePaid = 0,\n                amount = 0,\n                discount = 0,\n                paidAmount = 0;\n            let dataRow = e.items[0] || {};\n            if (Object.keys(dataRow).length > 0) {\n                dataRow.set(\"optionType\", OPTION_TYPE);\n            }\n            if (e.field) {\n                let dataRow = e.items[0];\n                switch (e.field) {\n                    case \"discount\":\n                        amount = dataRow.amount || 0;\n                        discount = dataRow.discount || 0;\n                        if (discount > amount) {\n                            dataRow.set(\"discount\", amount);\n                        }\n                        dataRow.set(\n                            \"amountTobePaid\",\n                            parseFloat(dataRow.amount) - parseFloat(dataRow.discount || 0)\n                        );\n                        dataRow.set(\n                            \"exchangeDiscount\",\n                            parseFloat(dataRow.discount) * parseFloat(dataRow.rateTobase || 1)\n                        );\n                        dataRow.set(\n                            \"exchangeDiscountTxn\",\n                            parseFloat(dataRow.discount) * parseFloat(dataRow.txnRate || 1)\n                        );\n                        amtTobePaid = parseFloat(dataRow.amountTobePaid || 0);\n                        paidAmount = parseFloat(dataRow.paidAmount || 0);\n                        if (paidAmount > amtTobePaid) {\n                            paidAmount = amtTobePaid;\n                            dataRow.set(\"paidAmount\", parseFloat(paidAmount));\n                            dataRow.set(\n                                \"paidAmountTobase\",\n                                parseFloat(paidAmount) * parseFloat(dataRow.rateTobase || 1)\n                            );\n                            dataRow.set(\n                                \"paidAmountTxn\",\n                                paidAmount * parseFloat(dataRow.txnRate || 1)\n                            );\n                        }\n                        break;\n                    case \"paidAmount\":\n                        // if (this.isCheckChanged === false) {\n                        amtTobePaid = parseFloat(dataRow.amountTobePaid || 0);\n                        paidAmount = parseFloat(dataRow.paidAmount || 0);\n                        if (paidAmount > amtTobePaid) {\n                            paidAmount = amtTobePaid;\n                        }\n                        dataRow.set(\"paidAmount\", parseFloat(paidAmount));\n                        dataRow.set(\n                            \"paidAmountTobase\",\n                            parseFloat(paidAmount) * parseFloat(dataRow.rateTobase || 1)\n                        );\n                        dataRow.set(\n                            \"paidAmountTxn\",\n                            paidAmount * parseFloat(dataRow.txnRate || 1)\n                        );\n                        // }\n                        break;\n                    default:\n                        break;\n                }\n\n                this.purchaseTxn();\n                this.autoCalculate();\n            }\n        },\n        async loadSaleFormContent() {\n            new Promise((resolve) => {\n                setTimeout(() => {\n                    resolve(\"resolved\");\n                    purchaseFormContentHandler.list().then((res) => {\n                        if (res.data.statusCode === 200) {\n                            const data = res.data.data;\n                            if (data.length > 0) {\n                                this.purchaseFormContent = data[0];\n                            }\n                        }\n                    });\n                }, 10);\n            });\n        },\n        async loadVendorBalance(id) {\n            new Promise((resolve) => {\n                setTimeout(() => {\n                    resolve(\"resolved\");\n                    const strFilter = id + \"?type=bal\";\n                    this.requestPayment.vendorBalance = 0;\n                    billingHandler.balance(strFilter).then((res) => {\n                        if (res.data.statusCode === 200) {\n                            const data = res.data.data;\n                            if (data.length > 0) {\n                                this.requestPayment.vendorBalance = data[0].balance;\n                                this.balance = this.numberFormat(data[0].balance);\n                            }\n                        }\n                    });\n                }, 10);\n            });\n        },\n        numberFormat(value) {\n            return kendo.toString(value, `n${this.purchaseFormContent.decimal}`);\n        },\n        autoCalculate() {\n            let ds = this.$refs.itemLineDS.kendoWidget(),\n                receiptAmount = 0,\n                discount = 0,\n                convertedAmount = 0,\n                exchangeDiscount = 0,\n                exchangeDiscountTxn = 0,\n                paidAmountTxn = 0;\n            this.jRaw = [];\n            const rows = ds.data().filter((n) => n.paidAmount > 0 || n.discount > 0);\n            rows.forEach((value) => {\n                if (~this.selectedExpenseIds.indexOf(value.lineId)) {\n                    let nature = \"\",\n                        purchaseRate = 0,\n                        paymentRate = 0,\n                        rawPaidAmount = 0,\n                        rawDiscountAmount = 0,\n                        currencyCode = \"\";\n                    let discountAmount = 0,\n                        apAmount = 0,\n                        refNo = \"\",\n                        payOption = {},\n                        currency = {},\n                        gainLoss = 0,\n                        lastXRate = {},\n                        location = {},\n                        segment = {},\n                        project = {},\n                        locationId = \"\",\n                        segmentId = \"\",\n                        projectId = \"\",\n                        txnId = \"\",\n                        invRate = 1;\n                    if (value.referenceNo) {\n                        refNo = value.referenceNo;\n                    }\n                    if (value.id) {\n                        txnId = value.id || \"\";\n                    }\n                    if (value.txnRate) {\n                        purchaseRate = parseFloat(value.txnRate);\n                    }\n                    if (value.currencyCode) {\n                        currencyCode = value.currencyCode || \"\";\n                    }\n                    if (value.currency) {\n                        currency = value.currency || {};\n                    }\n                    if (value.location) {\n                        location = value.location || {};\n                        if (location.hasOwnProperty(\"id\")) {\n                            locationId = location.id;\n                        }\n                    }\n                    if (value.segment) {\n                        segment = value.segment || {};\n                        if (segment.hasOwnProperty(\"id\")) {\n                            segmentId = segment.id;\n                        }\n                    }\n                    if (value.project) {\n                        project = value.project || {};\n                        if (project.hasOwnProperty(\"id\")) {\n                            projectId = project.id;\n                        }\n                    }\n                    if (value.exchangeRate) {\n                        lastXRate = value.exchangeRate || {};\n                    }\n                    if (value.txnRate) {\n                        invRate = parseFloat(value.txnRate);\n                    }\n                    if (value.rateTobase) {\n                        paymentRate = parseFloat(value.rateTobase);\n                    }\n                    if (value.paidAmount) {\n                        receiptAmount += kendo.parseFloat(value.paidAmount);\n                        convertedAmount +=\n                            kendo.parseFloat(value.paidAmount) * value.rateTobase;\n                        paidAmountTxn += kendo.parseFloat(value.paidAmount) * invRate;\n                        // paidAmt = kendo.parseFloat(value.paidAmount) * purchaseRate\n                        rawPaidAmount = kendo.parseFloat(value.paidAmount);\n                    }\n                    if (value.discount) {\n                        // discount += kendo.parseFloat(value.discount)\n                        discount += kendo.parseFloat(value.discount) * value.rateTobase;\n                        exchangeDiscount +=\n                            kendo.parseFloat(value.exchangeDiscount) * value.rateTobase;\n                        exchangeDiscountTxn += kendo.parseFloat(value.discount) * invRate;\n                        discountAmount = kendo.parseFloat(value.discount) * paymentRate;\n                        rawDiscountAmount = kendo.parseFloat(value.discount);\n                    }\n                    // todo: gain or loss exchange rate\n                    gainLoss =\n                        parseFloat(\n                            (purchaseRate - paymentRate) * (rawPaidAmount + rawDiscountAmount)\n                        ) * -1;\n                    if (gainLoss !== 0) {\n                        if (gainLoss > 0) {\n                            nature = \"dr\";\n                        } else {\n                            nature = \"cr\";\n                        }\n                        window.console.log(\"gainLoss\", gainLoss);\n                        if (gainLoss) {\n                            if (this.gainLossAcc.hasOwnProperty(\"id\")) {\n                                this.jRaw.push({\n                                    id:\n                                        this.gainLossAcc.id +\n                                        \"-\" +\n                                        nature +\n                                        \"-\" +\n                                        currencyCode +\n                                        \"-\" +\n                                        purchaseRate +\n                                        \"-\" +\n                                        locationId +\n                                        \"-\" +\n                                        projectId +\n                                        \"-\" +\n                                        segmentId +\n                                        \"-\" +\n                                        txnId,\n                                    txnId: txnId,\n                                    project: project,\n                                    location: location,\n                                    segment: segment,\n                                    projectId: projectId,\n                                    locationId: locationId,\n                                    segmentId: segmentId,\n                                    currencyCode: currencyCode,\n                                    currency: currency,\n                                    lastXRate: lastXRate,\n                                    line: new ItemLineModel(value),\n                                    receiptRate: gainLoss > 0 ? paymentRate : purchaseRate,\n                                    description: this.gainOrLossDescription,\n                                    account: this.gainLossAcc,\n                                    accountId: this.gainLossAcc.id,\n                                    amount: 0,\n                                    exchangeAmount: gainLoss,\n                                    type: nature,\n                                    typeAs: \"GainOrLoss\",\n                                });\n                            }\n                        }\n                    }\n                    //Todo: AP  Dr\n                    apAmount = rawPaidAmount + rawDiscountAmount;\n                    if (apAmount > 0) {\n                        nature = \"dr\";\n                    } else {\n                        nature = \"cr\";\n                    }\n                    if (value.hasOwnProperty(\"apAcc\")) {\n                        const apAcc = value.apAcc;\n                        if (apAcc) {\n                            if (apAcc.hasOwnProperty(\"id\")) {\n                                this.jRaw.push({\n                                    id:\n                                        apAcc.id +\n                                        \"-\" +\n                                        nature +\n                                        \"-\" +\n                                        currencyCode +\n                                        \"-\" +\n                                        purchaseRate +\n                                        \"-\" +\n                                        locationId +\n                                        \"-\" +\n                                        projectId +\n                                        \"-\" +\n                                        segmentId +\n                                        \"-\" +\n                                        txnId,\n                                    txnId: txnId,\n                                    project: project,\n                                    location: location,\n                                    segment: segment,\n                                    projectId: projectId,\n                                    locationId: locationId,\n                                    segmentId: segmentId,\n                                    currencyCode: currencyCode,\n                                    currency: currency,\n                                    lastXRate: lastXRate,\n                                    line: new ItemLineModel(value),\n                                    receiptRate: purchaseRate,\n                                    description: refNo,\n                                    account: apAcc,\n                                    accountId: apAcc.id,\n                                    amount: apAmount,\n                                    exchangeAmount: apAmount * purchaseRate,\n                                    type: nature,\n                                    typeAs: \"AP\",\n                                });\n                            }\n                        }\n                    }\n                    //Todo: Cash Account  CR\n                    if (this.requestPayment.paymentOption) {\n                        payOption = this.requestPayment.paymentOption;\n                        const cashAmount = rawPaidAmount * -1; //+ ((purchaseRate - paymentRate) * (rawPaidAmount + rawDiscountAmount))\n                        // const cashAmount = rawPaidAmount + (gainLoss ) + rawPaidAmount\n                        if (cashAmount > 0) {\n                            nature = \"dr\";\n                        } else {\n                            nature = \"cr\";\n                        }\n                        if (payOption.hasOwnProperty(\"account\")) {\n                            const payOptionAcc = payOption.account;\n                            if (payOptionAcc.hasOwnProperty(\"id\")) {\n                                this.jRaw.push({\n                                    id:\n                                        payOptionAcc.id +\n                                        \"-\" +\n                                        nature +\n                                        \"-\" +\n                                        currencyCode +\n                                        \"-\" +\n                                        purchaseRate +\n                                        \"-\" +\n                                        locationId +\n                                        \"-\" +\n                                        projectId +\n                                        \"-\" +\n                                        segmentId +\n                                        \"-\" +\n                                        txnId,\n                                    txnId: txnId,\n                                    project: project,\n                                    location: location,\n                                    segment: segment,\n                                    projectId: projectId,\n                                    locationId: locationId,\n                                    segmentId: segmentId,\n                                    currencyCode: currencyCode,\n                                    currency: currency,\n                                    lastXRate: lastXRate,\n                                    line: new ItemLineModel(value),\n                                    receiptRate: purchaseRate,\n                                    description: refNo,\n                                    account: payOptionAcc,\n                                    accountId: payOptionAcc.id,\n                                    amount: cashAmount,\n                                    exchangeAmount: cashAmount * paymentRate,\n                                    type: nature,\n                                    typeAs: \"CashAccount\",\n                                });\n                            }\n                        }\n                    }\n                    //Todo: Settlement Discount  Cr\n                    if (value.paymentTerm) {\n                        const settlementDisc = value.paymentTerm;\n                        if (discountAmount > 0) {\n                            if (discountAmount * -1 > 0) {\n                                nature = \"dr\";\n                            } else {\n                                nature = \"cr\";\n                            }\n                            // window.console.log(settlementDisc, \"settlementDisc\");\n                            if (settlementDisc.hasOwnProperty(\"account\")) {\n                                const settlementDiscAcc = settlementDisc.account;\n                                if (settlementDiscAcc.hasOwnProperty(\"id\")) {\n                                    this.jRaw.push({\n                                        id:\n                                            settlementDiscAcc.id +\n                                            \"-\" +\n                                            nature +\n                                            \"-\" +\n                                            currencyCode +\n                                            \"-\" +\n                                            purchaseRate +\n                                            \"-\" +\n                                            locationId +\n                                            \"-\" +\n                                            projectId +\n                                            \"-\" +\n                                            segmentId +\n                                            \"-\" +\n                                            txnId,\n                                        txnId: txnId,\n                                        project: project,\n                                        location: location,\n                                        segment: segment,\n                                        projectId: projectId,\n                                        locationId: locationId,\n                                        segmentId: segmentId,\n                                        currencyCode: currencyCode,\n                                        currency: currency,\n                                        lastXRate: lastXRate,\n                                        line: new ItemLineModel(value),\n                                        receiptRate: paymentRate,\n                                        description: \"Purchase Payment Discount\",\n                                        account: settlementDiscAcc,\n                                        accountId: settlementDiscAcc.id,\n                                        amount: rawDiscountAmount * -1,\n                                        exchangeAmount: discountAmount * -1,\n                                        type: nature,\n                                        typeAs: \"Settlement Discount\",\n                                    });\n                                }\n                            }\n                        }\n                    }\n                }\n            });\n            // this.invoiceTxn(txnIds)\n\n            this.requestPayment.total = receiptAmount;\n            this.requestPayment.exchangeAmount = convertedAmount;\n            this.requestPayment.discount = discount;\n            this.requestPayment.exchangeDiscount = exchangeDiscount;\n            this.requestPayment.paidAmountTxn = paidAmountTxn;\n            this.requestPayment.exchangeDiscountTxn = exchangeDiscountTxn;\n            this.requestPayment.fundRemainBalance =\n                parseFloat(this.requestPayment.fundBalance || 0) -\n                parseFloat(convertedAmount);\n            this.requestPayment.vendorRemainingBalance =\n                parseFloat(this.requestPayment.vendorBalance || 0) -\n                (parseFloat(convertedAmount) + discount);\n\n            this.vendorRemainingBalance = this.numberFormat(\n                parseFloat(this.requestPayment.vendorBalance || 0) -\n                (parseFloat(convertedAmount) + discount)\n            );\n            this.fundRemainBalance = this.numberFormat(\n                parseFloat(this.requestPayment.fundBalance || 0) -\n                parseFloat(convertedAmount)\n            );\n            this.shrinkData(this.jRaw);\n            window.console.log(\"aa\", rows);\n        },\n        shrinkData(obj) {\n            const uniques = this.removeDuplicate(obj);\n            uniques.forEach((n) => {\n                const found = obj.filter((m) => m.id === n.id);\n                let amount = 0,\n                    exchangeAmount = 0;\n                found.forEach((z) => {\n                    amount += parseFloat(z.amount || 0);\n                    exchangeAmount += parseFloat(z.exchangeAmount || 0);\n                });\n                n.exchangeAmount = parseFloat(exchangeAmount); //this.numberFormat(amount)\n                n.amount = parseFloat(amount); //parseFloat(parseFloat(amount / parseFloat(n.receiptRate))) //this.numberFormat(amount * parseFloat(this.invoice.txnRate)) //.toFixed(this.saleFormContent.decimal)\n            });\n            this.jRaw = uniques;\n            let dr = 0,\n                cr = 0;\n            this.jRaw.forEach((j) => {\n                switch (j.type) {\n                    case \"cr\":\n                        cr += parseFloat(j.exchangeAmount);\n                        break;\n                    case \"dr\":\n                        dr += parseFloat(j.exchangeAmount);\n                        break;\n                    default:\n                        break;\n                }\n            });\n            // window.console.log(JSON.stringify(this.jRaw), 'uniques')\n            const txnId = this.jRaw.map((o) => o.txnId);\n            const uSet = new Set(txnId);\n            const uniqueSet = [...uSet];\n            let jRaws = [];\n            // window.console.log(JSON.stringify(uniqueSet), 'uniques')\n            uniqueSet.forEach((n) => {\n                const found = this.jRaw.filter((m) => m.txnId === n);\n                const line = found[0].line;\n                const refNo = line.referenceNo;\n                jRaws.push({\n                    id: n,\n                    currencyCode: found[0].currencyCode,\n                    projectId: found[0].projectId,\n                    segmentId: found[0].segmentId,\n                    locationId: found[0].locationId,\n                    referenceNo: refNo || \"\",\n                    entries: found,\n                });\n            });\n            this.jRaw = jRaws;\n            this.dr = dr;\n            this.cr = cr;\n            window.console.log(\"dr=\", dr, \"cr=\", cr, \"dr+cr = \", dr + cr);\n            window.console.log(jRaws, \"uniques\");\n        },\n        purchaseTxn() {\n            let txnIds = [],\n                ids = [];\n            this.itemLines.forEach((value) => {\n                if (value.id) {\n                    txnIds.push({\n                        id: value.id,\n                        status: 1,\n                    });\n                }\n            });\n            ids = Object.values(txnIds.reduce((r, o) => ((r[o.id] = o), r), {}));\n            ids.forEach((m) => {\n                const lines = this.itemLines.filter((n) => n.id === m.id);\n                let paidAmt = 0;\n                let amountTobePaid = 0;\n                lines.forEach((x) => {\n                    if (x.paidAmount) {\n                        paidAmt += x.paidAmount;\n                    }\n                    if (x.amountTobePaid) {\n                        amountTobePaid += x.amountTobePaid;\n                    }\n                });\n                const pAmt = this.numberFormat(paidAmt);\n                const amtTobePaid = this.numberFormat(amountTobePaid);\n                if (pAmt === amtTobePaid) {\n                    m[\"status\"] = 3; //Paid\n                } else {\n                    m[\"status\"] = 2; // Partially Paid\n                }\n            });\n            this.txnList = ids;\n        },\n        async loadOtherAccount() {\n            new Promise((resolve) => {\n                setTimeout(() => {\n                    resolve(\"resolved\");\n                    settingHandler\n                        .getOtherAccount()\n                        .then((res) => {\n                            if (res.data.statusCode === 200) {\n                                this.showLoading = false;\n                                const response = res.data.data;\n                                const data = response.filter(\n                                    (o) => o.banhjiAccCode === \"740010\"\n                                );\n                                if (data.length > 0) {\n                                    this.gainLossAcc = data[0].account;\n                                }\n                                const data_ = response.filter(\n                                    (o) => o.banhjiAccCode === \"740040\"\n                                );\n                                if (data_.length > 0) {\n                                    this.otherRevenueAcc = data_[0].account;\n                                }\n                            }\n                        })\n                        .catch();\n                    {\n                        this.showLoading = false;\n                    }\n                }, 10);\n            });\n        },\n        async onSaveClose() {\n            if (!this.$refs.form.validate()) {\n                this.$refs.form.validate();\n                return;\n            }\n            new Promise((resolve) => {\n                setTimeout(() => {\n                    resolve(\"resolved\");\n                    let itemLineDS = this.$refs.itemLineDS.kendoWidget();\n                    let itemLines = [];\n                    const supplier = this.requestPayment.supplier || {};\n                    itemLineDS\n                        .data()\n                        .filter((n) => n.paidAmount > 0 || n.discount > 0)\n                        .map((n) => {\n                            if (~this.selectedExpenseIds.indexOf(n.lineId)) {\n                                const currency = n.currency || {};\n                                n[\"paymentOption\"] = new PaymentOptionModel(\n                                    n.paymentOption || {}\n                                );\n                                n[\"paymentTerm\"] = new PaymentTermModel(n.paymentTerm || {});\n                                n[\"currency\"] = new CurrencyModel(n.currency || {});\n                                n[\"currencyCode\"] = currency.code || \"\";\n                                n[\"apAcc\"] = new AccountMappingModel(n.apAcc || {});\n                                n[\"supplier\"] = new SupplierModel(supplier);\n                                n[\"id\"] = n[\"txnId\"];\n                                itemLines.push(new ItemLineModel(n));\n                            }\n                        });\n                    if (itemLines.length > 0) {\n                        let isAutoGenerate = 1;\n                        //todo: match Request Payment model\n                        this.requestPayment[\"itemLines\"] = itemLines;\n                        this.requestPayment[\"type\"] = TRANSACTION_TYPE;\n                        this.requestPayment[\"isAutoGenerate\"] = isAutoGenerate;\n                        this.requestPayment[\"actionType\"] = this.$route.params.id\n                            ? this.$route.query.type\n                            : \"new\";\n                        this.requestPayment[\"loggedUser\"] = this.loggedUser;\n\n                        this.showLoading = true;\n                        // window.console.log('this.itemLines', itemLines)\n                        // window.console.log('this.itemLines', JSON.stringify(itemLines))\n                        billingHandler\n                            .createRequestPayment(\n                                new RequestPaymentModel(this.requestPayment)\n                            )\n                            .then((response) => {\n                                if (response.data.statusCode === 201) {\n                                    // this.close(response.data.data)\n                                    this.showLoading = false;\n                                    this.$snotify.success(\"Successfully\");\n                                    this.clear();\n                                    window.history.go(-1);\n                                }\n                            })\n                            .catch((e) => {\n                                this.showLoading = false;\n                                this.$snotify.error(\"Something went wrong\");\n                                this.errors.push(e);\n                            });\n                    }\n                }, 20);\n            });\n        },\n        clear() {\n            this.id = undefined;\n            this.requestPayment = new RequestPaymentModel({});\n            this.itemLines = [];\n            this.requestPayment.transactionType = this.transactionTypes[0];\n            this.generateNumber();\n        },\n        async loadEntryDetailByAccount(id, params) {\n            new Promise((resolve) => {\n                setTimeout(() => {\n                    resolve(\"resolved\");\n                    this.showLoading = true;\n                    journalHandler.getEntryDetailByAccount(id, params).then((res) => {\n                        // if (res.data.statusCode === 200) {\n                        this.showLoading = false;\n                        this.requestPayment.fundBalance = res.ending_balance || 0;\n                        this.fundBalance = this.numberFormat(res.ending_balance || 0);\n                        this.fundRemainBalance = this.numberFormat(\n                            parseFloat(res.ending_balance || 0) -\n                            parseFloat(this.requestPayment.exchangeAmount)\n                        );\n                        this.requestPayment.fundRemainBalance =\n                            parseFloat(res.ending_balance || 0) -\n                            parseFloat(this.requestPayment.fundBalance);\n                        // } else {\n                        //     this.showLoading = true;\n                        // }\n                    });\n                }, 10);\n            });\n        },\n    },\n    mounted: async function () {\n        // this.loadSuppliers()\n        // this.loadVendors('', this.supBaseUrl)\n        await this.loadPrefix();\n        await this.loadSaleFormContent();\n        await this.loadOtherAccount();\n    },\n    computed: {},\n};\n</script>\n\n<style scoped>\n.theme--light.v-data-table\n> .v-data-table__wrapper\n> table\n> tbody\n> tr:not(:last-child)\n> td:not(.v-data-table__mobile-row),\n.theme--light.v-data-table\n> .v-data-table__wrapper\n> table\n> tbody\n> tr:not(:last-child)\n> th:not(.v-data-table__mobile-row) {\n    border-bottom: thin solid #dfdfdf;\n}\n\n.theme--light.v-data-table\n> .v-data-table__wrapper\n> table\n> tbody\n> tr:last-child\ntd {\n    border-bottom: thin solid #dfdfdf;\n}\n\n.theme--light.v-data-table\n> .v-data-table__wrapper\n> table\n> tbody\n> tr:first-child\ntd {\n    border-top: thin solid #dfdfdf;\n}\n\n.v-data-table > .v-data-table__wrapper > table > tbody > tr > td {\n    height: 32px !important;\n}\n\n@media (min-width: 1264px) {\n    .container {\n        max-width: 1280px !important;\n    }\n}\n</style>\n"]}]}