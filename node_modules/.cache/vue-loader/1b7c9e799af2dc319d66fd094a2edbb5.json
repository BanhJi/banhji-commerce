{"remainingRequest":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/src/views/payroll/payment/bank_payment/Input.vue?vue&type=style&index=0&id=51f64e8b&scoped=true&lang=css&","dependencies":[{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/src/views/payroll/payment/bank_payment/Input.vue","mtime":1638499443259},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/@vue/cli-service/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi50aGVtZS0tbGlnaHQudi1kYXRhLXRhYmxlID4gLnYtZGF0YS10YWJsZV9fd3JhcHBlciA+IHRhYmxlID4gdGJvZHkgPiB0cjpob3Zlcjpub3QoLnYtZGF0YS10YWJsZV9fZXhwYW5kZWRfX2NvbnRlbnQpOm5vdCgudi1kYXRhLXRhYmxlX19lbXB0eS13cmFwcGVyKSB7CiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudCAhaW1wb3J0YW50Owp9CgoudGhlbWUtLWxpZ2h0LnYtZGF0YS10YWJsZSA+IC52LWRhdGEtdGFibGVfX3dyYXBwZXIgPiB0YWJsZSA+IHRib2R5ID4gdHIucHJpbWFyeTpob3Zlcjpub3QoLnYtZGF0YS10YWJsZV9fZXhwYW5kZWRfX2NvbnRlbnQpOm5vdCgudi1kYXRhLXRhYmxlX19lbXB0eS13cmFwcGVyKSB7CiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjQ0MzM2ICFpbXBvcnRhbnQ7Cn0KCi50aGVtZS0tbGlnaHQudi1kYXRhLXRhYmxlIHsKICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50ICFpbXBvcnRhbnQ7CiAgICBib3JkZXItdG9wOiB0aGluIHNvbGlkICNkZGQ7CiAgICBib3JkZXItYm90dG9tOiB0aGluIHNvbGlkICNkZGQ7CiAgICBib3JkZXItcmFkaXVzOiAwICFpbXBvcnRhbnQ7Cn0KCi50aGVtZS0tbGlnaHQudi1kYXRhLXRhYmxlID4gLnYtZGF0YS10YWJsZV9fd3JhcHBlciA+IHRhYmxlID4gdGJvZHkgPiB0cjpub3QoOmxhc3QtY2hpbGQpID4gdGQ6bm90KC52LWRhdGEtdGFibGVfX21vYmlsZS1yb3cpLAoudGhlbWUtLWxpZ2h0LnYtZGF0YS10YWJsZSA+IC52LWRhdGEtdGFibGVfX3dyYXBwZXIgPiB0YWJsZSA+IHRib2R5ID4gdHI6bm90KDpsYXN0LWNoaWxkKSA+IHRoOm5vdCgudi1kYXRhLXRhYmxlX19tb2JpbGUtcm93KSB7CiAgICBib3JkZXItYm90dG9tOiB0aGluIHNvbGlkICNkZGQ7Cn0KCi52LWRhdGEtdGFibGUgPiAudi1kYXRhLXRhYmxlX193cmFwcGVyID4gdGFibGUgPiB0Ym9keSA+IHRyID4gdGQgewogICAgaGVpZ2h0OiAzMnB4ICFpbXBvcnRhbnQ7CiAgICBib3JkZXItYm90dG9tOiB0aGluIHNvbGlkIHJnYmEoMCwgMCwgMCwgMC4xMikgIWltcG9ydGFudDsKfQo="},{"version":3,"sources":["Input.vue"],"names":[],"mappingswjBA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"Input.vue","sourceRoot":"src/views/payroll/payment/bank_payment","sourcesContent":["<template>\n    <v-form ref=\"form\" v-model=\"valid\" lazy-validation>\n        <v-row>\n            <v-col sm=\"3\" class=\"pr-1\">\n                <v-row class=\"my-1 mr-0\">\n                    <p>{{$t('p_select_month')}}</p>\n                </v-row>\n                <v-row class=\"my-1 mr-0\">\n                    <p>{{$t('financial_this_payroll')}}</p>\n                </v-row>\n                <v-row class=\"my-2 mr-0\">\n                    <v-col sm=\"0\" cols=\"0\" class=\"pt-0 pr-0\">\n                        <div style=\"line-height: 20px;\" class=\"code_text text-bold\">{{\n                            prefix.abbr}}\n                        </div>\n                    </v-col>\n                    <v-col sm=\"7\" cols=\"7\" class=\"pt-0 pl-0 pr-1\">\n                        <v-text-field class=\" custom-border \"\n                            v-model=\"number\"\n                            outlined\n                            :rules=\"[v => !!v || 'Number is required']\"\n                            required\n                            readonly/>\n                    </v-col>\n                    <v-col sm=\"2\" cols=\"2\" class=\"pt-0 px-0\">\n                        <v-icon color=\"black\" size=\"30\" class=\"border_qrcode\"\n                                @click=\"generateNumber\">mdi-qrcode\n                        </v-icon>\n                    </v-col>\n                </v-row>\n            </v-col>\n            <v-col sm=\"3\" class=\"px-1\">\n                <month-picker :initialMonth=\"start_date\"  @emitMonth=\"start_date = $event\" @onChanged=\"monthChange\" :rules=\"[v => !!v || $t('field_is_required')]\"/>\n                <v-select class=\"mt-1\"\n                    id=\"acc_type_selector\"\n                    :items=\"payrollBank\"\n                    item-text=\"bankName\"\n                    item-value=\"bankUuid\"\n                    v-model=\"selectBank\"\n                    :rules=\"[v => !!v || $t('bank_name_require')]\"\n                    @change=\"bankChange\"\n                    outlined\n                    return-object/>\n                <date-picker :initialDate=\"date\" :rules=\"[v => !!v || $t('field_is_required')]\" @emitDate=\"date = $event\"/>\n            </v-col>\n            <v-col sm=\"1\" class=\"\"></v-col>\n            <v-col sm=\"1\" class=\"pr-0 pt-4\">\n                <p>{{$t('payroll_batch_no')}}</p>\n                <p>{{$t('pay_date')}}</p>\n                <p>{{$t('bank_account')}}</p>\n                <p>{{$t('balance_in_banhji')}}</p>\n            </v-col>\n            <v-col sm=\"4\" class=\"pt-4\">\n                <v-select id=\"acc_type_selector\"\n                    :items=\"payrolls\"\n                    item-text=\"referenceNumber\"\n                    item-value=\"id\"\n                    v-model=\"selectReference\"\n                    :rules=\"[v => !!v || $t('field_is_required')]\"\n                    outlined\n                    @change=\"referenceChange\"/>\n                <v-select class=\"mt-1\"\n                    id=\"acc_type_selector\"\n                    :items=\"paymentSchedules\"\n                    :rules=\"[v => !!v || $t('require')]\"\n                    item-text=\"payDate\"\n                    item-value=\"payDate\"\n                    v-model=\"payDate\"\n                    @change=\"scheduleChange\"\n                    outlined/>\n                <v-select class=\"mt-1\"\n                    id=\"acc_type_selector\"\n                    :items=\"bankAccount\"\n                    :rules=\"[v => !!v || $t('bank_name_require')]\"\n                    item-text=\"account.account\"\n                    item-value=\"account.id\"\n                    v-model=\"selectBankAccount\"\n                    outlined\n                    return-object/>\n                <v-text-field outlined v-model=\"balanceInBanhJi\"/>\n            </v-col>\n            <v-col sm=\"12\">\n                <kendo-datasource ref=\"dataSourceInputPayment\"\n                    :data=\"payroll_list\"\n                    :page-size='100'\n                    :sort=\"sort\"/>\n                    <kendo-grid id=\"gridInputPayment\" class=\"grid-function\"\n                        :data-source-ref=\"'dataSourceInputPayment'\"\n                        :editable=\"false\"\n                        :pageable=\"true\"\n                        :pageable-refresh=\"true\"\n                        :column-menu=\"true\">\n                        <kendo-grid-column\n                            :width=\"150\"\n                            :field=\"'monthOf'\"\n                            :title=\"$t('month_of')\"\n                            :template=\"'<span>#= monthOf#</span>'\"\n                            :headerAttributes=\"{style: 'background-color: #EDF1F5'}\"/>\n                        <kendo-grid-column\n                            :width=\"200\"\n                            :field=\"'slipNumber'\"\n                            :title=\"$t('pay_slip')\"\n                            :template=\"'<span>#= slipNumber#</span>'\"\n                            :headerAttributes=\"{style: 'background-color: #EDF1F5'}\"/>\n                         <kendo-grid-column\n                            :width=\"200\"\n                            :field=\"'paymentCode'\"\n                            :title=\"$t('payment_code')\"\n                            :template=\"'<span>#= paymentCode#</span>'\"\n                            :headerAttributes=\"{style: 'background-color: #EDF1F5'}\"/>\n                        <kendo-grid-column\n                            :width=\"150\"\n                            :field=\"'employeeId'\"\n                            :title=\"$t('employee_id')\"\n                            :template=\"'<span>#= employeeId#</span>'\"\n                            :headerAttributes=\"{style: 'background-color: #EDF1F5'}\"/>\n                        <kendo-grid-column\n                            :width=\"250\"\n                            :field=\"'employeeName'\"\n                            :title=\"$t('employee_name')\"\n                            :template=\"'<span>#= employeeName#</span>'\"\n                            :headerAttributes=\"{style: 'background-color: #EDF1F5'}\"/>\n                        <kendo-grid-column\n                            :width=\"250\"\n                            :field=\"'bank'\"\n                            :title=\"$t('bank')\"\n                            :template=\"'<span>#= bank.bankName #</span>'\"\n                            :headerAttributes=\"{style: 'background-color: #EDF1F5'}\"/>\n                        <kendo-grid-column\n                            :width=\"200\"\n                            :field=\"'bankAccount'\"\n                            :title=\"$t('bank_account')\"\n                            :template=\"'<span>#= bankAccount #</span>'\"\n                            :headerAttributes=\"{style: 'background-color: #EDF1F5'}\"/>\n                        <kendo-grid-column\n                            :width=\"150\"\n                            :field=\"'amounts'\"\n                            :title=\"$t('amount')\"\n                            :template=\"'<span>#= kendo.toString(amount, `n2`) #</span>'\"\n                            :headerAttributes=\"{style: 'background-color: #EDF1F5'}\"\n                            :attributes=\"{style: 'text-align: right;'}\"/>\n                    </kendo-grid>\n                    <LoadingMe\n                        :isLoading=\"showLoading\"\n                        :fullPage=\"false\"\n                        type=\"loading\"\n                        :myLoading=\"true\"\n                    />\n            </v-col>\n        </v-row>\n    </v-form>\n</template>\n<script>\nimport LoadingMe from '@/components/Loading'\nimport kendo from \"@progress/kendo-ui\"\nconst payrollHandler    = require(\"@/scripts/payrollHandler\")\nconst settingsHandler   = require(\"@/scripts/settingsHandler\")\nconst cookieJS = require(\"@/cookie.js\");\nconst cookie = cookieJS.getCookie();\nexport default({\n    props:['propInput'],\n    data() {\n        return {\n            valid: true,\n            date: '',\n            showLoading: false,\n            start_date: '',\n            selectBank: '',\n            payrollBank:   [],\n            selectBankAccount: '',\n            bankAccount: [],\n            search:{\n                start_date: '',\n                end_date: ''\n            },\n            payrolls: [],\n            payroll_list: [],\n            selectReference: '',\n            sort:[\n                { field: 'referenceNumber', dir: 'asc' }\n            ],\n            num: 0,\n            batchPayment: {},\n            balanceInBanhJi: 0,\n            prefix: '',\n            number:  '',\n            lastNumber: 0,\n            referenceNumber: '',\n            loggedUser: {\n                id: cookie.creator,\n                name: cookie.email\n            },\n            paymentSchedules: [],\n            payDate: '',\n            prefix_format: ''\n        }\n    },\n    components: {\n        'LoadingMe': LoadingMe,\n        'month-picker' : ()=> import('@/components/custom_templates/MonthPicker'),\n        'date-picker' : ()=> import('@/components/custom_templates/DatePickerComponent')\n    },\n    computed:{\n        loadBatch(){\n            if(this.batch !== undefined){\n                return this.batch\n            }else{\n                return []\n            }\n        }\n    },\n    methods:{\n        returnData(data){\n            this.$emit('returnData', data)\n        },\n        loadSuccess(data){\n            this.$emit('headline',data)\n        },\n        async loadPayrollBank(){\n            new Promise(resolve => {\n                setTimeout(() => {\n                    resolve('resolved');\n                    payrollHandler.getBank().then(res => {\n                        this.payrollBank = res.data.data\n                        window.console.log(this.payrollBank,'payrollBank')\n                        this.bankChange()\n                    })\n                }, 300);\n            })\n        },\n        bankChange(){\n            this.bankAccount =  this.payrollBank.filter(item => item.bankUuid ===  this.selectBank.bankUuid)\n        },\n        monthChange(){\n            window.console.log('batchPayment', this.batchPayment)\n            let month_of = kendo.toString(new Date(this.start_date),'yyyy-MM-dd')\n            this.loadPayroll(month_of)\n\n            if(this.batchPayment.number !== ''){\n                this.number = this.batchPayment.number\n                window.console.log(this.number)\n            }else{\n                this.generateNumber()\n            }\n        },\n        loadPayroll(monthOf){\n            new Promise(resolve => {\n                setTimeout(() => {\n                    resolve('resolved')\n                    this.employee = []\n                    this.showLoading = true\n                    payrollHandler.getPayrollByMonth(monthOf).then(res => {\n                        this.showLoading = true\n                        if (res.data.statusCode === 200) {\n                            this.showLoading = false\n                            this.payrolls = res.data.data\n                        }\n                    })\n                }, 300)\n            })\n        },\n        referenceChange(){\n            let payroll_id = this.selectReference\n            new Promise(resolve => {\n                setTimeout(() => {\n                    resolve('resolved')\n                    this.employee = []\n                    payrollHandler.getPaymentSchedule(payroll_id).then(res => {\n                        if (res.data.statusCode === 200) {\n                            let resultSchedule = res.data.data\n                            if(resultSchedule.length > 0){\n                                this.paymentSchedules = resultSchedule[0].paymentSchedule\n                            }\n                        }\n                    })\n                }, 300)\n            })\n        },\n        loadBatchSingle(){\n            new Promise(resolve => {\n                setTimeout(() => {\n                    resolve('resolved')\n                    this.showLoading = true\n                    payrollHandler.getBatchSingle(this.$route.params.id).then(res => {\n                        this.showLoading = true\n                        if (res.statusCode === 200) {\n                            this.showLoading = false\n                            let result = res.data\n                            if(result.length > 0){\n                                this.batchPayment           = result[0]\n                                this.selectBank             = this.batchPayment.bank\n                                this.selectBankAccount      = this.batchPayment.bankAccount\n                                // let monthOf                 = this.batchPayment.monthOf ? this.batchPayment.monthOf: new Date()\n                                // this.start_date             = kendo.toString(new Date(monthOf),'yyyy-MM')\n                                this.selectReference        = this.batchPayment.referencePayroll ? this.batchPayment.referencePayroll: ''\n                                this.balanceInBanhJi        = this.batchPayment.balanceInBanhJi\n                                this.payDate                = this.batchPayment.payDate\n                                this.date                   = new Date(this.batchPayment.created || kendo.toString(new Date(),'yyyy-MM-dd')).toISOString().substr(0, 10)\n                                if(this.selectReference){\n                                    this.monthChange()\n                                    this.bankChange()\n                                    this.referenceChange()\n                                    \n                                }\n                                window.console.log('payDate',this.payDate )\n                                this.loadBatchItem(this.batchPayment)\n                            }\n                        }\n                    })\n                }, 300)\n            })\n        },\n        loadBatchItem(result){\n            window.console.log(2)\n            new Promise(resolve => {\n                setTimeout(() => {\n                    resolve('resolved')\n                    this.showLoading = true\n                    payrollHandler.getBatchItem(result.id).then(res => {\n                        this.showLoading = true\n                        if (res.statusCode === 200) {\n                            this.showLoading = false\n                            let result = res.data\n                            this.payroll_list = result\n                        }\n                    })\n                }, 300)\n            })\n        },\n        saveSpets(){\n            if (!this.$refs.form.validate()) {\n                this.$refs.form.validate()\n                return\n            }\n            this.showLoading = true\n            let ds = this.$refs.dataSourceInputPayment.kendoWidget()\n            let dataSource = ds.data()\n            const result = dataSource.map(o => {\n                return {\n                    bank:                       o.bank,\n                    bankAccount:                o.bankAccount,\n                    currency:                   o.currency,\n                    deduction:                  o.deduction,\n                    employeeId:                 o.employeeId,\n                    employeeName:               o.employeeName,\n                    employeeUuid:               o.employeeUuid,\n                    employee:                   o.employee,\n                    exchangeRate:               o.exchangeRate,\n                    grossSalary:                o.grossSalary,\n                    id:                         o.id,\n                    abbr:                       this.prefix.abbr,\n                    lastNumber:                 this.lastNumber,\n                    number:                     this.number,\n                    referenceNumber:            this.referenceNumber,\n                    location:                   o.location,\n                    monthOf:                    o.monthOf,\n                    natureEmployee:             o.natureEmployee,\n                    netPay:                     o.netPay,\n                    amountPay:                  o.amount,\n                    netSalary:                  o.netSalary,\n                    overTimeHoliday:            o.overTimeHoliday,\n                    overTimeWeekend:            o.overTimeWeekend,\n                    paymentMethod:              o.paymentMethod,\n                    payrollLiabilitie:          o.payrollLiabilitie,\n                    payrollReferenceNumber:     o.payrollReferenceNumber,\n                    payslip:                    o.payslip,\n                    position:                   o.position,\n                    slipNumber:                 o.slipNumber,\n                    salary:                     o.salary,\n                    salaryType:                 o.salaryType,\n                    status:                     o.status,\n                    taxBenefit:                 o.taxBenefit,\n                    taxRate:                    o.taxRate,\n                    taxSalary:                  o.taxSalary,\n                    taxSalaryUS:                o.taxSalaryUS,\n                    totalBenefit:               o.totalBenefit,\n                    segment:                    o.segment,\n                    amount:                     o.amount,\n                    exchangeAmount:             o.exchangeAmount,\n                    paymentCode:                o.paymentCode,\n                    paymentCodeId:              o.paymentCodeId,\n                    payrollId:                  o.payrollId,\n                }\n            })\n            if(result.length > 0){\n                let batchAmount = 0;\n                let totalBatch = 0;\n                ds.data().forEach(element => {\n                    totalBatch += 1\n                    batchAmount += parseFloat(element.amount)\n                });\n                this.batchAmount = batchAmount\n                this.totalBatch = totalBatch\n                let amountInWord   = this.inWords(this.batchAmount)\n                new Promise(resolve => {\n                    setTimeout(() => {\n                        this.showLoading = true\n                        resolve('resolved');\n                        let data = {\n                            id:                 this.$route.params.id ? this.$route.params.id : '',\n                            monthOf:            kendo.toString(new Date(this.start_date),'yyyy-MM-dd'),\n                            created:            kendo.toString(new Date(this.date),'yyyy-MM-dd'),\n                            bank:               this.selectBank,\n                            bankAccount:        this.selectBankAccount,\n                            balanceInBanhJi:    this.balanceInBanhJi,\n                            batchItem:          result,\n                            batchAmount:        this.batchAmount,\n                            totalBatch:         this.totalBatch,\n                            referencePayroll:   this.selectReference,\n                            amountInWord:       amountInWord,\n                            abbr:               this.prefix.abbr,\n                            lastNumber:         parseInt(this.lastNumber),\n                            number:             this.number,\n                            referenceNumber:    this.referenceNumber,\n                            type:               'payroll_payment',\n                            step:               2,\n                            status:             0,\n                            loggedUser:         this.loggedUser,\n                            payDate:            this.payDate\n                        };\n                        window.console.log(data)\n                        payrollHandler.createBatchPayment(data).then(response => {\n                            this.showLoading = true\n                            if (response.data.statusCode === 201) {\n                                this.loadSuccess(response.data.statusCode)\n                                this.showLoading = false\n                                this.$snotify.success('Success')\n                            }\n                        })\n                    }, 300);\n                })\n            }else{\n                this.showLoading = false\n                this.$snotify.error('Please check again! ')\n            }\n        },\n        inWords(totalRent){\n        //console.log(totalRent);\n            var a = ['','one ','two ','three ','four ', 'five ','six ','seven ','eight ','nine ','ten ','eleven ','twelve ','thirteen ','fourteen ','fifteen ','sixteen ','seventeen ','eighteen ','nineteen '];\n            var b = ['', '', 'twenty','thirty','forty','fifty', 'sixty','seventy','eighty','ninety'];\n            var number = parseFloat(totalRent).toFixed(2).split(\".\");\n            var num = parseInt(number[0]);\n            var digit = parseInt(number[1]);\n            //console.log(num);\n            if ((num.toString()).length > 10)  return 'overflow';\n            var n = ('000000000' + num).substr(-9).match(/^(\\d{2})(\\d{2})(\\d{2})(\\d{1})(\\d{2})$/);\n            var d = ('00' + digit).substr(-2).match(/^(\\d{2})$/);\n            if (!n) return; var str = '';\n            str += (n[3] != 0) ? (a[Number(n[3])] || b[n[3][0]] + ' ' + a[n[3][1]]) + 'thousand ' : '';\n            str += (n[4] != 0) ? (a[Number(n[4])] || b[n[4][0]] + ' ' + a[n[4][1]]) + 'hundred ' : '';\n            str += (n[5] != 0) ? (a[Number(n[5])] || b[n[5][0]] + ' ' + a[n[5][1]]) : '';\n            str += (d[1] != 0) ? ((str != '' ) ? \"and \" : '') + (a[Number(d[1])] || b[d[1][0]] + ' ' + a[d[1][1]]): 'Only!';\n            return str;\n        },\n        goBack(){\n            let batch_id = this.$route.params.id\n            let paymentList = this.payroll_list\n            if(batch_id && paymentList.length === 0){\n                new Promise(resolve => {\n                    setTimeout(() => {\n                        resolve('resolved')\n                        this.showLoading = true\n                        payrollHandler.deleteTransactions(batch_id).then(response => {\n                            if (response.statusCode === 200) {\n                                this.showLoading = false\n                                window.history.go(-2)\n                            }\n                        })\n                    },300)\n                })\n            }else{\n                window.history.go(-1)\n            }\n        },\n        loadPrefixes() {\n            new Promise(resolve => {\n                setTimeout(() => {\n                    resolve('resolved');\n                    settingsHandler.getPrefixes().then(res => {\n                        if (res.data.statusCode === 200) {\n                            let result = res.data.data\n                            this.prefixList = result.filter(p => p.type =='payroll_payment')\n                            this.prefix = this.prefixList[0]\n                            this.payNumber = this.prefix\n                            const lastNumber = this.zeroPad(parseInt(0), this.prefix.format)\n                            this.prefix_format = (this.prefix.abbr + this.prefix.numberSeparator + this.prefix.structure + this.prefix.numberSeparator + lastNumber + '@' + this.prefix.sequcencing)\n                        }\n                    })\n                }, 300)\n            })\n        },\n        generateNumber() {\n            if(this.batchPayment !== ''){\n                let sequcencing = ''\n                if(this.payNumber.sequcencing ==\"Year\"){\n                    sequcencing = new Date(this.start_date).toISOString().substr(0, 4)\n                }else if(this.payNumber.sequcencing ==\"Month\"){\n                    sequcencing = new Date(this.start_date).toISOString().substr(0, 7)\n                }else{\n                    sequcencing = ''\n                }\n                new Promise(resolve => {\n                    setTimeout(() => {\n                        resolve('resolved');\n                        let data = {\n                            abbr:       this.payNumber.abbr,\n                            structure:  this.payNumber.structure,\n                            date:       new Date(this.start_date),\n                            type:       'payroll_payment',\n                            pkId:       'ppm-',\n                            sequcencing: sequcencing\n                        }\n                        payrollHandler.getPrefixNumber(data).then(res => {\n                            this.showLoading = true;\n                            if(res.data.statusCode === 200){\n                                this.showLoading = false;\n                                const result = res.data.data\n                                const lastNumber = this.zeroPad(parseInt(result.lastNumber), this.payNumber.format)\n                                const number = result.suffix + this.payNumber.numberSeparator + lastNumber\n                                this.lastNumber = lastNumber\n                                this.number = number\n                                this.referenceNumber = this.payNumber.abbr + this.payNumber.numberSeparator + this.number\n                            }\n                        })\n                    }, 300);\n                })\n            }else{\n                this.lastNumber = this.batchPayment.lastNumber\n                this.number = this.batchPayment.number\n                this.referenceNumber = this.batchPayment.referenceNumber\n            }\n        },\n        zeroPad(num, places) {\n            return String(num).padStart(places, '0')\n        },\n        scheduleChange(){\n            let params =  {\n                payroll_id: this.selectReference,\n                payDate:    this.payDate\n            }\n            new Promise(resolve => {\n                setTimeout(() => {\n                    resolve('resolved')\n                    this.employee = []\n                    payrollHandler.getTransactionList(params).then(res => {\n                        if (res.data.statusCode === 200) {\n                            let result = res.data.data\n                            this.payroll_list = result\n                        }\n                    })\n                }, 300)\n            })\n        }\n    },\n    async mounted(){\n        await this.loadPayrollBank()\n        await this.loadBatchSingle()\n        await this.loadPrefixes()\n    },\n    activasted(){\n        this.loadBatchSingle()\n    },\n    watch:{\n        '$route': 'loadBatchSingle'\n    }\n})\n</script>\n<style scoped>\n    .theme--light.v-data-table > .v-data-table__wrapper > table > tbody > tr:hover:not(.v-data-table__expanded__content):not(.v-data-table__empty-wrapper) {\n        background-color: transparent !important;\n    }\n\n    .theme--light.v-data-table > .v-data-table__wrapper > table > tbody > tr.primary:hover:not(.v-data-table__expanded__content):not(.v-data-table__empty-wrapper) {\n        background-color: #f44336 !important;\n    }\n\n    .theme--light.v-data-table {\n        background-color: transparent !important;\n        border-top: thin solid #ddd;\n        border-bottom: thin solid #ddd;\n        border-radius: 0 !important;\n    }\n\n    .theme--light.v-data-table > .v-data-table__wrapper > table > tbody > tr:not(:last-child) > td:not(.v-data-table__mobile-row),\n    .theme--light.v-data-table > .v-data-table__wrapper > table > tbody > tr:not(:last-child) > th:not(.v-data-table__mobile-row) {\n        border-bottom: thin solid #ddd;\n    }\n\n    .v-data-table > .v-data-table__wrapper > table > tbody > tr > td {\n        height: 32px !important;\n        border-bottom: thin solid rgba(0, 0, 0, 0.12) !important;\n    }\n</style>\n"]}]}