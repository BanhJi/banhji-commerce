{"remainingRequest":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/src/views/insurance/InsurancePurchase.vue?vue&type=style&index=0&id=51357ebc&scoped=true&lang=css&","dependencies":[{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/src/views/insurance/InsurancePurchase.vue","mtime":1638499443244},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/@vue/cli-service/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoudi1pbnB1dC5jdXN0b20tcmFkaW8KICAudi1pbnB1dC0tc2VsZWN0aW9uLWNvbnRyb2xzX19pbnB1dAogIC52LWlucHV0LS1zZWxlY3Rpb24tY29udHJvbHNfX3JpcHBsZSB7CiAgZGlzcGxheTogbm9uZSAhaW1wb3J0YW50Owp9CgouZnVuY3Rpb25fd3JhcHBlciB7CiAgYm94LXNoYWRvdzogbm9uZSAhaW1wb3J0YW50Owp9Cgoudi1hcHBsaWNhdGlvbi0taXMtbHRyIC52LXRleHQtZmllbGQgLnYtaW5wdXRfX2FwcGVuZC1pbm5lciB7CiAgbWFyZ2luLXRvcDogMCAhaW1wb3J0YW50Owp9Cgoudi1pbnB1dF9fc2xvdCB7CiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZiAhaW1wb3J0YW50Owp9CgouZnVuY3Rpb25fY29udGVudCAubGFiZWwgewogIG1hcmdpbi1ib3R0b206IDEwcHg7CiAgZGlzcGxheTogaW5saW5lLWJsb2NrOwp9CgouYm9yZGVyX3JhZGl1czEwIHsKICBib3JkZXItcmFkaXVzOiAxMHB4ICFpbXBvcnRhbnQ7CiAgYmFja2dyb3VuZC1jb2xvcjogI2YyZjJmMjsKfQoKLnBhLTMudi1jYXJkIGg0IHsKICBmb250LXNpemU6IDE4cHg7CiAgY29sb3I6ICMzMzM7Cn0KCi5wYS0zLnYtY2FyZCBwIHsKICBmb250LXNpemU6IDEycHg7CiAgY29sb3I6ICNiNWI1YjU7Cn0KCi5hdHRhY2htZW50X2ZpbGUgewogIGJhY2tncm91bmQtY29sb3I6ICNlZmVkZWQ7CiAgYm9yZGVyLXJhZGl1czogMCAhaW1wb3J0YW50Owp9CgouYXR0YWNobWVudF90YWJsZS52LWRhdGEtdGFibGUgdGFibGUgewogIGJvcmRlcjogdGhpbiBzb2xpZCByZ2JhKDAsIDAsIDAsIDAuMTIpOwp9CgouYXR0YWNobWVudF90YWJsZSB0YWJsZSB0ciB0aCB7CiAgYm9yZGVyLWxlZnQ6IHRoaW4gc29saWQgcmdiYSgwLCAwLCAwLCAwLjEyKTsKICBoZWlnaHQ6IDM1cHg7CiAgYm9yZGVyLXJpZ2h0OiB0aGluIHNvbGlkIHJnYmEoMCwgMCwgMCwgMC4xMik7Cn0KCi5ibG9ja19kZWJpdCwKLmJsb2NrX2NyZWRpdCB7CiAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICNmZmY7Cn0KCi5ibG9ja19kZWJpdCBwLm51bWJlciwKLmJsb2NrX2NyZWRpdCBwLm51bWJlciB7CiAgZm9udC1zaXplOiAyNXB4OwogIGNvbG9yOiAjN2Y3ZjdmOwp9CgouYmxvY2tfZGViaXQgaDUsCi5ibG9ja19jcmVkaXQgaDUsCi5ibG9ja19kaWZmZXJlbmNlIGg1IHsKICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlOwogIGNvbG9yOiAjN2Y3ZjdmOwogIGZvbnQtc2l6ZTogMTVweDsKICBmb250LXdlaWdodDogbm9ybWFsOwp9CgouYmxvY2tfZGlmZmVyZW5jZSBoNSB7CiAgZm9udC1zaXplOiAxOHB4Owp9CgouYmxvY2tfZGlmZmVyZW5jZSBoNSBzcGFuIHsKICBmb250LXNpemU6IDE1cHg7Cn0KCi5jdXN0b21fZ3JpZCB0YWJsZSB0aDpsYXN0LWNoaWxkIHsKICB0ZXh0LWFsaWduOiByaWdodCAhaW1wb3J0YW50Owp9CgpAbWVkaWEgKG1pbi13aWR0aDogMTI2NHB4KSB7CiAgLmNvbnRhaW5lciB7CiAgICBtYXgtd2lkdGg6IDEyNTBweDsKICB9Cn0KCkBtZWRpYSAobWF4LXdpZHRoOiA1NzZweCkgewogIC5wdC02LmNvbC1zbS01LmNvbC0xMiB7CiAgICBwYWRkaW5nLXRvcDogMCAhaW1wb3J0YW50OwogIH0KCiAgLmNvZGVfdGV4dCB7CiAgICB3aWR0aDogMTAwJTsKICB9CgogIC5waG9uZV9ub19wdCB7CiAgICBwYWRkaW5nLXRvcDogMCAhaW1wb3J0YW50OwogIH0KCiAgLnNlbGVjdF90ZW1wbGF0ZSwKICAuc2F2ZV9vcHRpb24gewogICAgbWFyZ2luLWJvdHRvbTogMTBweDsKICB9Cn0KCi5oaWRlX3NtYWxsX2Jhcl9jbGFzcyB7CiAgbWF4LXdpZHRoOiAwOwogIHRyYW5zaXRpb246IDAuNXMgZWFzZS1pbjsKICBmbGV4OiAwIDAgMDsKICBwYWRkaW5nOiAwOwp9CgouaGlkZV9iaWdfYmFyX2NsYXNzIHsKICBtYXgtd2lkdGg6IDEwMCU7CiAgdHJhbnNpdGlvbjogMC41cyBlYXNlLWluOwogIGZsZXg6IDAgMCAxMDAlOwp9CgouaW5mb19hZGQgewogIGJhY2tncm91bmQtY29sb3I6ICNmZmZmZmY7Cn0KCi5zbWFsbF9zaWRlYmFyIHsKICBoZWlnaHQ6IDk4JTsKICBwb3NpdGlvbjogcmVsYXRpdmU7CiAgcGFkZGluZzogMTJweDsKICBiYWNrZ3JvdW5kLWNvbG9yOiAjZWRmMWY1Owp9CgouaWNvbkFycm93IHsKICByaWdodDogLTM1cHg7CiAgcG9zaXRpb246IGFic29sdXRlOwogIGJvdHRvbTogLTEwcHg7Cn0KCi5pY29uQXJyb3dIaWRlIHsKICBwb3NpdGlvbjogYWJzb2x1dGU7CiAgcmlnaHQ6IC03cHg7CiAgYm90dG9tOiAtMTBweDsKfQoKLmNvbG9yX2dyZXkgewogIGNvbG9yOiAjODA4MDgwOwp9CgouY2FyZF9ncmVlbiB7CiAgbWluLWhlaWdodDogNzBweDsKICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDBiMDUwICFpbXBvcnRhbnQ7CiAgY29sb3I6ICNmZmZmZmY7Cn0KCi5sYl9ib2xkIHsKICBmb250LXNpemU6IDEycHg7Cn0KCi5kZXRpYWxfc21hbGxzaWRlX3AgewogIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICBib3R0b206IDEwcHg7Cn0KCi5jYXJkX2JhY2tncm91bmQgewogIGJhY2tncm91bmQtY29sb3I6ICNlZGYxZjU7CiAgbWluLWhlaWdodDogMTIwcHg7Cn0KCi5kZXBvc2l0ZV9pbnB1dCB7CiAgd2lkdGg6IDEwMHB4Owp9CgouYnRuX3NhdmVfZHJhZnQgewogIGNvbG9yOiAjZmZmZmZmOwogIGJhY2tncm91bmQtY29sb3I6ICMwMGIwZjAgIWltcG9ydGFudDsKICB0ZXh0LXRyYW5zZm9ybTogY2FwaXRhbGl6ZTsKfQoKLnNhdmVfb3B0aW9uIHsKICBiYWNrZ3JvdW5kLWNvbG9yOiAjMjAzODY0ICFpbXBvcnRhbnQ7Cn0KCi5idG5fYWRkX3NtYWxsIHsKICBoZWlnaHQ6IDI3cHggIWltcG9ydGFudDsKICBtaW4td2lkdGg6IDI1cHggIWltcG9ydGFudDsKICBmb250LXNpemU6IDEwcHg7CiAgcGFkZGluZzogMCAyMnB4ICFpbXBvcnRhbnQ7CiAgYmFja2dyb3VuZC1jb2xvcjogIzAwYjA1MCAhaW1wb3J0YW50OwogIGNvbG9yOiAjZmZmZmZmOwogIGJvcmRlci1yYWRpdXM6IDAgIWltcG9ydGFudDsKfQoKLmxpc3Rfc2l0ZV9pbnYgewogIGJhY2tncm91bmQtY29sb3I6ICM5MmQwNTA7CiAgY29sb3I6ICNmZmZmZmY7CiAgZm9udC1zaXplOiAxMnB4Owp9CgoubGlzdF9zaXRlX2V4cCB7CiAgYmFja2dyb3VuZC1jb2xvcjogI2M1ZTBiNDsKICBjb2xvcjogIzAwMDAwMDsKICBmb250LXNpemU6IDEycHg7CiAgbGluZS1oZWlnaHQ6IDE2cHg7CiAgbWluLWhlaWdodDogNDBweDsKfQoKLmNoZWNrYm94X2ludiB7CiAgcGFkZGluZzogMnB4OwogIG1hcmdpbi10b3A6IDNweDsKICBtYXJnaW4tcmlnaHQ6IDJweDsKfQoKLmV4cF9zZWxlY3QgewogIGZvbnQtc2l6ZTogMTJweCAhaW1wb3J0YW50Owp9CgoudGhlbWUtLWxpZ2h0LnYtZGF0YS10YWJsZQogID4gLnYtZGF0YS10YWJsZV9fd3JhcHBlcgogID4gdGFibGUKICA+IHRib2R5CiAgPiB0cjpob3Zlcjpub3QoLnYtZGF0YS10YWJsZV9fZXhwYW5kZWRfX2NvbnRlbnQpOm5vdCgudi1kYXRhLXRhYmxlX19lbXB0eS13cmFwcGVyKSB7CiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQgIWltcG9ydGFudDsKfQo="},{"version":3,"sources":["InsurancePurchase.vue"],"names":[],"mappingsfile":"InsurancePurchase.vue","sourceRoot":"src/views/insurance","sourcesContent":["<template>\n  <v-app>\n    <v-container>\n      <v-row>\n        <v-col sm=\"12\" cols=\"12\">\n          <v-card\n            outlined\n            dense\n            class=\"pa-4 no_border rounded-sm\"\n            color=\"white\"\n          >\n            <v-row>\n              <v-col\n                class=\"bigSide py-0 pr-1\"\n                sm=\"8\"\n                cols=\"12\"\n                style=\"transition: 0.3s ease-in\"\n                :class=\"{ hide_big_bar_class: isHideBar }\"\n              >\n                <v-form ref=\"form\" v-model=\"valid\" lazy-validation>\n                  <v-card outlined dense class=\"no_border\">\n                    <h2 class=\"mb-0\">\n                      {{ $t(\"insurance_purchase\") }}\n                    </h2>\n\n                    <v-icon\n                      v-if=\"isHideBar\"\n                      onclick=\"window.history.go(-1); return false;\"\n                      style=\"\n                            cursor: pointer;\n                            color: #333;\n                            font-size: 40px;\n                                            \"\n                      class=\"float-right\"\n                      >close\n                    </v-icon>\n                    <span\n                      style=\"\n                                transition: 0.3s ease-in;\n                                z-index: 10;\n                            \"\n                      :class=\"{\n                        iconArrow: !isHideBar,\n                        iconArrowHide: isHideBar,\n                      }\"\n                    >\n                      <v-icon\n                        size=\"22\"\n                        class=\"arr_icon\"\n                        @click=\"HideSmallSideBar\"\n                        v-if=\"isHideBar\"\n                      >\n                        mdi-chevron-left-circle\n                      </v-icon>\n                      <v-icon\n                        size=\"22\"\n                        class=\"arr_icon\"\n                        @click=\"HideSmallSideBar\"\n                        v-if=\"!isHideBar\"\n                      >\n                        mdi-chevron-right-circle\n                      </v-icon>\n                    </span>\n                  </v-card>\n                  <v-card outlined dense class=\"px-1 no_border\" >\n                    <v-row>\n                      <v-col sm=\"4\" cols=\"12\" class=\"pb-0\">\n                        <label class=\"label\">{{ $t(\"vendors\") }}</label>\n                        <v-select outlined class=\"mt-1\" />\n\n                        <label class=\"label\" style=\"\">{{ $t(\"date\") }}</label>\n                        <app-datepicker\n                          :initialDate=\"expense.expense_date\"\n                          @emitDate=\"expense.expense_date = $event\"\n                          @onChanged=\"getExchangeRate\"\n                        />\n                        <label class=\"label\">{{ $t(\"number\") }}</label>\n                        <v-row class=\"mt-1 mr-0\">\n                          <v-col sm=\"3\" cols=\"2\" class=\"pt-0 pr-0\">\n                            <div class=\"code_text text-bold\">\n                                BIL\n                            </div>\n                          </v-col>\n                          <v-col sm=\"7\" cols=\"8\" class=\"py-0 pl-0 pr-0 pr-1\">\n                            <v-text-field\n                              :rules=\"[(v) => !!v || 'Number is required']\"\n                              v-model=\"expense.number\"\n                              class=\"custom-border\"\n                              outlined\n                              readonly\n                              required\n                            />\n                          </v-col>\n                          <v-col sm=\"2\" cols=\"2\" class=\"py-0 px-0\">\n                            <v-icon\n                              color=\"black\"\n                              size=\"30\"\n                              class=\"border_qrcode\"\n                              @click=\"generateNumber\"\n                              >mdi-qrcode\n                            </v-icon>\n                          </v-col>\n                        </v-row>\n                      </v-col>\n                      <v-col sm=\"4\" cols=\"12\" class=\"pb-0\">\n                        <label class=\"label\">{{\n                          $t(\"vendors_invoice_no\")\n                        }}</label>\n                        <v-text-field outlined class=\"mt-1\" />\n\n                        <label class=\"label\" style=\"\">{{ $t(\"term\") }}</label>\n                        <v-select outlined class=\"mt-1\" />\n\n                        <label class=\"label\">{{ $t(\"payable_account\") }}</label>\n                        <v-select outlined class=\"mt-1\" />\n                      </v-col>\n                      <v-col sm=\"4\" cols=\"12\" class=\"pb-0\">\n                        <label class=\"label\">{{ $t(\"invoice_number\") }}</label>\n                        <v-text-field outlined class=\"mt-1\" />\n\n                        <label class=\"label\" style=\"\">{{\n                          $t(\"due_date\")\n                        }}</label>\n                        <app-datepicker\n                          :initialDate=\"expense.expense_date\"\n                          @emitDate=\"expense.expense_date = $event\"\n                          @onChanged=\"getExchangeRate\"\n                        />\n                        <label class=\"label\">{{ $t(\"bill_currency\") }}</label>\n                        <v-select outlined class=\"mt-1\" placeholder=\"USD\" />\n                      </v-col>\n                    </v-row>\n                    <v-row>\n                      <v-col sm=\"12\" cols=\"12\" class=\"py-0\">\n                        <kendo-datasource\n                          ref=\"expenseAccountDS\"\n                          :data=\"expenseEntries\"\n                          :change=\"onExpenseAccountDSChanges\"\n                        />\n                        <kendo-grid\n                          id=\"expenseGrid\"\n                          ref=\"expenseGrid\"\n                          class=\"grid-function\"\n                          :data-source-ref=\"'expenseAccountDS'\"\n                          :sortable=\"false\"\n                          :filterable=\"false\"\n                          :column-menu=\"true\"\n                          :editable=\"true\"\n                          :scrollable-virtual=\"true\"\n                        >\n                          <kendo-grid-column\n                            :title=\"$t('type_of_insurance')\"\n                            :template=\"rowNumberTmpl\"\n                            :width=\"120\"\n                            :column-menu=\"false\"\n                            :headerAttributes=\"{\n                              style: 'background-color: #EDF1F5;',\n                              class: 'text-products',\n                            }\"\n                            :attributes=\"{\n                              style: 'text-align: products',\n                            }\"\n                          />\n                          <kendo-grid-column\n                            :field=\"'account'\"\n                            :title=\"$t('policy_no')\"\n                            :width=\"200\"\n                            :template=\"'<span>#=account.name||``#</span>'\"\n                            :editor=\"expenseAccountEditor\"\n                            :headerAttributes=\"{\n                              style: 'background-color: #EDF1F5',\n                            }\"\n                          />\n                          <kendo-grid-column\n                            :field=\"'description'\"\n                            :title=\"$t('account')\"\n                            :width=\"200\"\n                            :headerAttributes=\"{\n                              style: 'background-color: #EDF1F5',\n                            }\"\n                          />\n                          <kendo-grid-column\n                            :field=\"'quantity'\"\n                            :title=\"$t('description')\"\n                            :width=\"160\"\n                            :headerAttributes=\"{\n                              style: 'background-color: #EDF1F5',\n                            }\"\n                          />\n                          <kendo-grid-column\n                            :field=\"'uom'\"\n                            :title=\"$t('qty')\"\n                            :editor=\"UomEditor\"\n                            :template=\"'<span>#=uom.name||``#</span>'\"\n                            :width=\"150\"\n                            :headerAttributes=\"{\n                              style:\n                                'text-align: right; background-color: #EDF1F5',\n                            }\"\n                            :attributes=\"{\n                              style: 'text-align: right;',\n                            }\"\n                          />\n                          <kendo-grid-column\n                            :field=\"'price'\"\n                            :title=\"$t('price')\"\n                            :width=\"150\"\n                            :editor=\"numberEditor\"\n                            :template=\"\n                              '<span>#=kendo.toString(price, decimalFormat)#</span>'\n                            \"\n                            :headerAttributes=\"{\n                              style:\n                                'text-align: right; background-color: #EDF1F5',\n                            }\"\n                            :attributes=\"{\n                              style: 'text-align: right',\n                            }\"\n                          />\n                          <kendo-grid-column\n                            :field=\"'amount'\"\n                            :title=\"$t('amount')\"\n                            :width=\"150\"\n                            :editable=\"\n                              () => {\n                                return false;\n                              }\n                            \"\n                            :editor=\"numberEditor\"\n                            :template=\"\n                              '<span>#=kendo.toString(amount, decimalFormat)#</span>'\n                            \"\n                            :headerAttributes=\"{\n                              style:\n                                'text-align: right; background-color: #EDF1F5',\n                            }\"\n                            :attributes=\"{\n                              style: 'text-align: right',\n                            }\"\n                          />\n                          <kendo-grid-column\n                            :field=\"'discount'\"\n                            :title=\"$t('discount')\"\n                            :template=\"'<span>#=discount.name||``#</span>'\"\n                            :editor=\"PurchaseDiscountItemEditor\"\n                            :width=\"150\"\n                            :hidden=\"!purchaseFormContent.discountItem\"\n                            :headerAttributes=\"{\n                              style:\n                                'text-align: right; background-color: #EDF1F5',\n                            }\"\n                            :attributes=\"{\n                              style: 'text-align: right',\n                            }\"\n                          />\n                          <kendo-grid-column\n                            :field=\"'tax_item'\"\n                            :title=\"$t('tax')\"\n                            :template=\"\n                              '<span>#=tax_item.defaultTax||``#</span>'\n                            \"\n                            :editor=\"PurchaseTaxEditor\"\n                            :width=\"150\"\n                            :headerAttributes=\"{\n                              style:\n                                'text-align: right; background-color: #EDF1F5',\n                            }\"\n                            :attributes=\"{\n                              style: 'text-align: right',\n                            }\"\n                          />\n                  \n                          <kendo-grid-column\n                            :command=\"{\n                              iconClass: 'k-icon k-i-trash',\n                              text: 'Delete',\n                              click: removeRow,\n                              class: 'btn-plus',\n                            }\"\n                            :title=\"'&nbsp;'\"\n                            :width=\"100\"\n                            :headerAttributes=\"{\n                              style:\n                                'text-align: right; background-color: #EDF1F5',\n                            }\"\n                          />\n                        </kendo-grid>\n                      </v-col>\n                      <v-col sm=\"12\" cols=\"12\" class=\"py-0 pb-3\">\n                        <v-row>\n                          <v-col sm=\"9\" cols=\"12\" class=\"py-0\">\n                            <v-btn\n                              color=\"primary\"\n                              class=\"float-left mt-2 btn_plus rounded-0 white--text mr-2\"\n                              @click=\"addRow\"\n                            >\n                              <v-icon size=\"\" class=\"ma-1\">mdi-plus </v-icon>\n                            </v-btn>\n                          </v-col>\n                        </v-row>\n                      </v-col>\n                    </v-row>\n                  </v-card>\n                  <v-divider />\n                  <v-card outlined dense class=\"no_border function_footer\">\n                    <v-menu>\n                      <template v-slot:activator=\"{ on }\">\n                        <v-btn\n                          color=\"black\"\n                          outlined\n                          class=\"mr-2 text-capitalize  black--text float-left\"\n                          v-on=\"on\"\n                        >\n                          {{ $t(\"select_template\") }}\n                          <v-icon size=\"\" class=\"ma-1\">expand_more </v-icon>\n                        </v-btn>\n                      </template>\n                      <v-list>\n                        <v-list-item\n                          v-for=\"(item, index) in templates\"\n                          :key=\"index\"\n                        >\n                          <v-list-item-title\n                            >{{ item.title }}\n                          </v-list-item-title>\n                        </v-list-item>\n                      </v-list>\n                    </v-menu>\n                    <v-btn\n                      color=\"black\"\n                      class=\"text-capitalize  white--text float-left\"\n                      @click=\"cancel\"\n                      >{{ $t(\"cancel\") }}\n                    </v-btn>\n                    <v-menu>\n                      <template v-slot:activator=\"{ on }\">\n                        <v-btn\n                          color=\"primary\"\n                          class=\"ml-2 float-right text-capitalize  white--text\"\n                          v-on=\"on\"\n                        >\n                          {{ $t(\"save_option\") }}\n                          <v-icon size=\"\" class=\"ma-1\">expand_more </v-icon>\n                        </v-btn>\n                      </template>\n                      <v-list rounded>\n                        <v-list-item-group>\n                          <v-list-item v-if=\"!isEdit\">\n                            <v-list-item-content>\n                              <v-list-item-title\n                                @click=\"onSaveOptionClick(SaveOption.SAVEDRAFT)\"\n                              >\n                                {{ $t(\"save_close\") }}\n                              </v-list-item-title>\n                            </v-list-item-content>\n                          </v-list-item>\n                          <v-list-item v-if=\"!isEdit\">\n                            <v-list-item-content>\n                              <v-list-item-title\n                                @click=\"onSaveOptionClick(SaveOption.SAVENEW)\"\n                              >\n                                {{ $t(\"save_new\") }}\n                              </v-list-item-title>\n                            </v-list-item-content>\n                          </v-list-item>\n                          <v-list-item>\n                            <v-list-item-content>\n                              <v-list-item-title\n                                @click=\"onSaveOptionClick(SaveOption.SAVEPRINT)\"\n                              >\n                                {{ $t(\"save_print\") }}\n                              </v-list-item-title>\n                            </v-list-item-content>\n                          </v-list-item>\n                        </v-list-item-group>\n                      </v-list>\n                    </v-menu>\n                    <v-btn\n                      color=\"secondary\"\n                      class=\"float-right white--text text-capitalize \"\n                      @click=\"onSaveOptionClick(SaveOption.SAVECLOSE)\"\n                    >\n                      {{ $t(\"save_close\") }}\n                    </v-btn>\n                  </v-card>\n                </v-form>\n              </v-col>\n              <v-col\n                class=\"smallSide\"\n                sm=\"4\"\n                style=\"transition: 0.3s ease-in\"\n                :class=\"{ hide_small_bar_class: isHideBar }\"\n              >\n                <h3\n                  style=\"color: #b3b5bc; font-size: 20px\"\n                  v-if=\"!isHideBar\"\n                  class=\"text-uppercase float-right mt-n3\"\n                >\n                  <span class=\"pointer\" @click=\"Help('insurance purchase')\">\n                    {{ $t(\"help\") }}\n                  </span>\n                  <v-icon\n                    onclick=\"window.history.go(-1); return false;\"\n                    style=\"\n                                            cursor: pointer;\n                                            color: #333;\n                                            font-size: 40px;\n                                        \"\n                    class=\"float-right mt-n1\"\n                    >close\n                  </v-icon>\n                </h3>\n\n                <div v-if=\"!isHideBar\" class=\"small_sidebar mt-9 px-4 grayBg\">\n                   <v-card class=\"pa-3 no-boxshadow d-flex justify-space-between align-center\"\n                          min-height=\"50px\" color=\"primary\">\n                    <h3 style=\"font-size: 16px\" class=\"text-white text-uppercase\">\n                      {{ $t('expense_amount') }}</h3>\n                    <h3 class=\"text-bold float-right text-white mt-1\" style=\"font-size: 20px\">\n                      10,000,000</h3>\n                  </v-card>\n                  <v-row>\n                    <v-col sm=\"12\" cols=\"12\" class=\"pb-0 pt-2\">\n                      <h4 class=\"text-uppercase\">\n                        {{ $t(\"analysis\") }}\n                      </h4>\n                      <label class=\"label\">{{ $t(\"segment\") }}</label>\n                      <app-segment-dropdownlist\n\n                        :initSegment=\"segment\"\n                        @emitSegment=\"segment = $event\"\n                      />\n                      <label class=\"label\">{{ $t(\"for_the_month_of\") }}</label>\n                      <app-monthof-picker\n                        :initMonthOf=\"expense.month_of\"\n                        @emitMonthOf=\"expense.month_of = $event\"\n                      />\n                    </v-col>\n                  </v-row>\n                </div>\n              </v-col>\n            </v-row>\n          </v-card>\n        </v-col>\n      </v-row>\n      <LoadingMe\n        :isLoading=\"showLoading\"\n        :fullPage=\"true\"\n        :myLoading=\"true\"\n        :alertMessage=\"loadingAlert\"\n        :color=\"loadingColorAlert\"\n        :alertText=\"loadingTextAlert\"\n      />\n    </v-container>\n  </v-app>\n</template>\n\n<script>\nimport { i18n } from \"@/i18n\";\nimport kendo from \"@progress/kendo-ui\";\nimport Helper from \"@/helper.js\";\n\nconst purchaseFormContentHandler = require(\"@/scripts/purchaseFormContentHandler\");\nconst billingHandler = require(\"@/scripts/invoice/handler/billingHandler\");\nimport {\n  ExpenseModel,\n  ExpenseEntryModel,\n  ExpenseEntryExtendedModel,\n  JournalModel,\n  JournalEntryModel,\n  AccountModel,\n  CurrencyModel,\n  ExchangeRateModel,\n  PaymentTermModel,\n  SupplierModel,\n  EmployeeModel,\n  ContactModel,\n  ClassModel,\n  UomModel,\n  LocationModel,\n  SegmentModel,\n  ProjectModel,\n  DiscountItemModel,\n  TaxModel,\n  Expenses,\n  PurchaseFormContent,\n} from \"@/scripts/model/AppModels\";\nimport { ShowResource } from \"@/observable/store\";\n\nconst $ = require(\"jquery\");\n\n/* Store */\nimport store from \"@/store\"\nconst institute = store.state.institute.institute\n\nconst {\n  expenseHandler,\n  cashAdvanceHandler,\n  accountHandler,\n  journalHandler,\n  discountItemHandler,\n  taxHandler,\n  uomHandler,\n  classHandler,\n} = require(\"@/scripts/AppHandlers\");\nconst {\n  AccountEditor,\n  ClassEditor,\n  UomEditor,\n  // BillableEditor,\n  PurchaseDiscountItemEditor,\n  PaymentMethodEditor,\n  PurchaseTaxEditor,\n  // MarkupEditor,\n} = require(\"@/scripts/kendo_editor/Collections\");\nconst {\n  EntityType,\n  SaveOption,\n  AccountTypeCode,\n} = require(\"@/scripts/default_setup/Collections\");\nconst PAYMENT_TERM_TYPE = \"pmt-supplier\";\nconst DISCOUNT_ITEM_TYPE = \"?type=Purchase\";\n// const PAYMENT_METHOD_AS = '?optionType=Supplier'\nexport default {\n  name: \"Expense\",\n  components: {\n    LoadingMe: () => import(\"@/components/Loading\"),\n    \"app-datepicker\": () =>\n      import(\"@/components/custom_templates/DatePickerComponent\"),\n    \"app-monthof-picker\": () =>\n      import(\"@/components/kendo_templates/MonthOfPicker\"),\n    \"app-segment-dropdownlist\": () =>\n      import(\"@/components/dropdownlist/Segment\"),\n  },\n  props: {\n    initExpense: {\n      type: ExpenseModel,\n    },\n  },\n  data: () => ({\n    // Obj\n    expense: new ExpenseModel(),\n    journal: new JournalModel(),\n    journalEntries: [],\n    employee: new EmployeeModel(),\n    supplier: new SupplierModel(),\n    paymentTerm: new PaymentTermModel(),\n    currency: new CurrencyModel(institute.baseCurrency),\n    exchangeRate: new ExchangeRateModel(institute.baseCurrency),\n    transactionAccount: new AccountModel(),\n    advanceSettlementClearingAccount: new AccountModel(),\n    otherClearingSuspenseAccount: new AccountModel(),\n    location: new LocationModel(),\n    segment: new SegmentModel(),\n    project: new ProjectModel(),\n    // List\n    cashAdvances: [],\n    accounts: [],\n    expenseAccounts: [],\n    transactionAccounts: [],\n    expenseEntries: [],\n    // Entry Uuid\n    depositEntryUuid: kendo.guid(),\n    transactionEntryUuid: kendo.guid(),\n    // Other\n    subTotal: 0,\n    discountAmount: 0,\n    purchaseTax: 0,\n    whdTax: 0,\n    totalAmount: 0,\n    supplierDepositAmount: 0,\n    depositAmount: 0,\n    amountDue: 0,\n    hasAdditionalCost: false,\n    files: [],\n    user: Helper.getUser(),\n    templates: [],\n    paymentTermType: PAYMENT_TERM_TYPE,\n    // Form validation\n    valid: true,\n    isEdit: false,\n    alert: false,\n    errorMessage: \"\",\n    saveMode: \"\",\n    SaveOption: SaveOption,\n    // Editors\n    AccountEditor: AccountEditor,\n    ClassEditor: ClassEditor,\n    UomEditor: UomEditor,\n    // BillableEditor: BillableEditor,\n    PurchaseDiscountItemEditor: PurchaseDiscountItemEditor,\n    PaymentMethodEditor: PaymentMethodEditor,\n    PurchaseTaxEditor: PurchaseTaxEditor,\n    // MarkupEditor: MarkupEditor,\n    // Sidebar\n    col_expand: 9,\n    col_hide: 3,\n    isHideBar: false,\n    // LoadingMe\n    showLoading: false,\n    loadingAlert: false,\n    loadingColorAlert: \"\",\n    loadingTextAlert: \"\",\n    // By B Nimol\n    decimalFormat: \"n2\",\n    purchaseFormContent: PurchaseFormContent,\n    depositBalance: 0,\n    txnExpense: new Expenses(),\n    transactionType: {},\n    supplierDiscountItem: [],\n  }),\n  methods: {\n    removeEmptyValues(obj) {\n      for (let propName in obj) {\n        if (!obj[propName] || obj[propName].length === 0) {\n          delete obj[propName];\n        } else if (typeof obj[propName] === \"object\") {\n          this.removeEmptyValues(obj[propName]);\n        }\n      }\n      return obj;\n    },\n    onLocationChange() {\n      window.console.log(\n        \"location\",\n        this.removeEmptyValues(this.segment),\n        this.removeEmptyValues(this.location)\n      );\n    },\n    mappingExpense(expense) {\n      const ds = this.$refs.expenseAccountDS.kendoWidget();\n      const accountLine = ds.data().filter((n) => n.amount > 0);\n      this.txnExpense.id = expense.uuid;\n      this.txnExpense.journal_uuid = expense.journal_uuid;\n      this.txnExpense.type = \"Expense\";\n      this.txnExpense.abbr = this.abbr(this.transactionType);\n      this.txnExpense.transactionType = this.transactionType;\n      this.txnExpense.referenceNo = expense.number;\n      // this.txnExpense.referenceNo = expense.number\n      this.txnExpense.transactionDate = expense.expense_date;\n      this.txnExpense.dueDate = expense.due_date;\n      this.txnExpense.billDate = expense.bill_date;\n      this.txnExpense.billNumber = expense.bill_number;\n      this.txnExpense.currency = this.removeEmptyValues(expense.bill_currency);\n      this.txnExpense.supplier = this.supplierMap(expense.supplier);\n      this.txnExpense.employee = this.removeEmptyValues(expense.employee);\n      this.txnExpense.paymentTerm = this.removeEmptyValues(this.paymentTerm);\n      this.txnExpense.segment = this.removeEmptyValues(this.segment);\n      this.txnExpense.location = this.removeEmptyValues(this.location);\n      this.txnExpense.project = this.removeEmptyValues(this.project);\n      this.txnExpense.monthOf = expense.month_of;\n\n      this.txnExpense.additionalCostSupplier = this.removeEmptyValues(\n        expense.additional_cost_supplier\n      );\n      this.txnExpense.use_for_transaction_uuid =\n        expense.use_for_transaction_uuid;\n      this.txnExpense.useForOption = expense.use_for_option;\n      this.txnExpense.transactionNote = expense.voucher_note;\n      this.txnExpense.journalNote = expense.journal_note;\n      this.txnExpense.itemLines = accountLine;\n      this.txnExpense.account = this.removeEmptyValues(\n        this.account(this.transactionAccount)\n      );\n      this.txnExpense.saveOption = expense.is_draft;\n      this.txnExpense.status = 1;\n      this.txnExpense.createdAt = expense.created_date;\n\n      this.txnExpense.total = this.totalAmount;\n      this.txnExpense.amountDue = this.amountDue;\n      this.txnExpense.remainingAmount = this.amountDue;\n      this.txnExpense.subTotal = this.subTotal;\n      this.txnExpense.purchaseTax = this.purchaseTax;\n      this.txnExpense.whdTax = this.whdTax;\n      this.txnExpense.supplierDiscountItem = this.supplierDiscountItem;\n      this.txnExpense.loggedUser = this.loggedUser(this.expense.created_by);\n\n      this.txnExpense.txnRate = this.exchangeRate.rate;\n      this.txnExpense.discountTotal = this.discountAmount;\n      this.txnExpense.depositAmount = this.depositBalance;\n      this.txnExpense.depositDeduction = this.depositAmount;\n      this.txnExpense.exchangeDepositDeduction =\n        this.depositAmount * this.exchangeRate.rate || 0;\n      this.txnExpense.exchangeAmount =\n        this.amountDue * this.exchangeRate.rate || 0;\n\n      window.console.log(\"Expense\", this.txnExpense);\n    },\n    loggedUser(user) {\n      if (user) {\n        return {\n          id: user.id,\n          name: user.user_name,\n          email: user.email,\n        };\n      }\n      return {};\n    },\n    supplierMap(supplier) {\n      if (supplier) {\n        return {\n          id: supplier.uuid,\n          name: supplier.name,\n          email: supplier.email,\n          phone: supplier.phone,\n          address: supplier.address,\n        };\n      }\n      return {};\n    },\n    saveTxnExpense(expenseId, journalId) {\n      this.txnExpense[\"uuid\"] = expenseId;\n      this.txnExpense[\"id\"] = this.txnExpense.id ? this.txnExpense.id : \"\";\n      this.txnExpense[\"journal_uuid\"] = journalId;\n      this.txnExpense[\"actionType\"] = this.$route.params.id\n        ? this.$route.query.type\n        : \"new\";\n      let data = this.txnExpense;\n      billingHandler\n        .createExpense(data)\n        .then((response) => {\n          if (response.data.statusCode === 201) {\n            this.$snotify.success(\"Successfully\");\n          }\n        })\n        .catch((e) => {\n          this.$snotify.error(\"Something went wrong\");\n          this.errors.push(e);\n        });\n    },\n    removeDuplicate(array) {\n      const result = [];\n      const map = new Map();\n      for (const item of array) {\n        if (!map.has(item.id)) {\n          map.set(item.id, true); // set any value to Map\n          result.push(item);\n        }\n      }\n      return result;\n    },\n    account(txnAccount) {\n      if (txnAccount) {\n        return {\n          id: txnAccount.uuid,\n          name: txnAccount.name,\n          local_name: txnAccount.local_name,\n          number: txnAccount.number,\n          is_taxable: txnAccount.is_taxable,\n          banhjiAccCode: txnAccount.banhjiAccCode,\n          group_code: txnAccount.group_code,\n          parent_account: txnAccount.parent_account,\n          type_code: txnAccount.type_code,\n          account_type: txnAccount.account_type,\n        };\n      }\n      return {};\n    },\n    abbr(transactionType) {\n      if (transactionType) {\n        return transactionType.abbr;\n      }\n      return \"\";\n    },\n    supplierDepositBalance() {\n      this.supplierDepositAmount = 0;\n      if (this.depositBalance > 0) {\n        this.supplierDepositAmount =\n          this.depositBalance / this.exchangeRate.rate;\n      }\n    },\n    async loadDepositBalance(id) {\n      new Promise((resolve) => {\n        setTimeout(() => {\n          resolve(\"resolved\");\n          const strFilter = id + \"?type=dep\";\n          this.supplierDepositAmount = 0;\n          this.depositAmount = 0;\n          billingHandler\n            .balance(strFilter)\n            .then((res) => {\n              if (res.data.statusCode === 200) {\n                const data = res.data.data;\n                if (data.length > 0) {\n                  this.depositBalance = data[0].balance;\n                  this.supplierDepositBalance();\n                }\n              }\n            })\n            .catch();\n          {\n            this.showLoading = false;\n          }\n        }, 300);\n      });\n    },\n    async loadPurchaseFormContent() {\n      new Promise((resolve) => {\n        setTimeout(() => {\n          resolve(\"resolved\");\n          purchaseFormContentHandler.list().then((res) => {\n            if (res.data.statusCode === 200) {\n              const data = res.data.data;\n              if (data.length > 0) {\n                const supplierSetting = data[0];\n                this.purchaseFormContent = supplierSetting;\n                if (supplierSetting.hasOwnProperty(\"decimal\")) {\n                  this.decimalFormat = \"n\" + supplierSetting.decimal;\n                  // Add 2 default lines\n                  this.addRow();\n                  this.addRow();\n                }\n              }\n            }\n          });\n        }, 100);\n      });\n    },\n    numberFormat(value) {\n      return kendo.toString(value, `${this.decimalFormat}`);\n    },\n    onDueDateChanged() {\n      this.calculateDueDate(this.paymentTerm);\n    },\n    async onVendorChanged() {\n      let paymentBilling = {};\n      if (\n        Object.prototype.hasOwnProperty.call(this.supplier, \"paymentBilling\")\n      ) {\n        paymentBilling = this.supplier.paymentBilling;\n        if (\n          Object.prototype.hasOwnProperty.call(paymentBilling, \"paymentTerm\")\n        ) {\n          this.paymentTerm = new PaymentTermModel(paymentBilling.paymentTerm);\n          this.calculateDueDate(paymentBilling.paymentTerm);\n        }\n      }\n      this.loadDepositBalance(this.supplier.id);\n    },\n    calculateDueDate(paymentTerm) {\n      if (paymentTerm.hasOwnProperty(\"netDue\")) {\n        const netDue = paymentTerm.netDue;\n        const dueDate = new Date(this.expense.expense_date);\n        dueDate.setDate(dueDate.getDate() + parseInt(netDue)); //number  of days to add, e.x. 15 days\n        this.expense.due_date = dueDate.toISOString().substr(0, 10);\n      }\n    },\n    numberEditor(container, options) {\n      kendo\n        .jQuery('<input data-bind=\"value:' + options.field + '\"/>')\n        .appendTo(container)\n        .kendoNumericTextBox({\n          decimals: 30,\n          format: `${this.decimalFormat}`,\n        });\n    },\n    Help(key_search) {\n      ShowResource(key_search);\n    },\n    // Initial Data\n    initialData() {\n      if (this.initExpense) {\n        // Edit Mode\n        this.expense = this.initExpense;\n        this.bindData();\n      } else {\n        // Brand New Mode\n        this.setDefaultData();\n      }\n    },\n    // Set default data\n    setDefaultData() {\n      // Brand New Mode\n      this.isEdit = false;\n\n      this.expense = new ExpenseModel({\n        date: new Date().toISOString().substr(0, 10),\n        due_date: new Date().toISOString().substr(0, 10),\n        bill_date: new Date().toISOString().substr(0, 10),\n        month_of: new Date().toISOString().substr(0, 7),\n      });\n\n      // Entry Uuid\n      this.depositEntryUuid = kendo.guid();\n      this.transactionEntryUuid = kendo.guid();\n\n      // Generate Number\n      this.generateNumber();\n\n      // Add 2 default lines\n      // this.addRow();\n      // this.addRow();\n\n      this.autoCalculate();\n    },\n    // Bind data from prop for edit mode\n    async bindData() {\n      this.showLoading = true;\n\n      // Edit Mode\n      this.isEdit = true;\n\n      // Currency\n      this.currency = new CurrencyModel(this.expense.bill_currency);\n      this.exchangeRate = new ExchangeRateModel(this.expense.bill_currency);\n      this.exchangeRate.id = this.expense.expense_entries[0].exchange_rate_uuid;\n      this.exchangeRate.rate = this.expense.expense_entries[0].exchange_rate;\n\n      // Payment Term\n      let paymentTerms = await this.$store.dispatch('paymentTerms/getList');\n      this.paymentTerm = paymentTerms.find(i => i.id === this.expense.payment_term);\n\n      // Contacts\n      this.supplier = new SupplierModel(this.expense.supplier);\n      this.employee = new EmployeeModel(this.expense.employee);\n      this.loadCashAdvance();\n      this.hasAdditionalCost = Boolean(\n        this.expense.additional_cost_supplier.uuid\n      );\n\n      // Sidebar\n\t\t\tlet locations = await this.$store.dispatch('locations/getList');\n\t\t\tthis.location = new LocationModel(locations.find(i => i.id === this.expense.location_uuid));\n\n\t\t\tlet segments = await this.$store.dispatch('segments/getList');\n\t\t\tthis.segment = new SegmentModel(segments.find(i => i.id === this.expense.segment_uuid));\n\n\t\t\tlet projects = await this.$store.dispatch('projects/getList');\n\t\t\tthis.project = new ProjectModel(projects.find(i => i.id === this.expense.project_uuid));\n\n      // Entries\n      let expenseEntries = [],\n        subTotal = 0,\n        discountAmount = 0,\n        purchaseTaxAmount = 0,\n        whdTaxAmount = 0,\n        discountItems = await discountItemHandler.getAll(\"?type=Purchase\"),\n        taxItems = await taxHandler.getAll(),\n        uoms = await uomHandler.getAll(),\n        clazz = await classHandler.getAll();\n\n      this.expense.expense_entries.forEach((value) => {\n        if (\n          value.amount > 0 &&\n          value.account.account_type.number !== AccountTypeCode.PURCHASE_TAX\n        ) {\n          let exp = new ExpenseEntryModel(value);\n\n          // Subtotal\n          subTotal += value.amount;\n\n          // UOM\n          exp.uom = new UomModel(\n            uoms.data.data.find((item) => item.id === value.uom_uuid)\n          );\n\n          // Discount\n          exp.discount = new DiscountItemModel(\n            discountItems.data.data.find((item) => item.id === value.discount.uuid)\n          );\n\n          // Tax\n          exp.tax_item = new TaxModel(\n            taxItems.data.data.find((item) => item.id === value.tax_item.uuid)\n          );\n\n          // Classes\n          exp.class1 = new ClassModel(\n            clazz.data.data.find((item) => item.id === value.class_1_uuid)\n          );\n          exp.class2 = new ClassModel(\n            clazz.data.data.find((item) => item.id === value.class_2_uuid)\n          );\n          exp.class3 = new ClassModel(\n            clazz.data.data.find((item) => item.id === value.class_3_uuid)\n          );\n          exp.class4 = new ClassModel(\n            clazz.data.data.find((item) => item.id === value.class_4_uuid)\n          );\n          exp.class5 = new ClassModel(\n            clazz.data.data.find((item) => item.id === value.class_5_uuid)\n          );\n\n          expenseEntries.push(exp);\n        } else {\n          // Discount\n          if (value.account.account_type.number === AccountTypeCode.DISCOUNT) {\n            discountAmount += value.amount * -1;\n          }\n\n          // WHD Tax\n          if (value.account.account_type.number === AccountTypeCode.WHD_TAX) {\n            whdTaxAmount += value.amount * -1;\n          }\n\n          // Deposit\n          if (\n            ~AccountTypeCode.PURCHASE_DEPOSITS.indexOf(\n              value.account.account_type.number\n            )\n          ) {\n            this.depositAmount = value.amount * -1;\n            this.depositEntryUuid = value.uuid;\n          }\n\n          // Transaction Account (Payable Account / Clearing Account)\n          if (\n            ~AccountTypeCode.PAYABLE_ACCOUNTS.indexOf(\n              value.account.account_type.number\n            ) ||\n            value.account.number ===\n              AccountTypeCode.ADVANCE_SETTLEMENT_CLEARING_CODE\n          ) {\n            this.amountDue = value.amount * -1;\n            this.transactionEntryUuid = value.uuid;\n            this.transactionAccount = new AccountModel(value.account);\n          }\n        }\n\n        // Purchase Tax\n        if (\n          value.account.account_type.number === AccountTypeCode.PURCHASE_TAX\n        ) {\n          purchaseTaxAmount += value.amount;\n        }\n      });\n\n      // Bind Expense Entries\n      this.expenseEntries = expenseEntries;\n\n      // Calculation\n      this.subTotal = subTotal;\n      this.discountAmount = discountAmount;\n      this.purchaseTax = purchaseTaxAmount;\n      this.whdTax = whdTaxAmount;\n      this.totalAmount =\n        subTotal - this.discountAmount + this.purchaseTax - this.whdTax;\n\n      //Journal\n      let journals = await journalHandler.getOne(this.expense.journal_uuid);\n      this.journal = journals.data;\n      this.journalEntries = this.journal.journal_entries;\n\n      this.showLoading = false;\n    },\n    // Number\n    async generateNumber() {\n      let num = await Helper.generateAccountingNumber(\n        EntityType.EXPENSES,\n        this.expense.expense_date\n      );\n\n      this.expense.number = num.number;\n      this.transactionType = num.prefix;\n      this.expense.prefix_format = num.prefix_format;\n    },\n    // Get Exchange Rate\n    async getExchangeRate() {\n      if (this.expense.expense_date && this.currency.code !== \"\") {\n        this.exchangeRate = await Helper.getLastExchangeRateByDate(\n          this.expense.expense_date,\n          this.currency.code\n        );\n      } else {\n        this.exchangeRate = new ExchangeRateModel(institute.baseCurrency);\n      }\n      this.supplierDepositBalance();\n    },\n    // Load Cash Advance\n    loadCashAdvance() {\n      if (this.employee.id !== \"\") {\n        // Clear Selected Cash Advance\n        this.expense.use_for_transaction_uui = \"\";\n\n        this.showLoading = true;\n        cashAdvanceHandler\n          .getByEmployeeId(this.employee.id)\n          .then((res) => {\n            if (res.data) {\n              this.cashAdvances = res.data;\n            }\n          })\n          .finally(() => {\n            this.showLoading = false;\n          });\n      }\n    },\n    // On Employee Radio Changes\n    onUseForOptionChanges() {\n      // Clear Selected Cash Advance\n      this.expense.use_for_transaction_uuid = \"\";\n      this.transactionAccount = new AccountModel();\n\n      this.filterTransactionAccount();\n    },\n    // Filter Transation Account\n    filterTransactionAccount() {\n      if (this.expense.use_for_option === 0) {\n        // Credit\n        this.transactionAccounts = this.accounts.filter(\n          (item) =>\n            ~AccountTypeCode.PAYABLE_ACCOUNTS.indexOf(item.account_type.number)\n        ); // Payable Account\n      } else {\n        // Reimbursement / Cash Advance\n        this.transactionAccount = this.advanceSettlementClearingAccount;\n        this.transactionAccounts = [this.advanceSettlementClearingAccount];\n      }\n    },\n    // On Additional Cost Changes\n    onAdditionalCostCheckboxChanges() {\n      let ds = this.$refs.expenseAccountDS.kendoWidget();\n      ds.data([]);\n\n      if (this.hasAdditionalCost) {\n        this.expenseAccounts = [this.otherClearingSuspenseAccount];\n\n        // Insert row\n        let je = new ExpenseEntryExtendedModel({\n          uuid: kendo.guid(),\n          account: this.otherClearingSuspenseAccount,\n          decimalFormat: this.decimalFormat,\n        });\n\n        ds.add(je);\n      } else {\n        this.expense.additional_cost_supplier = null;\n        this.expenseAccounts = this.accounts;\n        this.addRow();\n        this.addRow();\n      }\n    },\n    /* Kendo */\n    // DataSource Changes\n    onExpenseAccountDSChanges(e) {\n      if (e.field) {\n        let dataRow = e.items[0];\n\n        if (e.field === \"account\") {\n          this.addExtraRow(dataRow.uid);\n        } else if (e.field === \"quantity\" || e.field === \"price\") {\n          let amt =\n            kendo.parseFloat(dataRow.quantity) *\n            kendo.parseFloat(dataRow.price);\n          dataRow.set(\"amount\", amt);\n        } else if (e.field === \"uom\") {\n          if (dataRow.uom) {\n            dataRow.set(\"uom_uuid\", dataRow.uom.id);\n          }\n        } else if (e.field === \"class1\") {\n          if (dataRow.class1 !== null) {\n            dataRow.set(\"class_1_uuid\", dataRow.class1.id);\n          } else {\n            // Set default when deselect\n            dataRow.set(\"class_1_uuid\", \"\");\n            dataRow.set(\"class1\", new ClassModel());\n          }\n        } else if (e.field === \"class2\") {\n          if (dataRow.class2 !== null) {\n            dataRow.set(\"class_2_uuid\", dataRow.class2.id);\n          } else {\n            // Set default when deselect\n            dataRow.set(\"class_2_uuid\", \"\");\n            dataRow.set(\"class2\", new ClassModel());\n          }\n        } else if (e.field === \"class3\") {\n          if (dataRow.class3 !== null) {\n            dataRow.set(\"class_3_uuid\", dataRow.class3.id);\n          } else {\n            // Set default when deselect\n            dataRow.set(\"class_3_uuid\", \"\");\n            dataRow.set(\"class3\", new ClassModel());\n          }\n        } else if (e.field === \"class4\") {\n          if (dataRow.class4 !== null) {\n            dataRow.set(\"class_4_uuid\", dataRow.class4.id);\n          } else {\n            // Set default when deselect\n            dataRow.set(\"class_4_uuid\", \"\");\n            dataRow.set(\"class4\", new ClassModel());\n          }\n        } else if (e.field === \"class5\") {\n          if (dataRow.class5 !== null) {\n            dataRow.set(\"class_5_uuid\", dataRow.class5.id);\n          } else {\n            // Set default when deselect\n            dataRow.set(\"class_5_uuid\", \"\");\n            dataRow.set(\"class5\", new ClassModel());\n          }\n        }\n\n        this.autoCalculate();\n      }\n    },\n    calculateDiscount(discountItem, subTotal) {\n      if (discountItem) {\n        const nature = discountItem.nature;\n        const amount = discountItem.amount;\n        if (nature === \"Amount\") {\n          return kendo.parseFloat(amount);\n        } else if (nature === \"Percentage\") {\n          return subTotal * (kendo.parseFloat(amount) / 100);\n        }\n      }\n    },\n    autoCalculateTax(tax, amount) {\n      if (tax) {\n        var formula = tax.formula;\n        var inAmt = kendo.parseFloat(amount);\n        var nAmt = kendo.parseFloat(amount);\n        var taxBase = kendo.parseFloat(tax.taxBase) / 100;\n        var rate = kendo.parseFloat(tax.rate) / 100;\n        var total = eval(formula);\n        window.console.log(inAmt, nAmt, taxBase, rate, formula, total);\n        return total;\n      }\n      // return 0\n    },\n    // Auto Calculate In DataSource\n    autoCalculate() {\n      let expDS = this.$refs.expenseAccountDS.kendoWidget(),\n        subTotal = 0,\n        discount = 0,\n        purchaseTax = 0,\n        whdTax = 0,\n        discountItem = [];\n\n      // Expense\n      expDS.data().forEach((value) => {\n        let amt = kendo.parseFloat(value.amount);\n        subTotal += amt;\n\n        // Discount\n        let discountAmount = 0;\n        if (value.discount.id !== \"\") {\n          let subTo =\n            kendo.parseFloat(value.price) * kendo.parseFloat(value.quantity);\n          const disAMt = this.calculateDiscount(value.discount, subTo);\n          discountAmount = disAMt;\n          discount += disAMt;\n          if (value.discount.hasOwnProperty(\"id\")) {\n            discountItem.push(value.discount);\n          }\n          // Bind Account Model\n          value.discount.account = new AccountModel(value.discount.account);\n        }\n\n        // Tax\n        if (value.tax_item.id !== \"\") {\n          let amtAfterDiscount =\n            kendo.parseFloat(value.amount) - discountAmount;\n          const taxAmount = this.autoCalculateTax(\n            value.tax_item,\n            amtAfterDiscount\n          );\n          if (value.tax_item.hasOwnProperty(\"taxType\")) {\n            const taxType = value.tax_item.taxType;\n            let taxTypeId = 0;\n            if (taxType.hasOwnProperty(\"typeId\")) {\n              taxTypeId = taxType.typeId;\n              if (taxTypeId === 2) {\n                whdTax += taxAmount;\n              } else {\n                purchaseTax += taxAmount;\n              }\n            }\n          }\n          // Bind Account Model\n          value.tax_item.account = new AccountModel(value.tax_item.account);\n        }\n      });\n      this.subTotal = subTotal;\n      this.discountAmount = discount;\n      this.purchaseTax = purchaseTax;\n      this.whdTax = whdTax;\n      this.totalAmount = subTotal - discount + purchaseTax - whdTax;\n      this.amountDue = this.totalAmount - this.depositAmount;\n      this.supplierDiscountItem = this.removeDuplicate(discountItem);\n    },\n    // Row Number Template\n    rowNumberTmpl(dataItem) {\n      let ds = this.$refs.expenseAccountDS.kendoWidget(),\n        index = ds.indexOf(dataItem);\n\n      return index + 1;\n    },\n    // Grid Custom Editor\n    expenseAccountEditor(container, options) {\n      return Helper.accountEditor(container, options, this.expenseAccounts);\n    },\n    // Add New Row\n    addRow() {\n      let ds = this.$refs.expenseAccountDS.kendoWidget(),\n        last = ds.total();\n\n      let je = new ExpenseEntryExtendedModel();\n      je.uuid = kendo.guid();\n      je.quantity = 1;\n      je.discountAs = DISCOUNT_ITEM_TYPE;\n      je.decimalFormat = this.decimalFormat;\n\n      ds.insert(last, je);\n    },\n    // Add Extra Row\n    addExtraRow(uid) {\n      let ds = this.$refs.expenseAccountDS.kendoWidget(),\n        total = ds.total(),\n        row = ds.getByUid(uid),\n        index = ds.indexOf(row);\n\n      if (index === total - 1) {\n        this.addRow();\n      }\n    },\n    // Remove Row\n    removeRow(e) {\n      e.preventDefault();\n\n      let grid = this.$refs.expenseGrid.kendoWidget(),\n        ds = grid.dataSource,\n        dataItem = grid.dataItem($(e.currentTarget).closest(\"tr\"));\n\n      if (ds.data().length > 2) {\n        ds.remove(dataItem);\n      }\n    },\n    // Shrink Data\n    shrinkData() {\n      let entries = [],\n        discountGroups = {},\n        taxGroups = {},\n        expDS = this.$refs.expenseAccountDS.kendoWidget();\n\n      // Date\n      this.expense.expense_date = Helper.toISODate(this.expense.expense_date);\n      this.expense.bill_date = Helper.toISODate(this.expense.bill_date);\n      this.expense.due_date = Helper.toISODate(this.expense.due_date);\n      this.expense.payment_term = this.paymentTerm.id;\n\n      // Currency\n      this.expense.bill_currency = this.currency;\n\n      // Supplier\n      this.expense.supplier = new ContactModel(this.supplier);\n\n      // Employee\n      this.expense.employee = new ContactModel(this.employee);\n\n      // Sidebar\n      this.expense.location_uuid = this.location.id;\n      this.expense.segment_uuid = this.segment.id;\n      this.expense.project_uuid = this.project.id;\n\n      // User\n      if (this.isEdit) {\n        this.expense.modified_by = this.user;\n      } else {\n        this.expense.created_by = this.user;\n      }\n\n      // Expense Entries on Dr\n      expDS.data().forEach((value) => {\n        // Filter selected account\n        if (value.account.name !== \"\" && value.amount > 0) {\n          // Account\n          value.set(\"account\", new AccountModel(value.account));\n\n          // Contact\n          value.set(\"primary_contact\", new ContactModel(this.supplier));\n          value.set(\"secondary_contacts\", [new ContactModel(this.employee)]);\n\n          // value.set(\"billable\", Number(value.billable));\n\n          // Currency\n          value.set(\"currency\", new CurrencyModel(this.currency));\n          value.set(\"exchange_rate_uuid\", this.exchangeRate.id);\n          value.set(\"exchange_rate\", this.exchangeRate.rate);\n          value.set(\"exchanged_amount\", value.amount * this.exchangeRate.rate);\n\n          // Discount\n          value.set(\"discount\", new DiscountItemModel(value.discount));\n\n          // Tax\n          value.set(\"tax_item\", new TaxModel(value.tax_item));\n\n          // Add Entry\n          entries.push(new ExpenseEntryModel(value));\n\n          // Discount on Cr\n          let discountAmount = 0;\n          if (value.discount.id !== \"\") {\n            let subTo =\n              kendo.parseFloat(value.price) * kendo.parseFloat(value.quantity);\n            discountAmount = this.calculateDiscount(value.discount, subTo);\n\n            // Group Discount's Account\n            if (discountGroups[value.discount.account.uuid]) {\n              discountGroups[value.discount.account.uuid][\n                \"amount\"\n              ] += discountAmount;\n            } else {\n              discountGroups[value.discount.account.uuid] = {\n                uuid: kendo.guid(),\n                amount: discountAmount,\n                account: new AccountModel(value.discount.account),\n              };\n            }\n          }\n\n          // Taxes on Dr\n          if (value.tax_item.id !== \"\") {\n            let amtAfterDiscount =\n              kendo.parseFloat(value.amount) - discountAmount;\n            let taxAmount = this.autoCalculateTax(\n              value.tax_item,\n              amtAfterDiscount\n            );\n            if (value.tax_item.hasOwnProperty(\"taxType\")) {\n              const taxType = value.tax_item.taxType;\n              if (taxType.hasOwnProperty(\"typeId\")) {\n                if (taxType.typeId === 2) {\n                  // WHD Tax\n                  taxAmount *= -1; // Cr side\n                }\n\n                // Group Tax's Account\n                if (taxGroups[value.tax_item.account.uuid]) {\n                  taxGroups[value.tax_item.account.uuid][\"amount\"] += taxAmount;\n                } else {\n                  taxGroups[value.tax_item.account.uuid] = {\n                    uuid: kendo.guid(),\n                    amount: taxAmount,\n                    account: new AccountModel(value.tax_item.account),\n                  };\n                }\n              }\n            }\n          }\n        }\n      });\n\n      // Edit Mode\n      if (this.isEdit) {\n        this.journalEntries.forEach((value) => {\n          // Discount\n          if (discountGroups[value.account.uuid]) {\n            // Set previouse uuid if exists\n            discountGroups[value.account.uuid][\"uuid\"] = value.uuid;\n          }\n\n          // Taxes\n          if (taxGroups[value.account.uuid]) {\n            // Set previouse uuid if exists\n            taxGroups[value.account.uuid][\"uuid\"] = value.uuid;\n          }\n        });\n      }\n\n      // Taxes: Purchase Tax on Dr and WHD Tax on Cr\n      for (let taxKey in taxGroups)\n        entries.push(\n          new ExpenseEntryModel({\n            uuid: taxGroups[taxKey].uuid,\n            account: new AccountModel(taxGroups[taxKey].account),\n            primary_contact: new ContactModel(this.supplier),\n            secondary_contacts: [new ContactModel(this.employee)],\n            description: this.expense.journal_note,\n            currency: new CurrencyModel(this.currency),\n            amount: taxGroups[taxKey].amount,\n            exchange_rate_uuid: this.exchangeRate.id,\n            exchange_rate: this.exchangeRate.rate,\n          })\n        );\n\n      // Discount Account on Cr\n      for (let disKey in discountGroups)\n        entries.push(\n          new ExpenseEntryModel({\n            uuid: discountGroups[disKey].uuid,\n            account: new AccountModel(discountGroups[disKey].account),\n            primary_contact: new ContactModel(this.supplier),\n            secondary_contacts: [new ContactModel(this.employee)],\n            description: this.expense.journal_note,\n            currency: new CurrencyModel(this.currency),\n            amount: discountGroups[disKey].amount * -1, // Cr side is negative\n            exchange_rate_uuid: this.exchangeRate.id,\n            exchange_rate: this.exchangeRate.rate,\n          })\n        );\n\n      // Deposit Account on Cr\n      if (this.depositAmount > 0) {\n        entries.push(\n          new ExpenseEntryModel({\n            uuid: this.depositEntryUuid,\n            account: new AccountModel(\n              this.supplier.accountTax.purchaseDepositAcc\n            ),\n            primary_contact: new ContactModel(this.supplier),\n            secondary_contacts: [new ContactModel(this.employee)],\n            description: this.expense.journal_note,\n            currency: new CurrencyModel(this.currency),\n            amount: this.depositAmount * -1, // Cr side is negative\n            exchange_rate_uuid: this.exchangeRate.id,\n            exchange_rate: this.exchangeRate.rate,\n          })\n        );\n      }\n\n      // Transaction Entries on Cr\n      entries.push(\n        new ExpenseEntryModel({\n          uuid: this.transactionEntryUuid,\n          account: new AccountModel(this.transactionAccount),\n          primary_contact: new ContactModel(this.supplier),\n          secondary_contacts: [new ContactModel(this.employee)],\n          description: this.expense.journal_note,\n          currency: new CurrencyModel(this.currency),\n          amount: this.amountDue * -1, // Cr side is negative\n          exchange_rate_uuid: this.exchangeRate.id,\n          exchange_rate: this.exchangeRate.rate,\n        })\n      );\n\n      this.expense.expense_entries = entries;\n      // mapping to Dynamodb ( expense record ) -> save everywhere morng ^_^\n      this.mappingExpense(this.expense);\n    },\n    // Add Journal\n    addJournal() {\n      let entries = [];\n\n      this.expense.expense_entries.forEach((value) => {\n        entries.push(new JournalEntryModel(value));\n      });\n\n      // Journal Entries\n      this.journalEntries = entries;\n\n      // Journal\n      this.journal.number = this.expense.number;\n      this.journal.description = this.expense.journal_note;\n      this.journal.journal_date = Helper.toISODate(this.expense.expense_date);\n      this.journal.journal_type = EntityType.AUTO_JOURNAL;\n      this.journal.transaction_type = EntityType.EXPENSES;\n      this.journal.related_transaction_uuid = this.expense.use_for_transaction_uuid;\n      this.journal.month_of = this.expense.month_of;\n      this.journal.location_uuid = this.expense.location_uuid;\n      this.journal.project_uuid = this.expense.project_uuid;\n      this.journal.segment_uuid = this.expense.segment_uuid;\n      this.journal.prefix_format = this.expense.prefix_format;\n      this.journal.is_draft = this.expense.is_draft;\n      this.journal.created_date = this.expense.created_date;\n      this.journal.created_by = this.expense.created_by;\n      this.journal.modified_by = this.expense.modified_by;\n    },\n    // Validating\n    validateForm() {\n      let result = true,\n        expDS = this.$refs.expenseAccountDS.kendoWidget(),\n        msg = \"\",\n        countExpense = 0;\n\n      // Supplier\n      if (this.supplier.id === \"\") {\n        msg += `<p>${i18n.t(\"supplier_is_required\")}</p>`;\n        result = false;\n      }\n\n      // Expense\n      expDS.data().forEach((value, index) => {\n        // No account\n        if (value.account.name === \"\" && value.amount > 0) {\n          result = false;\n          msg += `<p>${i18n.t(\n            \"please_select_expense_account_at_row_number\"\n          )} ${index + 1}</p>`;\n        }\n\n        // No amount\n        if (value.account.name !== \"\" && value.amount === 0) {\n          result = false;\n          msg += `<p>${value.account.name} ${i18n.t(\"has_no_amount\")}</p>`;\n        }\n\n        // Discount\n        if (value.discount.id !== \"\") {\n          if (\n            value.discount.account.uuid === \"\" ||\n            value.discount.account.account_type.number === 0\n          ) {\n            result = false;\n            msg += `<p>${i18n.t(\n              \"invalid_discount_account_at_row_number\"\n            )} ${index + 1}</p>`;\n          }\n        }\n\n        // Tax\n        if (value.tax_item.id !== \"\") {\n          if (\n            value.tax_item.account.uuid === \"\" ||\n            value.tax_item.account.account_type.number === 0\n          ) {\n            result = false;\n            msg += `<p>${i18n.t(\"invalid_tax_account_at_row_number\")} ${index +\n              1}</p>`;\n          }\n        }\n\n        // Count Empty Row\n        if (value.account.name !== \"\" && value.amount > 0) {\n          countExpense++;\n        }\n      });\n\n      // Empty Row\n      if (countExpense === 0) {\n        msg += `<p>${i18n.t(\"please_select_expense_account\")}</p>`;\n        result = false;\n      }\n\n      // Transaction Account\n      if (this.transactionAccount.uuid === \"\") {\n        msg += `<p>${i18n.t(\"please_select_transaction_account\")}</p>`;\n        result = false;\n      }\n\n      // Use for Cash Advance\n      if (\n        this.expense.use_for_option === 2 &&\n        this.expense.use_for_transaction_uuid === \"\"\n      ) {\n        msg += `<p>${i18n.t(\"please_select_related_cash_advance\")}</p>`;\n        result = false;\n      }\n\n      // Show Alert\n      this.errorMessage = msg;\n\n      this.alert = result === false;\n\n      return result;\n    },\n    // All Saves\n    async onSaveOptionClick(mode) {\n      if (this.$refs.form.validate() && this.validateForm()) {\n        let isValidClosingDate = await Helper.validateClosingDate(\n          this.expense.expense_date\n        );\n        if (isValidClosingDate) {\n          this.saveMode = mode;\n          this.save();\n        }\n      }\n    },\n    cancel() {\n      this.$swal({\n        title: i18n.t(\"msg_title_warning\"),\n        text: i18n.t(\"msg_discard\"),\n        icon: \"warning\",\n        showCancelButton: true,\n        cancelButtonText: i18n.t(\"cancel\"),\n        confirmButtonColor: \"#4d4848\",\n        cancelButtonColor: \"#ED1A3A\",\n        confirmButtonText: i18n.t(\"discard\"),\n      }).then((result) => {\n        if (result.value) {\n          this.clear();\n          this.setDefaultData();\n          this.$router.go(-1);\n        }\n      });\n    },\n    clear() {\n      // Reset Form\n      this.isEdit = false;\n      this.saveMode = \"\";\n\n      // Entry Uuid\n      this.depositEntryUuid = kendo.guid();\n      this.transactionEntryUuid = kendo.guid();\n\n      this.subTotal = 0;\n      this.discountAmount = 0;\n      this.purchaseTax = 0;\n      this.whdTax = 0;\n      this.totalAmount = 0;\n      this.supplierDepositAmount = 0;\n      this.depositAmount = 0;\n      this.amountDue = 0;\n      this.hasAdditionalCost = false;\n\n      this.expense = new ExpenseModel();\n      this.journal = new JournalModel();\n      this.journalEntries = [];\n      this.employee = new EmployeeModel();\n      this.supplier = new SupplierModel();\n      this.paymentTerm = new PaymentTermModel();\n      this.currency = new CurrencyModel(institute.baseCurrency);\n      this.exchangeRate = new ExchangeRateModel(institute.baseCurrency);\n      this.advanceSettlementClearingAccount = new AccountModel();\n      this.transactionAccount = new AccountModel();\n      this.location = new LocationModel();\n      this.segment = new SegmentModel();\n      this.project = new ProjectModel();\n\n      let expDS = this.$refs.expenseAccountDS.kendoWidget();\n      expDS.data([]);\n    },\n    save() {\n      let self = this;\n\n      // Draft Mode\n      if (this.saveMode === SaveOption.SAVEDRAFT) {\n        this.expense.is_draft = 1;\n      } else {\n        this.expense.is_draft = 0;\n      }\n\n      // Shrink Data\n      this.shrinkData();\n\n      // Add Journal\n      this.addJournal();\n\n      // Sync Data\n      this.showLoading = true;\n      expenseHandler\n        .save({\n          expense: new ExpenseModel(this.expense),\n          journal: new JournalModel(this.journal),\n          journal_entries: this.journalEntries,\n        })\n        .then((response) => {\n          if (response) {\n            window.console.log(response, \"response\", response.data.uuid);\n            if (response.data.uuid) {\n              this.saveTxnExpense(\n                response.data.uuid,\n                response.data.journal_uuid\n              );\n            }\n            self.responseStatus(response.status);\n          }\n        })\n        .catch((error) => {\n          Helper.alertErrorMsg(error);\n        })\n        .finally(() => {\n          self.showLoading = false;\n        });\n    },\n    // Response Status\n    responseStatus(status) {\n      switch (status) {\n        case 200: // Ok\n          this.showAlert();\n          break;\n        case 201: // Duplicate\n          Helper.alertErrorMsg(\"Duplicate entry!\");\n          break;\n        default:\n          break;\n      }\n    },\n    // Sweetalert2\n    changeAlertStatus() {\n      this.loadingAlert = true;\n      setTimeout(() => {\n        this.loadingAlert = false;\n      }, 6200);\n    },\n    showAlert() {\n      this.changeAlertStatus();\n      this.loadingTextAlert = \"Added Successful\";\n      this.loadingColorAlert = \"#3DA72E\";\n      switch (this.saveMode) {\n        case \"saveClose\": // Save Close\n          // this.$swal({\n          // \tposition: 'products',\n          // \ticon: 'success',\n          // \ttitle: 'Your work has been saved',\n          // \tshowConfirmButton: true,\n          // }).then((result) => {\n          // \tif (result.value) {\n          // \t\twindow.history.go(-1)\n\n          // \t\treturn false\n          // \t}\n          // })\n          if (this.isEdit) {\n            this.goBackToViewPage();\n          } else {\n            this.$router.go(-1);\n          }\n\n          this.clear();\n          this.setDefaultData();\n          break;\n        default:\n          // Save New\n          // this.$swal({\n          // \tposition: 'products',\n          // \ticon: 'success',\n          // \ttitle: 'Your work has been saved',\n          // \tshowConfirmButton: false,\n          // \ttimer: 1500\n          // })\n          this.clear();\n          this.setDefaultData();\n          break;\n      }\n    },\n    // Go back to view page after edit mode\n    getExpense() {\n      return new ExpenseModel(this.expense);\n    },\n    goBackToViewPage() {\n      this.$router.replace({\n        name: \"Expenses View\",\n        params: { initExpense: this.getExpense() },\n      });\n    },\n    HideSmallSideBar() {\n      this.isHideBar = !this.isHideBar;\n    },\n  },\n  watch: {\n    initExpense() {\n      this.initialData();\n    },\n  },\n  created() {\n    // Call Account List\n    accountHandler.getAll().then((res) => {\n      this.accounts = res.data;\n      this.expenseAccounts = res.data;\n\n      // Advance Settlement Clearing Account by banhji_account_number\n      let advSetClrAcc = res.data.find(\n        (value) =>\n          value.number === AccountTypeCode.ADVANCE_SETTLEMENT_CLEARING_CODE\n      ); // Will change later\n      this.advanceSettlementClearingAccount = new AccountModel(advSetClrAcc);\n\n      // Other Clearing Suspenses Account by banhji_account_number\n      let otherClrSusAcc = res.data.find(\n        (value) =>\n          value.number === AccountTypeCode.OTHER_CLEARING_SUSPENSES_CODE\n      ); // Will change later\n      this.otherClearingSuspenseAccount = new AccountModel(otherClrSusAcc);\n\n      // Filter Transaction Accounts\n      this.filterTransactionAccount();\n    });\n  },\n  mounted: async function() {\n    // Supplier Setting such as decimal format\n    await this.loadPurchaseFormContent();\n\n    // Initial Data\n    this.initialData();\n  },\n};\n</script>\n\n<style scoped>\n.v-input.custom-radio\n  .v-input--selection-controls__input\n  .v-input--selection-controls__ripple {\n  display: none !important;\n}\n\n.function_wrapper {\n  box-shadow: none !important;\n}\n\n.v-application--is-ltr .v-text-field .v-input__append-inner {\n  margin-top: 0 !important;\n}\n\n.v-input__slot {\n  background-color: #fff !important;\n}\n\n.function_content .label {\n  margin-bottom: 10px;\n  display: inline-block;\n}\n\n.border_radius10 {\n  border-radius: 10px !important;\n  background-color: #f2f2f2;\n}\n\n.pa-3.v-card h4 {\n  font-size: 18px;\n  color: #333;\n}\n\n.pa-3.v-card p {\n  font-size: 12px;\n  color: #b5b5b5;\n}\n\n.attachment_file {\n  background-color: #efeded;\n  border-radius: 0 !important;\n}\n\n.attachment_table.v-data-table table {\n  border: thin solid rgba(0, 0, 0, 0.12);\n}\n\n.attachment_table table tr th {\n  border-left: thin solid rgba(0, 0, 0, 0.12);\n  height: 35px;\n  border-right: thin solid rgba(0, 0, 0, 0.12);\n}\n\n.block_debit,\n.block_credit {\n  border-bottom: 1px solid #fff;\n}\n\n.block_debit p.number,\n.block_credit p.number {\n  font-size: 25px;\n  color: #7f7f7f;\n}\n\n.block_debit h5,\n.block_credit h5,\n.block_difference h5 {\n  text-transform: uppercase;\n  color: #7f7f7f;\n  font-size: 15px;\n  font-weight: normal;\n}\n\n.block_difference h5 {\n  font-size: 18px;\n}\n\n.block_difference h5 span {\n  font-size: 15px;\n}\n\n.custom_grid table th:last-child {\n  text-align: right !important;\n}\n\n@media (min-width: 1264px) {\n  .container {\n    max-width: 1250px;\n  }\n}\n\n@media (max-width: 576px) {\n  .pt-6.col-sm-5.col-12 {\n    padding-top: 0 !important;\n  }\n\n  .code_text {\n    width: 100%;\n  }\n\n  .phone_no_pt {\n    padding-top: 0 !important;\n  }\n\n  .select_template,\n  .save_option {\n    margin-bottom: 10px;\n  }\n}\n\n.hide_small_bar_class {\n  max-width: 0;\n  transition: 0.5s ease-in;\n  flex: 0 0 0;\n  padding: 0;\n}\n\n.hide_big_bar_class {\n  max-width: 100%;\n  transition: 0.5s ease-in;\n  flex: 0 0 100%;\n}\n\n.info_add {\n  background-color: #ffffff;\n}\n\n.small_sidebar {\n  height: 98%;\n  position: relative;\n  padding: 12px;\n  background-color: #edf1f5;\n}\n\n.iconArrow {\n  right: -35px;\n  position: absolute;\n  bottom: -10px;\n}\n\n.iconArrowHide {\n  position: absolute;\n  right: -7px;\n  bottom: -10px;\n}\n\n.color_grey {\n  color: #808080;\n}\n\n.card_green {\n  min-height: 70px;\n  background-color: #00b050 !important;\n  color: #ffffff;\n}\n\n.lb_bold {\n  font-size: 12px;\n}\n\n.detial_smallside_p {\n  position: absolute;\n  bottom: 10px;\n}\n\n.card_background {\n  background-color: #edf1f5;\n  min-height: 120px;\n}\n\n.deposite_input {\n  width: 100px;\n}\n\n.btn_save_draft {\n  color: #ffffff;\n  background-color: #00b0f0 !important;\n  text-transform: capitalize;\n}\n\n.save_option {\n  background-color: #203864 !important;\n}\n\n.btn_add_small {\n  height: 27px !important;\n  min-width: 25px !important;\n  font-size: 10px;\n  padding: 0 22px !important;\n  background-color: #00b050 !important;\n  color: #ffffff;\n  border-radius: 0 !important;\n}\n\n.list_site_inv {\n  background-color: #92d050;\n  color: #ffffff;\n  font-size: 12px;\n}\n\n.list_site_exp {\n  background-color: #c5e0b4;\n  color: #000000;\n  font-size: 12px;\n  line-height: 16px;\n  min-height: 40px;\n}\n\n.checkbox_inv {\n  padding: 2px;\n  margin-top: 3px;\n  margin-right: 2px;\n}\n\n.exp_select {\n  font-size: 12px !important;\n}\n\n.theme--light.v-data-table\n  > .v-data-table__wrapper\n  > table\n  > tbody\n  > tr:hover:not(.v-data-table__expanded__content):not(.v-data-table__empty-wrapper) {\n  background-color: transparent !important;\n}\n</style>\n"]}]}