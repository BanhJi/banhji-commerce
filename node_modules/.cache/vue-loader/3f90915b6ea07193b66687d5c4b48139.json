{"remainingRequest":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/src/views/compliance/monthly_tax/new_tax_return/confirm/tax_credit/VAT.vue?vue&type=style&index=0&id=6a94b192&scoped=true&lang=css&","dependencies":[{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/src/views/compliance/monthly_tax/new_tax_return/confirm/tax_credit/VAT.vue","mtime":1638499443162},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/@vue/cli-service/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoudGhlbWUtLWxpZ2h0LnYtZGF0YS10YWJsZSA+IC52LWRhdGEtdGFibGVfX3dyYXBwZXIgPiB0YWJsZSA+IHRib2R5ID4gdHI6aG92ZXI6bm90KC52LWRhdGEtdGFibGVfX2V4cGFuZGVkX19jb250ZW50KTpub3QoLnYtZGF0YS10YWJsZV9fZW1wdHktd3JhcHBlcikgewogICAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQgIWltcG9ydGFudDsKfQoKLnRoZW1lLS1saWdodC52LWRhdGEtdGFibGUgPiAudi1kYXRhLXRhYmxlX193cmFwcGVyID4gdGFibGUgPiB0aGVhZCA+IHRyOmxhc3QtY2hpbGQgPiB0aCB7CiAgICBmb250LXNpemU6IDE0cHg7CiAgICBib3JkZXItYm90dG9tOiB0aGluIHNvbGlkIHJnYmEoMCwgMCwgMCwgMC4xMik7CiAgICBoZWlnaHQ6IDM3cHggIWltcG9ydGFudDsKICAgIGNvbG9yOiAjMDAwOwp9CgoudGhlbWUtLWxpZ2h0LnYtZGF0YS10YWJsZSA+IC52LWRhdGEtdGFibGVfX3dyYXBwZXIgPiB0YWJsZSA+IHRib2R5ID4gdHIucHJpbWFyeTpob3Zlcjpub3QoLnYtZGF0YS10YWJsZV9fZXhwYW5kZWRfX2NvbnRlbnQpOm5vdCgudi1kYXRhLXRhYmxlX19lbXB0eS13cmFwcGVyKSB7CiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjOTJkMDUwICFpbXBvcnRhbnQ7Cn0KCi50aGVtZS0tbGlnaHQudi1kYXRhLXRhYmxlIHsKICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50ICFpbXBvcnRhbnQ7CiAgICBib3JkZXItdG9wOiB0aGluIHNvbGlkICNkZGQ7CiAgICBib3JkZXItYm90dG9tOiB0aGluIHNvbGlkICNkZGQ7CiAgICBib3JkZXItcmFkaXVzOiAwICFpbXBvcnRhbnQ7Cn0KCi50aGVtZS0tbGlnaHQudi1kYXRhLXRhYmxlID4gLnYtZGF0YS10YWJsZV9fd3JhcHBlciA+IHRhYmxlID4gdGJvZHkgPiB0cjpub3QoOmxhc3QtY2hpbGQpID4gdGQ6bm90KC52LWRhdGEtdGFibGVfX21vYmlsZS1yb3cpLAoudGhlbWUtLWxpZ2h0LnYtZGF0YS10YWJsZSA+IC52LWRhdGEtdGFibGVfX3dyYXBwZXIgPiB0YWJsZSA+IHRib2R5ID4gdHI6bm90KDpsYXN0LWNoaWxkKSA+IHRoOm5vdCgudi1kYXRhLXRhYmxlX19tb2JpbGUtcm93KSB7CiAgICBib3JkZXItYm90dG9tOiB0aGluIHNvbGlkICNkZGQ7Cn0KCi52LWRhdGEtdGFibGUgPiAudi1kYXRhLXRhYmxlX193cmFwcGVyID4gdGFibGUgPiB0Ym9keSA+IHRyID4gdGQgewogICAgaGVpZ2h0OiAzMnB4ICFpbXBvcnRhbnQ7CiAgICBib3JkZXItYm90dG9tOiB0aGluIHNvbGlkIHJnYmEoMCwgMCwgMCwgMC4xMikgIWltcG9ydGFudDsKfQoKLmJvcmRlcl90b3AgewogICAgYm9yZGVyLXRvcDogdGhpbiBzb2xpZCAjZmZmICFpbXBvcnRhbnQ7Cn0KCi52LWFwcGxpY2F0aW9uIC5wcmltYXJ5LAoudi1hcHBsaWNhdGlvbiAudGhpcmQgewogICAgYm9yZGVyLWNvbG9yOiAjZmZmICFpbXBvcnRhbnQ7Cn0KCi52YXQgewogICAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTsKICAgIGNvbG9yOiAjZmZmOwogICAgZm9udC13ZWlnaHQ6IGJvbGQ7CiAgICBmb250LWZhbWlseTogJ05pcmFkZWktQm9sZCcgIWltcG9ydGFudDsKfQoKLmFtb3VudCB7CiAgICB0ZXh0LWFsaWduOiByaWdodCAhaW1wb3J0YW50Owp9CgouaGVhZC1zdW1tYXJ5IHsKICAgIHRleHQtYWxpZ246IHJpZ2h0ICFpbXBvcnRhbnQ7Cn0K"},{"version":3,"sources":["VAT.vue"],"names":[],"mappingsfile":"VAT.vue","sourceRoot":"src/views/compliance/monthly_tax/new_tax_return/confirm/tax_credit","sourcesContent":["<template>\n    <v-row>\n        <v-col sm=\"12\" cols=\"12\" class=\"pt-2 px-6\">\n            <v-row class=\"\">\n                <v-col sm=\"12\" cols=\"12\" class=\"pt-0\">\n                    <v-row>\n                        <v-col sm=\"6\" cols=\"12\" class=\"py-0\">\n                            <h2 class=\"mb-0 font_20\">{{ $t('value_added_tax') }}</h2>\n                        </v-col>\n                    </v-row>\n                </v-col>\n            </v-row>\n\n            <v-row class=\"\">\n                <v-col sm=\"12\" cols=\"12\" class=\"py-0\">\n                    <v-simple-table>\n                        <template v-slot:default>\n                            <thead>\n                            <tr>\n                                <th class=\"text-bold text-uppercase\">{{ $t('description') }}</th>\n                                <th class=\"text-bold text-uppercase\">{{ $t('monthof') }}</th>\n                                <th class=\"text-bold text-uppercase\">{{ $t('code') }}</th>\n                                <th class=\"text-bold text-uppercase text-center\">{{ $t('amount') }}</th>\n                            </tr>\n                            </thead>\n                            <tbody>\n                            <tr>\n                                <td>{{ $t('tax_credit_carried_from_last_month') }}</td>\n                                <td class=\"\">{{ newMonthOf }}</td>\n                                <td class=\"\">{{ balance.code }}</td>\n                                <td class=\"text-center\">{{ numberFormat(balance.balanceCredit) }}</td>\n                            </tr>\n                            <tr>\n                                <td>{{ $t('total_amount_input_tax') }}</td>\n                                <td class=\"\">{{ monthOf }}</td>\n                                <td class=\"\"></td>\n                                <td class=\"text-center\">{{ totalAmountPurchases || numberFormat(totalAmountP) }}</td>\n                            </tr>\n                            <tr>\n                                <td>{{ $t('total_amount_output_tax') }}</td>\n                                <td class=\"\">{{ monthOf }}</td>\n                                <td class=\"\"></td>\n                                <td class=\"text-center\">{{ numberFormat(amountSale) || numberFormat(totalAmountS) }}\n                                </td>\n                            </tr>\n                            <tr v-if=\"tBalance <= 0\">\n                                <td class=\"text-bold\">VAT to be paid</td>\n                                <td class=\"text-bold\">{{ monthOf }}</td>\n                                <td class=\"\"></td>\n                                <td class=\"primary text-center white--text text-bold\">{{ totalBalance }}</td>\n                            </tr>\n                            <tr v-if=\"tBalance > 0\">\n                                <td class=\"text-bold\">(Credit Forward)</td>\n                                <td class=\"text-bold\">{{ monthOf }}</td>\n                                <td class=\"\"></td>\n                                <td class=\"primary text-center text-bold white--text\">{{ totalBalance }}</td>\n                            </tr>\n                            <tr>\n                                <td class=\"text-bold\">{{ $t('vat_refund') }}</td>\n                                <td class=\"text-bold\">{{ monthOf }}</td>\n                                <td class=\"\"></td>\n                                <td class=\"primary text-center white--text text-bold\">{{ numberFormat(vatRefund) }}</td>\n                            </tr>\n                            </tbody>\n                        </template>\n                    </v-simple-table>\n                    <LoadingMe\n                        :isLoading=\"showLoading\"\n                        :fullPage=\"false\"\n                        :myLoading=\"true\"\n                    />\n                </v-col>\n            </v-row>\n        </v-col>\n\n    </v-row>\n</template>\n<script>\nimport LoadingMe from \"@/components/Loading\";\nimport kendo from \"@progress/kendo-ui\";\n\nconst saleHandler = require(\"@/scripts/compliance/handler/saleHandler\")\nconst purchaseHandler = require(\"@/scripts/compliance/handler/purchaseHandler\")\nconst monthlyReturnHandler = require(\"@/scripts/compliance/handler/monthlyReturnHandler\")\nexport default {\n    data: () => ({\n        showLoading: false,\n        is_month: false,\n        is_start_date: false,\n        is_end_date: false,\n        start_date: \"\",\n        end_date: \"\",\n\n        search: {\n            start_date: \"\",\n            end_date: \"\"\n        },\n        balance: {},\n        sales: [],\n        purchases: [],\n        newMonthOf: '',\n        totalAmountP: 0,\n        totalAmountS: 0,\n        totalBalance: 0,\n        tBalance: 0,\n        vatRefund: 0,\n        statusSale: false,\n        statusPurchase: false,\n        vat: {},\n    }),\n    props: ['monthlyReturn', 'amountSale', 'totalAmountPurchase'],\n    watch: {\n        'amountSales': 'calculate',\n        'totalAmountPurchases': 'calculate',\n        'totalAmountP': 'calculate',\n        'totalAmountS': 'calculate',\n        'balanceCredit': 'calculate'\n    },\n    methods: {\n        async onUpdateBalance(credit, payment) {\n            this.$emit('getBalanceVAT', {credit: credit, payment: payment})\n        },\n        async loadBalance() {\n            this.showLoading = true\n            if (this.balance.balanceCredit === undefined) {\n                await this.onloadSale()\n                await this.onloadPurchase()\n                new Promise(resolve => {\n                    setTimeout(async () => {\n                        resolve('resolved');\n                        await this.calculate()\n                        this.showLoading = false\n                    }, 700)\n                })\n            }\n        },\n        async getBalance() {\n            const addZero = (num, places) => String(num).padStart(places, '0')\n            const id = this.vat.id\n            const monthly = new Date(this.monthlyReturn.monthOf).setMonth(new Date(this.monthlyReturn.monthOf).getMonth())\n            const monthOf = new Date(monthly).getFullYear() + '-' + addZero(new Date(monthly).getMonth(), 2)\n            this.newMonthOf = monthOf\n            monthlyReturnHandler.getBalanceVat(id, monthOf, 'monthly').then(res => {\n                if (res.data.data.length > 0) {\n                    this.balance = res.data.data[0]\n                } else {\n                    this.balance = {\n                        balanceCredit: 0,\n                        balancePayment: 0,\n                    }\n                }\n            })\n        },\n        async onloadVat() {\n            await monthlyReturnHandler.getVat().then(res => {\n                this.vat = res.data.data[0]\n            })\n        },\n        async onloadSale() {\n            new Promise(resolve => {\n                setTimeout(async () => {\n                    resolve('resolved');\n                    await saleHandler.getByMrId(this.$route.params.id).then(async res => {\n                        this.sales = res.data.data\n                        await this.onCalculate()\n                    })\n                }, 100)\n            })\n        },\n        async onloadPurchase() {\n            new Promise(resolve => {\n                setTimeout(() => {\n                    resolve('resolved');\n                    purchaseHandler.getByMrId(this.$route.params.id).then(async res => {\n                        this.purchases = res.data.data\n                        await this.onCalculate()\n                    })\n                }, 100)\n            })\n\n        },\n        async onCalculate() {\n            new Promise(resolve => {\n                setTimeout(() => {\n                    resolve('resolved');\n                    let amountP = 0,\n                        amountS = 0\n                    if (this.purchases.length > 0 && this.totalAmountPurchases === 0) {\n                        window.console.log('123')\n                        for (let i = 0; i < this.purchases.length; i++) {\n                            if (this.purchases[i].typeProduct.baseAmount !== \"Net\") {\n                                amountP += this.purchases[i].totalVAT\n                            }\n                        }\n                        this.totalAmountP = amountP\n                        window.console.log(amountP)\n                        this.statusPurchase = true\n                        window.console.log(this.totalAmountP, 'P')\n                    }\n                    if (this.sales.length > 0 && this.amountSale === 0) {\n                        window.console.log('987')\n                        for (let i = 0; i < this.sales.length; i++) {\n                            amountS += this.sales[i].totalVAT\n                        }\n                        this.totalAmountS = amountS\n                        this.statusSale = true\n                        window.console.log(this.totalAmountS, 'S')\n                    }\n                }, 100)\n            })\n        },\n        async calculate() {\n            await this.getBalance()\n            new Promise(resolve => {\n                setTimeout(async () => {\n                    resolve('resolved');\n                    window.console.log(this.totalAmountS, this.totalAmountP, 'sale, purchase')\n                    let tBalance = 0, credit = 0, payment = 0\n                    if (this.statusSale && this.statusPurchase) {\n                        this.totalBalance = kendo.parseFloat(this.totalAmountP) + kendo.parseFloat(this.balance.balanceCredit) - kendo.parseFloat(this.totalAmountS)\n                    } else {\n                        this.totalBalance = kendo.parseFloat(this.totalAmountPurchase) + kendo.parseFloat(this.balance.balanceCredit) - kendo.parseFloat(this.amountSale)\n                    }\n                    this.tBalance = this.totalBalance\n                    if (this.totalBalance < 0) {\n                        tBalance = this.totalBalance * (-1)\n                        payment = this.totalBalance * (-1)\n                        this.totalBalance = `(${this.numberFormat(this.totalBalance * (-1))})`\n                    } else {\n                        credit = this.totalBalance\n                        tBalance = this.totalBalance\n                        this.totalBalance = this.numberFormat(this.totalBalance)\n                    }\n                    window.console.log(this.totalBalance, tBalance, 'total balance')\n                    // await this.addTxn(credit, payment)\n                    await this.onUpdateBalance(credit, payment)\n                }, 500)\n            })\n        },\n        async addTxn(credit, payment) {\n            if (credit >= 0 || payment >= 0) {\n                const data = {\n                    credit: credit,\n                    payment: payment,\n                    monthOf: this.monthlyReturn.monthOf,\n                    type: 'vat monthly',\n                    date: new Date().toJSON()\n                }\n                await monthlyReturnHandler.addTxnVAT(data, this.monthlyReturn.monthOf, 'monthly').then(res => {\n                    window.console.log(res)\n                })\n            }\n        },\n        numberFormat(value) {\n            // window.console.log(this.saleFormContent.decimal,'nimol')\n            return kendo.toString(value, `n2`)\n        },\n        onSearch() {\n            this.search = {\n                'start_date': this.start_date + '-01',\n                'end_date': this.end_date + '-01'\n            }\n        }\n    },\n    async mounted() {\n        await this.onloadVat()\n        await this.loadBalance()\n    },\n    computed: {\n        balanceCredit() {\n            if (this.balance.balanceCredit > 0) {\n                return this.balance.balanceCredit\n            } else {\n                return 0\n            }\n        },\n        monthOf() {\n            if (this.monthlyReturn.id !== undefined) {\n                return this.monthlyReturn.monthOf\n            } else {\n                return ''\n            }\n        },\n        amountSales() {\n            if (this.amountSale !== undefined) {\n                window.console.log(this.amountSale, 'VAT Sale')\n                return this.amountSale\n            } else {\n                return 0\n            }\n        },\n        totalAmountPurchases() {\n            if (this.amountPurchase !== undefined) {\n                window.console.log(this.amountPurchase, 'VAT purchase')\n                return this.amountPurchase\n            } else {\n                return 0\n            }\n        },\n        amountPurchaseExculs() {\n            if (this.amountPurchaseExcul !== undefined) {\n                return this.amountPurchaseExcul\n            } else {\n                return 0\n            }\n        }\n    },\n    components: {\n        'LoadingMe': LoadingMe,\n        // 'month-picker' : ()=> import('@/components/custom_templates/MonthPicker')\n    },\n};\n</script>\n<style scoped>\n.theme--light.v-data-table > .v-data-table__wrapper > table > tbody > tr:hover:not(.v-data-table__expanded__content):not(.v-data-table__empty-wrapper) {\n    background-color: transparent !important;\n}\n\n.theme--light.v-data-table > .v-data-table__wrapper > table > thead > tr:last-child > th {\n    font-size: 14px;\n    border-bottom: thin solid rgba(0, 0, 0, 0.12);\n    height: 37px !important;\n    color: #000;\n}\n\n.theme--light.v-data-table > .v-data-table__wrapper > table > tbody > tr.primary:hover:not(.v-data-table__expanded__content):not(.v-data-table__empty-wrapper) {\n    background-color: #92d050 !important;\n}\n\n.theme--light.v-data-table {\n    background-color: transparent !important;\n    border-top: thin solid #ddd;\n    border-bottom: thin solid #ddd;\n    border-radius: 0 !important;\n}\n\n.theme--light.v-data-table > .v-data-table__wrapper > table > tbody > tr:not(:last-child) > td:not(.v-data-table__mobile-row),\n.theme--light.v-data-table > .v-data-table__wrapper > table > tbody > tr:not(:last-child) > th:not(.v-data-table__mobile-row) {\n    border-bottom: thin solid #ddd;\n}\n\n.v-data-table > .v-data-table__wrapper > table > tbody > tr > td {\n    height: 32px !important;\n    border-bottom: thin solid rgba(0, 0, 0, 0.12) !important;\n}\n\n.border_top {\n    border-top: thin solid #fff !important;\n}\n\n.v-application .primary,\n.v-application .third {\n    border-color: #fff !important;\n}\n\n.vat {\n    text-transform: uppercase;\n    color: #fff;\n    font-weight: bold;\n    font-family: 'Niradei-Bold' !important;\n}\n\n.amount {\n    text-align: right !important;\n}\n\n.head-summary {\n    text-align: right !important;\n}\n</style>\n"]}]}