{"remainingRequest":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/src/components/upload_excel/TimeCard.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/src/components/upload_excel/TimeCard.vue","mtime":1638499442953},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KCmltcG9ydCBYTFNYIGZyb20gJ3hsc3gnCmV4cG9ydCBkZWZhdWx0IHsKICBwcm9wczogewogICAgYmVmb3JlVXBsb2FkOiBGdW5jdGlvbiwgLy8gZXNsaW50LWRpc2FibGUtbGluZQogICAgb25TdWNjZXNzOiBGdW5jdGlvbi8vIGVzbGludC1kaXNhYmxlLWxpbmUKICB9LAogIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICBsb2FkaW5nOiBmYWxzZSwKICAgICAgZXhjZWxEYXRhOiB7CiAgICAgICAgaGVhZGVyOiBudWxsLAogICAgICAgIHJlc3VsdHM6IG51bGwKICAgICAgfQogICAgfQogIH0sCiAgbWV0aG9kczogewogICAgZ2VuZXJhdGVEYXRhKHsgaGVhZGVyLCByZXN1bHRzIH0pIHsKICAgICAgdGhpcy5leGNlbERhdGEuaGVhZGVyID0gaGVhZGVyCiAgICAgIHRoaXMuZXhjZWxEYXRhLnJlc3VsdHMgPSByZXN1bHRzCiAgICAgIHRoaXMub25TdWNjZXNzICYmIHRoaXMub25TdWNjZXNzKHRoaXMuZXhjZWxEYXRhKQogICAgfSwKICAgIGhhbmRsZUNsaWNrKGUpIHsKICAgICAgY29uc3QgZmlsZXMgPSBlLnRhcmdldC5maWxlcwogICAgICBjb25zdCByYXdGaWxlID0gZmlsZXNbMF0gLy8gb25seSB1c2UgZmlsZXNbMF0KICAgICAgaWYgKCFyYXdGaWxlKSByZXR1cm4KICAgICAgdGhpcy51cGxvYWQocmF3RmlsZSkKICAgIH0sCiAgICB1cGxvYWQocmF3RmlsZSkgewogICAgICBpZiAoIXRoaXMuYmVmb3JlVXBsb2FkKSB7CiAgICAgICAgdGhpcy5yZWFkZXJEYXRhKHJhd0ZpbGUpCiAgICAgICAgcmV0dXJuCiAgICAgIH0KICAgICAgY29uc3QgYmVmb3JlID0gdGhpcy5iZWZvcmVVcGxvYWQocmF3RmlsZSkKICAgICAgaWYgKGJlZm9yZSkgewogICAgICAgIHRoaXMucmVhZGVyRGF0YShyYXdGaWxlKQogICAgICB9CiAgICB9LAogICAgcmVhZGVyRGF0YShyYXdGaWxlKSB7CiAgICAgIHRoaXMubG9hZGluZyA9IHRydWUKICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7CiAgICAgICAgY29uc3QgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKQogICAgICAgIHJlYWRlci5vbmxvYWQgPSBlID0+IHsKICAgICAgICAgIGNvbnN0IGRhdGEgPSBlLnRhcmdldC5yZXN1bHQKICAgICAgICAgIGNvbnN0IHdvcmtib29rID0gWExTWC5yZWFkKGRhdGEsIHsgdHlwZTogJ2FycmF5JyB9KQogICAgICAgICAgY29uc3QgZmlyc3RTaGVldE5hbWUgPSB3b3JrYm9vay5TaGVldE5hbWVzWzBdCiAgICAgICAgICBjb25zdCB3b3Jrc2hlZXQgPSB3b3JrYm9vay5TaGVldHNbZmlyc3RTaGVldE5hbWVdCiAgICAgICAgICBjb25zdCBoZWFkZXIgPSB0aGlzLmdldEhlYWRlclJvdyh3b3Jrc2hlZXQpCiAgICAgICAgICBjb25zdCByZXN1bHRzID0gWExTWC51dGlscy5zaGVldF90b19qc29uKHdvcmtzaGVldCkKICAgICAgICAgIHRoaXMuZ2VuZXJhdGVEYXRhKHsgaGVhZGVyLCByZXN1bHRzIH0pCiAgICAgICAgICB0aGlzLmxvYWRpbmcgPSBmYWxzZQogICAgICAgICAgcmVzb2x2ZSgpCiAgICAgICAgfQogICAgICAgIHJlYWRlci5yZWFkQXNBcnJheUJ1ZmZlcihyYXdGaWxlKQogICAgICB9KQogICAgfSwKICAgIGdldEhlYWRlclJvdyhzaGVldCkgewogICAgICBjb25zdCBoZWFkZXJzID0gW10KICAgICAgY29uc3QgcmFuZ2UgPSBYTFNYLnV0aWxzLmRlY29kZV9yYW5nZShzaGVldFsnIXJlZiddKQogICAgICBsZXQgQwogICAgICBjb25zdCBSID0gcmFuZ2Uucy5yCiAgICAgIC8qIHN0YXJ0IGluIHRoZSBmaXJzdCByb3cgKi8KICAgICAgZm9yIChDID0gcmFuZ2Uucy5jOyBDIDw9IHJhbmdlLmUuYzsgKytDKSB7IC8qIHdhbGsgZXZlcnkgY29sdW1uIGluIHRoZSByYW5nZSAqLwogICAgICAgIGNvbnN0IGNlbGwgPSBzaGVldFtYTFNYLnV0aWxzLmVuY29kZV9jZWxsKHsgYzogQywgcjogUiB9KV0KICAgICAgICAvKiBmaW5kIHRoZSBjZWxsIGluIHRoZSBmaXJzdCByb3cgKi8KICAgICAgICBsZXQgaGRyID0gJ1VOS05PV04gJyArIEMgLy8gPC0tIHJlcGxhY2Ugd2l0aCB5b3VyIGRlc2lyZWQgZGVmYXVsdAogICAgICAgIGlmIChjZWxsICYmIGNlbGwudCkgaGRyID0gWExTWC51dGlscy5mb3JtYXRfY2VsbChjZWxsKQogICAgICAgIGhlYWRlcnMucHVzaChoZHIpCiAgICAgIH0KICAgICAgcmV0dXJuIGhlYWRlcnMKICAgIH0sCiAgfQp9Cg=="},{"version":3,"sources":["TimeCard.vue"],"names":[],"mappings":";;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"TimeCard.vue","sourceRoot":"src/components/upload_excel","sourcesContent":["<template>\n  <div>\n    <input ref=\"excel-upload-input\" type=\"file\" accept=\".xlsx, .xls\" @change=\"handleClick\">\n  </div>\n</template>\n<script>\nimport XLSX from 'xlsx'\nexport default {\n  props: {\n    beforeUpload: Function, // eslint-disable-line\n    onSuccess: Function// eslint-disable-line\n  },\n  data() {\n    return {\n      loading: false,\n      excelData: {\n        header: null,\n        results: null\n      }\n    }\n  },\n  methods: {\n    generateData({ header, results }) {\n      this.excelData.header = header\n      this.excelData.results = results\n      this.onSuccess && this.onSuccess(this.excelData)\n    },\n    handleClick(e) {\n      const files = e.target.files\n      const rawFile = files[0] // only use files[0]\n      if (!rawFile) return\n      this.upload(rawFile)\n    },\n    upload(rawFile) {\n      if (!this.beforeUpload) {\n        this.readerData(rawFile)\n        return\n      }\n      const before = this.beforeUpload(rawFile)\n      if (before) {\n        this.readerData(rawFile)\n      }\n    },\n    readerData(rawFile) {\n      this.loading = true\n      return new Promise((resolve) => {\n        const reader = new FileReader()\n        reader.onload = e => {\n          const data = e.target.result\n          const workbook = XLSX.read(data, { type: 'array' })\n          const firstSheetName = workbook.SheetNames[0]\n          const worksheet = workbook.Sheets[firstSheetName]\n          const header = this.getHeaderRow(worksheet)\n          const results = XLSX.utils.sheet_to_json(worksheet)\n          this.generateData({ header, results })\n          this.loading = false\n          resolve()\n        }\n        reader.readAsArrayBuffer(rawFile)\n      })\n    },\n    getHeaderRow(sheet) {\n      const headers = []\n      const range = XLSX.utils.decode_range(sheet['!ref'])\n      let C\n      const R = range.s.r\n      /* start in the first row */\n      for (C = range.s.c; C <= range.e.c; ++C) { /* walk every column in the range */\n        const cell = sheet[XLSX.utils.encode_cell({ c: C, r: R })]\n        /* find the cell in the first row */\n        let hdr = 'UNKNOWN ' + C // <-- replace with your desired default\n        if (cell && cell.t) hdr = XLSX.utils.format_cell(cell)\n        headers.push(hdr)\n      }\n      return headers\n    },\n  }\n}\n</script>\n\n<style scoped>\n.excel-upload-input{\n  display: none;\n  z-index: -9999;\n}\n.drop{\n  border: 2px dashed #bbb;\n  width: 600px;\n  height: 160px;\n  line-height: 160px;\n  margin: 0 auto;\n  font-size: 24px;\n  border-radius: 5px;\n  text-align: center;\n  color: #bbb;\n  position: relative;\n}\n</style>"]}]}