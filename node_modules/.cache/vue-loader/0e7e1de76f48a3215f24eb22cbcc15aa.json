{"remainingRequest":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/macos/Desktop/banhji-0.2/banhji-commerce/src/views/payroll/settings/BankAccount.vue?vue&type=style&index=0&id=7ac16c89&scoped=true&lang=css&","dependencies":[{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/src/views/payroll/settings/BankAccount.vue","mtime":1638499443263},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/@vue/cli-service/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi5hY2NfZ3JvdXAgaGVhZGVyIHsKICAgIGhlaWdodDogMTBweCAhaW1wb3J0YW50Owp9Cgp0YWJsZS5hY2NfZ3JvdXAgdHIgdGQgewogICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICNjY2M7CiAgICBwYWRkaW5nOiA4cHg7CiAgICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlOwp9Cgp0YWJsZS5hY2NfZ3JvdXAgdHIgdGQ6Zmlyc3QtY2hpbGQgewogICAgZm9udC13ZWlnaHQ6IDcwMDsKfQoKdGFibGUuYWNjX2dyb3VwIHRyIHRkOmxhc3QtY2hpbGQgewogICAgdGV4dC1hbGlnbjogY2VudGVyOwp9Cgoudi1jYXJkX19hY3Rpb25zIC52LWJ0bi52LWJ0biB7CiAgICBwYWRkaW5nOiAwIDE2cHg7Cn0KCi5leGNoYW5nZS10YWJsZS50aGVtZS0tbGlnaHQudi1kYXRhLXRhYmxlID4gLnYtZGF0YS10YWJsZV9fd3JhcHBlciA+IHRhYmxlID4gdGhlYWQgPiB0ciA+IHRoIHsKICAgIGZvbnQtZmFtaWx5OiAnTmlyYWRlaS1Cb2xkJywgc2VyaWY7CiAgICBjb2xvcjogIzAwMCAhaW1wb3J0YW50OwogICAgYm9yZGVyLXRvcDogMXB4IHNvbGlkICMwMDAgIWltcG9ydGFudDsKICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjMDAwICFpbXBvcnRhbnQ7CiAgICBmb250LXNpemU6IDE1cHggIWltcG9ydGFudDsKfQoKLmV4Y2hhbmdlLXRhYmxlLnRoZW1lLS1saWdodC52LWRhdGEtdGFibGUgPiAudi1kYXRhLXRhYmxlX193cmFwcGVyID4gdGFibGUgPiB0aGVhZCA+IHRyID4gdGQgewogICAgY29sb3I6ICMwMDAgIWltcG9ydGFudDsKICAgIHBhZGRpbmc6IDVweCAhaW1wb3J0YW50Owp9CgouZXhjaGFuZ2UtdGFibGUudGhlbWUtLWxpZ2h0LnYtZGF0YS10YWJsZSA+IC52LWRhdGEtdGFibGVfX3dyYXBwZXIgPiB0YWJsZSA+IHRib2R5ID4gdHI6bGFzdC1jaGlsZCB0ZCB7CiAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgIzAwMCAhaW1wb3J0YW50Owp9CgouZnVuY3Rpb25fZm9vdGVyIHsKICAgIHBhZGRpbmc6IDE1cHg7CiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7Cn0KCkBtZWRpYSAobWF4LXdpZHRoOiA1NzZweCkgewoKfQo="},{"version":3,"sources":["BankAccount.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmQA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA","file":"BankAccount.vue","sourceRoot":"src/views/payroll/settings","sourcesContent":["<template>\n    <v-row class=\"\">\n        <v-col sm=\"12\" cols=\"12\" class=\"pt-0\">\n            <h2 class=\"mb-0 font_20\">{{$t('bank_account')}}</h2>\n            <v-dialog v-model=\"dialogm2\" max-width=\"380px\" eager>\n                <template v-slot:activator=\"{ on }\">\n                    <v-btn color=\"primary\" class=\" text-capitalize white--text float-right\" v-on=\"on\" @click=\"onNewClick\">\n                        {{$t('create_new')}}\n                    </v-btn>\n                </template>\n                <v-card>\n                    <div class=\"modal_header\">\n                    <v-card-title>{{$t('bank_account')}}</v-card-title>\n                    <v-icon  @click=\"dialogm2 = false\">close</v-icon>\n                    </div>\n                    <v-card-text class=\"modal_text_content\">\n                        <v-form ref=\"form\" v-model=\"valid\" lazy-validation>\n                            <v-row>\n                                <v-col sm=\"12\" cols=\"12\" class=\"pb-0\">\n                                    <label class=\"label\">{{$t('bank_name')}}</label>\n                                    <v-select class=\"mt-1\"\n                                        id=\"acc_type_selector\"\n                                        :items=\"bankList\"\n                                        :rules=\"[v => !!v || $t('bank_name_require')]\"\n                                        item-text=\"name\"\n                                        item-value=\"id\"\n                                        v-model=\"selectBankName\"\n                                        @change=\"bankName\"\n                                        outlined\n                                        return-object/>\n\n                                    <label class=\"label\">{{$t('bank_account')}}</label>\n                                    <v-select class=\"mt-1\"\n                                        id=\"acc_type_selector\"\n                                        :items=\"bankAcountList\"\n                                        :rules=\"[v => !!v || $t('bank_account_require')]\"\n                                        :item-text=\"item =>`${item.account} ( ${item.currency} )`\"\n                                        item-value=\"id\"\n                                        v-model=\"selectBankAccount\"\n                                        outlined\n                                        return-object/>\n                                </v-col>\n                            </v-row>\n                        </v-form>\n                    </v-card-text>\n                    <v-card-actions class=\"modal_footer\">\n                        <v-row>\n                            <v-col sm=\"6\" cols=\"6\" class=\"py-0 text-left\">\n                                <v-btn color=\"black\" outlined class=\" text-capitalize  black--text float-left\" @click=\"dialogm2 = false\">{{$t('cancel')}}</v-btn>\n                            </v-col>\n                            <v-col sm=\"6\" cols=\"6\" class=\"py-0 text-right\">\n                                <v-btn color=\"primary\" class=\"   white--text text-capitalize\" @click=\"onSaveClose\">{{$t('save_close')}}\n                                </v-btn>\n                            </v-col>\n                        </v-row>\n                    </v-card-actions>\n\n                </v-card>\n            </v-dialog>\n            <p class=\"mb-0\">{{$t('bank_account_desc')}} </p>\n        </v-col>\n\n        <v-col sm=\"12\" cols=\"12\" class=\"py-0\">\n            <template>\n                <kendo-datasource ref=\"payrollBankDS\" :data=\"payrollBank\" />\n                <kendo-grid\n                    id=\"gridBank\"\n                    class=\"grid-function\"\n                    :data-source-ref=\"'payrollBankDS'\"\n                    :editable=\"false\"\n                    :scrollable-virtual=\"true\"\n                    :column-menu=\"false\">\n                <kendo-grid-column\n                    :field=\"'bankName'\"\n                    :title=\"$t('bank')\"\n                    :template=\"'<span>#=bankName#</span>'\"\n                    :headerAttributes=\"{ style: 'background-color: #EDF1F5' }\"/>\n                <kendo-grid-column\n                    :field=\"'account'\"\n                    :title=\"$t('bank_account_number')\"\n                    :template=\"'<span>#= account.account || ``#</span>'\"\n                    :headerAttributes=\"{ style: 'background-color: #EDF1F5' }\"/>\n                <kendo-grid-column\n                    :field=\"''\"\n                    :title=\"$t('action')\"\n                    :width=\"100\"\n                    :command=\"[{iconClass: 'k-icon k-i-edit', text: 'Edit',click: goEdit}]\"\n                    :headerAttributes=\"{style: 'text-align: right; background-color: #EDF1F5'}\"/>\n                </kendo-grid>\n            </template>\n        </v-col>\n    </v-row>\n</template>\n\n<script>\n    import BankPayroll from '@/scripts/model/BankPayroll'\n    import kendo from \"@progress/kendo-ui\";\n    const bankModel = new BankPayroll({})\n    const payrollHandler = require(\"@/scripts/payrollHandler\")\n    const bankAccountHandler  = require(\"@/scripts/bankAccountHandler\")\n    const $ = kendo.jQuery;\n    export default {\n        components: {},\n        data: () => ({\n            dialogm1: '',\n            dialogm2: false,\n            compeletLoading: true,\n            isFullpage: false,\n            snackbar: false,\n            textStatus: 'Success',\n            valid: true,\n            color: '#3DA72E',\n            timeout: 6000,\n            x: 'right',\n            y: 'top',\n            payrollBank: [],\n            bankList: [],\n            bankAcountList: [],\n            bankPayroll: bankModel,\n            selectBankName: {},\n            selectBankAccount: '',\n\n        }),\n        props: {},\n        computed: {},\n        watch: {\n            dialogm2(val) {\n                val || this.close()\n            },\n        },\n        created() {\n        },\n        methods: {\n            goEdit(e){\n                new Promise(resolve => {\n                    setTimeout(() => {\n                    resolve('resolved');\n                    e.preventDefault();\n                    let grid = kendo.jQuery(\"#gridBank\").data(\"kendoGrid\");\n                    let dataItem = grid.dataItem($(e.currentTarget).closest(\"tr\"));\n                    this.selectBankName = dataItem.bank\n                    this.selectBankAccount = dataItem.account\n                    this.bankPayroll = dataItem\n                    this.bankName()\n                    this.dialogm2 = true\n                    }, 300);\n                })\n            },\n            onNewClick() {\n                this.option = 1\n                this.clear()\n            },\n            async onSaveClose() {\n                if (!this.$refs.form.validate()) {\n                    this.$refs.form.validate()\n                    return\n                }\n                new Promise(resolve => {\n                    setTimeout(() => {\n                        resolve('resolved');\n                        let data = {\n                            id: this.bankPayroll.id ? this.bankPayroll.id : '',\n                            bank: {\n                                name: this.selectBankName.name || '',\n                                id:   this.selectBankName.id || ''},\n                            bankAccount: {\n                                account:        this.selectBankAccount.account || {},\n                                chartAcount:    this.selectBankAccount.chartAcount || {},\n                                currency:       this.selectBankAccount.currency || '',\n                                id:             this.selectBankAccount.id || ''\n                            },\n                        }\n                        window.console.log(0, data)\n                        payrollHandler.createBank(data).then(response => {\n                            if (response.data.statusCode === 201) {\n                                const res = response.data\n                                const index = this.payrollBank.findIndex(item => {\n                                    return (res.data.id === item.id)\n                                })\n                                if (this.payrollBank.length === 0) {\n                                    this.loadPayrollBank()\n                                } else {\n                                    if (index < 0) {\n                                        this.payrollBank.push(res.data)\n                                    } else {\n                                        this.payrollBank.splice(index, 1, res.data)\n                                    }\n                                }\n                                this.$snotify.success('Success')\n                                this.clear()\n                                this.close()\n                            }\n                        }).catch(e => {\n                            this.$snotify.error('Something went wrong')\n                            this.errors.push(e)\n                        })\n                    }, 300);\n                })\n            },\n            close() {\n                this.dialogm2 = false\n            },\n            clear() {\n                this.selectBankAccount = ''\n                this.selectBankName = ''\n            },\n            async loadPayrollBank(){\n                new Promise(resolve => {\n                    setTimeout(() => {\n                        resolve('resolved');\n                        payrollHandler.getBank().then(res => {\n                            this.payrollBank = res.data.data\n                        })\n                    }, 300);\n                })\n            },\n            async loadBank() {\n                new Promise(resolve => {\n                    setTimeout(() => {\n                        resolve('resolved');\n                        bankAccountHandler.getAll().then(res => {\n                            const results = Array.from(new Set(res.data.map(s=>s.bank.uuid))).map(uuid=>{\n                                return {\n                                    id: uuid,\n                                    name: res.data.find(s=>s.bank.uuid==uuid).bank.name,\n                                }\n                            })\n                            this.bankList = results\n                        })\n                    }, 300);\n                })\n            },\n            bankName(){\n                new Promise(resolve => {\n                    setTimeout(() => {\n                        resolve('resolved');\n                        bankAccountHandler.getAll().then(res => {\n                            const results = res.data.filter(ac => ac.bank.uuid  ==  this.selectBankName.id).map(acb=>{\n                                return {\n                                    id:         acb.uuid,\n                                    account:    acb.number,\n                                    currency:   acb.currency.code,\n                                    chartAcount:    acb.account\n                                }\n                            });\n                            this.bankAcountList = results\n                        })\n                    }, 300);\n                })\n            }\n        },\n        mounted: async function () {\n            this.loadPayrollBank()\n            this.loadBank()\n            this.bankName()\n        }\n    };\n</script>\n<style scoped>\n    .acc_group header {\n        height: 10px !important;\n    }\n\n    table.acc_group tr td {\n        border-bottom: 1px solid #ccc;\n        padding: 8px;\n        vertical-align: middle;\n    }\n\n    table.acc_group tr td:first-child {\n        font-weight: 700;\n    }\n\n    table.acc_group tr td:last-child {\n        text-align: center;\n    }\n\n    .v-card__actions .v-btn.v-btn {\n        padding: 0 16px;\n    }\n\n    .exchange-table.theme--light.v-data-table > .v-data-table__wrapper > table > thead > tr > th {\n        font-family: 'Niradei-Bold', serif;\n        color: #000 !important;\n        border-top: 1px solid #000 !important;\n        border-bottom: 1px solid #000 !important;\n        font-size: 15px !important;\n    }\n\n    .exchange-table.theme--light.v-data-table > .v-data-table__wrapper > table > thead > tr > td {\n        color: #000 !important;\n        padding: 5px !important;\n    }\n\n    .exchange-table.theme--light.v-data-table > .v-data-table__wrapper > table > tbody > tr:last-child td {\n        border-bottom: 1px solid #000 !important;\n    }\n\n    .function_footer {\n        padding: 15px;\n        display: inline-block;\n    }\n\n    @media (max-width: 576px) {\n\n    }\n</style>"]}]}