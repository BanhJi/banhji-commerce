{"remainingRequest":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/src/views/products/product/inventory_adjustment/InventoryAdjustment.vue?vue&type=style&index=0&id=2f6a9eab&scoped=true&lang=css&","dependencies":[{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/src/views/products/product/inventory_adjustment/InventoryAdjustment.vue","mtime":1638499443271},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/@vue/cli-service/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgouc21hbGxfc2lkZWJhciB7CiAgaGVpZ2h0OiA5NSU7CiAgcG9zaXRpb246IHJlbGF0aXZlOwogIHBhZGRpbmc6IDEycHg7Cn0KCi5oaWRlX3NtYWxsX2Jhcl9jbGFzcyB7CiAgbWF4LXdpZHRoOiAwOwogIHRyYW5zaXRpb246IDAuNXMgZWFzZS1pbjsKICBmbGV4OiAwIDAgMDsKICBwYWRkaW5nOiAwOwp9CgouaGlkZV9iaWdfYmFyX2NsYXNzIHsKICBtYXgtd2lkdGg6IDEwMCU7CiAgdHJhbnNpdGlvbjogMC41cyBlYXNlLWluOwogIGZsZXg6IDAgMCAxMDAlOwp9CgouaWNvbkFycm93IHsKICByaWdodDogLTM1cHg7CiAgcG9zaXRpb246IGFic29sdXRlOwogIGJvdHRvbTogLTEwcHg7Cn0KCi5pY29uQXJyb3dIaWRlIHsKICBwb3NpdGlvbjogYWJzb2x1dGU7CiAgcmlnaHQ6IC03cHg7CiAgYm90dG9tOiAtMTBweDsKfQoKLnRoZW1lLS1saWdodC52LWRhdGEtdGFibGUKICA+IC52LWRhdGEtdGFibGVfX3dyYXBwZXIKICA+IHRhYmxlCiAgPiB0Ym9keQogID4gdHI6aG92ZXI6bm90KC52LWRhdGEtdGFibGVfX2V4cGFuZGVkX19jb250ZW50KTpub3QoLnYtZGF0YS10YWJsZV9fZW1wdHktd3JhcHBlcikgewogIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50ICFpbXBvcnRhbnQ7Cn0KCi5kZXRpYWxfc21hbGxzaWRlX3AgewogIC8qcG9zaXRpb246IGFic29sdXRlOyovCiAgYm90dG9tOiAxMHB4Owp9Cg=="},{"version":3,"sources":["InventoryAdjustment.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAs5CA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"InventoryAdjustment.vue","sourceRoot":"src/views/products/product/inventory_adjustment","sourcesContent":["<template>\n  <v-app>\n    <v-container>\n      <v-row>\n        <v-col sm=\"12\" cols=\"12\">\n          <v-card\n            outlined\n            dense\n            class=\"pa-4 no_border rounded-sm\"\n            color=\"white\"\n          >\n            <v-row>\n              <v-col\n                class=\"bigSide py-0\"\n                sm=\"8\"\n                cols=\"12\"\n                style=\"transition: 0.3s ease-in\"\n                :class=\"{ hide_big_bar_class: isHideBar }\"\n              >\n                <v-form ref=\"form\" v-model=\"valid\" lazy-validation>\n                  <v-card outlined dense class=\"no_border\">\n                    <h2 class=\"mb-0\">{{ $t(\"inventory_adjustment\") }}</h2>\n                    <v-icon\n                      v-if=\"isHideBar\"\n                      @click=\"cancel()\"\n                      style=\"cursor: pointer; color: #333; font-size: 40px\"\n                      class=\"float-right\"\n                      >close\n                    </v-icon>\n                    <span\n                      style=\"transition: 0.3s ease-in; z-index: 10\"\n                      :class=\"{\n                        iconArrow: !isHideBar,\n                        iconArrowHide: isHideBar,\n                      }\"\n                    >\n                      <v-icon\n                        size=\"22\"\n                        class=\"arr_icon\"\n                        @click=\"hideSmallSidebar\"\n                        v-if=\"isHideBar\"\n                      >\n                        mdi-chevron-left-circle\n                      </v-icon>\n                      <v-icon\n                        size=\"22\"\n                        class=\"arr_icon\"\n                        @click=\"hideSmallSidebar\"\n                        v-if=\"!isHideBar\"\n                      >\n                        mdi-chevron-right-circle\n                      </v-icon>\n                    </span>\n                  </v-card>\n\n                  <v-card\n                    outlined\n                    dense\n                    class=\"px-3 no_border\"\n                    color=\"grayBg\"\n                    height=\" 172px\"\n                  >\n                    <v-row>\n                      <v-col sm=\"4\" cols=\"12\" class=\"pb-0\">\n                        <label class=\"label\">{{ $t(\"date\") }}</label>\n                        <app-datepicker\n                          :initialDate=\"inventoryAdjustment.transactionDate\"\n                          @onChanged=\"onTransactionDateChanged\"\n                          @emitDate=\"\n                            inventoryAdjustment.transactionDate = $event\n                          \"\n                        />\n                        <label class=\"label\">{{ $t(\"stock_count_ref\") }}</label>\n                        <v-text-field class=\"mt-1\" outlined required />\n                      </v-col>\n                      <v-col sm=\"4\" cols=\"12\">\n                        <label class=\"label\">{{\n                          $t(\"adjustment_number\")\n                        }}</label>\n                        <div class=\"d-flex mt-1\">\n                          <div class=\"code_text flex-1 text-bold\">\n                            {{ inventoryAdjustment.abbr }}\n                          </div>\n                          <v-text-field\n                            class=\"flex-2 custom-border\"\n                            v-model=\"inventoryAdjustment.number\"\n                            outlined\n                            :rules=\"[(v) => !!v || $t('is_required')]\"\n                            required\n                          />\n                          <v-icon\n                            color=\"black\"\n                            size=\"30\"\n                            style=\"height: 40px\"\n                            class=\"border_qrcode ml-2\"\n                            @click=\"generateNumber\"\n                            >mdi-qrcode\n                          </v-icon>\n                        </div>\n                      </v-col>\n                      <v-col sm=\"4\" cols=\"12\">\n                        <label class=\"label\">{{\n                          $t(\"adjustment_account\")\n                        }}</label>\n                        <v-select\n                          class=\"mt-1\"\n                          :items=\"accounts\"\n                          tage=\"account\"\n                          item-value=\"id\"\n                          :item-text=\"(item) => `${item.number} - ${item.name}`\"\n                          v-model=\"inventoryAdjustment.account\"\n                          :rules=\"[(v) => !!v || $t('is_required')]\"\n                          return-object\n                          outlined\n                        />\n                        <!-- <label class=\"label\">{{ $t(\"adjustment_memo\") }}</label>\n                        <v-text-field\n                          class=\"mt-1\"\n                          v-model=\"inventoryAdjustment.transactionNote\"\n                          outlined\n                          tage=\"memo\"\n                          required\n                        /> -->\n                        <!-- <label class=\"label\">{{\n                          $t(\"message_for_journal\")\n                        }}</label>\n                        <v-text-field\n                          class=\"mt-1\"\n                          v-model=\"inventoryAdjustment.journalNote\"\n                          outlined\n                          tage=\"Message for Journal\"\n                          required\n                        /> -->\n                      </v-col>\n                    </v-row>\n                  </v-card>\n\n                  <v-row style=\"background-color: #fff\">\n                    <v-col sm=\"12\" cols=\"12\">\n                      <kendo-datasource\n                        ref=\"itemLineDS\"\n                        :data=\"itemLines\"\n                        :change=\"dataSourceChanged\"\n                      />\n                      <kendo-grid\n                        id=\"gridItemLine\"\n                        class=\"grid-function\"\n                        :data-source-ref=\"'itemLineDS'\"\n                        :sortable=\"false\"\n                        :column-menu=\"true\"\n                        :editable=\"true\"\n                        :scrollable-virtual=\"true\"\n                      >\n                        <kendo-grid-column\n                          :command=\"{\n                            iconClass: 'k-icon k-i-trash',\n                            text: ' ',\n                            click: removeRow,\n                            class: 'btn-plus',\n                          }\"\n                          :title=\"''\"\n                          :width=\"63\"\n                          :headerAttributes=\"{\n                            style:\n                              'text-align: left; background-color: #EDF1F5',\n                          }\"\n                        />\n                        <kendo-grid-column\n                          :title=\"$t('no.')\"\n                          :width=\"53\"\n                          :column-menu=\"false\"\n                          :template=\"rowNumberTmpl\"\n                          :headerAttributes=\"{\n                            style: 'background-color: #EDF1F5;',\n                            class: 'text-products',\n                          }\"\n                          :attributes=\"{\n                            style: 'text-align: products',\n                          }\"\n                        />\n                        <kendo-grid-column\n                          :field=\"'item'\"\n                          :title=\"$t('product')\"\n                          :template=\"itemTemplate\"\n                          :editor=\"ItemDropDownEditor\"\n                          :width=\"200\"\n                          :headerAttributes=\"{\n                            style: 'background-color: #EDF1F5',\n                          }\"\n                        />\n                        <kendo-grid-column\n                          :field=\"'description'\"\n                          :title=\"$t('description')\"\n                          :template=\"'<span>#=description#</span>'\"\n                          :width=\"200\"\n                          :headerAttributes=\"{\n                            style: 'background-color: #EDF1F5',\n                          }\"\n                        />\n\n                        <kendo-grid-column\n                          :field=\"'buom'\"\n                          :title=\"$t('uom')\"\n                          :width=\"170\"\n                          :template=\"UOMTemplate\"\n                          :editable=\"\n                            () => {\n                              return false;\n                            }\n                          \"\n                          :headerAttributes=\"{\n                            style:\n                              'text-align: left; background-color: #EDF1F5',\n                          }\"\n                          :attributes=\"{\n                            style: 'text-align: left',\n                          }\"\n                        />\n                        <kendo-grid-column\n                          :field=\"'cost'\"\n                          :title=\"$t('cost')\"\n                          :editor=\"numberEditor\"\n                          :template=\"'<span>#=kendo.toString(cost || 0, decimalFormat) || 0#</span>'\"\n                          :width=\"170\"\n                          :headerAttributes=\"{\n                            style:\n                              'text-align: left; background-color: #EDF1F5',\n                          }\"\n                          :attributes=\"{ style: 'text-align: right; ' }\"\n                        />\n                        <kendo-grid-column\n                          :field=\"'qoh'\"\n                          :title=\"$t('on_hand')\"\n                          :template=\"'<span>#=kendo.toString(qoh || 0, decimalFormat) || 0#</span>'\"\n                          :width=\"170\"\n                          :editable=\"\n                            () => {\n                              return false;\n                            }\n                          \"\n                          :headerAttributes=\"{\n                            style:\n                              'text-align: left; background-color: #EDF1F5',\n                          }\"\n                          :attributes=\"{ style: 'text-align: right; ' }\"\n                        />\n                        <kendo-grid-column\n                          :field=\"'count'\"\n                          :title=\"$t('counted')\"\n                          :editor=\"numberEditor\"\n                          :template=\"'<span>#=kendo.toString(count || 0, decimalFormat)#</span>'\"\n                          :width=\"170\"\n                          :headerAttributes=\"{\n                            style:\n                              'text-align: left; background-color: #EDF1F5',\n                          }\"\n                          :attributes=\"{ style: 'text-align: right; ' }\"\n                        />\n                        <kendo-grid-column\n                          :field=\"'different'\"\n                          :title=\"$t('different')\"\n                          :editable=\"\n                            () => {\n                              return false;\n                            }\n                          \"\n                          :width=\"170\"\n                          :template=\"'<span>#=kendo.toString(different || 0, decimalFormat)#</span>'\"\n                          :editor=\"numberEditor\"\n                          :headerAttributes=\"{\n                            style:\n                              'text-align: left; background-color: #EDF1F5',\n                          }\"\n                          :attributes=\"{\n                            style: 'text-align: right',\n                          }\"\n                        />\n                        <kendo-grid-column\n                          :field=\"'amount'\"\n                          :title=\"$t('amount')\"\n                          :width=\"170\"\n                          :editable=\"\n                            () => {\n                              return false;\n                            }\n                          \"\n                          :template=\"'<span>#=kendo.toString(amount || 0, decimalFormat)#</span>'\"\n                          :headerAttributes=\"{\n                            style:\n                              'text-align: left; background-color: #EDF1F5',\n                          }\"\n                          :attributes=\"{\n                            style: 'text-align: right',\n                          }\"\n                        />\n                      </kendo-grid>\n                    </v-col>\n                    <v-col sm=\"12\" cols=\"12\" class=\"py-0\">\n                      <v-btn\n                        color=\"primary\"\n                        class=\"float-left ml-0 btn_plus rounded-4 white--text mr-2\"\n                        @click=\"addRow\"\n                      >\n                        <v-icon size=\"\" class=\"ma-1\">mdi-plus</v-icon>\n                      </v-btn>\n                    </v-col>\n                    <v-col sm=\"6\" cols=\"12\">\n                      <label>{{ $t(\"message_these_adjustment\") }}</label>\n                      <v-textarea\n                        class=\"mt-1\"\n                        outlined\n                        no-resize\n                        height=\"70px\"\n                        tage=\"Message on Invoice\"\n                        placeholder=\"This will appear on the invoice\"\n                      />\n                      <label>{{ $t(\"message_on_journal\") }}</label>\n                      <v-textarea\n                        class=\"mt-1\"\n                        outlined\n                        no-resize\n                        height=\"70px\"\n                        tage=\"Message on Order\"\n                        placeholder=\"This will appear on the journal\"\n                      />\n                    </v-col>\n                    <v-col class=\"pt-5\" sm=\"6\" cols=\"12\">\n                      <v-simple-table>\n                        <template v-slot:default>\n                          <tbody>\n                            <tr>\n                              <td class=\"text-left\">{{ $t(\"dr\") }}</td>\n                              <td class=\"text-center\">:</td>\n                              <td class=\"text-right color_green text-bold\">\n                                {{ numberFormat(dr) }}\n                              </td>\n                            </tr>\n                            <tr>\n                              <td class=\"text-left\">{{ $t(\"cr\") }}</td>\n                              <td class=\"text-center\">:</td>\n                              <td class=\"text-right color_green text-bold\">\n                                {{ numberFormat(cr) }}\n                              </td>\n                            </tr>\n                          </tbody>\n                        </template>\n                      </v-simple-table>\n                    </v-col>\n                  </v-row>\n                  <v-divider />\n                  <v-card elevation=\"0\" class=\"no_border function_footer\">\n                    <v-alert type=\"warning\" v-model=\"alert\" dismissible>\n                      <span v-html=\"errorMessage\" />\n                    </v-alert>\n                    <v-menu>\n                      <v-list>\n                        <v-list-item\n                          v-for=\"(item, index) in templates\"\n                          :key=\"index\"\n                        >\n                          <v-list-item-title>{{\n                            item.title\n                          }}</v-list-item-title>\n                        </v-list-item>\n                      </v-list>\n                    </v-menu>\n                    <v-btn\n                      color=\"primary\"\n                      outlined\n                      class=\"text-capitalize black--text float-left\"\n                      @click=\"cancel\"\n                      >{{ $t(\"cancel\") }}\n                    </v-btn>\n                    <v-btn\n                      color=\"primary\"\n                      @click=\"onSaveClose('close')\"\n                      class=\"float-right white--text text-capitalize\"\n                    >\n                      {{ $t(\"save_close\") }}\n                    </v-btn>\n                    <v-btn\n                      color=\"secondary\"\n                      style=\"margin-right: 10px !important\"\n                      class=\"white--text float-right text-capitalize\"\n                      @click=\"onSaveClose('new')\"\n                      :hidden=\"hiddenButton\"\n                      >{{ $t(\"save_new\") }}\n                    </v-btn>\n                  </v-card>\n                </v-form>\n              </v-col>\n              <v-col\n                class=\"smallSide\"\n                sm=\"4\"\n                style=\"transition: 0.3s ease-in\"\n                :class=\"{ hide_small_bar_class: isHideBar }\"\n              >\n                <h3\n                  style=\"color: #b3b5bc; font-size: 20px\"\n                  v-if=\"!isHideBar\"\n                  class=\"text-uppercase float-right mt-n3\"\n                >\n                  <span class=\"pointer\" @click=\"Help('inventory adjustment')\">\n                    {{ $t(\"help\") }}\n                  </span>\n                  <v-icon\n                    @click=\"cancel()\"\n                    style=\"cursor: pointer; color: #333; font-size: 40px\"\n                    class=\"float-right mt-n1\"\n                    >close\n                  </v-icon>\n                </h3>\n\n                <div v-if=\"!isHideBar\" class=\"small_sidebar mt-8 grayBg\">\n                  <v-row>\n                    <v-col sm=\"12\" cols=\"12\" class=\"pt-0\">\n                      <v-card\n                        outlined\n                        dense\n                        class=\"\n                          pa-3\n                          mb-2\n                          no_border\n                          my_card\n                          rounded-4\n                          white--text\n                        \"\n                        color=\"primary\"\n                        height=\"60px\"\n                      >\n                        <h3 class=\"text-left font_13 flex-1 text-uppercase\">\n                          {{ $t(\"adjustment_amount\") }}\n                        </h3>\n                        <h3 class=\"text-right flex-1 font_20 niradei_heavy\">\n                          0000\n                        </h3>\n                      </v-card>\n                      <label class=\"label mb-0\">{{ $t(\"segment\") }}</label>\n                      <v-select\n                        class=\"mt-1\"\n                        v-model=\"inventoryAdjustment.segment\"\n                        :items=\"segments\"\n                        item-value=\"id\"\n                        :item-text=\"(item) => `${item.code} - ${item.name}`\"\n                        return-object\n                        tage=\"sub Of\"\n                        placeholder=\"Sub Of\"\n                        outlined=\"\"\n                      />\n                      <label class=\"label mb-0\">{{ $t(\"location\") }}</label>\n                      <v-select\n                        class=\"mt-1\"\n                        v-model=\"inventoryAdjustment.location\"\n                        :items=\"locations\"\n                        item-value=\"id\"\n                        :item-text=\"(item) => `${item.code} - ${item.name}`\"\n                        return-object\n                        tage=\"Location\"\n                        placeholder=\"location\"\n                        outlined=\"\"\n                      />\n                      <label class=\"label\">{{ $t(\"project\") }}</label>\n                      <v-select\n                        class=\"mt-1\"\n                        v-model=\"inventoryAdjustment.project\"\n                        :items=\"projects\"\n                        :item-text=\"(item) => `${item.code} - ${item.name}`\"\n                        item-value=\"id\"\n                        tage=\"Project\"\n                        outlined\n                      />\n                      <!-- <label class=\"label\">{{ $t(\"employee\") }}</label> -->\n                      <!-- <v-col\n                        sm=\"12\"\n                        cols=\"12\"\n                        class=\"kendo_dropdown_custom pl-0 pr-0 pb-3 pt-0\"\n                      >\n                        <dropdownlist\n                          :data-items=\"employees\"\n                          @change=\"onEmployeeChanged\"\n                          :value=\"mEmployee\"\n                          :data-item-key=\"'id'\"\n                          :text-field=\"'name'\"\n                          :default-item=\"defaultItem\"\n                          :filterable=\"true\"\n                          :rules=\"[(v) => !!v || 'Employee is required']\"\n                          @filterchange=\"onEmployeeFilterChanged\"\n                        >\n                        </dropdownlist>\n                      </v-col> -->\n                      <label class=\"label\">{{ $t(\"for_month_of\") }}</label>\n                      <app-monthpicker\n                        :initMonthOf=\"inventoryAdjustment.monthOf\"\n                        @emitMonthOf=\"inventoryAdjustment.monthOf = $event\"\n                      />\n                      <p class=\"detial_smallside_p font_14\">\n                        {{ $t(\"inventory_adjustment_func_desc\") }}\n                      </p>\n                    </v-col>\n                  </v-row>\n                </div>\n              </v-col>\n            </v-row>\n          </v-card>\n        </v-col>\n      </v-row>\n      <LoadingMe\n        :isLoading=\"showLoading\"\n        :fullPage=\"false\"\n        type=\"loading\"\n        :myLoading=\"true\"\n        :alertMessage=\"loadingAlert\"\n        :color=\"loadingColorAlert\"\n        :alertText=\"loadingTextAlert\"\n      />\n    </v-container>\n  </v-app>\n</template>\n\n<script>\n// import kendo from '@progress/kendo-ui'\nimport { i18n } from \"@/i18n\";\nimport DatePickerComponent from \"@/components/custom_templates/DatePickerComponent\";\nimport InventoryAdjustment from \"@/scripts/model/inventoryAdjustment\";\nimport MonthOfPicker from \"@/components/kendo_templates/MonthOfPicker\";\nimport { ShowResource } from \"@/observable/store\";\nimport { uuid } from \"vue-uuid\";\nimport kendo from \"@progress/kendo-ui\";\nimport SaleFormContentModel from \"@/scripts/model/SaleFormContent\";\nimport ItemLineModel from \"@/scripts/inventory-adjustment/model/ItemLine\";\n// import { DropDownList } from \"@progress/kendo-vue-dropdowns\";\n\nconst accountHandler = require(\"@/scripts/handler/accounting/account\");\nconst billingHandler = require(\"@/scripts/invoice/handler/billingHandler\");\nconst prefixHandler = require(\"@/scripts/prefixHandler\");\nconst warehouseHandler = require(\"@/scripts/warehouseHandler\");\nconst settingsHandler = require(\"@/scripts/settingsHandler\");\nconst locationHandler = require(\"@/scripts/locationHandler\");\nconst projectHandler = require(\"@/scripts/projectHandler\");\nconst productVariantHandler = require(\"@/scripts/productVariantHandler\");\nconst employeeHandler = require(\"@/scripts/employeeHandler\");\nconst saleFormContentHandler = require(\"@/scripts/saleFormContentHandler\");\nconst saleFormContentModel = new SaleFormContentModel({});\nconst currencyHandler = require(\"@/scripts/currency/handler/currencyHandler\");\n\nconst itemLineModel = new ItemLineModel({});\nconst prefix = \"inventory adjustment\";\nconst txnType = \"Inventory Adjustment\";\nconst itemLinePrefix = \"lin-\";\nconst $ = require(\"jquery\");\n\nconst textField = \"numberName\";\nconst keyField = \"id\";\nconst emptyItem = { [textField]: \"loading ...\" };\nconst defaultItem = { [textField]: \"Select employee...\", [keyField]: null };\nconst cookieJS = require(\"@/cookie.js\");\nconst cookie = cookieJS.getCookie();\n\nexport default {\n  name: \"InventoryAdjustment\",\n  components: {\n    LoadingMe: () => import(`@/components/Loading`),\n    \"app-datepicker\": DatePickerComponent,\n    \"app-monthpicker\": MonthOfPicker,\n    // dropdownlist: DropDownList,\n  },\n  props: [\"id\"],\n  data: () => ({\n    isEdit: false,\n    // LoadingMe\n    showLoading: true,\n    loadingAlert: false,\n    loadingColorAlert: \"\",\n    loadingTextAlert: \"\",\n    filter_: \"\",\n    requestStarted: false,\n    alert: false,\n    valid: true,\n    templates: [\n      { title: \"Draft\" },\n      { title: \"Open\" },\n      { title: \"Partially Closed\" },\n      { title: \"Closed\" },\n    ],\n    isHideBar: false,\n    accounts: [],\n    segments: [],\n    locations: [],\n    projects: [],\n    warehouses: [],\n    buom: [],\n    itemLines: [],\n    employees: [],\n    mEmployee: {},\n    baseCurrency: {},\n    exchangeRate: {},\n    saleFormContent: saleFormContentModel,\n    empBaseUrl: employeeHandler.search(),\n    inventoryAdjustment: new InventoryAdjustment({}),\n    itemLine: itemLineModel,\n    defaultItem: defaultItem,\n    transactionDate: \"\",\n    jRaw: [],\n    dr: 0,\n    cr: 0,\n    loggedUser: {\n      id: cookie.creator,\n      name: cookie.email,\n    },\n  }),\n  methods: {\n    numberFormat(value) {\n      return kendo.toString(value, `n${this.saleFormContent.decimal}`);\n    },\n    resetDataWhenTxnDateChanged() {\n      try {\n        let itemLineDS = this.$refs.itemLineDS.kendoWidget();\n        const rowData = itemLineDS.data();\n        this.itemLines = [];\n        rowData.map((o) => {\n          o.buom = {};\n          o.cost = 0;\n          o.amount = 0;\n          o.qoh = 0;\n          o.count = 0;\n          o.different = 0;\n          this.itemLines.push(new ItemLineModel(o));\n        });\n      } catch (e) {\n        window.console.log(\"error\", e);\n      }\n    },\n    onTransactionDateChanged() {\n      // this.resetDataWhenTxnDateChanged()\n      if (this.$route.params.id === undefined) {\n        this.generateNumber();\n      }\n      this.inventoryAdjustment.monthOf = new Date(\n        this.inventoryAdjustment.transactionDate\n      )\n        .toISOString()\n        .substr(0, 7);\n    },\n    afterFetch_(json) {\n      this.employees = json.data;\n    },\n    requestData_(skip, filter, baseUrl) {\n      const url = baseUrl + `/${filter}`;\n      this.requestStarted = true;\n      fetch(url)\n        .then((response) => {\n          return response.json();\n        })\n        .then(this.afterFetch_);\n    },\n    onEmployeeFilterChanged(event) {\n      const filter = event.filter.value;\n      this.requestData_(0, filter, this.empBaseUrl);\n      this.filter_ = filter;\n    },\n    async initData() {\n      if (this.$route.params.id !== undefined) {\n        await this.loadViewAdjustment();\n        // window.console.log('1', this.$route.params)\n      } else {\n        this.addRow();\n      }\n    },\n    async loadSaleFormContent() {\n      new Promise((resolve) => {\n        setTimeout(() => {\n          resolve(\"resolved\");\n          saleFormContentHandler.list().then(async (res) => {\n            if (res.data.statusCode === 200) {\n              const data = res.data.data;\n              if (data.length > 0) {\n                this.saleFormContent = data[0];\n                this.baseCurrency = data[0].baseCurrency;\n                this.inventoryAdjustment.currency = this.baseCurrency;\n                await this.initData();\n                await this.loadTransactionRate();\n              }\n            }\n          });\n        }, 10);\n      });\n    },\n    async loadTransactionRate() {\n      new Promise((resolve) => {\n        setTimeout(() => {\n          resolve(\"resolved\");\n          const date = new Date(this.transactionDate)\n            .toISOString()\n            .substr(0, 10);\n          const currency = this.baseCurrency;\n          let code = \"\";\n          if (currency.hasOwnProperty(\"code\")) {\n            code = currency.code;\n          }\n          if (code !== undefined || code !== \"\") {\n            this.showLoading = true;\n            currencyHandler\n              .getLastExchangeRateByDate(date, code)\n              .then((res) => {\n                if (res.data.statusCode === 200) {\n                  this.showLoading = false;\n                  this.exchangeRate = res.data.data[0];\n                  this.inventoryAdjustment.txnRate = this.exchangeRate.rate;\n                  this.inventoryAdjustment.exchangeRate = this.exchangeRate;\n                  this.showLoading = false;\n                }\n              });\n          }\n        }, 10);\n      });\n    },\n    onEmployeeChanged(event) {\n      const value = event.value;\n      if (value && value[textField] === emptyItem[textField]) {\n        return;\n      }\n      this.mEmployee = value;\n      this.inventoryAdjustment.employee = value;\n    },\n    afterFetch(json) {\n      this.employees = json.data;\n    },\n    async loadEmployeeCenter() {\n      new Promise((resolve) => {\n        setTimeout(() => {\n          resolve(\"resolved\");\n          this.employees = [];\n          employeeHandler\n            .center(undefined)\n            .then((res) => {\n              this.showLoading = true;\n              if (res.data.statusCode === 200) {\n                this.showLoading = false;\n                this.employees = res.data.data;\n                if (this.employees.length > 0) {\n                  this.mEmployee = this.employees[0];\n                  window.console.log(this.employees[0], \"this.employees[0]\");\n                  this.inventoryAdjustment.employee = this.employees[0];\n                }\n              }\n            })\n            .catch();\n          {\n            this.showLoading = false;\n          }\n        }, 10);\n      });\n    },\n    itemTemplate(dataItem) {\n      const item = dataItem.item;\n      if (item) {\n        return `<span>${item.name ? item.name : ``}</span>`;\n      } else {\n        return ``;\n      }\n    },\n    ItemDropDownEditor(container, options) {\n      kendo\n        .jQuery('<input name=\"' + options.field + '\"/>')\n        .appendTo(container)\n        .kendoDropDownList({\n          autoBind: true,\n          autoWidth: true,\n          height: 400,\n          filter: \"contains\",\n          dataTextField: \"name\",\n          dataValueField: \"id\",\n          headerTemplate:\n            '<div class=\"dropdown-header k-widget k-header\">' +\n            \"<span>Items </span>\" +\n            \"<span></span>\" +\n            \"</div>\",\n          template: \"<span>#=name#</span>\",\n          optionLabel: \"--- Select ---\",\n          dataSource: new kendo.data.DataSource({\n            serverFiltering: true,\n            transport: {\n              read: {\n                url: productVariantHandler.itemVariantSearchURL(),\n              },\n              dataType: \"json\",\n            },\n            schema: {\n              model: {\n                id: \"id\",\n                fields: {\n                  id: { type: \"string\" },\n                  name: { type: \"string\" },\n                  sku: { type: \"string\" },\n                },\n              },\n              data: function (response) {\n                return response.data;\n              },\n              total: function (response) {\n                return response.data.count;\n              },\n            },\n          }),\n        });\n    },\n    qohTemplate(dataItem) {\n      // const buom = dataItem.buom || {}\n      const qoh = dataItem.qoh || 0;\n      // if (buom.hasOwnProperty('name')) {\n      return qoh;\n      // }\n      // return ``\n    },\n    UOMTemplate(dataItem) {\n      const uom = dataItem.buom;\n      if (uom) {\n        return `<span>${uom.name ? uom.name : ``}</span>`;\n      } else {\n        return ``;\n      }\n    },\n    numberEditor(container, options) {\n      kendo\n        .jQuery('<input data-bind=\"value:' + options.field + '\"/>')\n        .appendTo(container)\n        .kendoNumericTextBox({\n          decimals: 30,\n          min: 0,\n          format: `${this.saleFormContent.decimal}`,\n        });\n    },\n    rowNumberTmpl(dataItem) {\n      let ds = this.$refs.itemLineDS.kendoWidget(),\n        index = ds.indexOf(dataItem);\n      return index + 1;\n    },\n    addRow() {\n      let ds = this.$refs.itemLineDS.kendoWidget(),\n        total = ds.total();\n      this.itemLine.id = itemLinePrefix + uuid.v1();\n      this.itemLine.decimalFormat = \"n\" + this.saleFormContent.decimal;\n      ds.insert(total, this.itemLine);\n    },\n    async dataSourceChanged(e) {\n      if (e.field) {\n        let dataRow = e.items[0],\n          buom = {},\n          count = 0,\n          diff = 0,\n          qoh = 0;\n        switch (e.field) {\n          case \"item\":\n            dataRow.set(\"description\", dataRow.item.description);\n            buom = dataRow.item.uom;\n            dataRow.set(\"buom\", buom);\n            await this.searchTransaction(dataRow, dataRow.item.id);\n            break;\n          case \"count\":\n            try {\n              count = parseFloat(dataRow.count || 0);\n              qoh = parseFloat(dataRow.qoh || 0);\n              diff = count - qoh;\n              dataRow.set(\"different\", parseFloat(diff));\n              dataRow.set(\n                \"amount\",\n                parseFloat(dataRow.cost) * parseFloat(diff)\n              );\n            } catch {\n              dataRow.set(\"different\", 0);\n              dataRow.set(\"amount\", 0);\n            }\n            break;\n          case \"cost\":\n            try {\n              diff = parseFloat(dataRow.different || 0);\n              dataRow.set(\n                \"amount\",\n                parseFloat(dataRow.cost) * parseFloat(diff)\n              );\n            } catch {\n              dataRow.set(\"amount\", 0);\n            }\n            break;\n          default:\n            break;\n        }\n        if (e.field) {\n          this.autoCalculate();\n          // this.rawForJournal()\n        }\n      }\n    },\n    autoCalculate() {\n      let ds = this.$refs.itemLineDS.kendoWidget();\n      let nature = \"\",\n        amount = 0,\n        qty = 0;\n      this.jRaw = [];\n      const rows = ds.data();\n      rows.forEach((value) => {\n        const amt = kendo.parseFloat(value.amount);\n        const diff = kendo.parseFloat(value.different);\n        amount += amt;\n        qty += diff;\n        const item = value.item;\n        if (amt > 0) {\n          nature = \"dr\";\n        } else {\n          nature = \"cr\";\n        }\n        if (item) {\n          if (item.type === \"Variant\") {\n            if (item.hasOwnProperty(\"inventoryAcc\")) {\n              if (item.inventoryAcc.hasOwnProperty(\"id\")) {\n                let inventoryAcc = item.inventoryAcc;\n                this.jRaw.push({\n                  id: inventoryAcc.id + \"-\" + nature,\n                  line: new ItemLineModel(value),\n                  description: item.description || \"\",\n                  account: item.inventoryAcc,\n                  accountId: item.inventoryAcc.id,\n                  amount: amt, // qty*avg_cost ,\n                  exchangeAmount: amt, //xAmount,\n                  type: nature,\n                  typeAs: \"item\",\n                });\n              }\n            }\n          }\n        }\n      });\n      this.inventoryAdjustment.amount = amount;\n      this.inventoryAdjustment.exchangeAmount = amount;\n      this.inventoryAdjustment.qty = qty;\n      // adjustment account\n      if (this.inventoryAdjustment.account) {\n        const adjustAcc = this.inventoryAdjustment.account;\n        if (amount * -1 > 0) {\n          nature = \"dr\";\n        } else {\n          nature = \"cr\";\n        }\n        this.jRaw.push({\n          id: adjustAcc.id + \"-\" + nature,\n          line: new ItemLineModel({}),\n          description: this.inventoryAdjustment.journalNote,\n          account: adjustAcc,\n          accountId: adjustAcc.id,\n          amount: amount * -1, // qty*avg_cost ,\n          exchangeAmount: amount * -1, //xAmount,\n          type: nature,\n          typeAs: \"adjustment acc\",\n        });\n      }\n      // todo: raw Journal\n      // const account = this.inventoryAdjustment.account || {}\n      // if (this.inventoryAdjustment.amountDue > 0) {\n      //   nature = 'dr'\n      // } else {\n      //   nature = 'cr'\n      // }\n      // if (account) {\n      //   if (account.hasOwnProperty('id')) {\n      //     this.jRaw.push({\n      //       id: account.id + '-' + nature,\n      //       line: new ItemLineModel({}),\n      //       description: this.invoice.journalNote,\n      //       account: account,\n      //       accountId: account.id,\n      //       exchangeAmount: this.inventoryAdjustment.exchangeAmount,\n      //       amount: this.invoice.amountDue,\n      //       type: nature,\n      //       typeAs: 'ar'\n      //     })\n      //   }\n      // }\n      // todo: end raw Journal\n      this.shrinkData(this.jRaw);\n      // const unique = this.removeDuplicate(this.accounts)\n      // window.console.log(unique, 'unique')\n    },\n    removeDuplicate(array) {\n      const result = [];\n      const map = new Map();\n      for (const item of array) {\n        if (!map.has(item.id)) {\n          map.set(item.id, true); // set any value to Map\n          result.push(item);\n        }\n      }\n      return result;\n    },\n    shrinkData(obj) {\n      const uniques =\n        this.removeDuplicate(obj); /*[...new Set(accountId.map(i => {\n                return {\n                    id_: i.id_,\n                    id: i.id,\n                    type: i.type\n                }\n            }))]*/\n      uniques.forEach((n) => {\n        const found = obj.filter((m) => m.id === n.id);\n        let amount = 0,\n          xAmount = 0;\n        found.forEach((z) => {\n          amount += parseFloat(z.amount || 0);\n          xAmount += parseFloat(z.exchangeAmount || 0);\n        });\n        n.amount = parseFloat(amount); //this.numberFormat(amount)\n        n.exchangeAmount = parseFloat(xAmount); //parseFloat(parseFloat(amount * parseFloat(this.invoice.txnRate))) //this.numberFormat(amount * parseFloat(this.invoice.txnRate)) //.toFixed(this.saleFormContent.decimal)\n      });\n      this.jRaw = uniques;\n      let dr = 0,\n        cr = 0;\n      this.jRaw.forEach((j) => {\n        switch (j.type) {\n          case \"cr\":\n            cr += parseFloat(j.amount);\n            break;\n          case \"dr\":\n            dr += parseFloat(j.amount);\n            break;\n          default:\n            break;\n        }\n      });\n      this.dr = dr;\n      this.cr = cr;\n      window.console.log(\"dr=\", dr, \"cr=\", cr, \"dr+cr = \", dr + cr);\n      window.console.log(JSON.stringify(uniques), \"uniques\");\n    },\n    Help(keyword_search) {\n      ShowResource(keyword_search);\n    },\n    async searchTransaction(dataRow, itemId) {\n      new Promise((resolve) => {\n        setTimeout(() => {\n          resolve(\"resolved\");\n          this.showLoading = true;\n          const startDate = this.transactionDate;\n          let strFilter = \"?asOf=\" + startDate + \"&id=\" + itemId;\n          billingHandler.inventoryBalance(strFilter).then((res) => {\n            if (res.data.statusCode === 200) {\n              const balance = res.data.data;\n              if (balance.length > 0) {\n                dataRow.set(\"cost\", balance[0].wac);\n                dataRow.set(\"qoh\", balance[0].qoh);\n                dataRow.set(\n                  \"amount\",\n                  parseFloat(balance[0].wac) * parseFloat(dataRow.different)\n                );\n              } else {\n                dataRow.set(\"cost\", 0);\n              }\n              window.console.log(\"balance\", res.data.data);\n            }\n            this.showLoading = false;\n          });\n        }, 10);\n      });\n    },\n    async loadAccount() {\n      new Promise((resolve) => {\n        setTimeout(() => {\n          resolve(\"resolved\");\n          accountHandler.getAll().then((res) => {\n            this.showLoading = false;\n            this.accounts = res.data.map((itm) => {\n              return {\n                id: itm.uuid,\n                uuid: itm.uuid,\n                name: itm.name,\n                local_name: itm.local_name,\n                number: itm.number,\n                is_taxable: itm.is_taxable,\n                banhjiAccCode: itm.banhjiAccCode,\n                group_code: itm.group_code,\n                parent_account: itm.parent_account,\n                type_code: itm.type_code,\n                account_type: itm.account_type,\n              };\n            });\n            if (this.accounts.length > 0) {\n              this.inventoryAdjustment.account = this.accounts[0];\n            }\n          });\n        }, 10);\n      });\n    },\n    async loadProjects() {\n      await projectHandler.list().then((res) => {\n        this.projects = res.data.data;\n        if (this.projects.length > 0) {\n          this.inventoryAdjustment.project = this.projects[0];\n        }\n      });\n    },\n    async loadSegment() {\n      new Promise((resolve) => {\n        setTimeout(() => {\n          resolve(\"resolved\");\n          this.segments = [];\n          settingsHandler\n            .getSeg()\n            .then((res) => {\n              this.showLoading = true;\n              if (res.data.statusCode === 200) {\n                this.showLoading = false;\n                this.segments = res.data.data;\n                if (this.segments.length > 0) {\n                  this.inventoryAdjustment.segment = this.segments[0];\n                }\n                // this.segmentList = res.data.data\n              }\n            })\n            .catch();\n          {\n            this.showLoading = false;\n          }\n        }, 10);\n      });\n    },\n    async loadLocation() {\n      new Promise((resolve) => {\n        setTimeout(() => {\n          resolve(\"resolved\");\n          this.locations = [];\n          locationHandler\n            .list()\n            .then((res) => {\n              this.showLoading = true;\n              if (res.data.statusCode === 200) {\n                this.showLoading = false;\n                this.locations = res.data.data;\n                if (this.locations.length > 0) {\n                  this.inventoryAdjustment.location = this.locations[0];\n                }\n              }\n            })\n            .catch();\n          {\n            this.showLoading = false;\n          }\n        }, 10);\n      });\n    },\n    async loadWarehouses() {\n      warehouseHandler.getWarehouseSettingAll().then((res) => {\n        this.warehouses = res;\n      });\n    },\n    async loadPrefix() {\n      new Promise((resolve) => {\n        setTimeout(async () => {\n          resolve(\"resolved\");\n          await prefixHandler.get(prefix).then(async (res) => {\n            if (res.data.statusCode === 200) {\n              this.showLoading = false;\n              this.transactionTypes = res.data.data;\n              if (this.transactionTypes.length > 0) {\n                this.inventoryAdjustment.transactionType =\n                  this.transactionTypes[0];\n                if (this.$route.params.id === undefined) {\n                  await this.generateNumber();\n                }\n              }\n            }\n          });\n        }, 10);\n      });\n    },\n    async generateNumber() {\n      if (this.inventoryAdjustment.transactionDate !== \"\") {\n        let data = {\n          abbr: this.inventoryAdjustment.transactionType.abbr,\n          structure: this.inventoryAdjustment.transactionType.structure,\n          transactionDate: this.inventoryAdjustment.transactionDate,\n          sequcencing: this.inventoryAdjustment.transactionType.sequcencing,\n          type: \"Inventory Adjustment\",\n        };\n        this.inventoryAdjustment.abbr = data.abbr;\n        this.inventoryAdjustment.structure = data.structure;\n        this.inventoryAdjustment.sequcencing = data.sequcencing;\n        this.inventoryAdjustment.transactionDate = data.transactionDate;\n        this.inventoryAdjustment.type = data.type;\n        this.showLoading = true;\n        await billingHandler\n          .lastNumber(data)\n          .then((response) => {\n            if (response.data.statusCode === 200) {\n              this.showLoading = false;\n              const res = response.data.data;\n              const lastNumber = this.zeroPad(\n                parseInt(res.lastNumber),\n                this.inventoryAdjustment.transactionType.format\n              );\n              this.inventoryAdjustment.number =\n                res.suffix +\n                this.inventoryAdjustment.transactionType.numberSeparator +\n                lastNumber;\n              this.inventoryAdjustment.lastNumber = res.suffix + lastNumber;\n            }\n          })\n          .catch((e) => {\n            this.showLoading = false;\n            window.console.error(e);\n          });\n      }\n    },\n    zeroPad(num, places) {\n      return String(num).padStart(places, \"0\");\n    },\n    savePrint() {},\n    saveNew() {},\n    async onSaveClose(isSave) {\n      if (!this.$refs.form.validate()) {\n        this.$refs.form.validate();\n        return;\n      }\n      window.console.log(\"mEmployee\", this.inventoryAdjustment.employee);\n      if (this.mEmployee.id !== null) {\n        new Promise((resolve) => {\n          setTimeout(() => {\n            resolve(\"resolved\");\n            let isAutoGenerate = 1;\n            if (this.$route.params.id) {\n              const tranDate = new Date(this.transactionDate);\n              const tranDateAdjustment = new Date(\n                this.inventoryAdjustment.transactionDate\n              );\n              const tranDateM = tranDate.getFullYear() + tranDate.getMonth();\n              const tranDateTxnM =\n                tranDateAdjustment.getFullYear() +\n                tranDateAdjustment.getMonth();\n              if (tranDateM === tranDateTxnM) {\n                isAutoGenerate = 0;\n              }\n            }\n            this.autoCalculate();\n            let itemLineDS = this.$refs.itemLineDS.kendoWidget();\n            const dataRow = itemLineDS\n              .data()\n              .filter((o) => o.buom !== {} || o.buom !== null)\n              .map((o) => {\n                return new ItemLineModel(o);\n              });\n            if (dataRow.length > 0) {\n              let data = {\n                id: this.inventoryAdjustment.id\n                  ? this.inventoryAdjustment.id\n                  : \"\",\n                uuid: this.inventoryAdjustment.uuid\n                  ? this.inventoryAdjustment.uuid\n                  : \"\",\n                journal_uuid: this.inventoryAdjustment.journal_uuid\n                  ? this.inventoryAdjustment.journal_uuid\n                  : \"\",\n                type: txnType,\n                number: this.inventoryAdjustment.number,\n                abbr: this.inventoryAdjustment.transactionType.abbr,\n                transactionDate: this.transactionDate,\n                monthOf: this.inventoryAdjustment.monthOf,\n                transactionType: this.inventoryAdjustment.transactionType,\n                txnRate: this.inventoryAdjustment.txnRate,\n                exchangeRate: this.inventoryAdjustment.exchangeRate,\n                currency: this.inventoryAdjustment.currency,\n                itemLine: dataRow,\n                segment: this.inventoryAdjustment.segment,\n                location: this.inventoryAdjustment.location,\n                project: this.inventoryAdjustment.project,\n                employee: this.inventoryAdjustment.employee,\n                transactionNote: this.inventoryAdjustment.transactionNote,\n                journalNote: this.inventoryAdjustment.journalNote,\n                account: this.inventoryAdjustment.account,\n                status: 1,\n                createdAt: this.inventoryAdjustment.createdAt,\n                amount: this.inventoryAdjustment.amount,\n                exchangeAmount: this.inventoryAdjustment.exchangeAmount,\n                qty: this.inventoryAdjustment.qty,\n                loggedUser: this.loggedUser,\n                isAutoGenerate: isAutoGenerate,\n                jRaw: this.jRaw,\n                actionType: this.$route.params.id\n                  ? this.$route.query.type\n                  : \"new\",\n              };\n              this.showLoading = true;\n              billingHandler\n                .inventoryAdjustment(data)\n                .then((response) => {\n                  if (response.data.statusCode === 201) {\n                    this.showLoading = false;\n                    this.$snotify.success(\"Successfully\");\n                    if (isSave == \"new\") {\n                      this.clear();\n                    } else if (isSave == \"close\") {\n                      this.clear();\n                      this.close();\n                    }\n                  }\n                })\n                .catch((e) => {\n                  this.showLoading = false;\n                  this.$snotify.error(\"Something went wrong\");\n                  this.errors.push(e);\n                });\n            }\n          }, 10);\n        });\n      }\n    },\n    close() {\n      window.history.go(-1);\n    },\n    clear() {\n      this.loadPrefix();\n      this.loadAccount();\n      this.loadSegment();\n      this.loadLocation();\n      this.loadProjects();\n      this.inventoryAdjustment = new InventoryAdjustment({});\n      let ds = this.$refs.itemLineDS.kendoWidget();\n      ds.data([]);\n      this.addRow();\n    },\n    removeRow(e) {\n      e.preventDefault();\n      const grid = kendo.jQuery(\"#gridItemLine\").data(\"kendoGrid\"),\n        dataSource = grid.dataSource,\n        dataItem = grid.dataItem($(e.currentTarget).closest(\"tr\"));\n\n      if (dataSource.total() > 1) {\n        dataSource.remove(dataItem);\n        this.autoCalculate();\n      }\n    },\n    errorMessage() {},\n    accountDropDownEditor() {},\n    cancel() {\n      this.$swal({\n        title: i18n.t(\"msg_title_warning\"),\n        text: i18n.t(\"msg_discard\"),\n        icon: \"warning\",\n        showCancelButton: true,\n        cancelButtonText: i18n.t(\"cancel\"),\n        confirmButtonColor: \"#4d4848\",\n        cancelButtonColor: \"#ED1A3A\",\n        confirmButtonText: i18n.t(\"discard\"),\n      }).then((resultCen) => {\n        if (resultCen.value) {\n          this.$router.go(-1);\n        }\n      });\n    },\n    hideSmallSidebar() {\n      this.isHideBar = !this.isHideBar;\n    },\n    async loadViewAdjustment() {\n      new Promise((resolve) => {\n        setTimeout(() => {\n          resolve(\"resolved\");\n          // window.console.log(this.$route.params.id, 'id')\n          if (\n            this.$route.params.id !== undefined ||\n            this.$route.params.id !== \"\"\n          ) {\n            this.showLoading = true;\n            billingHandler\n              .inventoryAdjustmentList(\"?id=\" + this.$route.params.id)\n              .then((res) => {\n                if (res.data.statusCode === 200) {\n                  this.showLoading = false;\n                  this.inventoryAdjustment = res.data.data[0];\n                  this.itemLines = this.inventoryAdjustment.itemLine;\n                  // window.console.log(this.itemLines, '-')\n                  this.transactionDate =\n                    this.inventoryAdjustment.transactionDate;\n                  this.mEmployee = this.inventoryAdjustment.employee;\n                  const account_ = this.inventoryAdjustment.account;\n                  this.inventoryAdjustment.account = account_;\n                  this.autoCalculate();\n                }\n              });\n          }\n        }, 10);\n      });\n    },\n  },\n  watch: {\n    id() {\n      // window.console.log('id--', this.$route.params.id)\n      if (this.$route.params.id === undefined) {\n        this.initData();\n      } else {\n        this.showLoading = true;\n        this.loadViewAdjustment();\n        this.showLoading = false;\n      }\n    },\n  },\n  created() {\n    // fetch the data when the view is created and the data is\n    // already being observed\n    // this.loadObj()\n  },\n  async mounted() {\n    await this.loadSaleFormContent();\n    await this.loadAccount();\n    await this.loadLocation();\n    await this.loadPrefix();\n    await this.loadSegment();\n    await this.loadProjects();\n    // await this.loadWarehouses()\n    await this.loadEmployeeCenter();\n  },\n  computed: {\n    hiddenButton() {\n      if (this.$route.query.type == \"edit\") {\n        return true;\n      } else {\n        return false;\n      }\n    },\n  },\n};\n</script>\n\n<style scoped>\n.small_sidebar {\n  height: 95%;\n  position: relative;\n  padding: 12px;\n}\n\n.hide_small_bar_class {\n  max-width: 0;\n  transition: 0.5s ease-in;\n  flex: 0 0 0;\n  padding: 0;\n}\n\n.hide_big_bar_class {\n  max-width: 100%;\n  transition: 0.5s ease-in;\n  flex: 0 0 100%;\n}\n\n.iconArrow {\n  right: -35px;\n  position: absolute;\n  bottom: -10px;\n}\n\n.iconArrowHide {\n  position: absolute;\n  right: -7px;\n  bottom: -10px;\n}\n\n.theme--light.v-data-table\n  > .v-data-table__wrapper\n  > table\n  > tbody\n  > tr:hover:not(.v-data-table__expanded__content):not(.v-data-table__empty-wrapper) {\n  background-color: transparent !important;\n}\n\n.detial_smallside_p {\n  /*position: absolute;*/\n  bottom: 10px;\n}\n</style>\n"]}]}