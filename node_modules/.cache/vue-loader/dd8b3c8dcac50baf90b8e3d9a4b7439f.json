{"remainingRequest":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/macos/Desktop/banhji-0.2/banhji-commerce/src/views/banking/collection/ConnectCollectionAccount.vue?vue&type=style&index=0&id=36750443&scoped=true&lang=css&","dependencies":[{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/src/views/banking/collection/ConnectCollectionAccount.vue","mtime":1638499443129},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/@vue/cli-service/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi5mdW5jdGlvbl9jb250ZW50IHsKICAgIHBhZGRpbmc6IDEwcHggMjVweCAyNXB4OwogICAgYm9yZGVyLWJvdHRvbTogMDsKfQoKQG1lZGlhIChtaW4td2lkdGg6IDEyNjRweCkgewogICAgLmNvbnRhaW5lciB7CiAgICAgICAgbWF4LXdpZHRoOiAxMDgwcHggIWltcG9ydGFudDsKICAgIH0KfQoKQG1lZGlhIChtYXgtd2lkdGg6IDU3NnB4KSB7Cgp9Cg=="},{"version":3,"sources":["ConnectCollectionAccount.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+TA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA","file":"ConnectCollectionAccount.vue","sourceRoot":"src/views/banking/collection","sourcesContent":["<template>\n    <v-app>\n        <v-container>\n            <v-row>\n                <v-col cols=\"12\" sm=\"12\">\n                    <v-card\n                        outlined\n                        dense\n                        class=\"pa-4 no_border rounded-sm\"\n                        color=\"white\"\n                    >\n                        <v-card outlined dense class=\"no_border\">\n                            <h2 class=\"mb-0\">{{ $t('connect_collection_account') }}</h2>\n                            <v-icon\n                                @click=\"onClose\"\n                                style=\"cursor: pointer; color: #333; font-size: 40px;\"\n                                class=\"float-right\"\n                            >close\n                            </v-icon>\n                        </v-card>\n                        <v-card outlined dense class=\"px-5 py-2\" color=\"grayBg\">\n                            <LoadingMe\n                                :isLoading=\"showLoading\"\n                                :fullPage=\"false\"\n                                :myLoading=\"true\">\n                            </LoadingMe>\n                            <v-row v-if=\"!bankClick && !connectBankSuccess\">\n                                <v-col sm=\"6\" cols=\"12\" class=\"pb-0\">\n                                    <h3 class=\"primary--text font_20\">{{ $t('connect_to_partner_financial') }}</h3>\n                                    <p class=\"my-2 dark--text\">{{ $t('connect_to_partner_financial_desc') }}</p>\n                                    <v-row>\n                                        <v-col sm=\"6\" cols=\"12\">\n                                            <v-card outlined dense class=\"pa-2 grayBg\" height=\"225px\">\n                                                <v-img class=\"ma-auto\" width=\"60%\" src=\"@/assets/images/002.png\"/>\n                                                <p class=\"text-center mb-0 mt-3\">{{ $t('online_payments') }}</p>\n                                            </v-card>\n                                        </v-col>\n                                        <v-col sm=\"6\" cols=\"12\">\n                                            <v-card outlined dense class=\"pa-2 grayBg \" height=\"225px\">\n                                                <v-img class=\"ma-auto\" width=\"60%\" src=\"@/assets/images/003.png\"/>\n                                                <p class=\"text-center mb-0 mt-3\">{{ $t('proximity_payment') }}</p>\n                                            </v-card>\n                                        </v-col>\n                                    </v-row>\n                                </v-col>\n\n                                <v-col sm=\"6\" cols=\"12\" class=\"py-2\">\n                                    <p class=\"my-2\">{{ $t('please_select_financial_to_connect') }}</p>\n                                    <v-row>\n                                        <v-col sm=\"3\" cols=\"12\" v-for=\"item in banks\" v-bind:key=\"item.id\">\n                                            <v-card elevation=\"0\" color=\"white\" class=\"shadow_hover\" min-height=\"100px\">\n                                                <v-img @click=\"onBankClick(item)\" class=\" ma-auto \" width=\"100%\"\n                                                       v-bind:src=\"item.image\"/>\n                                            </v-card>\n                                        </v-col>\n                                    </v-row>\n                                </v-col>\n                            </v-row>\n                            <v-row v-else-if=\"bankClick && !connectBankSuccess\">\n                                <v-col cols=\"12\" class=\"pb-0\">\n                                    <v-btn color=\"primary\" class=\"white--text\" @click=\"onBackToConnect\">\n                                        <v-icon size=\"13\" class=\"mr-2\">fa fa-arrow-left</v-icon>\n                                        {{ $t('back') }}\n                                    </v-btn>\n                                </v-col>\n                                <v-col cols=\"12\" sm=\"12\">\n                                    <BankConnection :info=\"info\">\n                                        <template v-slot:account>\n                                            <v-form\n                                                ref=\"form\"\n                                                v-model=\"valid\"\n                                                lazy-validation\n                                            >\n                                                <label class=\"label\">{{ $t('nature') }}</label>\n                                                <p class=\"text_tip mb-0 mt-1\">{{ $t('nature_customer_desc') }}</p>\n                                                <v-select class=\"mt-4 \"\n                                                          multiple=\"multiple\"\n                                                          :items=\"account\"\n                                                          :item-text=\"item =>`${item.number} - ${item.name}`\"\n                                                          item-value=\"id\"\n                                                          v-model=\"mSelectedAccount\"\n                                                          :rules=\"[v => !!v || 'Item is required']\"\n                                                          required\n                                                          tage=\"Nature\"\n                                                          outlined\n                                                          return-object/>\n                                                <v-btn width=\"100%\" color=\"primary\" class=\" mt-4 white--text \"\n                                                       @click=\"onConnectClick\">\n                                                    <v-icon size=\"13\" class=\"mr-2 white--text\">fa fa-lock</v-icon>\n                                                    <span\n                                                        class=\"white--text text-capitalize\">{{\n                                                            $t('connect_collection_account')\n                                                        }}</span>\n                                                </v-btn>\n                                            </v-form>\n                                        </template>\n                                    </BankConnection>\n                                </v-col>\n                            </v-row>\n                            <v-row v-else-if=\"connectBankSuccess\">\n                                <v-col class=\"\" min-height=\"500\">\n                                    <h2 class=\"primary--text text-center d-block font_4em my-10 mt-16 fade-in\">\n                                        {{ $t('congratulation') }}</h2>\n                                    <p class=\"text-center mb-0 font_20\">{{ $t('your_collection_account') }}</p>\n                                </v-col>\n                            </v-row>\n                            <p class=\"text-center mb-2\">\n                                <v-icon size=\"13\" class=\"third--text mr-2 white--text\">fa fa-lock</v-icon>\n                                {{ $t('at_banhJi_the_privacy') }}\n                            </p>\n                        </v-card>\n                    </v-card>\n                </v-col>\n            </v-row>\n        </v-container>\n    </v-app>\n</template>\n\n<script>\nimport BankPaymentModel from \"@/scripts/model/BankPayment\";\n\nconst bankHandler = require(\"@/scripts/bankHandler\")\nconst bankAccountHandler = require(\"@/scripts/bankAccountHandler\")\nconst otherHandler = require(\"@/scripts/otherHandler\")\nconst bankPaymentHandler = require(\"@/scripts/bankPaymentHandler\")\nconst bankPaymentModel = new BankPaymentModel({})\nimport {uuid} from 'vue-uuid'\n\nexport default {\n    name: 'ConnectedAccount',\n    components: {\n        LoadingMe: () => import(`@/components/Loading`),\n        BankConnection: () => import(`@/components/BankConnection`)\n    },\n    data: () => ({\n        bankClick: false,\n        valid: true,\n        connectBankSuccess: false,\n        connectLoading: false,\n        account: [],\n        dialogM3: false,\n        mSelectedAccount: [],\n        showLoading: false,\n        isLoaded: false,\n        info: {},\n        bankPayment: bankPaymentModel,\n        banks: [],\n        bankPartners: [],\n        bankAccount: [],\n    }),\n    methods: {\n        async loadBankPartner() {\n            new Promise(resolve => {\n                setTimeout(() => {\n                    resolve('resolved');\n                    this.showLoading = true\n                    otherHandler.bankParner().then(res => {\n                        this.bankPartners = res\n                        this.showLoading = false\n                        // window.console.log(this.bankPartners, 'partner')\n                    })\n                }, 300);\n            })\n        },\n        async loadBankAccount() {\n            new Promise(resolve => {\n                setTimeout(() => {\n                    resolve('resolved');\n                    this.showLoading = true\n                    bankAccountHandler.getAll().then(res => {\n                        this.bankAccount = res.data\n                        this.loadAllBanks()\n                        this.showLoading = false\n                    })\n                }, 300);\n            })\n        },\n        loadAllBanks() {\n            new Promise(resolve => {\n                    setTimeout(() => {\n                        resolve('resolved')\n                        this.showLoading = true\n                        bankHandler.getAll().then(res => {\n                            this.banks = []\n                            const data = res.data.filter(m => {\n                                return (m.is_deleted === 0 && m.hasOwnProperty('partner_id'))\n                            })\n                            data.filter(m => {\n                                this.bankPartners.forEach(n => {\n                                    if (n.id === m.partner_id) {\n                                        m['image'] = n.image\n                                        m['order'] = n.order\n                                        this.banks.push(m)\n                                    }\n                                })\n                                m['bankAccount'] = this.bankAccount.filter(l => l.bank.uuid === m.uuid).map(k => {\n                                    return {\n                                        id: k.uuid,\n                                        name: k.name,\n                                        number: k.number,\n                                        type: k.type,\n                                        currency: k.currency,\n                                        account: {\n                                            id: k.account.uuid,\n                                            name: k.account.name,\n                                            local_name: k.account.local_name,\n                                            number: k.account.number,\n                                            is_taxable: k.account.is_taxable,\n                                            banhjiAccCode: k.account.banhjiAccCode,\n                                            group_code: k.account.group_code,\n                                            parent_account: k.account.parent_account,\n                                            type_code: k.account.type_code,\n                                            account_type: k.account.account_type\n                                        }\n                                    }\n                                })\n                            })\n                            this.banks\n                                .sort(function (a, b) {\n                                    return a.order - b.order\n                                })\n                            this.showLoading = false\n                            // window.console.log(this.banks)\n                        })\n                    }, 300)\n                }\n            )\n        },\n        onBankClick(bank) {\n            this.info = bank\n            this.bankClick = true\n            const data = {\n                id: this.info.partner_id,\n                status: 'Connected',\n            }\n            this.account = bank.bankAccount\n            // window.console.log('bank Info', this.account)\n            bankPaymentHandler.connectedBankAccount(data).then(response => {\n                if (response.data.statusCode === 200) {\n                    const connectedAcc = response.data.data\n                    this.mSelectedAccount = connectedAcc\n                }\n            })\n\n\n        },\n        onBackToConnect() {\n            this.bankClick = false\n        },\n        onConnectClick() {\n            if (this.mSelectedAccount === '') {\n                this.$refs.form.validate()\n            } else {\n                this.connectLoading = true\n                setTimeout(() => {\n                    this.onSaveClose()\n                }, 300);\n            }\n        },\n        onCloseModelConnect() {\n            this.connectBankSuccess = false\n            this.bankClick = false\n            this.dialogM3 = false\n        },\n        onClose() {\n            this.connectBankSuccess = false\n            this.bankClick = false\n            this.dialogM3 = false\n            this.$router.push({\n                name: 'Banking', params: {\n                    data: this.connectedBankAccountList\n                }\n            })\n\n\n        },\n        async onSaveClose() {\n            new Promise(resolve => {\n                setTimeout(() => {\n                    resolve('resolved');\n                    this.showLoading = true\n                    let selectedAcc = this.mSelectedAccount\n                    selectedAcc.forEach(m => {\n                        if (!m.hasOwnProperty('id')) {\n                            m['id'] = 'bca-' + uuid.v1()\n                        }\n                    })\n                    const data = {\n                        id: this.info.partner_id,\n                        bank: this.info,\n                        connectedAccount: selectedAcc,\n                        status: \"Connected\",\n                        type: 'Bill Payment',\n                        enabled: true,\n                    }\n                    // window.console.log(data, '--')\n                    bankPaymentHandler.create(data).then(res => {\n                        if (res.data.statusCode === 201) {\n                            this.showLoading = false\n                            this.connectedBankAccountList = res.data.data\n                            this.connectBankSuccess = true\n                            this.connectLoading = false\n                        }\n\n                    })\n                }, 300)\n            })\n        },\n    },\n    mounted: async function () {\n        await this.loadBankAccount()\n        await this.loadBankPartner()\n    },\n    watch: {\n        '$route': 'loadBankAccount'\n    }\n}\n</script>\n<style scoped>\n.function_content {\n    padding: 10px 25px 25px;\n    border-bottom: 0;\n}\n\n@media (min-width: 1264px) {\n    .container {\n        max-width: 1080px !important;\n    }\n}\n\n@media (max-width: 576px) {\n\n}\n</style>"]}]}