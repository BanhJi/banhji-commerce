{"remainingRequest":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/src/views/services_projects/Insight.vue?vue&type=template&id=6a2bd1fa&scoped=true&","dependencies":[{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/src/views/services_projects/Insight.vue","mtime":1638499443299},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/@vue/cli-service/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Cjx2LXJvdyBjbGFzcz0iIj4KICA8di1jb2wgY2xhc3M9InBiLTAgcHQtNCIgc209IjEyIiBjb2xzPSIxMiI+CiAgICA8di1yb3c+CiAgICAgIDx2LWNvbCBjbGFzcz0icHQtMCBwYi1tZC0yIHByLW1kLTIiIHNtPSI0IiBjb2xzPSIxMiI+CiAgICAgICAgPGRpdiBjbGFzcz0iZC1mbGV4Ij4KICAgICAgICAgIDx2LWNhcmQKICAgICAgICAgICAgb3V0bGluZWQKICAgICAgICAgICAgZGVuc2UKICAgICAgICAgICAgY29sb3I9InByaW1hcnkiCiAgICAgICAgICAgIGNsYXNzPSJwYS0yIG1iLTQgbm9fYm9yZGVyIGZsZXgtMSBuaXJhZGVpX2JvbGQgZmxleC0xIgogICAgICAgICAgICBtaW4taGVpZ2h0PSI2MnB4IgogICAgICAgICAgPgogICAgICAgICAgICA8di1yb3c+CiAgICAgICAgICAgICAgPGg2IGNsYXNzPSJjb2wtc20tMTIgY29sLW1kLTUgZm9udF8zNCB3aGl0ZS0tdGV4dCI+CiAgICAgICAgICAgICAgICB7eyBvcGVuUHJvamVjdHMgfX0KICAgICAgICAgICAgICA8L2g2PgogICAgICAgICAgICAgIDxoNAogICAgICAgICAgICAgICAgY2xhc3M9InRleHQtcmlnaHQgZmxleF9yaWdodCB3aGl0ZS0tdGV4dCBweS0wIGNvbC1zbS0xMiBjb2wtbWQtNyBmb250XzE2IHRleHQtdXBwZXJjYXNlIgogICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIDxzcGFuICBjbGFzcz0iZmxvYXQtcmlnaHQiPnt7CiAgICAgICAgICAgICAgICAgICR0KCJhY3RpdmVfcHJvamVjdHMiKQogICAgICAgICAgICAgICAgfX08L3NwYW4+CiAgICAgICAgICAgICAgPC9oND4KICAgICAgICAgICAgPC92LXJvdz4KICAgICAgICAgIDwvdi1jYXJkPgogICAgICAgICAgPHYtYnRuIHN0eWxlPSJoZWlnaHQ6NjJweCAhaW1wb3J0YW50OyIgY29sb3I9InByaW1hcnkiIGNsYXNzPSJtbC0xIj4KICAgICAgICAgICAgPHYtaWNvbiBAY2xpY2s9ImxvYWREYXRhIiBzaXplPSIzMCIgY29sb3I9IndoaXRlIgogICAgICAgICAgICAgID5tZGktcmVsb2FkPC92LWljb24KICAgICAgICAgICAgPgogICAgICAgICAgPC92LWJ0bj4KICAgICAgICA8L2Rpdj4KICAgICAgICA8di1jYXJkCiAgICAgICAgICBvdXRsaW5lZAogICAgICAgICAgZGVuc2UKICAgICAgICAgIGNsYXNzPSJwYS00IG5vX2JvcmRlciIKICAgICAgICAgIG1pbi1oZWlnaHQ9IjI1MCIKICAgICAgICAgIGNvbG9yPSJncmF5QmciCiAgICAgICAgPgogICAgICAgICAgPGgzIGNsYXNzPSJmb250XzIwIiA6Y2xhc3M9InsgbGluZV8zNDogdGhpcy4kaTE4bi5sb2NhbGUgPT0gJ2toJyB9Ij4KICAgICAgICAgICAge3sgJHQoInByb2plY3RfcmF0aW8iKSB9fQogICAgICAgICAgPC9oMz4KICAgICAgICAgIDxwIGNsYXNzPSJtYi0zIj4KICAgICAgICAgICAge3sgJHQoImZyb21fdGhlX2JlZ2lubmluZ195ZWFyIikgfX0KICAgICAgICAgIDwvcD4KICAgICAgICAgIDx0ZW1wbGF0ZT4KICAgICAgICAgICAgPHYtc2ltcGxlLXRhYmxlIGNsYXNzPSJhZGRfYmciPgogICAgICAgICAgICAgIDxMb2FkaW5nTWUKICAgICAgICAgICAgICAgIDppc0xvYWRpbmc9InNob3dMb2FkaW5nU2VydmljZVByb2plY3RSYXRpbyIKICAgICAgICAgICAgICAgIDpmdWxsUGFnZT0iZmFsc2UiCiAgICAgICAgICAgICAgICA6bXlMb2FkaW5nPSJ0cnVlIgogICAgICAgICAgICAgICAgOnR5cGU9Iidsb2FkaW5nJyIKICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgIDx0ZW1wbGF0ZT4KICAgICAgICAgICAgICAgIDx0Ym9keT4KICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0idGV4dC1sZWZ0IHBsLTAgcHktMSIgc3R5bGU9IndpZHRoOiA1MCUiPgogICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im5pcmFkZWlfbWVkaXVtIGZvbnRfMTQgZ3JleS0tdGV4dCI+CiAgICAgICAgICAgICAgICAgICAgICAgIHt7ICR0KCJiaWRfdG9fd2luX3JhdGlvIikgfX0KICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0idGV4dC1yaWdodCI+CiAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibmlyYWRlaV9oZWF2eSBmb250XzE4IGRhcmtfZ3JleSI+CiAgICAgICAgICAgICAgICAgICAgICAgIHt7CiAgICAgICAgICAgICAgICAgICAgICAgICAgbnVtYmVyRm9ybWF0Tm9DdXJyZW5jeShiaWRUb1dpblJhdGlvLCBkZWNpbWFsRm9ybWF0KQogICAgICAgICAgICAgICAgICAgICAgICB9fQogICAgICAgICAgICAgICAgICAgICAgICAlCiAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0idGV4dC1sZWZ0IHBsLTAgcHktMSIgc3R5bGU9IndpZHRoOiA1MCUiPgogICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im5pcmFkZWlfbWVkaXVtIGZvbnRfMTQgZ3JleS0tdGV4dCI+CiAgICAgICAgICAgICAgICAgICAgICAgIHt7ICR0KCJhdmVyYWdlX3JldmVudWVfcGVyX2N1c3RvbWVyIikgfX0KICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0idGV4dC1yaWdodCI+CiAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibmlyYWRlaV9oZWF2eSBmb250XzE4IGRhcmtfZ3JleSI+CiAgICAgICAgICAgICAgICAgICAgICAgIHt7CiAgICAgICAgICAgICAgICAgICAgICAgICAgbnVtYmVyRm9ybWF0KGF2Z1JldmVudWVQZXJQcm9qZWN0LCBkZWNpbWFsRm9ybWF0KQogICAgICAgICAgICAgICAgICAgICAgICB9fQogICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InRleHQtbGVmdCBwbC0wIHB5LTEiIHN0eWxlPSJ3aWR0aDogNTAlIj4KICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJuaXJhZGVpX21lZGl1bSBmb250XzE0IGdyZXktLXRleHQiPgogICAgICAgICAgICAgICAgICAgICAgICB7eyAkdCgicHJvamVjdF9vdmVycnVuIikgfX0KICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0idGV4dC1yaWdodCI+CiAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibmlyYWRlaV9oZWF2eSBmb250XzE4IGRhcmtfZ3JleSI+CiAgICAgICAgICAgICAgICAgICAgICAgIHt7IG92ZXJydW4gfX0gJQogICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InRleHQtbGVmdCBwbC0wIHB5LTEiIHN0eWxlPSJ3aWR0aDogNTAlIj4KICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJuaXJhZGVpX21lZGl1bSBmb250XzE0IGdyZXktLXRleHQiPgogICAgICAgICAgICAgICAgICAgICAgICB7eyAkdCgicHJvamVjdF9kZWxpdmVyeSIpIH19CiAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InRleHQtcmlnaHQiPgogICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im5pcmFkZWlfaGVhdnkgZm9udF8xOCBncmV5LS10ZXh0Ij4KICAgICAgICAgICAgICAgICAgICAgICAge3sgZGVsaXZlcmVkIH19ICUKICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgPC90Ym9keT4KICAgICAgICAgICAgICA8L3RlbXBsYXRlPgogICAgICAgICAgICA8L3Ytc2ltcGxlLXRhYmxlPgogICAgICAgICAgPC90ZW1wbGF0ZT4KICAgICAgICA8L3YtY2FyZD4KICAgICAgPC92LWNvbD4KICAgICAgPCEtLSA8di1jb2wgY2xhc3M9InB0LTAgcGItbWQtMiBweC1tZC0yIiBzbT0iNCIgY29scz0iMTIiPgogICAgICAgIDx2LWNhcmQKICAgICAgICAgIG91dGxpbmVkCiAgICAgICAgICBkZW5zZQogICAgICAgICAgY29sb3I9InRoaXJkIgogICAgICAgICAgY2xhc3M9InBhLTMgbWItNCBub19ib3JkZXIgbmlyYWRlaV9ib2xkICIKICAgICAgICAgIG1pbi1oZWlnaHQ9IjY1cHgiCiAgICAgICAgPgogICAgICAgICAgPHYtcm93PgogICAgICAgICAgICA8aDYgY2xhc3M9IndoaXRlLS10ZXh0IGNvbC1zbS0xMiBjb2wtbWQtNSBmb250XzM0Ij4xMDwvaDY+CiAgICAgICAgICAgIDxoNAogICAgICAgICAgICAgIGNsYXNzPSJ0ZXh0LXJpZ2h0IHdoaXRlLS10ZXh0IGNvbC1tZC03IGNvbC1zbS0xMiBweS0wIGZvbnRfMTYgdGV4dC11cHBlcmNhc2UiCiAgICAgICAgICAgID4KICAgICAgICAgICAgICA8c3BhbiBzdHlsZT0id2lkdGg6IDcwJTsiIGNsYXNzPSJmbG9hdC1yaWdodCI+e3sKICAgICAgICAgICAgICAgICR0KCJ0b19iaWxsX3RoaXNfd2VlayIpCiAgICAgICAgICAgICAgfX08L3NwYW4+CiAgICAgICAgICAgIDwvaDQ+CiAgICAgICAgICA8L3Ytcm93PgogICAgICAgIDwvdi1jYXJkPgogICAgICA8L3YtY29sPiAtLT4KICAgICAgPHYtY29sIGNsYXNzPSJwdC0wIHBiLW1kLTIgcGwtbWQtMiIgc209IjgiIGNvbHM9IjEyIj4KICAgICAgICA8di1jYXJkCiAgICAgICAgICBjb2xvcj0iZ3JheUJnIgogICAgICAgICAgb3V0bGluZWQKICAgICAgICAgIGRlbnNlCiAgICAgICAgICBjbGFzcz0icGEtNCBub19ib3JkZXIiCiAgICAgICAgICBtaW4taGVpZ2h0PSIzMjciCiAgICAgICAgPgogICAgICAgICAgPGgzIGNsYXNzPSJmb250XzIwIiA6Y2xhc3M9InsgbGluZV8zNDogdGhpcy4kaTE4bi5sb2NhbGUgPT0gJ2toJyB9Ij4KICAgICAgICAgICAge3sgJHQoInJldmVudWUiKSB9fQogICAgICAgICAgPC9oMz4KICAgICAgICAgIDxwIGNsYXNzPSJtYi0wIj57eyAkdCgiZnJvbV9iZWdpbm5pbmdfeWVhciIpIH19PC9wPgogICAgICAgICAgPHYtcm93PgogICAgICAgICAgICA8di1jb2wgc209IjEyIiBjb2xzPSIxMiIgY2xhc3M9InBsLTEgIHB5LTAiPgogICAgICAgICAgICAgIDxMb2FkaW5nTWUKICAgICAgICAgICAgICAgIDppc0xvYWRpbmc9InNob3dMb2FkaW5nU2VydmljZUdyYXBoIgogICAgICAgICAgICAgICAgOmZ1bGxQYWdlPSJmYWxzZSIKICAgICAgICAgICAgICAgIDpteUxvYWRpbmc9InRydWUiCiAgICAgICAgICAgICAgICA6dHlwZT0iJ2xvYWRpbmcnIgogICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgPGNoYXJ0CiAgICAgICAgICAgICAgICByZWY9ImNoYXJ0IgogICAgICAgICAgICAgICAgOmxlZ2VuZC1wb3NpdGlvbj0iJ2JvdHRvbSciCiAgICAgICAgICAgICAgICA6bGVnZW5kLXZpc2libGU9ImZhbHNlIgogICAgICAgICAgICAgICAgOnRvb2x0aXAtdmlzaWJsZT0idHJ1ZSIKICAgICAgICAgICAgICAgIDpjaGFydEFyZWE9ImNoYXJ0QXJlYUNoYXJ0UmV2ZW51ZSIKICAgICAgICAgICAgICAgIDp0b29sdGlwLXRlbXBsYXRlPSIkdCgncmV2ZW51ZScpICsgJzogIzogdmFsdWUgIyciCiAgICAgICAgICAgICAgICA6c2VyaWVzPSJzZXJpZXNMaW5lcyIKICAgICAgICAgICAgICAgIDpjYXRlZ29yeS1heGlzLWNhdGVnb3JpZXM9ImNhdGVnb3JpZXNfbGluZSIKICAgICAgICAgICAgICAgIDp2YWx1ZS1heGlzPSJ2YWx1ZUF4aXNfbGluZSIKICAgICAgICAgICAgICAgIDp0aGVtZT0iJ3Nhc3MnIgogICAgICAgICAgICAgIC8+CiAgICAgICAgICAgIDwvdi1jb2w+CiAgICAgICAgICA8L3Ytcm93PgogICAgICAgIDwvdi1jYXJkPgogICAgICA8L3YtY29sPgogICAgPC92LXJvdz4KICAgIDx2LXJvdyBjbGFzcz0ibXQtMCI+CiAgICAgIDx2LWNvbCBjbGFzcz0icGItMCBwdC1zbS0yIHByLW1kLTIiIHNtPSI0IiBjb2xzPSIxMiI+CiAgICAgICAgPHYtY2FyZAogICAgICAgICAgb3V0bGluZWQKICAgICAgICAgIGRlbnNlCiAgICAgICAgICBjbGFzcz0icGEtNCBub19ib3JkZXIiCiAgICAgICAgICBtaW4taGVpZ2h0PSIyNzYiCiAgICAgICAgICBjb2xvcj0iZ3JheUJnIgogICAgICAgID4KICAgICAgICAgIDxoMyBjbGFzcz0iZm9udF8yMCIgOmNsYXNzPSJ7IGxpbmVfMzQ6IHRoaXMuJGkxOG4ubG9jYWxlID09ICdraCcgfSI+CiAgICAgICAgICAgIHt7ICR0KCJ0b3BfNV9jYXRlZ29yaWVzIikgfX0KICAgICAgICAgIDwvaDM+CiAgICAgICAgICA8cCBjbGFzcz0ibWItMCI+CiAgICAgICAgICAgIHt7ICR0KCJmcm9tX3RoZV9iZWdpbm5pbmdfeWVhciIpIH19CiAgICAgICAgICA8L3A+CiAgICAgICAgICA8dGVtcGxhdGU+CiAgICAgICAgICAgIDxMb2FkaW5nTWUKICAgICAgICAgICAgICA6aXNMb2FkaW5nPSJzaG93TG9hZGluZ1RvcDVDYXRlZ29yeSIKICAgICAgICAgICAgICA6ZnVsbFBhZ2U9ImZhbHNlIgogICAgICAgICAgICAgIDpteUxvYWRpbmc9InRydWUiCiAgICAgICAgICAgICAgOnR5cGU9Iidsb2FkaW5nJyIKICAgICAgICAgICAgLz4KICAgICAgICAgICAgPHYtc2ltcGxlLXRhYmxlIGNsYXNzPSJtYi0wIG10LTMiPgogICAgICAgICAgICAgIDx0ZW1wbGF0ZT4KICAgICAgICAgICAgICAgIDx0aGVhZD4KICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgIDx0aCBjbGFzcz0icGwtMCB0ZXh0LWxlZnQiPnt7ICR0KCJuYW1lIikgfX08L3RoPgogICAgICAgICAgICAgICAgICAgIDx0aCBjbGFzcz0idGV4dC1jZW50ZXIiPjwvdGg+CiAgICAgICAgICAgICAgICAgICAgPHRoIGNsYXNzPSJ0ZXh0LXJpZ2h0Ij57eyAkdCgic2FsZSIpIH19PC90aD4KICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgIDwvdGhlYWQ+CiAgICAgICAgICAgICAgICA8dGJvZHk+CiAgICAgICAgICAgICAgICAgIDx0cgogICAgICAgICAgICAgICAgICAgIHYtZm9yPSJ0b3A1IGluIHRvcDVTZXJ2aWNlQ2F0ZWdvcnkiCiAgICAgICAgICAgICAgICAgICAgdi1iaW5kOmtleT0idG9wNS5pZCIKICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0idGV4dC1sZWZ0IHBsLTAgcHItMSI+CiAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibmlyYWRlaV9tZWRpdW0gZm9udF8xNCBncmV5LS10ZXh0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPHYtdG9vbHRpcCBib3R0b20+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtc2xvdDphY3RpdmF0b3I9Insgb24sIGF0dHJzIH0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gdi1iaW5kPSJhdHRycyIgdi1vbj0ib24iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID57ewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvcDUubmFtZS5sZW5ndGggPiAxNgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyB0b3A1Lm5hbWUuc3Vic3RyaW5nKDAsIDE1KSArICIuLi4iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IHRvcDUubmFtZS5zdWJzdHJpbmcoMCwgMTUpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH19CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZW1wbGF0ZT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj57eyB0b3A1Lm5hbWUgfX08L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdi10b29sdGlwPgogICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ0ZXh0LWNlbnRlciBwci0wIj4KICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJuaXJhZGVpX2hlYXZ5IGZvbnRfMTggZGFya19ncmV5Ij4gPC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ0ZXh0LXJpZ2h0IHByLTAiPgogICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im5pcmFkZWlfaGVhdnkgZm9udF8xOCBkYXJrX2dyZXkiPgogICAgICAgICAgICAgICAgICAgICAgICB7ewogICAgICAgICAgICAgICAgICAgICAgICAgIG51bWJlckZvcm1hdE5vQ3VycmVuY3koCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3A1LnNhbGVSYXRpbywKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvcDUuZGVjaW1hbEZvcm1hdAogICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgfX0KICAgICAgICAgICAgICAgICAgICAgICAgJQogICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICA8L3Rib2R5PgogICAgICAgICAgICAgIDwvdGVtcGxhdGU+CiAgICAgICAgICAgIDwvdi1zaW1wbGUtdGFibGU+CiAgICAgICAgICA8L3RlbXBsYXRlPgogICAgICAgIDwvdi1jYXJkPgogICAgICA8L3YtY29sPgogICAgICA8di1jb2wgY2xhc3M9InBiLTAgcHQtc20tMiBwbC1tZC0yIHByLW1kLTIiIHNtPSI0IiBjb2xzPSIxMiI+CiAgICAgICAgPCEtLSAgICAgICAgICA8di1jYXJkLS0+CiAgICAgICAgPCEtLSAgICAgICAgICAgICAgb3V0bGluZWQtLT4KICAgICAgICA8IS0tICAgICAgICAgICAgICBkZW5zZS0tPgogICAgICAgIDwhLS0gICAgICAgICAgICAgIGNsYXNzPSJwYS00IG5vX2JvcmRlciItLT4KICAgICAgICA8IS0tICAgICAgICAgICAgICBtaW4taGVpZ2h0PSIzMjBweCItLT4KICAgICAgICA8IS0tICAgICAgICAgICAgICBjb2xvcj0iZ3JheUJnIj4tLT4KICAgICAgICA8IS0tICAgICAgICAgICAgPGgzIGNsYXNzPSJmb250XzIwIiA6Y2xhc3M9InsnbGluZV8zNCc6dGhpcy4kaTE4bi5sb2NhbGU9PSdraCd9ICI+e3sgJHQoInByb2plY3RfcHJvZml0YWJpbGl0eSIpIH19PC9oMz4tLT4KICAgICAgICA8IS0tICAgICAgICAgICAgPHAgY2xhc3M9Im1iLTAiPi0tPgogICAgICAgIDwhLS0gICAgICAgICAgICAgIHt7ICR0KCJmcm9tX3RoZV9iZWdpbm5pbmdfeWVhciIpIH19LS0+CiAgICAgICAgPCEtLSAgICAgICAgICAgIDwvcD4tLT4KICAgICAgICA8IS0tICAgICAgICAgICAgPHYtcm93Pi0tPgogICAgICAgIDwhLS0gICAgICAgICAgICAgIDxoMi0tPgogICAgICAgIDwhLS0gICAgICAgICAgICAgICAgICBjbGFzcz0icHJpbWFyeSYjNDU7JiM0NTt0ZXh0IG1iLTAgcGEtMCBuaXJhZGVpX2JsYWNrIG1iLTAgY29sLXNtLTkgdGV4dC1yaWdodCItLT4KICAgICAgICA8IS0tICAgICAgICAgICAgICA+LS0+CiAgICAgICAgPCEtLSAgICAgICAgICAgICAgICAzMCUtLT4KICAgICAgICA8IS0tICAgICAgICAgICAgICA8L2gyPi0tPgogICAgICAgIDwhLS0gICAgICAgICAgICAgIDxwIGNsYXNzPSJtYi0wIHBhLTAgY29sLXNtLTMgcHItMyB0ZXh0LXJpZ2h0Ij4tLT4KICAgICAgICA8IS0tICAgICAgICAgICAgICAgIHt7ICR0KCJhdmVyYWdlX21hcmdpbiIpIH19LS0+CiAgICAgICAgPCEtLSAgICAgICAgICAgICAgPC9wPi0tPgogICAgICAgIDwhLS0gICAgICAgICAgICA8L3Ytcm93Pi0tPgogICAgICAgIDwhLS0gICAgICAgICAgICA8cCBjbGFzcz0ibWItMCBwYS0wIGNvbC1zbS0xMiI+e3sgJHQoIm1hcmdpbiIpIH19PC9wPi0tPgogICAgICAgIDwhLS0gICAgICAgICAgICA8di1yb3c+LS0+CiAgICAgICAgPCEtLSAgICAgICAgICAgICAgPHYtY29sIGNsYXNzPSJweS0wIiBzbT0iMTIiIGNvbHM9IjEyIj4tLT4KICAgICAgICA8IS0tICAgICAgICAgICAgICAgIDxjaGFydC0tPgogICAgICAgIDwhLS0gICAgICAgICAgICAgICAgICAgIDp0aXRsZS10ZXh0PSInJyItLT4KICAgICAgICA8IS0tICAgICAgICAgICAgICAgICAgICA6bGVnZW5kLXZpc2libGU9ImZhbHNlIi0tPgogICAgICAgIDwhLS0gICAgICAgICAgICAgICAgICAgIDpzZXJpZXMtZGVmYXVsdHMtdHlwZT0iJ2JhciciLS0+CiAgICAgICAgPCEtLSAgICAgICAgICAgICAgICAgICAgOnNlcmllcz0ic2VyaWVzMiItLT4KICAgICAgICA8IS0tICAgICAgICAgICAgICAgICAgICA6Y2hhcnQtYXJlYS1iYWNrZ3JvdW5kPSInJyItLT4KICAgICAgICA8IS0tICAgICAgICAgICAgICAgICAgICA6Y2F0ZWdvcnktYXhpcz0iY2F0ZWdvcnlBeGlzMSItLT4KICAgICAgICA8IS0tICAgICAgICAgICAgICAgICAgICA6dmFsdWUtYXhpcz0idmFsdWVBeGlzMSItLT4KICAgICAgICA8IS0tICAgICAgICAgICAgICAgICAgICA6dG9vbHRpcD0idG9vbHRpcDIiLS0+CiAgICAgICAgPCEtLSAgICAgICAgICAgICAgICAgICAgOnRoZW1lPSInc2FzcyciLS0+CiAgICAgICAgPCEtLSAgICAgICAgICAgICAgICA+LS0+CiAgICAgICAgPCEtLSAgICAgICAgICAgICAgICA8L2NoYXJ0Pi0tPgogICAgICAgIDwhLS0gICAgICAgICAgICAgICAgPHAgY2xhc3M9Im1iLTAgdGV4dC1jZW50ZXIiPnt7ICR0KCJyZXZlbnVlIikgfX08L3A+LS0+CiAgICAgICAgPCEtLSAgICAgICAgICAgICAgPC92LWNvbD4tLT4KICAgICAgICA8IS0tICAgICAgICAgICAgPC92LXJvdz4tLT4KICAgICAgICA8IS0tICAgICAgICAgIDwvdi1jYXJkPi0tPgogICAgICAgIDx2LWNhcmQKICAgICAgICAgIG91dGxpbmVkCiAgICAgICAgICBkZW5zZQogICAgICAgICAgY2xhc3M9InBhLTQgbm9fYm9yZGVyIgogICAgICAgICAgbWluLWhlaWdodD0iMjc0IgogICAgICAgICAgY29sb3I9ImdyYXlCZyIKICAgICAgICA+CiAgICAgICAgICA8aDMgY2xhc3M9ImZvbnRfMjAiIDpjbGFzcz0ieyBsaW5lXzM0OiB0aGlzLiRpMThuLmxvY2FsZSA9PSAna2gnIH0iPgogICAgICAgICAgICB7eyAkdCgic2VydmljZV9wdXJjaGFzZSIpIH19CiAgICAgICAgICA8L2gzPgogICAgICAgICAgPHAgY2xhc3M9Im1iLTAiPgogICAgICAgICAgICB7eyAkdCgiZnJvbV90aGVfYmVnaW5uaW5nX3llYXIiKSB9fQogICAgICAgICAgPC9wPgogICAgICAgICAgPGgyCiAgICAgICAgICAgIGNsYXNzPSJwcmltYXJ5LS10ZXh0IG1iLTAgcGEtMCBuaXJhZGVpX2JsYWNrIG1iLTAgY29sLXNtLTEyIHRleHQtcmlnaHQiCiAgICAgICAgICA+CiAgICAgICAgICAgIHt7IG51bWJlckZvcm1hdChzZXJ2aWNlUHVyY2hhc2VCYWxhbmNlLCBkZWNpbWFsRm9ybWF0KSB9fQogICAgICAgICAgPC9oMj4KICAgICAgICAgIDx0ZW1wbGF0ZT4KICAgICAgICAgICAgPExvYWRpbmdNZQogICAgICAgICAgICAgIDppc0xvYWRpbmc9InNob3dMb2FkaW5nU2VydmljZVB1cmNoYXNlIgogICAgICAgICAgICAgIDpmdWxsUGFnZT0iZmFsc2UiCiAgICAgICAgICAgICAgOm15TG9hZGluZz0idHJ1ZSIKICAgICAgICAgICAgICA6dHlwZT0iJ2xvYWRpbmcnIgogICAgICAgICAgICAvPgogICAgICAgICAgICA8di1zaW1wbGUtdGFibGUgY2xhc3M9Im1iLTMiPgogICAgICAgICAgICAgIDx0ZW1wbGF0ZT4KICAgICAgICAgICAgICAgIDx0Ym9keT4KICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0idGV4dC1sZWZ0IHBsLTAiPgogICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im5pcmFkZWlfbWVkaXVtIGZvbnRfMTQgZ3JleS0tdGV4dCI+CiAgICAgICAgICAgICAgICAgICAgICAgIHt7ICR0KCJ2ZW5kb3JzIikgfX0KICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0idGV4dC1yaWdodCBwci0wIj4KICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJuaXJhZGVpX2hlYXZ5IGZvbnRfMTggZGFya19ncmV5Ij4KICAgICAgICAgICAgICAgICAgICAgICAge3sgc2VydmljZVB1cmNoYXNlTm9PZlZlbmRvcnMgfX0KICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ0ZXh0LWxlZnQgcGwtMCI+CiAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibmlyYWRlaV9tZWRpdW0gZm9udF8xNCBncmV5LS10ZXh0Ij4KICAgICAgICAgICAgICAgICAgICAgICAge3sgJHQoIml0ZW1zIikgfX0KICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0idGV4dC1yaWdodCBwci0wIj4KICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJuaXJhZGVpX2hlYXZ5IGZvbnRfMTggZGFya19ncmV5Ij4KICAgICAgICAgICAgICAgICAgICAgICAge3sgc2VydmljZVB1cmNoYXNlTm9PZkl0ZW1zIH19CiAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0idGV4dC1sZWZ0IHBsLTAiPgogICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im5pcmFkZWlfbWVkaXVtIGZvbnRfMTQgZ3JleS0tdGV4dCI+CiAgICAgICAgICAgICAgICAgICAgICAgIHt7ICR0KCJiaWxscyIpIH19CiAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InRleHQtcmlnaHQgcHItMCI+CiAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibmlyYWRlaV9oZWF2eSBmb250XzE4IGRhcmtfZ3JleSI+CiAgICAgICAgICAgICAgICAgICAgICAgIHt7IHNlcnZpY2VQdXJjaGFzZU5vT2ZCaWxscyB9fQogICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICA8L3Rib2R5PgogICAgICAgICAgICAgIDwvdGVtcGxhdGU+CiAgICAgICAgICAgIDwvdi1zaW1wbGUtdGFibGU+CiAgICAgICAgICA8L3RlbXBsYXRlPgogICAgICAgICAgPHYtcm93PgogICAgICAgICAgICA8di1jb2wgc209IjYiIGNsYXNzPSJwci0wIHB5LTAiPgogICAgICAgICAgICAgIDx2LWJ0bgogICAgICAgICAgICAgICAgdG89IiIKICAgICAgICAgICAgICAgIGNsYXNzPSJmb250XzE2IHRleHQtY2FwaXRhbGl6ZSByb3VuZGVkLTAgd2hpdGUtLXRleHQiCiAgICAgICAgICAgICAgICBjb2xvcj0icHJpbWFyeSIKICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICArIHt7ICR0KCJwYXltZW50IikgfX0KICAgICAgICAgICAgICA8L3YtYnRuPgogICAgICAgICAgICA8L3YtY29sPgogICAgICAgICAgICA8di1jb2wgc209IjYiIGNsYXNzPSJwbC0wIHBiLTAgdGV4dC1yaWdodCI+CiAgICAgICAgICAgICAgPHJvdXRlci1saW5rCiAgICAgICAgICAgICAgICB0bz0iIgogICAgICAgICAgICAgICAgY2xhc3M9Im1iLTAgbmlyYWRlaV9ib2xkIGZvbnRfMTYgcHJpbWFyeS0tdGV4dCB0ZXh0LXJpZ2h0IgogICAgICAgICAgICAgICAgPnt7ICR0KCJ2aWV3X3JlcG9ydCIpIH19CiAgICAgICAgICAgICAgPC9yb3V0ZXItbGluaz4KICAgICAgICAgICAgPC92LWNvbD4KICAgICAgICAgIDwvdi1yb3c+CiAgICAgICAgPC92LWNhcmQ+CiAgICAgIDwvdi1jb2w+CiAgICAgIDx2LWNvbCBjbGFzcz0icGItMCBwdC1zbS0yIHBsLW1kLTIiIHNtPSI0IiBjb2xzPSIxMiI+CiAgICAgICAgPCEtLSAgICAgICAgICA8di1jYXJkLS0+CiAgICAgICAgPCEtLSAgICAgICAgICAgICAgb3V0bGluZWQtLT4KICAgICAgICA8IS0tICAgICAgICAgICAgICBkZW5zZS0tPgogICAgICAgIDwhLS0gICAgICAgICAgICAgIGNsYXNzPSJwYS00IG5vX2JvcmRlciItLT4KICAgICAgICA8IS0tICAgICAgICAgICAgICBtaW4taGVpZ2h0PSIzMjRweCItLT4KICAgICAgICA8IS0tICAgICAgICAgICAgICBjb2xvcj0iZ3JheUJnIi0tPgogICAgICAgIDwhLS0gICAgICAgICAgPi0tPgogICAgICAgIDwhLS0gICAgICAgICAgICA8aDMgY2xhc3M9ImZvbnRfMjAiIDpjbGFzcz0ieydsaW5lXzM0Jzp0aGlzLiRpMThuLmxvY2FsZT09J2toJ30gIj57eyAkdCgic2VydmljZV9yZXZlbnVlX2J5X3R5cGUiKSB9fTwvaDM+LS0+CiAgICAgICAgPCEtLSAgICAgICAgICAgIDxwIGNsYXNzPSJtYi0wIj57eyAkdCgiZnJvbV90aGVfYmVnaW5uaW5nX3llYXIiKSB9fTwvcD4tLT4KICAgICAgICA8IS0tICAgICAgICAgICAgPHYtcm93Pi0tPgogICAgICAgIDwhLS0gICAgICAgICAgICAgIDx2LWNvbCBzbT0iMTIiIGNvbHM9IjEyIiBjbGFzcz0iIHB0LTAgcGItMCI+LS0+CiAgICAgICAgPCEtLSAgICAgICAgICAgICAgICAmbHQ7ISZuZGFzaDsgPGNoYXJ0LS0+CiAgICAgICAgPCEtLSAgICAgICAgICAgICAgICAgIHJlZj0iY2hhcnQiLS0+CiAgICAgICAgPCEtLSAgICAgICAgICAgICAgICAgIDpsZWdlbmQtdmlzaWJsZT0iZmFsc2UiLS0+CiAgICAgICAgPCEtLSAgICAgICAgICAgICAgICAgIDpzZXJpZXMtZGVmYXVsdHMtbGFiZWxzLXZpc2libGU9ImZhbHNlIi0tPgogICAgICAgIDwhLS0gICAgICAgICAgICAgICAgICA6c2VyaWVzPSJzZXJpZXNfc2VydmljZV90eXBlIi0tPgogICAgICAgIDwhLS0gICAgICAgICAgICAgICAgICA6dG9vbHRpcC10ZW1wbGF0ZT0iJyM9IGNhdGVnb3J5ICMgOiAjPSB2YWx1ZSAjJSciLS0+CiAgICAgICAgPCEtLSAgICAgICAgICAgICAgICAgIDpjaGFydEFyZWE9InsgYmFja2dyb3VuZDogJ3RyYW5zcGFyZW50JywgaGVpZ2h0OiAyNDAgfSItLT4KICAgICAgICA8IS0tICAgICAgICAgICAgICAgICAgOnRvb2x0aXAtdmlzaWJsZT0idHJ1ZSItLT4KICAgICAgICA8IS0tICAgICAgICAgICAgICAgICAgOnRoZW1lPSInc2FzcyciLS0+CiAgICAgICAgPCEtLSAgICAgICAgICAgICAgICAvPiAmbmRhc2g7Jmd0Oy0tPgogICAgICAgIDwhLS0gICAgICAgICAgICAgICAgPHRyZWVtYXAtLT4KICAgICAgICA8IS0tICAgICAgICAgICAgICAgICAgICA6ZGF0YS1zb3VyY2U9ImxvY2FsRGF0YVNvdXJjZSItLT4KICAgICAgICA8IS0tICAgICAgICAgICAgICAgICAgICBpZD0idHJlZW1hcCItLT4KICAgICAgICA8IS0tICAgICAgICAgICAgICAgICAgICByZWY9InRyZWVtYXAiLS0+CiAgICAgICAgPCEtLSAgICAgICAgICAgICAgICAgICAgOnZhbHVlLWZpZWxkPSIndmFsdWUnIi0tPgogICAgICAgIDwhLS0gICAgICAgICAgICAgICAgICAgIDp0ZXh0LWZpZWxkPSInbmFtZSciLS0+CiAgICAgICAgPCEtLSAgICAgICAgICAgICAgICAgICAgOnRvb2x0aXAtdmlzaWJsZT0idHJ1ZSItLT4KICAgICAgICA8IS0tICAgICAgICAgICAgICAgICAgICA6dG9vbHRpcC10ZW1wbGF0ZT0iJyM9IG5hbWUgIyA6ICM9IHZhbHVlICMlJyItLT4KICAgICAgICA8IS0tICAgICAgICAgICAgICAgID4tLT4KICAgICAgICA8IS0tICAgICAgICAgICAgICAgIDwvdHJlZW1hcD4tLT4KICAgICAgICA8IS0tICAgICAgICAgICAgICA8L3YtY29sPi0tPgogICAgICAgIDwhLS0gICAgICAgICAgICA8L3Ytcm93Pi0tPgogICAgICAgIDwhLS0gICAgICAgICAgPC92LWNhcmQ+LS0+CiAgICAgICAgPHYtY2FyZAogICAgICAgICAgb3V0bGluZWQKICAgICAgICAgIGRlbnNlCiAgICAgICAgICBjbGFzcz0icGEtNCBub19ib3JkZXIiCiAgICAgICAgICBtaW4taGVpZ2h0PSIyNzQiCiAgICAgICAgICBjb2xvcj0iZ3JheUJnIgogICAgICAgID4KICAgICAgICAgIDxoMyBjbGFzcz0iZm9udF8yMCIgOmNsYXNzPSJ7IGxpbmVfMzQ6IHRoaXMuJGkxOG4ubG9jYWxlID09ICdraCcgfSI+CiAgICAgICAgICAgIHt7ICR0KCJzZXJ2aWNlX3NhbGUiKSB9fQogICAgICAgICAgPC9oMz4KICAgICAgICAgIDxwIGNsYXNzPSJtYi0wIj4KICAgICAgICAgICAge3sgJHQoImZyb21fdGhlX2JlZ2lubmluZ195ZWFyIikgfX0KICAgICAgICAgIDwvcD4KICAgICAgICAgIDxoMgogICAgICAgICAgICBjbGFzcz0icHJpbWFyeS0tdGV4dCBtYi0wIHBhLTAgbmlyYWRlaV9ibGFjayBtYi0wIGNvbC1zbS0xMiB0ZXh0LXJpZ2h0IgogICAgICAgICAgPgogICAgICAgICAgICB7eyBudW1iZXJGb3JtYXQoc2FsZUJhbGFuY2UsIGRlY2ltYWxGb3JtYXQpIH19CiAgICAgICAgICA8L2gyPgogICAgICAgICAgPHRlbXBsYXRlPgogICAgICAgICAgICA8TG9hZGluZ01lCiAgICAgICAgICAgICAgOmlzTG9hZGluZz0ic2hvd0xvYWRpbmdTZXJ2aWNlU2FsZSIKICAgICAgICAgICAgICA6ZnVsbFBhZ2U9ImZhbHNlIgogICAgICAgICAgICAgIDpteUxvYWRpbmc9InRydWUiCiAgICAgICAgICAgICAgOnR5cGU9Iidsb2FkaW5nJyIKICAgICAgICAgICAgLz4KICAgICAgICAgICAgPHYtc2ltcGxlLXRhYmxlIGNsYXNzPSJtYi0zIj4KICAgICAgICAgICAgICA8dGVtcGxhdGU+CiAgICAgICAgICAgICAgICA8dGJvZHk+CiAgICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InRleHQtbGVmdCBwbC0wIj4KICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJuaXJhZGVpX21lZGl1bSBmb250XzE0IGdyZXktLXRleHQiPgogICAgICAgICAgICAgICAgICAgICAgICB7eyAkdCgiY3VzdG9tZXJzIikgfX0KICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0idGV4dC1yaWdodCBwci0wIj4KICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJuaXJhZGVpX2hlYXZ5IGZvbnRfMTggZGFya19ncmV5Ij4KICAgICAgICAgICAgICAgICAgICAgICAge3sgc2FsZU5vT2ZDdXN0b21lcnMgfX0KICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ0ZXh0LWxlZnQgcGwtMCI+CiAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibmlyYWRlaV9tZWRpdW0gZm9udF8xNCBncmV5LS10ZXh0Ij4KICAgICAgICAgICAgICAgICAgICAgICAge3sgJHQoIml0ZW1zIikgfX0KICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0idGV4dC1yaWdodCBwci0wIj4KICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJuaXJhZGVpX2hlYXZ5IGZvbnRfMTggZGFya19ncmV5Ij4KICAgICAgICAgICAgICAgICAgICAgICAge3sgc2FsZU5vT2ZJdGVtcyB9fQogICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InRleHQtbGVmdCBwbC0wIj4KICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJuaXJhZGVpX21lZGl1bSBmb250XzE0IGdyZXktLXRleHQiPgogICAgICAgICAgICAgICAgICAgICAgICB7eyAkdCgiaW52b2ljZXMiKSB9fQogICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ0ZXh0LXJpZ2h0IHByLTAiPgogICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im5pcmFkZWlfaGVhdnkgZm9udF8xOCBkYXJrX2dyZXkiPgogICAgICAgICAgICAgICAgICAgICAgICB7eyBzYWxlTm9PZkJpbGxzIH19CiAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgIDwvdGJvZHk+CiAgICAgICAgICAgICAgPC90ZW1wbGF0ZT4KICAgICAgICAgICAgPC92LXNpbXBsZS10YWJsZT4KICAgICAgICAgIDwvdGVtcGxhdGU+CiAgICAgICAgICA8di1yb3c+CiAgICAgICAgICAgIDx2LWNvbCBzbT0iNiIgY2xhc3M9InByLTAgcHktMCI+CiAgICAgICAgICAgICAgPHYtYnRuCiAgICAgICAgICAgICAgICB0bz0iaW52b2ljZSIKICAgICAgICAgICAgICAgIGNsYXNzPSJmb250XzE2IHRleHQtY2FwaXRhbGl6ZSByb3VuZGVkLTAgd2hpdGUtLXRleHQiCiAgICAgICAgICAgICAgICBjb2xvcj0icHJpbWFyeSIKICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICArIHt7ICR0KCJpbnZvaWNlIikgfX0KICAgICAgICAgICAgICA8L3YtYnRuPgogICAgICAgICAgICA8L3YtY29sPgogICAgICAgICAgICA8di1jb2wgc209IjYiIGNsYXNzPSJwbC0wIHBiLTAgdGV4dC1yaWdodCI+CiAgICAgICAgICAgICAgPHJvdXRlci1saW5rCiAgICAgICAgICAgICAgICB0bz0iIgogICAgICAgICAgICAgICAgY2xhc3M9Im1iLTAgbmlyYWRlaV9ib2xkIGZvbnRfMTYgcHJpbWFyeS0tdGV4dCB0ZXh0LXJpZ2h0IgogICAgICAgICAgICAgICAgPnt7ICR0KCJ2aWV3X3JlcG9ydCIpIH19CiAgICAgICAgICAgICAgPC9yb3V0ZXItbGluaz4KICAgICAgICAgICAgPC92LWNvbD4KICAgICAgICAgIDwvdi1yb3c+CiAgICAgICAgPC92LWNhcmQ+CiAgICAgIDwvdi1jb2w+CiAgICA8L3Ytcm93PgogIDwvdi1jb2w+Cjwvdi1yb3c+Cg=="},null]}