{"remainingRequest":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/macos/Desktop/banhji-0.2/banhji-commerce/src/views/banking/BankReconciliation.vue?vue&type=style&index=0&id=0261e282&scoped=true&lang=css&","dependencies":[{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/src/views/banking/BankReconciliation.vue","mtime":1638499443117},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/@vue/cli-service/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKQG1lZGlhIChtaW4td2lkdGg6IDEyNjRweCkgewogICAgLmNvbnRhaW5lciB7CiAgICAgICAgbWF4LXdpZHRoOiAxMDgwcHggIWltcG9ydGFudDsKICAgIH0KfQo="},{"version":3,"sources":["BankReconciliation.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6mBA;AACA;AACA;AACA;AACA","file":"BankReconciliation.vue","sourceRoot":"src/views/banking","sourcesContent":["<template>\n    <v-app>\n        <v-container>\n            <v-row>\n                <v-col cols=\"12\" sm=\"12\">\n                    <v-card outlined dense class=\"pa-4 no_border rounded-sm\" color=\"white\">\n                        <v-form ref=\"form\" v-model=\"valid\" lazy-validation>\n                            <v-card outlined dense class=\"no_border\">\n                                <h2 class=\"mb-0\">{{$t('bank_reconciliation_manually')}}</h2>\n                                <v-icon\n                                        onclick=\"window.history.go(-1); return false;\"\n                                        style=\"cursor: pointer; color: #333; font-size: 40px;\"\n                                        class=\"float-right\"\n                                >close\n                                </v-icon>\n                            </v-card>\n\n                            <v-card outlined dense class=\"px-3 no_border mb-3\" color=\"grayBg\">\n                                <v-row>\n                                    <v-col sm=\"6\" cols=\"12\" class=\"py-0\">\n                                        <v-row>\n                                            <v-col sm=\"6\" cols=\"12\" class=\"pb-0\">\n                                                <label class=\"label\">{{$t('date')}}</label>\n                                                <app-datepicker :initialDate=\"reconcile.date\"\n                                                                @emitDate=\"reconcile.date = $event\"/>\n                                            </v-col>\n                                            <v-col sm=\"6\" cols=\"12\" class=\"pb-0\">\n                                                <label class=\"label\">{{$t('number')}}</label>\n                                                <v-row>\n                                                    <v-col sm=\"10\" cols=\"10\" class=\"pr-0 pt-1\">\n                                                        <v-text-field class=\"\"\n                                                                      v-model=\"reconcile.number\"\n                                                                      outlined\n                                                                      :rules=\"[v => !!v || 'Number is required']\"\n                                                                      required/>\n                                                    </v-col>\n                                                    <v-col sm=\"2\" cols=\"2\" class=\"pl-0 pt-1\">\n                                                        <v-icon color=\"black\" size=\"30\" class=\"border_qrcode\"\n                                                                @click=\"generateNumber\">mdi-qrcode\n                                                        </v-icon>\n                                                    </v-col>\n                                                </v-row>\n                                            </v-col>\n                                        </v-row>\n\n                                        <v-row>\n                                            <v-col sm=\"6\" cols=\"12\" class=\"pb-0 py-0\">\n                                                <label class=\"label\">{{$t('ending_balance_date')}}</label>\n                                                <app-datepicker :initialDate=\"reconcile.ending_balance_date\"\n                                                                @emitDate=\"reconcile.ending_balance_date = $event\"/>\n                                            </v-col>\n                                            <v-col sm=\"6\" cols=\"12\" class=\"pb-0 py-0\">\n                                                <label class=\"label\">{{$t('reconcile_account')}}</label>\n                                                <app-cash-account-dropdownlist\n                                                    :initAccount=\"reconcile.account\"\n                                                    @emitAccount=\"reconcile.account = $event\"\n                                                    @onChanged=\"onCashAccountChanges\"\n                                                />\n                                            </v-col>\n                                        </v-row>\n\n                                        <v-row>\n                                            <v-col sm=\"4\" cols=\"12\" class=\"py-0\">\n                                                <label class=\"label text-bold\">{{$t('ending_balance')}}</label>\n                                            </v-col>\n                                            <v-col sm=\"8\" cols=\"12\" class=\"py-0\">\n                                                <v-text-field class=\"mt-1\"\n                                                              type=\"number\"\n                                                              v-model=\"reconcile.ending_balance\"\n                                                              outlined\n                                                              tage=\"Ending Balance\"\n                                                              required\n                                                />\n                                            </v-col>\n                                        </v-row>\n\n                                    </v-col>\n                                    <v-col sm=\"6\" cols=\"12\" class=\"pb-0\">\n                                        <v-card outlined dense color=\"third\" elevation=\"0\" height=\"70\" class=\"white--text d-flex pa-3 justify-space-between align-center mb-3\">\n                                            <p style=\"font-size: 20px;\" class=\"col-sm-7  mb-0 pa-0\">\n                                                {{$t('reported_beginning_balance')}}\n                                            </p>\n                                            <p style=\"font-size: 20px;\"\n                                               class=\"col-sm-5 text-right  mb-0 pa-0 font-bold\">{{\n                                                Number(reconcile.opening_balance).toLocaleString() }}</p>\n                                        </v-card>\n\n\n                                        <v-card outlined dense color=\"secondary\" elevation=\"0\" height=\"70\" class=\"white--text d-flex pa-3 justify-space-between align-center mb-3\">\n                                            <p style=\"font-size: 20px;\" class=\"col-sm-7  text-left mb-0 pa-0\">\n                                                {{$t('reported_ending_balance')}}\n                                            </p>\n                                            <p style=\"font-size: 20px;\"\n                                               class=\"col-sm-5 text-right  mb-0 pa-0 font-bold\">{{\n                                                Number(reportingEndingBalance).toLocaleString() }}</p>\n                                        </v-card>\n\n                                        <v-row>\n                                            <v-col sm=\"6\" cols=\"12\" class=\"py-0\">\n                                                <v-card outlined dense class=\"block-white\">\n                                                    <p style=\"font-size: 20px;\"\n                                                       class=\"col-sm-7 float-left text-left mb-0 pa-0\">\n                                                        {{$t('variance')}}\n                                                    </p>\n                                                    <p style=\"font-size: 20px;\"\n                                                       class=\"col-sm-5 float-left text-right mb-0 pa-0 font-bold\">{{\n                                                        Number(varianceAmount).toLocaleString() }}</p>\n                                                </v-card>\n                                            </v-col>\n\n                                            <v-col sm=\"6\" cols=\"12\" class=\"py-0\" v-if=\"reconcile.variance_amount !== 0\">\n                                                <label class=\"label\">{{$t('adjustment_account')}}</label>\n                                                <app-account-dropdownlist\n                                                    :initAccount=\"reconcile.adjustment_account\"\n                                                    @emitAccount=\"reconcile.adjustment_account = $event\"\n                                                />{{reconcile.adjustment_account.name}}\n                                            </v-col>\n                                        </v-row>\n                                    </v-col>\n                                </v-row>\n                            </v-card>\n\n                            <v-row style=\"background-color: rgb(255, 255, 255); width: 100%; margin: 10px auto 0px;\">\n                                <v-col sm=\"12\" cols=\"12\" class=\"py-3 pa-0\">\n                                    <v-data-table\n                                            v-model=\"selectedTransactions\"\n                                            :headers=\"headers\"\n                                            :items=\"transactions\"\n                                            item-key=\"journal_uuid\"\n                                            show-select\n                                            class=\"elevation-1\"\n                                    >\n                                        <!-- Journal Date -->\n                                        <template v-slot:[`item.journal_date`]=\"{ item }\">\n                                            <span>{{ Helper.dateFormat(item.journal_date) }}</span>\n                                        </template>\n\n                                        <!-- Journal Number as Link -->\n                                        <template v-slot:[`item.journal_number`]=\"{ item }\">\n                                            <router-link :to=\"'journal/view/' + item.id\">{{ item.journal_number }}\n                                            </router-link>\n                                        </template>\n\n                                        <!-- Debit -->\n                                        <template v-slot:[`item.dr`]=\"{ item }\">\n                                            <span>{{ Number(item.dr).toLocaleString() }}</span>\n                                        </template>\n\n                                        <!-- Credit -->\n                                        <template v-slot:[`item.cr`]=\"{ item }\">\n                                            <span>{{ Number(item.cr).toLocaleString() }}</span>\n                                        </template>\n\n                                         <!-- Transaction type -->\n                                        <template v-slot:[`item.transaction_type`]=\"{ item }\">\n                                            <span>{{ transactionType[item.transaction_type] }}</span>\n                                        </template>\n                                    </v-data-table>\n                                </v-col>\n                            </v-row>\n\n                            <v-row style=\"background-color: #fff;\">\n                                <v-col sm=\"3\" cols=\"12\" class=\"pb-0\">\n                                    <template>\n                                        <v-file-input class=\"mt-0 pt-0 \" sm=\"3\" cols=\"6\"\n                                                      :placeholder=\"$t('attachment')\"\n                                                      multiple\n                                                      prepend-icon=\"mdi-paperclip\"\n                                        >\n                                            <template v-slot:selection=\"{ text }\">\n                                                <v-chip\n                                                        small\n                                                        label\n                                                        color=\"primary\"\n                                                >\n                                                    {{ text }}\n                                                </v-chip>\n                                            </template>\n                                        </v-file-input>\n                                    </template>\n                                </v-col>\n                            </v-row>\n\n\n                            <v-divider class=\"mt-4\"/>\n                            <v-card outlined dense class=\"no_border function_footer\">\n                                <v-alert type=\"warning\"\n                                         v-model=\"alert\"\n                                         dismissible>\n                                    <span v-html=\"errorMessage\"/>\n                                </v-alert>\n                                <v-menu>\n                                    <template v-slot:activator=\"{ on }\">\n                                        <v-btn color=\"black\" outlined class=\"mr-2 text-capitalize  black--text float-left\" v-on=\"on\">\n                                            {{$t('select_template')}}\n                                            <v-icon size=\"\" class=\"ma-1\">expand_more</v-icon>\n                                        </v-btn>\n                                    </template>\n                                    <v-list>\n                                        <v-list-item v-for=\"(item, index) in templates\" :key=\"index\">\n                                            <v-list-item-title>{{ item.title }}</v-list-item-title>\n                                        </v-list-item>\n                                    </v-list>\n                                </v-menu>\n                                <v-btn color=\"black\"  class=\"text-capitalize  white--text float-left\" @click=\"cancel\">{{$t('cancel')}}</v-btn>\n                                <v-btn color=\"primary\" class=\"ml-2 float-right text-capitalize  white--text\" @click=\"onSaveOptionClick(SaveOption.SAVECLOSE)\">\n                                    {{$t('reconcile')}}\n                                </v-btn>\n                                <v-btn color=\"secondary\" class=\" float-right text-capitalize  white--text\" @click=\"onSaveOptionClick(SaveOption.DRAFT)\">\n                                    {{$t('save_for_later')}}\n                                </v-btn>\n                            </v-card>\n\n                        </v-form>\n                    </v-card>\n                </v-col>\n            </v-row>\n\n            <LoadingMe \n                :isLoading=\"showLoading\" \n                :fullPage=\"true\" \n                type=\"loading\"\n                :myLoading=\"true\" />\n        </v-container>\n    </v-app>\n</template>\n\n<script>\n    import kendo from '@progress/kendo-ui';\n    import {i18n} from '@/i18n';\n    import Helper from \"@/helper.js\";\n    import {JournalEntryModel, CurrencyModel, ReconcileModel, AccountModel} from \"@/scripts/model/AppModels.js\"\n    \n    /* Store */\n    import store from \"@/store\"\n    const institute = store.state.institute.institute;\n    const instituteId = institute.id;\n\n    const reconcileHandler = require(\"@/scripts/reconcileHandler.js\");\n    const journalHandler = require(\"@/scripts/journalHandler.js\");\n    const {EntityType, SaveOption} = require(\"@/scripts/default_setup/Collections\");\n    \n    export default {\n        name: \"BankReconcile\",\n        components: {\n            \"LoadingMe\": () => import('@/components/Loading'),\n            \"app-datepicker\": () => import('@/components/custom_templates/DatePickerComponent'),\n            \"app-cash-account-dropdownlist\": () => import('@/components/dropdownlist/CashAccount'),\n            \"app-account-dropdownlist\": () => import('@/components/dropdownlist/Account'),\n        },\n        props: {\n            initReconcile: {\n                type: ReconcileModel\n            },\n        },\n        data: () => ({\n            transactionType: EntityType.TRANSACTION_TYPE,\n            Helper: Helper,\n            entryBanlance: 0,\n            // Obj\n            reconcile: new ReconcileModel(),\n            adjustmentJournal: [],\n            adjustmentEntries: [],\n            selectedTransactions: [],\n            headers: [\n                {\n                    text: 'DATE',\n                    align: 'start',\n                    value: 'journal_date',\n                },\n                {text: 'TYPE', value: 'transaction_type'},\n                {text: 'DESCRIPTION', value: 'description'},\n                {text: 'REFERENCE', value: 'journal_number'},\n                {\n                    text: 'CASH IN',\n                    value: 'dr',\n                    align: 'right',\n                },\n                {\n                    text: 'CASH OUT',\n                    value: 'cr',\n                    align: 'right',\n                },\n            ],\n            // LoadingMe\n            showLoading: false,\n            // Form validation\n            valid: true,\n            isEdit: false,\n            alert: false,\n            errorMessage: \"\",\n            saveMode: \"\",\n            SaveOption: SaveOption,\n            files: [],\n            cashAccounts: [],\n            adjustmentAccounts: [],\n            transactions: [],\n            templates: [],\n        }),\n        methods: {\n            // Set default data\n            setDefaultData() {\n                this.reconcile = Object.assign({}, new ReconcileModel({\n                    type: EntityType.BANK_RECONCILIATION_MANUAL,\n                    date: new Date().toISOString().substr(0, 10),\n                    ending_balance_date: new Date().toISOString().substr(0, 10),\n                }));\n\n                // Generate Number\n                this.generateNumber();\n            },\n            /* Generate Number */\n            async generateNumber() {\n                if(!this.isEdit){\n                    let num = await Helper.generateAccountingNumber(EntityType.BANK_RECONCILIATION_MANUAL, this.reconcile.date);\n                    this.reconcile.number = num.number;\n                    this.reconcile.prefix_format = num.prefix_format;\n                }\n            },\n            // On Cash Account Changes\n            onCashAccountChanges() {\n                let fiscalDate = Helper.getFiscalDateByDate(this.reconcile.ending_balance_date),\n                    sdate = fiscalDate.start_date,\n                    edate = this.reconcile.ending_balance_date;\n\n                if (this.reconcile.account.uuid) {\n                    if (sdate && edate) {\n                        sdate = kendo.toString(new Date(sdate), 'yyyy-MM-dd') + 'T00:00:00.000Z';\n\n                        edate = new Date(edate);\n                        edate = kendo.toString(edate, 'yyyy-MM-dd') + 'T23:59:59.999Z';\n                    } else {\n                        sdate = 0;\n                        edate = 0;\n                    }\n\n                    this.showLoading = true;\n                    journalHandler.getEntryDetailByAccount(this.reconcile.account.uuid, {\n                        params: {\n                            start_date: sdate,\n                            end_date: edate,\n                        }\n                    })\n                    .then(res => {\n                        if (res) {\n                            // Binding\n                            this.reconcile.opening_balance = res.balance;\n                            this.transactions = res.entries_detail.filter(value => value.is_reconciled !== 1);\n                        }\n                    })\n                    .finally(() => {\n                        this.showLoading = false;\n                    });\n                }\n            },\n            // Add Journal\n            addJournal() {\n                let rc = this.reconcile,\n                    je = [],\n                    debitAccount = rc.account, // Cash Account\n                    creditAccount = new AccountModel(this.reconcile.adjustment_account),\n                    amount = Math.abs(rc.variance_amount);\n\n                // Variance > 0\n                if (rc.variance_amount > 0) {\n                    debitAccount = new AccountModel(this.reconcile.adjustment_account);\n                    creditAccount = rc.account; // Cash Account\n                }\n\n                // // Debit Side\n                je.push(new JournalEntryModel({\n                    account: debitAccount,\n                    description: '',\n                    ref_number: '',\n                    amount: amount,\n                    currency: new CurrencyModel(institute.baseCurrency),\n                    exchange_rate: 1,\n                    tax_amount: 0,\n                    is_reconciled: 1\n                }));\n\n                // Credit Side\n                je.push(new JournalEntryModel({\n                    account: creditAccount,\n                    description: '',\n                    ref_number: '',\n                    amount: amount * -1,\n                    currency: new CurrencyModel(institute.baseCurrency),\n                    exchange_rate: 1,\n                    tax_amount: 0,\n                    is_reconciled: 1\n                }));\n\n                // User\n                let user = {\n                    uuid: institute.creator,\n                    user_name: institute.legalName,//change later (fullname)\n                    cognitoId: institute.sk,\n                    email: institute.email,\n                };\n                let createdBy = null, modifiedBy = null;\n                if (this.isEdit) {\n                    modifiedBy = user;\n                } else {\n                    createdBy = user;\n                }\n\n                // Adjustment Journal\n                this.adjustmentJournal = {\n                    number: this.reconcile.number,\n                    fiscal_year: institute.fiscalId,\n                    journal_type: EntityType.AUTO_JOURNAL,\n                    transaction_type: EntityType.TRANSACTION_TYPE['adjustment'],\n                    journal_date: Helper.toISODate(rc.date),\n                    description: '',\n                    institute: instituteId,\n                    created_by: createdBy,\n                    modified_by: modifiedBy,\n                    prefix_format: this.reconcile.prefix_format\n                };\n\n                // Adjustment Entries\n                this.adjustmentEntries = je;\n            },\n            // Shrink Data\n            shrinkData() {\n                let rc = this.reconcile;\n\n                // Date\n                rc.date = Helper.toISODate(rc.date);\n                rc.ending_balance_date = Helper.toISODate(rc.ending_balance_date);\n\n                // Draft Mode\n                if (this.saveMode === 'saveDraft') {\n                    rc.is_draft = 1;\n                } else {\n                    rc.is_draft = 0;\n                }\n\n                // Reconcile Entries\n                this.selectedTransactions.forEach(value => {\n                    rc.reconcile_entries.push(value.entry_uuid);\n                });\n\n                // User\n                let user = {\n                    uuid: institute.creator,\n                    user_name: institute.legalName,//change later (fullname)\n                    cognitoId: institute.sk,\n                    email: institute.email,\n                };\n                if (this.isEdit) {\n                    rc.modified_by = user;\n                } else {\n                    rc.created_by = user;\n                }\n            },\n            // Validating\n            validateForm() {\n                let result = true, msg = '',\n                    rc = this.reconcile;\n\n                // Transaction\n                if (this.selectedTransactions.length === 0) {\n                    result = false;\n                    msg += '<p>Please select at least one transaction.</p>';\n                }\n\n                // Adjustment Account\n                if (rc.variance_amount !== 0) {\n                    if (this.reconcile.adjustment_account.uuid === \"\") {\n                        result = false;\n                        msg += '<p>Please select adjustment account.</p>';\n                    }\n                }\n\n                // Ending Balance\n                if (kendo.parseFloat(rc.ending_balance) === 0) {\n                    result = false;\n                    msg += '<p>Please enter Ending Balance.</p>';\n                }\n\n                // Show Alert\n                this.errorMessage = msg;\n                this.alert = false;\n                if (result === false) {\n                    this.alert = true;\n                }\n\n                return result;\n            },\n            // All Saves\n            async onSaveOptionClick(mode) {\n                if (this.$refs.form.validate() && this.validateForm()) {\n                    let isValidClosingDate = await Helper.validateClosingDate(this.reconcile.date);\n                    if (isValidClosingDate) {\n                        this.saveMode = mode;\n                        this.save();\n                    }\n                }\n            },\n            cancel() {\n                this.$swal({\n                    title: i18n.t('msg_title_warning'),\n                    text: i18n.t('msg_discard'),\n                    icon: \"warning\",\n                    showCancelButton: true,\n                    cancelButtonText: i18n.t('cancel'),\n                    confirmButtonColor: \"#4d4848\",\n                    cancelButtonColor: \"#ED1A3A\",\n                    confirmButtonText: i18n.t('discard'),\n                }).then((result) => {\n                    if (result.value) {\n                        this.clear();\n                        this.setDefaultData();\n                        this.$router.go(-1);\n                    }\n                });\n            },\n            clear() {\n                this.selectedTransactions = [];\n            },\n            save() {\n                // Adjustment Journal\n                if (this.reconcile.variance_amount !== 0) {\n                    this.addJournal();\n                 \n                this.adjustmentEntries.forEach(function(entry) {\n                    self.entryBanlance += entry.amount;\n                });\n                \n                } else {\n                    this.adjustmentJournal = null;\n                    this.adjustmentEntries = null;\n                }\n                if (this.entryBanlance !== 0) {\n                    this.$swal.showValidationMessage('The adjustment journal is not balance.')\n                    \n                } else {\n                    // Shrink Data\n                    this.shrinkData();\n\n                    // Sync Data\n                    this.showLoading = true;\n                    reconcileHandler.save({\n                        reconcile: this.reconcile,\n                        adjustment_journal: this.adjustmentJournal,\n                        adjustment_entries: this.adjustmentEntries,\n                        is_bank_reconcile: 1\n                    })\n                    .then((response) => {\n                        this.responseStatus(response);\n                    })\n                    .catch((error) => {\n                        this.showLoading = false;\n                        Helper.alertErrorMsg(error);\n                    })\n                    .finally(() => {\n                        this.showLoading = false;\n                    });\n                }\n            },\n            // Response Status\n            responseStatus(response) {\n                if (response.status === 200) {\n                    if (this.saveMode === SaveOption.SAVECLOSE || this.saveMode === SaveOption.DELETE) { /* Save Close or Delete */\n                        if (this.isEdit) {\n                            this.goBackToViewPage();\n                        } else {\n                            this.$router.go(-1);\n                        }\n\n                        this.clear();\n                        this.setDefaultData();\n                    } else { /* Save New */\n                        this.clear();\n                        this.setDefaultData();\n                    }\n\n                    /* Alert Success */\n                    this.$snotify.success(i18n.t(\"successful\"));\n                } else {\n                    /* Alert Error */\n                    this.$snotify.error(i18n.t(\"error_something_wrong\"));\n                }\n            },\n            // Go back to view page after edit mode\n            goBackToViewPage() {\n                this.$router.replace({name: 'Bank Reconciliation View', params: { initReconcile: this.reconcile }});\n            },\n        },\n        computed: {\n            reportingEndingBalance() {\n                let rc = this.reconcile,\n                    dr = 0, cr = 0;\n\n                this.selectedTransactions.forEach(value => {\n                    dr += kendo.parseFloat(value.dr);\n                    cr += kendo.parseFloat(value.cr);\n                })\n\n                let bal = (rc.opening_balance + dr) - cr;\n\n                return bal;\n            },\n            varianceAmount() {\n                let rc = this.reconcile;\n                let diff = this.reportingEndingBalance - kendo.parseFloat(rc.ending_balance);\n                rc.variance_amount = diff;\n\n                return diff;\n            }\n        },\n        mounted() {\n            // Set default data\n            this.setDefaultData();\n        },\n    };\n</script>\n\n<style scoped>\n    @media (min-width: 1264px) {\n        .container {\n            max-width: 1080px !important;\n        }\n    }\n</style>"]}]}