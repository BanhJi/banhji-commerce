{"remainingRequest":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/macos/Desktop/banhji-0.2/banhji-commerce/src/components/Attachment.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/src/components/Attachment.vue","mtime":1641438291801},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["Attachment.vue"],"names":[],"mappingsfile":"Attachment.vue","sourceRoot":"src/components","sourcesContent":["<template>\n    <v-row class=\"white\">\n        <v-col sm=\"12\" cols=\"12\" class=\"py-0\">\n            <p class=\"mb-2 grey--text font_14\">{{$t('file_type')}} [PDF, JPG, JPEG, TIFF, PNG, GIF]</p>\n            <template>\n                <v-file-input\n                    v-model=\"files\"\n                    @change=\"onFileChange\"\n                    accept=\"image/jpg, image/jpeg, application/pdf\"\n                    :placeholder=\"$t('attachments')\"\n                    single\n                    prepend-icon=\"mdi-paperclip\">\n                    <template v-slot:selection=\"{ text }\">\n                        <v-chip small label color=\"primary\">\n                            {{ text }}\n                        </v-chip>\n                    </template>\n                </v-file-input>\n                <v-text-field\n                    v-model=\"fileDesc\"\n                    outlined\n                    :placeholder=\"$t('description')\"\n                    clearable/>\n            </template>\n                <v-btn\n                    color=\"primary\"\n                    class=\"text-capitalize white--text\"\n                    @click=\"uploadFile\">\n                    <v-icon size=\"15\" class=\"mr-2\">fa-check</v-icon>{{ $t(\"upload\") }}\n                </v-btn> \n                <template>\n                    <LoadingMe\n                        :isLoading=\"showLoading\"\n                        :fullPage=\"false\"\n                        type=\"loading\"\n                        :myLoading=\"true\"/>\n                    <kendo-datasource\n                        ref=\"attachmentDS\"\n                        :data=\"attachmentList\"/>\n                        <kendo-grid\n                            id=\"gridAttachment\"\n                            class=\"grid-function\"\n                            :data-source-ref=\"'attachmentDS'\"\n                            :editable=\"false\"\n                            :scrollable-virtual=\"true\">\n                            <kendo-grid-column\n                                :field=\"''\"\n                                :title=\"$t('open')\"\n                                :width=\"70\"\n                                :template=\"fileUrl\"\n                                :attributes=\"{ style: 'text-align: center' }\"\n                                :headerAttributes=\"{style: 'background-color: #EDF1F5'}\"/>\n                            <kendo-grid-column\n                                :field=\"'fileName'\"\n                                :title=\"$t('file_name')\"\n                                :width=\"250\"\n                                :headerAttributes=\"{style: 'background-color: #EDF1F5'}\"/>\n                            <kendo-grid-column\n                                :field=\"'description'\"\n                                :title=\"$t('description')\"\n                                :width=\"250\"\n                                :headerAttributes=\"{style: 'background-color: #EDF1F5'}\"/>\n                            <kendo-grid-column\n                                :field=\"'fileType'\"\n                                :title=\"$t('file_type')\"\n                                :width=\"150\"\n                                :headerAttributes=\"{style:'background-color: #EDF1F5, color: green !important'}\"/>\n                            <kendo-grid-column\n                                :field=\"'size'\"\n                                :title=\"$t('size')\"\n                                :width=\"150\"\n                                :template=\"byteToMB\"\n                                :headerAttributes=\"{style:'background-color: #EDF1F5, color: green !important'}\"/>\n                            <kendo-grid-column\n                                :field=\"'createdAt'\"\n                                :title=\"$t('date')\"\n                                :width=\"120\"\n                                :template=\"'<span>#= kendo.toString(new Date(createdAt), dateFormat)#</span>'\"\n                                :headerAttributes=\"{style:'background-color: #EDF1F5, color: green !important'}\"/>\n                            <kendo-grid-column\n                                :field=\"''\"\n                                :title=\"$t('action')\"\n                                :width=\"100\"\n                                :visible=\"true\"\n                                :command=\"[{iconClass: 'k-icon k-i-delete', text: ' ', click: deletedFunction }]\"\n                                :headerAttributes=\"{style: 'text-align: center; background-color: #EDF1F5'}\"\n                                :attributes=\"{ style: 'text-align: center'}\"/>\n                        </kendo-grid>\n                </template>\n        </v-col>\n    </v-row>\n</template>\n<script>\n    import kendo from \"@progress/kendo-ui\"\n    import {i18n} from \"@/i18n\";\n    const billingHandler = require(\"@/scripts/invoice/handler/billingHandler\");\n    export default {\n        name: \"\",\n        props: ['initAccount'],\n        components: {\n            LoadingMe: () => import(`@/components/Loading`),\n        },\n        data() {\n            return {\n                showLoading: false,\n                files: [],\n                attachments: [],\n                attachment: {},\n                fileDesc: '',\n                attachmentList: []\n            }\n        },\n        methods: {\n            onFileChange(e) {\n                window.console.log('e',e)\n                this.$emit('initData', this.attachment);\n                if (e) {\n                    this.fileDesc = e.name;\n                    this.fileName = e.name;\n                    this.fileSize = e.size;\n                    this.fileType = e.type;\n                    let input = this.files;\n                    // Ensure that you have a file before attempting to read it\n                    if (input) {\n                        let reader = new FileReader();\n                        // Define a callback function to run, when FileReader finishes its job\n                        reader.onloadend = (e) => {\n                            // Note: arrow function used here, so that \"this.imageData\" refers to the imageData of Vue component\n                            // Read image as base64 and set to imageData\n                            this.imgFile = e.target.result;\n                        };\n                        // Start the reader job - read file as a data url (base64 format)\n                        reader.readAsBinaryString(input);\n                        this.src = URL.createObjectURL(input);\n                    }\n                }\n            },\n            uploadFile(){\n                new Promise((resolve) => {\n                    setTimeout(() => {\n                        resolve(\"resolved\");\n                        if (this.imgFile) {\n                            const id = this.attachment.uuid || \"\";\n                            const name = this.attachment.name || \"\";\n                            let data = {\n                                file: this.imgFile,\n                                info: {\n                                    name: this.fileName,\n                                    description: this.fileDesc,\n                                    size: this.fileSize,\n                                    type: this.fileType,\n                                },\n                                type: \"Account\",\n                                id: id,\n                                name: name,\n                            };\n                            this.showLoading = true;\n                            if(id !==''){\n                                billingHandler.attachment(data).then((res) => {\n                                    if (res.data.statusCode === 201) {\n                                        this.showLoading = false;\n                                        this.imgFile = null;\n                                        this.src = \"\";\n                                        this.fileDesc = \"\";\n                                        this.fileName = \"\";\n                                        this.fileSize = 0;\n                                        this.fileType = \"\";\n                                        this.files      = []\n                                        this.$snotify.success(\"Success\");\n                                        this.loadAttachment();\n                                        // // this.txnList = JSON.parse(JSON.stringify(res.data.data))\n                                        // // window.console.log('transactions', this.txnList)\n                                    }\n                                });\n                            }else{\n                                this.showLoading = false;\n                                this.$snotify.error(\"Please check again!\");\n                            }\n                        } else {\n                            this.showLoading = false;\n                            this.$snotify.error(\"Please browse to upload image\");\n                        }\n                    }, 10);\n                });\n            },\n            async loadAttachment() {\n                new Promise((resolve) => {\n                    setTimeout(() => {\n                        resolve(\"resolved\");\n                        // if (this.$route.params.hasOwnProperty('id')) {\n                        this.showLoadingAtch = true;\n                        const strFilter = \"?id=\" + this.attachment.uuid;\n                        billingHandler.attachmentList(strFilter).then((res) => {\n                            if (res.data.statusCode === 200) {\n                                this.showLoadingAtch = false;\n                                this.attachmentList = res.data.data;\n                            }\n                        });\n                        // }\n                    }, 10);\n                });\n            },\n            fileUrl(dataItem) {\n                if (dataItem.fileUrl) {\n                    return `<a target=\"_blank\" style=\"color:#ED1A3A !important\" href=\"${dataItem.fileUrl}\"><span>Open</span></a>`;\n                }\n                return ``;\n            },\n            byteToMB(dataItem) {\n                const FileSize = dataItem.size || 0; // in MiB\n                const marker = 1024; // Change to 1000 if required\n                const decimal = 3; // Change as required\n                const kiloBytes = marker; // One Kilobyte is 1024 bytes\n                const megaBytes = marker * marker; // One MB is 1024 KB\n                const gigaBytes = marker * marker * marker; // One GB is 1024 MB\n                // const teraBytes = marker * marker * marker * marker; // One TB is 1024 GB\n\n                // return bytes if less than a KB\n                if (FileSize < kiloBytes) {\n                    return FileSize + \" Bytes\";\n                }\n                // return KB if less than a MB\n                else if (FileSize < megaBytes) {\n                    return (FileSize / kiloBytes).toFixed(decimal) + \" KB\";\n                }\n                // return MB if less than a GB\n                else if (FileSize < gigaBytes) {\n                    return (FileSize / megaBytes).toFixed(decimal) + \" MB\";\n                }\n                // return GB if less than a TB\n                else {\n                    return (FileSize / gigaBytes).toFixed(decimal) + \" GB\";\n                }\n\n                /* var FileSize = file.files[0].size / 1024 / 1024; // in MiB\n                    if (FileSize > 2) {\n                        alert('File size exceeds 2 MiB');\n                        // $(file).val(''); //for clearing with Jquery\n                    } else {\n                                alert('File size' + FileSize);\n                    } */\n            },\n            deletedFunction(e){\n                this.$swal({\n                    title: i18n.t(\"msg_title_warning\"),\n                    text: i18n.t(\"msg_deleted\"),\n                    icon: \"warning\",\n                    showCancelButton: true,\n                    cancelButtonText: i18n.t(\"cancel\"),\n                    confirmButtonColor: \"#4d4848\",\n                    cancelButtonColor: \"#ED1A3A\",\n                    confirmButtonText: i18n.t(\"discard\"),\n                }).then((result) => {\n                    if (result.value) {\n                        e.preventDefault();\n                        let grid = kendo.jQuery(\"#gridAttachment\").data(\"kendoGrid\");\n                        let dataItem = grid.dataItem(kendo.jQuery(e.currentTarget).closest(\"tr\"));\n                        window.console.log('dataItem', dataItem)\n                        let params = {\n                            id: dataItem.attachId,\n                            key: dataItem.key\n                        }\n                        new Promise((resolve) => {\n                            setTimeout(() => {\n                                resolve(\"resolved\");\n                                this.showLoadingAtch = true;\n                                billingHandler.attachmentDelete(params).then((res) => {\n                                    if (res.data.statusCode === 200) {\n                                        this.showLoadingAtch = false;\n                                        this.loadAttachment()\n                                    }\n                                });\n                                // }\n                            }, 10);\n                        });\n                    }\n                });\n            }\n        },\n        watch: {\n            initAccount () {\n                this.attachment = this.initAccount;\n                this.loadAttachment()\n            },\n        },\n        mounted () {\n            this.loadAttachment()\n            this.attachment = this.initAccount;\n        }\n    }\n</script>\n<style scoped>\n</style>"]}]}