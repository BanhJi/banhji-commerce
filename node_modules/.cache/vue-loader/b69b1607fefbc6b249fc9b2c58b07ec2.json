{"remainingRequest":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/macos/Desktop/banhji-0.2/banhji-commerce/src/views/accounting/reports/fund_balance/Segments.vue?vue&type=style&index=0&id=2bbc521d&scoped=true&lang=css&","dependencies":[{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/src/views/accounting/reports/fund_balance/Segments.vue","mtime":1642155812610},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/@vue/cli-service/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoucmVwb3J0c19saXN0IHsKCXdpZHRoOiAxMDAlOwoJYmFja2dyb3VuZC1jb2xvcjogI2ZmZjsKCXBhZGRpbmc6IDIwcHggMjBweCA1cHg7Cn0KLnJlcG9ydF9maWx0ZXIgewoJYmFja2dyb3VuZC1jb2xvcjogI2Y4ZjhmOTsKCXBhZGRpbmc6IDAgMjBweCA1cHggMjBweDsKfQouZHZfbXQgewoJbWFyZ2luLXRvcDogMjBweDsKfQouZHZfbXQ4IHsKCW1hcmdpbi10b3A6IDMwcHg7Cn0KLnJlcG9ydF9ibG9jayAudi1jYXJkLnRoaXJkIHsKCWJvcmRlcjogbm9uZTsKCWJveC1zaGFkb3c6IG5vbmU7Cgljb2xvcjogI2ZmZjsKCXRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7Cn0KLnJlcG9ydF9ibG9jayAudi1jYXJkLnRoaXJkIHAudGV4dCB7Cgl0ZXh0LWFsaWduOiBsZWZ0OwoJZm9udC1zaXplOiAxNnB4Owp9Ci5yZXBvcnRfYmxvY2sgLnYtY2FyZC50aGlyZCBwLm51bWJlciB7Cgl0ZXh0LWFsaWduOiBjZW50ZXI7Cglmb250LXNpemU6IDI1cHg7Cglmb250LXdlaWdodDogNzAwOwoJbWFyZ2luLWJvdHRvbTogMDsKfQoucmVwb3J0X2Jsb2NrIC52LWNhcmQuYmdfZ3JheSB7CgliYWNrZ3JvdW5kLWNvbG9yOiAjZjhmOGY5OwoJYm9yZGVyOiBub25lOwoJYm94LXNoYWRvdzogbm9uZTsKCWNvbG9yOiAjMDAwOwoJZmxvYXQ6IGxlZnQ7Cgl3aWR0aDogMTAwJTsKfQoucmVwb3J0X2Jsb2NrIC52LWNhcmQuYmdfZ3JheSBwIHNwYW4udGV4dCB7Cgl3aWR0aDogMjUlOwp9Ci5yZXBvcnRfYmxvY2sgLnYtY2FyZC5iZ19ncmF5IHAgc3Bhbi5udW1iZXIgewoJd2lkdGg6IDcwJTsKCWZvbnQtc2l6ZTogMTlweDsKCWZvbnQtd2VpZ2h0OiA3MDA7CglwYWRkaW5nOiA3cHggMCAwIDA7Cgl0ZXh0LWFsaWduOiByaWdodDsKfQpAbWVkaWEgKG1heC13aWR0aDogNTc2cHgpIHsKCS5kdl9tdCwKCS5kdl9tdDggewoJCW1hcmdpbi10b3A6IDA7Cgl9CgkucmVwb3J0c19saXN0IHsKCQltYXJnaW4tdG9wOiAwOwoJfQp9Cg=="},{"version":3,"sources":["Segments.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAygBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Segments.vue","sourceRoot":"src/views/accounting/reports/fund_balance","sourcesContent":["<template>\n\t<v-row>\n\t\t<v-col sm=\"12\" cols=\"12\" class=\"grayBg px-6\" >\n\t\t\t<v-card color=\"white\" class=\"pa-3 no_border \"  elevation=\"0\">\n\t\t\t\t<v-row>\n\t\t\t\t\t<v-col sm=\"10\" cols=\"12\" class=\"py-0\">\n\t\t\t\t\t\t<app-searchdate\n\t\t\t\t\t\t\t:initStartDate=\"startDate\"\n\t\t\t\t\t\t\t@emitStartDate=\"startDate = $event\"\n\t\t\t\t\t\t\t:initEndDate=\"endDate\"\n\t\t\t\t\t\t\t@emitEndDate=\"endDate = $event\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t</v-col>\n\t\t\t\t\t<v-col sm=\"2\" cols=\"12\" class=\"pt-0\">\n\t\t\t\t\t\t<app-reporting-language\n\t\t\t\t\t\t\t:initLanguage=\"reportingLanguage\"\n\t\t\t\t\t\t\t@emitLanguage=\"reportingLanguage = $event\"\n\t\t\t\t\t\t\t@onChanged=\"onReportingLanguageChanges\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t</v-col>\n\t\t\t\t</v-row>\n\t\t\t\t<v-row class=\"mt-0\"> \n\t\t\t\t\t<v-col sm=\"3\" cols=\"12\" class=\"py-0\">\n\t\t\t\t\t\t<label class=\"mb-1\">{{ $t(\"segments\") }}:</label>\n\t\t\t\t\t\t<app-segment-list-item-group\n\t\t\t\t\t\t\t:initSegment=\"selectedSegmentIds\"\n\t\t\t\t\t\t\t@emitSegment=\"selectedSegmentIds = $event\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t</v-col>\n\t\t\t\t\t<v-col sm=\"3\" cols=\"12\" class=\"py-0\">\n\t\t\t\t\t\t<label class=\"label\">{{\n\t\t\t\t\t\t\t$t(\"level_chart_of_account\")\n\t\t\t\t\t\t}}</label>\n\t\t\t\t\t\t<level-coa-dropdownlist\n\t\t\t\t\t\t\t:initLevelCoa=\"levelCoa\"\n\t\t\t\t\t\t\t@emitLevelCoa=\"levelCoa = $event\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t</v-col>\n\t\t\t\t\t<v-col sm=\"2\" cols=\"12\" class=\"pt-7\">\n\t\t\t\t\t\t<v-btn class=\"white--text\" color=\"primary\" @click=\"search\">\n\t\t\t\t\t\t\t\t<i class=\"b-search\" style=\"font-size: 18px; color:#fff !important;\"/>\n\t\t\t\t\t\t</v-btn>\n\t\t\t\t\t</v-col>\n\t\t\t\t</v-row>\n\t\t\t\t\n\t\t\t\t<v-row>\n\t\t\t\t\t<v-col sm=\"12\" cols=\"12\" class=\"pt-0\">\n\t\t\t\t\t\t<treelistdatasource \n\t\t\t\t\t\t\tref=\"statementDS\"\n\t\t\t\t\t\t\t:data=\"statementList\"\n\t\t\t\t\t\t\t:sort=\"sortDefinition\"\n\t\t\t\t\t\t\t:schema-model=\"model\" />\n\n\t\t\t\t\t\t<treelist \n\t\t\t\t\t\t\tref=\"statementTreeList\"\n\t\t\t\t\t\t\tdata-source-ref=\"statementDS\"\n\t\t\t\t\t\t\t:resizable=\"true\"\n\t\t\t\t\t\t\t:columns=\"columns\"\n\t\t\t\t\t\t\t:dataBound=\"onDataBound\" />\n\n\t\t\t\t\t\t<LoadingMe\n\t\t\t\t\t\t\t:isLoading=\"showLoading\"\n\t\t\t\t\t\t\t:fullPage=\"false\"\n\t\t\t\t\t\t\t:myLoading=\"true\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t</v-col>\n\t\t\t\t</v-row>\n\t\t\t</v-card>\n\t\t</v-col>\n\t</v-row>\n</template>\n\n<script>\nimport kendo from \"@progress/kendo-ui\";\nimport { i18n } from \"@/i18n\";\nimport Helper from \"@/helper.js\";\nimport { dataStore } from \"@/observable/store\";\n\n/* TreeList */\nimport { TreeList } from '@progress/kendo-treelist-vue-wrapper';\nimport { TreeListDataSource } from '@progress/kendo-datasource-vue-wrapper';\n\nimport AccountModel from \"@/scripts/model/Account.js\";\nimport StatementOfFinancialPositionModel from \"@/scripts/model/StatementOfFinancialPosition\";\n\nconst balanceSheetHandler = require(\"@/scripts/handler/accounting/balanceSheetHandler\");\nconst incomeStatementHandler = require(\"@/scripts/handler/accounting/incomeStatementHandler\");\nconst AccountTypeCode = require(\"@/scripts/default_setup/AccountTypeCode\");\n\nexport default {\n\tcomponents: {\n\t\tLoadingMe: () => import(\"@/components/Loading\"),\n\t\t\"app-searchdate\": () => import(\"@/components/custom_templates/SearchDate\"),\n\t\t\"app-reporting-language\": () =>\n\t\t\timport(\"@/components/kendo_templates/ReportingLanguageDropDownList\"),\n\t\t\"level-coa-dropdownlist\": () =>\n\t\t\timport(\"@/components/dropdownlist/LevelCoa\"),\n\t\t'treelist': TreeList,\n\t\t'treelistdatasource': TreeListDataSource,\n\t\t\"app-segment-list-item-group\": () =>\n\t\t\timport(\"@/components/dropdownlist/SegmentListItemGroup\"),\n\t},\n\tdata: () => ({\n\t\tstartDate: \"\",\n\t\tendDate: \"\",\n\t\tselectedSegmentIds: [],\n\t\tstatementList: [],\n\t\tlevelCoa: \"\",// Default primary\n\t\tcolumnBy: \"1\", //Default Total\n\t\t// Reporting Language\n\t\treportingLanguage: \"english\",\n\t\tfieldName: \"name\",\n\t\tfieldType: \"type\",\n\t\t// LoadingMe\n\t\tshowLoading: false,\n\t\t/* KENDO */\n\t\tcolumns: [],\n\t\tsortDefinition : [\n\t\t\t{ field: \"order\", dir: \"asc\" },\n\t\t\t{ field: \"number\", dir: \"asc\" },\n\t\t],\n\t\tmodel: {\n\t\t\tid: \"uuid\",\n\t\t\texpanded: true\n\t\t},\n\t}),\n\tmethods: {\n\t\t/* Validating */\n\t\tvalidating(){\n\t\t\tlet isValid = true;\n\n\t\t\tif(this.selectedSegmentIds.length === 0){\n\t\t\t\tisValid = false;\n\t\t\t\tthis.$snotify.warning(i18n.t(\"please_select_segments\"));\n\t\t\t}\n\n\t\t\treturn isValid;\n\t\t},\n\t\t// Search\n\t\tasync search() {\n\t\t\tif(this.validating()){\n\t\t\t\tthis.showLoading = true;\n\n\t\t\t\t// Empty dataSource\n\t\t\t\tlet ds = this.$refs.statementDS.kendoWidget();\n\t\t\t\tds.data([]);\n\t\t\t\t\n\t\t\t\tlet sdate = this.startDate,\n\t\t\t\t\tedate = this.endDate;\n\n\t\t\t\t/* Previouse Fiscal Date */\n\t\t\t\tlet isPrevFiscalDate = true;\n\t\t\t\tlet prevFiscalDate = Helper.getFiscalDateByDate(sdate, isPrevFiscalDate);\n\n\t\t\t\t// Balance Sheet\n\t\t\t\tlet bsResponse = await balanceSheetHandler.getBySegments(\n\t\t\t\t\t\tkendo.toString(new Date(edate), \"yyyy-MM-dd\") + \"T23:59:59.999Z\",\n\t\t\t\t\t\tthis.selectedSegmentIds,\n\t\t\t\t\t\tthis.levelCoa\n\t\t\t\t\t);\n\t\t\n\t\t\t\t/* Balance Sheet - beginning Balance */\n\t\t\t\tlet beginBSResponse = await balanceSheetHandler.getBySegments(\n\t\t\t\t\t\tkendo.toString(new Date(prevFiscalDate.end_date), \"yyyy-MM-dd\") + \"T23:59:59.999Z\",\n\t\t\t\t\t\tthis.selectedSegmentIds,\n\t\t\t\t\t\tthis.levelCoa\n\t\t\t\t\t);\n\n\t\t\t\t/* Income Statement - Surplus/Defictit */\n\t\t\t\tlet plResponse = await incomeStatementHandler.getBySegments(\n\t\t\t\t\t\tkendo.toString(new Date(sdate), 'yyyy-MM-dd') + 'T00:00:00.000Z',\n\t\t\t\t\t\tkendo.toString(new Date(edate), 'yyyy-MM-dd') + 'T23:59:59.999Z',\n\t\t\t\t\t\tthis.selectedSegmentIds,\n\t\t\t\t\t\tthis.levelCoa\n\t\t\t\t\t);\n\n\t\t\t\tlet g = {}, childIds = [], typeCodeIds = [1,2,3,4,5,6];\n\t\t\t\t\n\t\t\t\t// Load Account List\n\t\t\t\tlet accounts = await this.$store.dispatch('accounting/getAccounts');\n\t\t\t\t\n\t\t\t\t/* Beginning Balance */\n\t\t\t\tif(beginBSResponse){\n\t\t\t\t\tg[\"beginningBalance\"] = this.getNewModel({\n\t\t\t\t\t\tuuid : \"\",\n\t\t\t\t\t\tnumber : \"\",\n\t\t\t\t\t\tname : i18n.t(\"beginning_balance\"),\n\t\t\t\t\t\tlocal_name : i18n.t(\"beginning_balance\"),\n\t\t\t\t\t\torder : 0.1,\n\t\t\t\t\t});\n\t\t\t\t\tfor (let i = 0; i < this.selectedSegmentIds.length; i++) {\n\t\t\t\t\t\tbeginBSResponse[i].forEach(value => {\n\t\t\t\t\t\t\t/* Filter Cash Accounts Only */\n\t\t\t\t\t\t\tif(~AccountTypeCode.CASH_ACCOUNTS.indexOf(value.account_type_number)){\n\t\t\t\t\t\t\t\tg[\"beginningBalance\"].balance += value.balance;\n\t\t\t\t\t\t\t\tg[\"beginningBalance\"][\"s\"+i] += value.balance;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t/* Surplus/Deficit */\n\t\t\t\tif(plResponse){\n\t\t\t\t\tg[\"surplusDeficit\"] = this.getNewModel({\n\t\t\t\t\t\tuuid : \"\",\n\t\t\t\t\t\tnumber : \"\",\n\t\t\t\t\t\tname : i18n.t(\"surplus_deficit\"),\n\t\t\t\t\t\tlocal_name : i18n.t(\"surplus_deficit\"),\n\t\t\t\t\t\torder : 0.2,\n\t\t\t\t\t});\n\t\t\t\t\tfor (let i = 0; i < this.selectedSegmentIds.length; i++) {\n\t\t\t\t\t\tplResponse[i].forEach(value => {\n\t\t\t\t\t\t\t/* Filter Profit for the period only */\n\t\t\t\t\t\t\tif(value.account_type_number === AccountTypeCode.PROFIT_FOR_THE_PERIOD){\n\t\t\t\t\t\t\t\tg[\"surplusDeficit\"].balance += value.balance;\n\t\t\t\t\t\t\t\tg[\"surplusDeficit\"][\"s\"+i] += value.balance;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t/* Closing Balance */\n\t\t\t\tg[\"closingBalance\"] = this.getNewModel({\n\t\t\t\t\tuuid : \"\",\n\t\t\t\t\tnumber : \"\",\n\t\t\t\t\tname : i18n.t(\"closing_balance\"),\n\t\t\t\t\tlocal_name : i18n.t(\"closing_balance\"),\n\t\t\t\t\torder : 0.3,\n\t\t\t\t});\n\t\t\t\tfor (let key in g){\n\t\t\t\t\t/* Filter Non Closing Balance */\n\t\t\t\t\tif(key !== \"closingBalance\"){\n\t\t\t\t\t\tg[\"closingBalance\"].balance += g[key].balance;\n\n\t\t\t\t\t\tfor (let i = 0; i < this.selectedSegmentIds.length; i++) {\n\t\t\t\t\t\t\tg[\"closingBalance\"][\"s\"+i] += g[key].balance;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t/* End Closing Balance */\n\t\t\t\t\n\t\t\t\t/* Balance Sheet */\n\t\t\t\tfor (let i = 0; i < this.selectedSegmentIds.length; i++) {\n\t\t\t\t\tbsResponse[i].forEach(value => {\n\t\t\t\t\t\t/* Filter account type from 1 to 6 */\n\t\t\t\t\t\tif(~typeCodeIds.indexOf(value.account_type_number)){\n\t\t\t\t\t\t\t/* Get Account */\n\t\t\t\t\t\t\tlet account = accounts.find((item) => item.uuid === value.accountUUID);\n\t\t\t\t\t\t\tif(account){\n\t\t\t\t\t\t\t\t/* Child Id */\n\t\t\t\t\t\t\t\tchildIds.push(value.accountUUID);\n\n\t\t\t\t\t\t\t\t/* Order */\n\t\t\t\t\t\t\t\tlet order = account.type_code;\n\n\t\t\t\t\t\t\t\t/* GROUPING TOP LEVEL */\n\t\t\t\t\t\t\t\t/* Account Type */\n\t\t\t\t\t\t\t\tif(!g[account.type_code]){\n\t\t\t\t\t\t\t\t\tg[account.type_code] = this.getNewModel({\n\t\t\t\t\t\t\t\t\t\tuuid : account.type_code,\n\t\t\t\t\t\t\t\t\t\tnumber : account.type_code,\n\t\t\t\t\t\t\t\t\t\tname : account.account_type.name,\n\t\t\t\t\t\t\t\t\t\tlocal_name : account.account_type.local_name,\n\t\t\t\t\t\t\t\t\t\torder : order,\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t/* Parent Account */\n\t\t\t\t\t\t\t\tlet currentParentAccount = new AccountModel(account.parent_account);\n\t\t\t\t\t\t\t\twhile (currentParentAccount.number !== \"\") {\n\t\t\t\t\t\t\t\t\t/* Get account by parent number */\n\t\t\t\t\t\t\t\t\tlet accountParent = accounts.find((item) => item.number === currentParentAccount.number);\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t/* Set New Parent Account */\n\t\t\t\t\t\t\t\t\tcurrentParentAccount = new AccountModel(accountParent.parent_account);\n\n\t\t\t\t\t\t\t\t\tif(!g[accountParent.number]){\n\t\t\t\t\t\t\t\t\t\t/* First Parent Account Under Top Level */\n\t\t\t\t\t\t\t\t\t\tlet parentId = accountParent.type_code;\n\n\t\t\t\t\t\t\t\t\t\t/* Sub Of Parent Account */\n\t\t\t\t\t\t\t\t\t\tif(currentParentAccount.number !== \"\"){\n\t\t\t\t\t\t\t\t\t\t\tlet parentAccount = accounts.find((item) => item.number === currentParentAccount.number);\n\t\t\t\t\t\t\t\t\t\t\tparentId = parentAccount.number;\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\tg[accountParent.number] = this.getNewModel({\n\t\t\t\t\t\t\t\t\t\t\tuuid : accountParent.number,\n\t\t\t\t\t\t\t\t\t\t\tnumber : accountParent.number,\n\t\t\t\t\t\t\t\t\t\t\tname : accountParent.name,\n\t\t\t\t\t\t\t\t\t\t\tlocal_name : accountParent.local_name,\n\t\t\t\t\t\t\t\t\t\t\tparentId : parentId,\n\t\t\t\t\t\t\t\t\t\t\torder : order,\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t/* Single Account Level */\n\t\t\t\t\t\t\t\tif(!g[account.uuid]){\n\t\t\t\t\t\t\t\t\tg[account.uuid] = this.getNewModel({\n\t\t\t\t\t\t\t\t\t\tuuid : value.accountUUID,\n\t\t\t\t\t\t\t\t\t\tnumber : account.number,\n\t\t\t\t\t\t\t\t\t\tname : account.name,\n\t\t\t\t\t\t\t\t\t\tlocal_name : account.local_name,\n\t\t\t\t\t\t\t\t\t\torder : order,\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t/* Set Parent Id for a single account */\n\t\t\t\t\t\t\t\tif(account.parent_account.number){\n\t\t\t\t\t\t\t\t\tg[account.uuid].parentId = account.parent_account.number;\n\t\t\t\t\t\t\t\t}else{ /* Non Parent */\n\t\t\t\t\t\t\t\t\tif(!g[account.number]){ /* Parent as child */\n\t\t\t\t\t\t\t\t\t\tg[account.number] = this.getNewModel({\n\t\t\t\t\t\t\t\t\t\t\tuuid : account.number,\n\t\t\t\t\t\t\t\t\t\t\tnumber : account.number,\n\t\t\t\t\t\t\t\t\t\t\tname : account.name,\n\t\t\t\t\t\t\t\t\t\t\tlocal_name : account.local_name,\n\t\t\t\t\t\t\t\t\t\t\tparentId : account.type_code,\n\t\t\t\t\t\t\t\t\t\t\torder : order,\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tg[account.uuid].parentId = account.number;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t/* Balance */\n\t\t\t\t\t\t\t\tg[account.uuid].balance += value.balance;\n\n\t\t\t\t\t\t\t\tfor (let j = 0; j < this.selectedSegmentIds.length; j++) {\n\t\t\t\t\t\t\t\t\tg[account.uuid][\"s\"+i] += value.balance;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t/* Parse Object Array */\n\t\t\t\tlet entries = Object.values(g);\n\t\t\t\t\n\t\t\t\t/* Parent aggregate sum */\n\t\t\t\t/* Remove Duplicate */\n                childIds = [...new Set(childIds)];\n\t\t\t\tfor (let i = 0; i < entries.length; i++) {\n\t\t\t\t\tlet entry = entries[i];\n\t\t\t\t\t\n\t\t\t\t\tif(~childIds.indexOf(entry.uuid)){\n\t\t\t\t\t\tlet parentId = entry.parentId;\n\t\t\t\t\t\twhile(parentId !== null){\n\t\t\t\t\t\t\tif(parentId){\n\t\t\t\t\t\t\t\tlet parent = entries.find((item) => item.uuid === parentId);\n\t\t\t\t\t\t\t\tif(parent){\n\t\t\t\t\t\t\t\t\tparent.balance += entry.balance;\n\n\t\t\t\t\t\t\t\t\t/* Define Segments */\n\t\t\t\t\t\t\t\t\tfor (let j = 0; j < this.selectedSegmentIds.length; j++) {\n\t\t\t\t\t\t\t\t\t\tparent[\"s\"+j] += entry[\"s\"+j];\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t/* Set new parent id */\n\t\t\t\t\t\t\t\t\tparentId = parent.parentId;\n\t\t\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t\t\t/* Set loop to end */\n\t\t\t\t\t\t\t\t\tparentId = null;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t\t/* Set loop to end */\n\t\t\t\t\t\t\t\tparentId = null;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t/* Total */\n\t\t\t\tlet totalEntry = this.getNewModel({\n\t\t\t\t\tuuid : \"\",\n\t\t\t\t\tnumber : \"\",\n\t\t\t\t\tname : i18n.t(\"total\"),\n\t\t\t\t\tlocal_name : i18n.t(\"total\"),\n\t\t\t\t\torder : 9999999999,\n\t\t\t\t});\n\t\t\t\tentries.forEach(value => {\n\t\t\t\t\tif(~childIds.indexOf(value.uuid)){\n\t\t\t\t\t\ttotalEntry.balance += value.balance;\n\n\t\t\t\t\t\tfor (let i = 0; i < this.selectedSegmentIds.length; i++) {\n\t\t\t\t\t\t\ttotalEntry[\"s\"+i] += value[\"s\"+i];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tentries.push(totalEntry);\n\t\t\t\t\n\t\t\t\t/* BIND STATMENT */\n\t\t\t\tthis.statementList = entries;\n\t\t\t\t\n\t\t\t\tthis.generateColumn();\n\n\t\t\t\tthis.showLoading = false;\n\t\t\t}\n\t\t},\n\t\t/* Generate new model with dynamic segments */\n\t\tgetNewModel(data){\n\t\t\tlet model = new StatementOfFinancialPositionModel(data);\n\n\t\t\t/* Define segments */\n\t\t\tfor (let i = 0; i < this.selectedSegmentIds.length; i++) {\n\t\t\t\tmodel[\"s\"+i] = 0;\n\t\t\t}\n\n\t\t\treturn model;\n\t\t},\n\t\t// Row Template\n\t\tnameTmpl(dataItem){\n\t\t\t/* Name in language */\n\t\t\tlet name = dataItem.name;\n\t\t\tif(this.reportingLanguage === \"local\"){\n\t\t\t\tname = dataItem.local_name;\n\t\t\t}\n\n\t\t\t/* Define result */\n\t\t\tlet result = `<span>${dataItem.number} - ${name}</span>`;\n\n\t\t\t/* Top Level */\n\t\t\tif(dataItem.parentId === null){\n\t\t\t\tresult = `<span style='font-weight: bolder;'>${name}</span>`;\n\t\t\t}\n\n\t\t\t/* Parent Level */\n\t\t\tif(dataItem.hasChildren && dataItem.number.length > 3){\n\t\t\t\tresult = `<span style='font-weight: bolder;'>${dataItem.number} - ${name}</span>`;\n\t\t\t}\n\n\t\t\treturn result;\n\t\t},\n\t\t/* On databound */\n\t\tonDataBound (e) {\n\t\t\tvar headers = e.sender.thead.children();\n\t\t\tfor (var i = 0; i < headers.length; i++) {\n\t\t\t\tvar th = kendo.jQuery(headers[i]);\n\t\t\t\tth.css(\"font-weight\", \"bold\");\n\t\t\t\tth.css(\"text-align\", \"center\");\n\t\t\t}\n\n\t\t\tvar rows = e.sender.tbody.children();\n\t\t\tfor (var j = 0; j < rows.length; j++) {\n\t\t\t\tvar row = kendo.jQuery(rows[j]);\n\t\t\t\tvar dataItem = e.sender.dataItem(row);\n\t\t\t\t\n\t\t\t\t/* Amount align right */\n\t\t\t\trow.css(\"text-align\", \"right\");\n\t\t\t\t\n\t\t\t\t/* Parent in bold */\n\t\t\t\tif(dataItem.get(\"hasChildren\") || dataItem.get(\"parentId\") === null){\n\t\t\t\t\trow.css(\"font-weight\", \"bold\");\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tgenerateColumn() {\n\t\t\tlet headerAttributes = {\n\t\t\t\tclass: \"table-header-cell\",\n\t\t\t\tstyle: \"text-align: center;padding-right: 35px; font-size: 14px\",\n\t\t\t},\n\t\t\tattributes = {\n\t\t\t\tclass: \"table-cell\",\n\t\t\t\tstyle: \"text-align: right; font-size: 14px\",\n\t\t\t};\n\n\t\t\t/* Default Columns */\n\t\t\tlet columns = [\n\t\t\t\t{\n\t\t\t\t\tfield: this.fieldName,\n\t\t\t\t\ttitle: i18n.t(\"account\"),\n\t\t\t\t\ttemplate: this.nameTmpl,\n\t\t\t\t\tlocked: true,\n\t\t\t\t\twidth: 300,\n\t\t\t\t\theaderAttributes: headerAttributes,\n\t\t\t\t},\n\t\t\t];\n\n\t\t\t/* Set Column Segments */\n\t\t\tfor (let i = 0; i < this.selectedSegmentIds.length; i++) {\n\t\t\t\t/* Segment */\n\t\t\t\tlet segment = this.$store.state.segments.list.find((item) => item.id === this.selectedSegmentIds[i]);\n\t\t\t\t\n\t\t\t\t/* Column Segment */\n\t\t\t\tcolumns.push({\n\t\t\t\t\tfield: \"s\" + i,\n\t\t\t\t\ttitle: segment.name,\n\t\t\t\t\tformat: \"{0:#,##0.##;(#,##0.##)}\",\n\t\t\t\t\twidth: 200,\n\t\t\t\t\theaderAttributes: headerAttributes,\n\t\t\t\t\tattributes: attributes,\n\t\t\t\t});\n\t\t\t}\n\t\t\t\n\t\t\t/* Set All Columns */\n\t\t\tthis.columns = columns;\n\t\t},\n\t\t// On Reporint Language Changes\n\t\tonReportingLanguageChanges() {\n\t\t\tthis.fieldName = \"name\";\n\t\t\tthis.fieldType = \"type\";\n\t\t\tif (this.reportingLanguage === \"local\") {\n\t\t\t\tthis.fieldName = \"local_name\";\n\t\t\t\tthis.fieldType = \"type_local_name\";\n\t\t\t}\n\n\t\t\t// Generate column with new language\n\t\t\tthis.generateColumn();\n\t\t},\n\t},\n\tcomputed: {\n\t\tappType() {\n\t\t\treturn dataStore.productType;\n\t\t},\n\t},\n\tmounted() {\n\t},\n};\n</script>\n\n<style scoped>\n.reports_list {\n\twidth: 100%;\n\tbackground-color: #fff;\n\tpadding: 20px 20px 5px;\n}\n.report_filter {\n\tbackground-color: #f8f8f9;\n\tpadding: 0 20px 5px 20px;\n}\n.dv_mt {\n\tmargin-top: 20px;\n}\n.dv_mt8 {\n\tmargin-top: 30px;\n}\n.report_block .v-card.third {\n\tborder: none;\n\tbox-shadow: none;\n\tcolor: #fff;\n\ttext-transform: uppercase;\n}\n.report_block .v-card.third p.text {\n\ttext-align: left;\n\tfont-size: 16px;\n}\n.report_block .v-card.third p.number {\n\ttext-align: center;\n\tfont-size: 25px;\n\tfont-weight: 700;\n\tmargin-bottom: 0;\n}\n.report_block .v-card.bg_gray {\n\tbackground-color: #f8f8f9;\n\tborder: none;\n\tbox-shadow: none;\n\tcolor: #000;\n\tfloat: left;\n\twidth: 100%;\n}\n.report_block .v-card.bg_gray p span.text {\n\twidth: 25%;\n}\n.report_block .v-card.bg_gray p span.number {\n\twidth: 70%;\n\tfont-size: 19px;\n\tfont-weight: 700;\n\tpadding: 7px 0 0 0;\n\ttext-align: right;\n}\n@media (max-width: 576px) {\n\t.dv_mt,\n\t.dv_mt8 {\n\t\tmargin-top: 0;\n\t}\n\t.reports_list {\n\t\tmargin-top: 0;\n\t}\n}\n</style>\n"]}]}