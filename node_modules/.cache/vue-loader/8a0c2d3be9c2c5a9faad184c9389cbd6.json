{"remainingRequest":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/src/views/accounting/task/Task.vue?vue&type=style&index=0&id=dc84ece2&scoped=true&lang=css&","dependencies":[{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/src/views/accounting/task/Task.vue","mtime":1638499443115},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/@vue/cli-service/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgpAbWVkaWEgKG1pbi13aWR0aDogMTI2NHB4KSB7CiAgICAuY29udGFpbmVyIHsKICAgICAgICBtYXgtd2lkdGg6IDEwODBweCAhaW1wb3J0YW50OwogICAgfQp9Cgouay1kcm9wZG93biB7CiAgICB3aWR0aDogMTAwJTsKICAgIG1hcmdpbi10b3A6IDNweDsKfQo="},{"version":3,"sources":["Task.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+RA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"Task.vue","sourceRoot":"src/views/accounting/task","sourcesContent":["<template>\n    <v-app>\n        <v-container>\n            <v-row>\n                <v-col cols=\"12\" sm=\"12\">\n                    <v-card outlined dense class=\"pa-4 no_border rounded-sm\" color=\"white\">\n                        <v-form ref=\"form\" v-model=\"valid\" lazy-validation>\n                            <v-card outlined dense class=\"no_border\">\n                                <h2 class=\"mb-0\">{{ $t('task') }}</h2>\n                                <v-icon\n                                    onclick=\"window.history.go(-1); return false;\"\n                                    style=\"cursor: pointer; color: #333; font-size: 40px;\"\n                                    class=\"float-right\"\n                                >close\n                                </v-icon>\n                            </v-card>\n\n                            <v-card outlined dense class=\"px-3 no_border mb-3\" color=\"white\">\n                                <v-row>\n                                    <v-col sm=\"4\" cols=\"12\" class=\"pb-0\">\n                                        <label class=\"label\">{{ $t(\"name\") }}*</label>\n                                        <v-text-field v-model=\"task.name\" class=\"mt-1\" outlined\n                                                      :rules=\"[v => !!v || 'Name is required']\" required\n                                                      placeholder=\"Name\"/>\n\n                                        <label class=\"label\">{{ $t(\"task_type\") }}*</label>\n                                        <v-select v-model=\"task.type\" item-text=\"name\" item-value=\"id\" return-object\n                                                  :rules=\"[v => !!v || 'Task Type is required']\" required\n                                                  :items=\"taskTypes\" class=\"mt-1\" outlined placeholder=\"Sub task\"/>\n\n                                        <label class=\"label\">{{ $t(\"assigned_to\") }}</label>\n                                        <v-col sm=\"12\" cols=\"12\"\n                                               class=\"kendo_dropdown_custom pl-0 pb-3 pt-0\">\n                                            <dropdownlist\n                                                :data-items=\"assignTos\"\n                                                @change=\"onChange\"\n                                                :value=\"task.assignTo\"\n                                                :data-item-key=\"dataItemKey\"\n                                                :text-field=\"textField\"\n                                                :default-item=\"defaultItem\"\n                                                :filterable=\"true\"\n                                                @filterchange=\"onFilterChange\">\n                                            </dropdownlist>\n                                        </v-col>\n                                    </v-col>\n                                    <v-col sm=\"4\" cols=\"12\" class=\"pb-0\">\n                                        <label class=\"label\">{{ $t(\"categories\") }}*</label>\n                                        <v-select :items=\"taskCategories\" item-value=\"id\" item-text=\"name\" return-object\n                                                  :rules=\"[v => !!v || 'Category is required']\" required\n                                                  v-model=\"task.category\" class=\"mt-1\" outlined placeholder=\"\"/>\n\n                                        <label class=\"label\">{{ $t(\"due_date\") }}*</label>\n                                        <app-datepicker :initialDate=\"task.dueDate\"\n                                                        :rules=\"[v => !!v || 'Due Date is required']\"\n                                                        required\n                                                        @emitDate=\"task.dueDate = $event\"/>\n\n                                        <label class=\"label\">{{ $t(\"linked_to_account\") }}</label>\n                                        <v-select :items=\"linkAccs\" item-text=\"name\" item-value=\"uuid\"\n                                                  v-model=\"task.linkAcc\" return-object class=\"mt-1\" outlined\n                                                  placeholder=\"Linked to account\"/>\n                                    </v-col>\n                                    <v-col sm=\"4\" cols=\"12\" class=\"pb-0\">\n                                        <label class=\"label\">{{ $t(\"sub_type\") }}*</label>\n                                        <v-select :items=\"taskSubTypes\" item-text=\"name\" return-object item-value=\"id\"\n                                                  :rules=\"[v => !!v || 'Sub Type is required']\" required\n                                                  v-model=\"task.subType\" class=\"mt-1\" outlined placeholder=\"\"/>\n\n                                        <label class=\"label\">{{ $t(\"frequency\") }}*</label>\n                                        <v-select :items=\"frequencies\" item-value=\"id\" return-object item-text=\"name\"\n                                                  :rules=\"[v => !!v || 'Frequency is required']\" required\n                                                  v-model=\"task.frequency\" class=\"mt-1\" outlined\n                                                  placeholder=\"Frequency\"/>\n\n                                        <label class=\"label\">{{ $t(\"linked_to_other_tasks\") }}</label>\n                                        <v-select :items=\"linkTasks\" v-model=\"task.linkTask\" return-object class=\"mt-1\"\n                                                  outlined placeholder=\"Link to Other Task\"/>\n                                    </v-col>\n                                    <v-col sm=\"6\" cols=\"12\" class=\"pt-0\">\n                                        <label class=\"label\">{{ $t(\"purpose\") }}</label>\n                                        <editor :resizable-content=\"true\"\n                                                :resizable-toolbar=\"true\"\n                                                :value=\"task.purpose\"\n                                                style=\"height:120px\"\n                                                class=\"mt-1\"\n                                                id=\"editorPurpose\"\n                                                rows=\"10\"\n                                                cols=\"30\">\n                                        </editor>\n\n                                    </v-col>\n                                    <v-col sm=\"6\" cols=\"12\" class=\"pt-0\">\n                                        <label class=\"label\">{{ $t(\"instructions\") }}</label>\n\n                                        <editor :resizable-content=\"true\"\n                                                :resizable-toolbar=\"true\"\n                                                :value=\"task.instruction\"\n                                                style=\"height:120px\"\n                                                class=\"mt-1\"\n                                                id=\"editorInstruction\"\n                                                rows=\"10\"\n                                                cols=\"30\">\n                                        </editor>\n                                    </v-col>\n                                </v-row>\n                            </v-card>\n                            <v-divider class=\"mt-4\"/>\n                            <v-card outlined dense class=\"no_border function_footer\">\n                                <v-btn color=\"primary\" outlined class=\"text-capitalize  black--text float-left\"\n                                       @click=\"cancel\">{{ $t('cancel') }}\n                                </v-btn>\n                                <!-- <v-btn color=\"primary\" class=\"ml-2 float-right text-capitalize  white--text\">\n                                    {{$t('reconcile')}}\n                                </v-btn> -->\n                                <v-btn @click=\"saveTask\" color=\"primary\"\n                                       class=\" float-right text-capitalize  white--text\">\n                                    {{ $t('save_close') }}\n                                </v-btn>\n                            </v-card>\n\n                        </v-form>\n                    </v-card>\n                </v-col>\n            </v-row>\n        </v-container>\n    </v-app>\n</template>\n\n<script>\nimport {DropDownList} from \"@progress/kendo-vue-dropdowns\";\nimport {Editor} from '@progress/kendo-editor-vue-wrapper';\nimport DatePickerComponent from '@/components/custom_templates/DatePickerComponent'\nimport Task from \"@/scripts/model/Task\";\nimport kendo from '@progress/kendo-ui'\n\nconst {accountHandler} = require(\"@/scripts/AppHandlers\");\nconst taskHandler = require(\"@/scripts/taskHandler\");\nconst employeeHandler = require(\"@/scripts/employeeHandler\");\nconst $ = kendo.jQuery\nconst keyField = 'id'\nconst textField = 'name'\nconst emptyItem = {[textField]: 'loading ...'}\nexport default {\n    name: \"Task\",\n    components: {\n        // 'LoadingMe': LoadingMe,\n        'app-datepicker': DatePickerComponent,\n        'dropdownlist': DropDownList,\n        'editor': Editor,\n    },\n    data: () => ({\n        template: [],\n        start_date: '',\n        valid: true,\n        task: new Task({}),\n        taskTypes: [],\n        taskSubTypes: [],\n        taskCategories: [],\n        assignTos: [],\n        linkAccs: [],\n        linkTasks: [],\n        frequencies: [\n            {id: 1, name: 'Daily'},\n            {id: 2, name: 'Weekly'},\n            {id: 3, name: 'Monthly'},\n            {id: 4, name: 'Quarterly'},\n            {id: 5, name: 'Annually'}\n        ],\n        dataItemKey: 'id',\n        textField: 'name',\n        defaultItem: {[textField]: 'Select employee...', [keyField]: null},\n        employeeBaseUrl: employeeHandler.search()\n    }),\n    methods: {\n        onClear() {\n            this.task = new Task({})\n        },\n        cancel() {\n            window.history.go(-1)\n            return false\n        },\n        async onGetTextPurpose() {\n            const editor = $(\"#editorPurpose\").data(\"kendoEditor\");\n            const editorContent = editor.value();\n            editor.refresh();\n            this.task.purpose = editorContent\n        },\n        async onGetTextInstruction() {\n            const editor = $(\"#editorInstruction\").data(\"kendoEditor\");\n            const editorContent = editor.value();\n            editor.refresh();\n            this.task.instruction = editorContent\n        },\n        async saveTask() {\n            if (this.$refs.form.validate()) {\n                await this.onGetTextPurpose()\n                await this.onGetTextInstruction()\n                this.task.status = {id: 1, name: 'Assigned'}\n                await taskHandler.saveTask(this.task).then(() => {\n                    this.onClear()\n                    window.history.go(-1)\n                })\n            }\n        },\n        async loadAccount() {\n            // Use remote data\n            await accountHandler.getAll()\n                .then(res => {\n                    this.linkAccs = res.data\n                });\n        },\n        async loadTaskSubType() {\n            await taskHandler.getAllTaskSubType().then(res => {\n                this.taskSubTypes = res\n            })\n        },\n        async loadTaskType() {\n            await taskHandler.getAllTaskType().then(res => {\n                this.taskTypes = res\n            })\n        },\n        async loadTaskCategory() {\n            await taskHandler.getAllTaskCategory().then(res => {\n                this.taskCategories = res\n            })\n        },\n        async loadEmployeeCenter() {\n            new Promise(resolve => {\n                setTimeout(() => {\n                    resolve('resolved')\n                    this.assignTos = []\n                    employeeHandler.center(this.search).then(res => {\n                        // this.showLoading = true\n                        if (res.data.statusCode === 200) {\n                            // this.showLoading = false\n                            this.assignTos = res.data.data\n                        }\n                    }).catch()\n                    {\n                        // this.showLoading = false\n                    }\n                }, 300)\n            })\n        },\n        async onChange(event) {\n            const value = event.value\n            if (value && value[textField] === emptyItem[textField]) {\n                return;\n            }\n            window.console.log(value)\n            this.task.assignTo = value\n        },\n        requestData(skip, filter, baseUrl) {\n            const url = baseUrl + `/${filter}`\n            this.requestStarted = true;\n            fetch(url)\n                .then((response) => {\n                    // window.console.log(response.json())\n                    return response.json()\n                })\n                .then(this.afterFetch)\n\n        },\n        afterFetch(json) {\n            this.assignTos = json.data\n        },\n        onFilterChange(event) {\n            const filter = event.filter.value\n            this.requestData(0, filter, this.employeeBaseUrl)\n            this.filter = filter\n        },\n    },\n    async mounted() {\n        this.task.purpose = ''\n        this.task.instruction = ''\n        await this.loadAccount()\n        await this.loadTaskSubType()\n        await this.loadTaskType()\n        await this.loadTaskCategory()\n        // await this.loadEmployeeCenter()\n        this.requestData(0, '', employeeHandler.search())\n    },\n\n};\n</script>\n\n<style scoped>\n@media (min-width: 1264px) {\n    .container {\n        max-width: 1080px !important;\n    }\n}\n\n.k-dropdown {\n    width: 100%;\n    margin-top: 3px;\n}\n</style>\n"]}]}