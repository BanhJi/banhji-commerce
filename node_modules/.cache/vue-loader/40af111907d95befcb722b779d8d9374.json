{"remainingRequest":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/macos/Desktop/banhji-0.2/banhji-commerce/src/views/employee/EmploymentHistory.vue?vue&type=style&index=0&id=664557e1&scoped=true&lang=css&","dependencies":[{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/src/views/employee/EmploymentHistory.vue","mtime":1643015930557},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/@vue/cli-service/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi5zbWFsbF9zaWRlYmFyIHsKICAgIGhlaWdodDogOTclOwogICAgcG9zaXRpb246IHJlbGF0aXZlOwogICAgcGFkZGluZzogMTJweDsKfQouaGlkZV9zbWFsbF9iYXJfY2xhc3MgewogICAgbWF4LXdpZHRoOiAwOwogICAgdHJhbnNpdGlvbjogLjVzIGVhc2UtaW47CiAgICBmbGV4OiAwIDAgMDsKICAgIHBhZGRpbmc6IDA7Cn0KCi5oaWRlX2JpZ19iYXJfY2xhc3MgewogICAgbWF4LXdpZHRoOiAxMDAlOwogICAgdHJhbnNpdGlvbjogLjVzIGVhc2UtaW47CiAgICBmbGV4OiAwIDAgMTAwJTsKfQouaWNvbkFycm93IHsKICAgIHJpZ2h0OiAtMzVweDsKICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICAgIGJvdHRvbTogLTEwcHg7Cn0KLmljb25BcnJvd0hpZGUgewogICAgcG9zaXRpb246IGFic29sdXRlOwogICAgcmlnaHQ6IC03cHg7CiAgICBib3R0b206IC0xMHB4Owp9Ci50aGVtZS0tbGlnaHQudi1kYXRhLXRhYmxlID4gLnYtZGF0YS10YWJsZV9fd3JhcHBlciA+IHRhYmxlID4gdGJvZHkgPiB0cjpob3Zlcjpub3QoLnYtZGF0YS10YWJsZV9fZXhwYW5kZWRfX2NvbnRlbnQpOm5vdCgudi1kYXRhLXRhYmxlX19lbXB0eS13cmFwcGVyKXsKICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50ICFpbXBvcnRhbnQ7Cn0KLmRldGlhbF9zbWFsbHNpZGVfcHsKICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICAgIGJvdHRvbTogMTBweDsKfSAgIAouay1zY3JvbGxiYXIgLmstc2Nyb2xsYmFyLXZlcnRpY2FsIC5rLWdyaWQtaGVhZGVyewogICAgd2lkdGg6IDBweCFpbXBvcnRhbnQ7CiAgICBwYWRkaW5nLXJpZ2h0OiAxNnB4IWltcG9ydGFudDsKICAgIAp9Cg=="},{"version":3,"sources":["EmploymentHistory.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+6BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","file":"EmploymentHistory.vue","sourceRoot":"src/views/employee","sourcesContent":["<template>\n    <v-app>\n        <v-container>\n            <v-row>\n                <v-col cols=\"12\" sm=\"12\">\n                    <v-card outlined dense class=\"pa-4 no_border rounded-sm\" color=\"white\">\n                        <v-form ref=\"form\" lazy-validation>\n                            <v-card outlined dense class=\"no_border\">\n                                <h2 class=\"mb-0\">{{ $t('employment_history') }}</h2>\n                                <v-icon\n                                    @click=\"close()\"\n                                    style=\"cursor: pointer; color: #333; font-size: 40px;\"\n                                    class=\"float-right\">close\n                                </v-icon>\n                            </v-card>\n                            <v-card outlined dense class=\"px-3 no_border\" color=\"grayBg\" height=\"173px\">\n                                <v-row>\n                                    <v-col sm=\"4\" cols=\"12\" class=\"pb-0\">\n                                        <label class=\"label\">{{ $t('employee_name') }}</label>\n                                        <v-text-field class=\"mt-1\"\n                                            outlined\n                                            v-model=\"employeeName\"\n                                            tage=\"Employee Name\"\n                                            readonly\n                                            required/>\n                                        <label class=\"label\">{{ $t('nature_of_the_record') }}</label>\n                                        <v-select class=\"mt-1\"\n                                            outlined\n                                            :items=\"natureRecord\"\n                                            item-text=\"name\"\n                                            item-value=\"id\"\n                                            v-model=\"natureRecordSelected\"\n                                            tage=\"Nature of the Record\"\n                                            :rules=\"[v => !!v || $t('bank_name_require')]\"\n                                            return-object/>\n                                    </v-col>\n                                    <v-col sm=\"4\" cols=\"12\" class=\"pb-0\">\n                                        <label class=\"label\">{{$t('date')}}</label>\n                                        <app-datepicker :initialDate=\"recordDate\"\n                                            @emitDate=\"recordDate = $event\"/>\n                                        <label class=\"label\">{{ $t('business_unit_branch') }}</label>\n                                        <v-select class=\"mt-1\"\n                                            outlined\n                                            :items=\"location\"\n                                            item-text=\"name\"\n                                            item-value=\"id\"\n                                            v-model=\"locationSelected\"\n                                            tage=\"Business Unit/Branch\"\n                                            :rules=\"[v => !!v || $t('field_is_required')]\"\n                                            return-object/>\n                                    </v-col>\n                                    <v-col sm=\"4\" cols=\"12\" class=\"pb-0\">\n                                        <label class=\"label\">{{ $t('nature_of_the_contract') }}</label>\n                                        <v-select class=\"mt-1\"\n                                            outlined\n                                            :items=\"natureContract\"\n                                            item-text=\"name\"\n                                            item-value=\"id\"\n                                            v-model=\"natureContractSelected\"\n                                            tage=\"Nature of the Contract\"\n                                            :rules=\"[v => !!v || $t('field_is_required')]\"\n                                            return-object/>\n                                        <label class=\"label\">{{ $t('position') }}</label>\n                                        <v-select class=\"mt-1\"\n                                            outlined\n                                            :items=\"position\"\n                                            item-text=\"name\"\n                                            item-value=\"id\"\n                                            v-model=\"positionSelected\"\n                                            :rules=\"[v => !!v || $t('field_is_required')]\"\n                                            tage=\"Position\"\n                                            return-object/>\n                                    </v-col>\n                                </v-row>\n                            </v-card>\n                            <v-card outlined dense class=\"px-3\" color=\"white\">\n                                <v-row>\n                                    <v-col class=\"pb-0\" sm=\"3\" cols=\"12\">\n                                        <v-row class=\"border_grey\">\n                                            <v-col sm=\"12\" cols=\"12\" class=\"my_box_min_heihgt pa-0\">\n                                                <h2 class=\"mb-2 font_20 \">\n                                                    {{ $t(\"salary_information\") }}\n                                                </h2>\n                                                <p class=\"mb-3\">{{$t('salary_information_desc')}}</p>\n                                                <v-row>\n                                                    <v-col sm=\"12\" cols=\"12\" class=\"py-0\">\n                                                        <label class=\"label\">{{ $t('salary_type') }}</label>\n                                                         <v-select class=\"mt-1\"\n                                                            outlined\n                                                            :items=\"salaryType\"\n                                                            v-model=\"salaryTypeSelected\"\n                                                            @change=\"changeSalaryType\"\n                                                            :rules=\"[v => !!v || $t('field_is_required')]\"\n                                                            tage=\"Salary Type\"/>\n                                                        <label class=\"label mb-0\">{{ $t('salary') }} {{salaryPer}}</label>\n                                                        <v-text-field class=\"mt-1\"\n                                                            outlined\n                                                            :rules=\"[v => !!v || $t('field_is_required')]\"\n                                                            v-model=\"employmentRecord.salary\"/>\n                                                        <label class=\"label mb-0\">{{ $t('nature') }}</label>\n                                                        <v-select class=\"mt-1\"\n                                                            outlined\n                                                            :items=\"natureSalary\"\n                                                            item-text=\"name\"\n                                                            item-value=\"id\"\n                                                            v-model=\"natureSalarySelected\"\n                                                            :rules=\"[v => !!v || $t('field_is_required')]\"\n                                                            tage=\"Nature Of Salary\"\n                                                            return-object/>\n                                                        <label class=\"label mb-0\">{{ $t('salary_currency') }}</label>\n                                                        <v-select class=\"mt-1\"\n                                                            outlined\n                                                            :items=\"currencyList\"\n                                                            item-text=\"name\"\n                                                            item-value=\"id\"\n                                                            v-model=\"currencySelected\"\n                                                            :rules=\"[v => !!v || $t('field_is_required')]\"\n                                                            tage=\"currencySelector\"\n                                                            return-object/>\n                                                        <label class=\"label mb-0\">{{ $t('employee_group') }}</label>\n                                                        <v-select class=\"mt-1\"\n                                                            outlined\n                                                            :items=\"groups\"\n                                                            :item-text=\"item =>`${item.groupCode} - ${item.groupName}`\"\n                                                            item-value=\"id\"\n                                                            v-model=\"group\"\n                                                            clearable\n                                                            tage=\"currencySelector\"/>\n                                                    </v-col>\n                                                </v-row>\n                                            </v-col>\n                                        </v-row>\n                                    </v-col>\n                                    <v-col class=\"pb-0\" sm=\"6\" cols=\"12\">\n                                        <v-row class=\"border_grey\">\n                                            <v-col sm=\"12\" cols=\"12\" class=\"py-0\">\n                                                <h2 class=\"mb-2 font_20 \">\n                                                    {{ $t(\"Segment\") }}\n                                                </h2>\n                                                <v-row>\n                                                    <v-col sm=\"12\" cols=\"12\" class=\"py-0\">\n                                                        <kendo-datasource ref=\"dataSourceSegment\"\n                                                            :schema-model-fields=\"schemaModelFields\"\n                                                            :data=\"segmentList\"/>\n                                                        <kendo-grid id=\"gridSegment\" class=\"grid-function\"\n                                                                :data-source-ref=\"'dataSourceSegment'\"\n                                                                :editable=\"true\"\n                                                                :navigatable=\"true\"\n                                                                :scrollable-virtual=\"true\">\n                                                            <kendo-grid-column\n                                                                :field=\"'salaryAccount'\"\n                                                                :title=\"$t('account')\"\n                                                                :width=\"100\"\n                                                                :template=\"'<span>#=salaryAccount.name#</span>'\"\n                                                                :editor=\"accountDropDownEditor\"\n                                                                :headerAttributes=\"{ style: 'background-color: #EDF1F5' }\"/>\n                                                            <kendo-grid-column\n                                                                :field=\"'component'\"\n                                                                :title=\"$t('segment')\"\n                                                                :width=\"100\"\n                                                                :template=\"'<span>#=component.name#</span>'\"\n                                                                :editor=\"segmentDropDownEditor\"\n                                                                :headerAttributes=\"{ style: 'background-color: #EDF1F5' }\"/>\n                                                            <kendo-grid-column\n                                                                :field=\"'percentage'\"\n                                                                :title=\"$t('percentage')\"\n                                                                :width=\"100\"\n                                                                :template=\"'<span>#= percentage# %</span>'\"\n                                                                :headerAttributes=\"{style: 'text-align: right; background-color: #EDF1F5'}\"\n                                                                :attributes=\"{style: 'text-align: right;'}\"/>\n                                                             <kendo-grid-column\n                                                                :width=\"60\"\n                                                                :command=\"{ iconClass: 'k-icon k-i-trash', text: ' ', click: removeSegment, class: 'btn-plus' }\"\n                                                                :title=\"$t('action')\"\n                                                                :headerAttributes=\"{style: 'text-align: center; background-color: #EDF1F5'}\"\n                                                                :attributes=\"{style: 'text-align: center'}\"/>\n                                                        </kendo-grid>\n                                                        <v-btn color=\"primary\"\n                                                                class=\"float-left rounded-0 white--text mt-3\"\n                                                                @click=\"addSegment\">\n                                                            <v-icon size=\"\" class=\"ma-1\">mdi-plus</v-icon>\n                                                        </v-btn>\n                                                    </v-col>\n                                                </v-row>\n                                            </v-col>\n                                        </v-row>\n                                        <v-row class=\"border_grey\">\n                                            <v-col sm=\"12\" cols=\"12\" class=\"py-0\">\n                                                <h2 class=\"mb-2 font_20 \">\n                                                    {{ $t(\"employee_benefits\") }}\n                                                </h2>\n                                                <v-row>\n                                                    <v-col sm=\"12\" cols=\"12\" class=\"py-0\">\n                                                        <kendo-datasource ref=\"dataSource\"\n                                                            :data=\"BenefiteList\"/>\n                                                        <kendo-grid id=\"gridBenefit\" class=\"grid-function\"\n                                                                    :data-source-ref=\"'dataSource'\"\n                                                                    :editable=\"true\"\n                                                                    :scrollable-virtual=\"true\">\n                                                            <!-- <kendo-grid-column\n                                                                :field=\"'segment'\"\n                                                                :title=\"$t('segment')\"\n                                                                :width=\"100\"\n                                                                :template=\"'<span>#=segment.name#</span>'\"\n                                                                :editor=\"segmentBenefiteDropDownEditor\"\n                                                                :headerAttributes=\"{ style: 'background-color: #EDF1F5' }\"/> -->\n                                                            <kendo-grid-column\n                                                                :field=\"'component'\"\n                                                                :title=\"$t('benefits')\"\n                                                                :width=\"100\"\n                                                                :template=\"'<span>#=component.name#</span>'\"\n                                                                :editor=\"benefitDropDownEditor\"\n                                                                :headerAttributes=\"{ style: 'background-color: #EDF1F5' }\"/>\n                                                            <kendo-grid-column\n                                                                :field=\"'amount'\"\n                                                                :title=\"$t('amount')\"\n                                                                :width=\"100\"\n                                                                :headerAttributes=\"{style: 'text-align: right; background-color: #EDF1F5'}\"/>\n                                                             <kendo-grid-column\n                                                                :width=\"60\"\n                                                                :command=\"{ iconClass: 'k-icon k-i-trash', text: ' ', click: removeBenifit, class: 'btn-plus' }\"\n                                                                :title=\"$t('action')\"\n                                                                :headerAttributes=\"{style: 'text-align: center; background-color: #EDF1F5'}\"\n                                                                :attributes=\"{style: 'text-align: center'}\"/>\n                                                        </kendo-grid>\n                                                        <v-btn color=\"primary\"\n                                                                class=\"float-left rounded-0 white--text mt-3\"\n                                                                @click=\"addRow\">\n                                                            <v-icon size=\"\" class=\"ma-1\">mdi-plus</v-icon>\n                                                        </v-btn>\n                                                    </v-col>\n                                                </v-row>\n                                            </v-col>\n                                        </v-row>\n                                    </v-col>\n                                    <v-col class=\"pb-0\" sm=\"3\" cols=\"12\">\n                                        <v-row class=\"border_grey\">\n                                            <v-col sm=\"12\" cols=\"12\" class=\"py-0\">\n                                                <h2 class=\"mb-2 font_20 \">\n                                                    {{ $t(\"attachment\") }}\n                                                </h2>\n                                                <p class=\"mb-3\">{{$t('related_document_to')}}</p>\n                                                <v-row>\n                                                    <v-col sm=\"12\" cols=\"12\" class=\"py-0\">\n                                                        <v-file-input\n                                                            accept=\"image/*\"\n                                                            label=\"Attachment\"/>\n                                                    </v-col>\n                                                </v-row>\n                                                <v-row>\n                                                    <v-col sm=\"12\" cols=\"12\">\n                                                         <label class=\"label\">{{$t('workday_start_on')}}</label>\n                                                        <v-select\n                                                            outlined\n                                                            :items=\"workDay\"\n                                                            item-text=\"name\"\n                                                            item-value=\"id\"\n                                                            tage=\"Workday Start on\"\n                                                            v-model=\"workDaySelected\"\n                                                            :rules=\"[v => !!v || $t('field_is_required')]\"\n                                                            return-object/>\n                                                    </v-col>\n                                                    <v-col sm=\"12\" cols=\"12\">\n                                                        <label class=\"label\">{{$t('starting_time')}}</label>\n                                                        <v-select\n                                                            outlined\n                                                            :items=\"startingTime\"\n                                                            item-text=\"name\"\n                                                            item-value=\"id\"\n                                                            v-model=\"startingTimeSelected\"\n                                                            :rules=\"[v => !!v || $t('field_is_required')]\"\n                                                            tage=\"Starting time\"/>\n                                                    </v-col>\n                                                    <v-col sm=\"8\" cols=\"12\" style=\"margin:auto; margin-top: -5px;\">\n                                                        <label class=\"label\">{{$t('applying_overtime')}}</label>\n                                                    </v-col>   \n                                                    <v-col sm=\"3\" cols=\"12\" style=\"margin:auto; margin-top: -25px;\">\n                                                        <v-checkbox\n                                                            v-model=\"applyOvertime\">\n                                                        </v-checkbox>\n                                                    </v-col>\n                                                </v-row>\n                                            </v-col>\n                                        </v-row>\n                                    </v-col>\n                                </v-row>\n                            </v-card>\n                            <v-divider/>\n                            <v-card outlined dense class=\"no_border function_footer\">\n                                <v-menu>\n                                    <template v-slot:activator=\"{ on }\">\n                                        <v-btn  outlined class=\"mr-2 text-capitalize  black--text float-left\" v-on=\"on\">\n                                            {{$t('select_template')}}\n                                            <v-icon size=\"\" class=\"ma-1\">expand_more</v-icon>\n                                        </v-btn>\n                                    </template>\n                                    <v-list>\n                                        <v-list-item v-for=\"(item, index) in templates\" :key=\"index\">\n                                            <v-list-item-title>{{ item.title }}</v-list-item-title>\n                                        </v-list-item>\n                                    </v-list>\n                                </v-menu>\n                                <v-btn color=\"black\"  class=\"text-capitalize  white--text float-left\" @click=\"cancel\">{{$t('cancel')}}</v-btn>\n                                <v-btn color=\"primary\" class=\"float-right white--text text-capitalize \" @click=\"onSaveClose\">\n                                    {{$t('save_print')}}\n                                </v-btn>\n                            </v-card>\n                        </v-form>\n                    </v-card>\n                </v-col>\n            </v-row>\n            <LoadingMe\n                :isLoading=\"showLoading\"\n                :fullPage=\"true\"\n                :myLoading=\"true\"/>\n        </v-container>\n    </v-app>\n</template>\n\n<script>\n    import EmploymentRecord from \"@/scripts/model/EmploymentRecord\";\n    import DatePickerComponent from '@/components/custom_templates/DatePickerComponent';\n    import kendo from \"@progress/kendo-ui\";\n    const currencyHandler = require(\"@/scripts/currency/handler/currencyHandler\")   \n    const accountHandler = require(\"@/scripts/handler/accounting/account\")     \n    const locationHandler = require(\"@/scripts/locationHandler\")\n    const payrollHandler  = require('@/scripts/payrollHandler')\n    const employeeHandler = require(\"@/scripts/employeeHandler\")\n    const settingsHandler = require(\"@/scripts/settingsHandler\")\n    const employmentModel = new EmploymentRecord({})\n    const cookieJS = require(\"@/cookie.js\");\n    const cookie = cookieJS.getCookie();\n    export default {\n        name: \"AddEmploymentRecord\",\n        props: ['id'],\n        components: {\n            LoadingMe: () => import(`@/components/Loading`),\n            'app-datepicker': DatePickerComponent,\n        },\n        data: () => ({\n            templates: [],\n            showLoading: true,\n            compeletLoading: false,\n            position: [],\n            location: [],\n            segmentList: [],\n            recordDate: kendo.toString(new Date(), 'yyyy-MM-dd'),\n            employee: {},\n            employment_id:'', \n            employmentRecord: employmentModel,\n            applyOvertime: false,\n            BenefiteList:[],\n            componentType: [],\n            locationSelected: '',\n            segmentSelected: '',\n            segments:   '',\n            segment:    [],\n            natureRecordSelected: {id: \"new_employment\", name: \"New Employment\"},\n            natureContractSelected: {id: \"fixed_duration_contract\", name: \"Fixed Duration Contract\"},\n            currencySelected:   '',\n            workDaySelected:'',\n            positionSelected: '',\n            salaryTypeSelected: 'Monthly',\n            natureSalarySelected: {id: \"gross_amount\", name: \"Gross Amount\"},\n            startingTimeSelected: '',\n            employeeName: '',\n            currencyList: [],\n            salaryType:[\n                'Hourly',\n                'Monthly'\n            ],\n            salaryPer: 'per Month',\n            natureSalary:[\n                {id: \"gross_amount\", name: \"Gross Amount\"},\n                {id: \"net_amount\", name: \"Net Amount\"}\n            ],\n            natureContract:[\n                {id: \"fixed_duration_contract\", name: \"Fixed Duration Contract\"},\n                {id: \"undetermined_duration_contract\", name: \"Undetermined Duration Contract\"},\n                {id: \"contractd\", name: \"Contracted\"}\n            ],\n            natureRecord:[\n                {id: \"new_employment\", name: \"New Employment\"},\n                {id: \"promotion\", name: \"Promotion\"},\n                {id: \"salary_increase\", name: \"Salary Increase\"},\n                {id: \"resignatio\", name: \"Resigntion\"}\n            ],\n            workDay:[\n                {id: \"1\", name: \"Monday\"},\n                {id: \"2\", name: \"Tursday\"},\n                {id: \"3\", name: \"Wednesday\"},\n                {id: \"4\", name: \"Thursday\"},\n                {id: \"5\", name: \"Friday\"},\n                {id: \"6\", name: \"Saturday\"},\n                {id: \"7\", name: \"Sunday\"}\n            ],\n            startingTime:[\n                {id: 1, name: \"1:00\"},\n                {id: 2, name: \"2:00\"},\n                {id: 3, name: \"3:00\"},\n                {id: 4, name: \"4:00\"},\n                {id: 5, name: \"5:00\"},\n                {id: 6, name: \"6:00\"},\n                {id: 7, name: \"7:00\"},\n                {id: 8, name: \"8:00\"},\n                {id: 9, name: \"9:00\"},\n                {id: 10, name: \"10:00\"},\n                {id: 11, name: \"11:00\"},\n                {id: 12, name: \"12:00\"},\n                {id: 13, name: \"13:00\"},\n                {id: 14, name: \"14:00\"},\n                {id: 15, name: \"15:00\"},\n                {id: 16, name: \"16:00\"},\n                {id: 17, name: \"17:00\"},\n                {id: 18, name: \"18:00\"},\n                {id: 19, name: \"19:00\"},\n                {id: 20, name: \"20:00\"},\n                {id: 21, name: \"21:00\"},\n                {id: 22, name: \"22:00\"},\n                {id: 23, name: \"23:00\"},\n                {id: 24, name: \"24:00\"},\n            ],\n            schemaModelFields: {\n                segment: { editable: true },\n                amount: { type: 'number'},\n                percentage: { type: 'number', validation: { required: true, min: 0 , max: 100, defaultValue: 100}}\n            },\n            percentage: 0,\n            mAccSalary: {},\n            mSegments: {},\n            accSalaries: [],\n            segmentAR: [],\n            loggedUser: {\n                id: cookie.creator,\n                name: cookie.email\n            },\n            group: \"\",\n            groups: [],\n        }),\n        methods: {\n            addRow() {\n                let ds = this.$refs.dataSource.kendoWidget(),\n                    total = ds.total();\n                ds.insert(total, {\n                    segment: {\n                        name: \"-- Select --\"\n                    },\n                    component: {\n                        name: \"-- Select --\"\n                    },\n                    amount: 0\n                })\n            },\n            removeBenifit(e) {\n                e.preventDefault();\n                const grid = kendo.jQuery(\"#gridBenefit\").data(\"kendoGrid\"),\n                    dataSource = grid.dataSource,\n                    dataItem = grid.dataItem(kendo.jQuery(e.currentTarget).closest(\"tr\"));\n                if (dataSource.total() > 1) {\n                    dataSource.remove(dataItem);\n                }\n            },\n            addSegment(){\n                let dsSegment = this.$refs.dataSourceSegment.kendoWidget(),\n                totalS = dsSegment.total();\n                dsSegment.insert(totalS, {\n                    component: {\n                        name:       this.mSegments.name,\n                        id:         this.mSegments.id,\n                        code:       this.mSegments.code,\n                        subOf:      this.mSegments.subOf,\n                        createdAt:  this.mSegments.createdAt\n                    },\n                    salaryAccount: {\n                        name:           this.mAccSalary.name,\n                        id:             this.mAccSalary.id,\n                        account_type:   this.mAccSalary.account_type,\n                        banhjiAccCode:  this.mAccSalary.banhjiAccCode,\n                        group_code:     this.mAccSalary.group_code,\n                        is_taxable:     this.mAccSalary.is_taxable,\n                        local_name:     this.mAccSalary.local_name,\n                        number:         this.mAccSalary.number,\n                        parent_account: this.mAccSalary.parent_account,\n                        type_code:      this.mAccSalary.type_code,\n                        uuid:           this.mAccSalary.uuid\n                    },\n                    percentage: 100\n                })\n            },\n            removeSegment(e) {\n                e.preventDefault();\n                const grid = kendo.jQuery(\"#gridSegment\").data(\"kendoGrid\"),\n                    dataSource = grid.dataSource,\n                    dataItem = grid.dataItem(kendo.jQuery(e.currentTarget).closest(\"tr\"));\n                if (dataSource.total() > 1) {\n                    dataSource.remove(dataItem);\n                }\n            },\n            async loadSegment() {\n                new Promise(resolve => {\n                    setTimeout(() => {\n                        resolve('resolved')\n                        this.segments = []\n                        settingsHandler.getSeg().then(res => {\n                            this.showLoading = true\n                            if (res.data.statusCode === 200) {\n                                this.segments = res.data.data\n                                if (this.segments.length > 0) {\n                                    this.mSegments = this.segments[0]\n                                    this.addSegment()\n                                    this.showLoading = false\n                                }\n                            }\n                        })\n                    }, 300)\n                })\n            },\n            async loadCurrency() {\n                new Promise(resolve => {\n                    setTimeout(() => {\n                        resolve('resolved')\n                        currencyHandler.getAll().then(res => {\n                            this.currencyList = res.data.data\n                        })\n                    }, 300)\n                })\n            },\n            async loadPosition(){\n                new Promise(resolve => {\n                    setTimeout(() => {\n                        resolve('resolved');\n                        payrollHandler.getPosition().then(res => {\n                            this.position = res\n                        })\n                    }, 300);\n                })\n            },\n            async loadLocation() {\n                 new Promise(resolve => {\n                    setTimeout(() => {\n                        resolve('resolved');\n                        locationHandler.list().then(res => {\n                            if(res.data.statusCode === 200){\n                                this.location = res.data.data\n                            }\n                        })\n                    }, 300);\n                })\n            },\n            async loadComponent() {\n                 new Promise(resolve => {\n                    setTimeout(() => {\n                        resolve('resolved');\n                        payrollHandler.getComponent().then(res => {\n                            this.componentType = res.data.data.filter(m => m.compoType.name === 'Benefits')\n                        })\n                    }, 300);\n                })\n            },\n            async loadAccount() {\n                new Promise(resolve => {\n                    setTimeout(() => {\n                        resolve('resolved');\n                        accountHandler.getAll().then(res => {\n                            this.showLoading = false\n                            //Receivable Account\n                            if(res.data.length > 0){\n                                this.accSalaries = res.data.filter(\n                                    m => m.account_type.number === 12 ||\n                                    m.account_type.number === 33 ||\n                                    m.account_type.number === 34 ||\n                                    m.account_type.number === 35 ||\n                                    m.account_type.number === 36 ||\n                                    m.account_type.number === 37 ||\n                                    m.account_type.number === 38 ||\n                                    m.account_type.number === 39 ||\n                                    m.account_type.number === 40 ||\n                                    m.account_type.number === 41 ||\n                                    m.account_type.number === 42 ||\n                                    m.account_type.number === 43 ||      \n                                    m.account_type.number === 44).map(item => {\n                                    return {\n                                        id: item.uuid,\n                                        uuid: item.uuid,\n                                        name: item.name,\n                                        local_name: item.local_name,\n                                        number: item.number,\n                                        is_taxable: item.is_taxable,\n                                        banhjiAccCode: item.banhjiAccCode,\n                                        group_code: item.group_code,\n                                        parent_account: item.parent_account,\n                                        type_code: item.type_code,\n                                        account_type: item.account_type\n                                    }\n                                })\n                                if (this.accSalaries.length > 0) {\n                                    let accountDefault =  this.accSalaries.filter(n => n.name ==\"Salary\").map(item => {\n                                        return {\n                                            id: item.uuid,\n                                            uuid: item.uuid,\n                                            name: item.name,\n                                            local_name: item.local_name,\n                                            number: item.number,\n                                            is_taxable: item.is_taxable,\n                                            banhjiAccCode: item.banhjiAccCode,\n                                            group_code: item.group_code,\n                                            parent_account: item.parent_account,\n                                            type_code: item.type_code,\n                                            account_type: item.account_type\n                                        }\n                                    })\n                                    if(accountDefault.length > 0){\n                                        this.mAccSalary = accountDefault[0]\n                                    }else{\n                                        this.mAccSalary = this.accSalaries[0]\n                                    }\n                                }\n                            }\n                            this.loadSingleEmployee()\n                        })\n                    }, 300);\n                })\n            },\n            segmentBenefiteDropDownEditor(container, options){\n                kendo.jQuery('<input required name=\"' + options.field + '\"/>')\n                .appendTo(container)\n                .kendoDropDownList({\n                    autoBind: false,\n                    autoWidth: true,\n                    height: 400,\n                    dataTextField: \"name\",\n                    dataValueField: \"name\",\n                    template: \"<span>#=name#</span>\",\n                    optionLabel: \"--- Select ---\",\n                    dataSource: new kendo.data.DataSource({\n                        data: this.segments,\n                    })\n                })\n            },\n            benefitDropDownEditor(container, options) {\n                kendo.jQuery('<input required name=\"' + options.field + '\"/>')\n                .appendTo(container)\n                .kendoDropDownList({\n                    autoBind: false,\n                    autoWidth: true,\n                    height: 400,\n                    dataTextField: \"name\",\n                    dataValueField: \"name\",\n                    template: \"<span>#=name#</span>\",\n                    optionLabel: \"--- Select ---\",\n                    dataSource: new kendo.data.DataSource({\n                        data: this.componentType,\n                    })\n                })\n            },\n            segmentDropDownEditor(container, options){\n                kendo.jQuery('<input required name=\"' + options.field + '\"/>')\n                .appendTo(container)\n                .kendoDropDownList({\n                    autoBind: false,\n                    autoWidth: true,\n                    height: 400,\n                    dataTextField: \"name\",\n                    dataValueField: \"name\",\n                    template: \"<span>#=name#</span>\",\n                    optionLabel: \"--- Select ---\",\n                    dataSource: new kendo.data.DataSource({\n                        data: this.segments,\n                    })\n                })\n            },\n            accountDropDownEditor(container, options){\n                kendo.jQuery('<input required name=\"' + options.field + '\"/>')\n                .appendTo(container)\n                .kendoDropDownList({\n                    autoBind: false,\n                    autoWidth: true,\n                    height: 400,\n                    dataTextField: \"name\",\n                    dataValueField: \"name\",\n                    template: \"<span>#=name#</span>\",\n                    optionLabel: \"--- Select ---\",\n                    dataSource: new kendo.data.DataSource({\n                        data: this.accSalaries,\n                    })\n                })\n            },\n            async onSaveClose() {\n                if (!this.$refs.form.validate()) {\n                    this.$refs.form.validate()\n                    return\n                }\n                let baSalary    = this.employmentRecord.salary\n                let segmentDS = this.$refs.dataSourceSegment.kendoWidget()\n                let segment = segmentDS.data()\n                if(segment.length > 0 ){\n                    let segmentAR = []\n                    let segmentSalary = 0\n                    let totalPercentage = 0\n                    segment.map(index => {\n                        segmentSalary =  (baSalary * index.percentage)/ 100\n                        totalPercentage += parseFloat(index.percentage)\n                        segmentAR.push({\n                            salaryAccount:      index.salaryAccount,\n                            component:          index.component,\n                            percentage:         parseFloat(index.percentage),\n                            Salary:             segmentSalary\n                        })\n                    })\n                    if(totalPercentage > 100 || totalPercentage == 0){\n                        this.$snotify.error('Please Check Segment percentage again')\n                    }else{\n                        this.segmentAR = segmentAR\n                        let ds = this.$refs.dataSource.kendoWidget() \n                        let dataSource =ds.data();\n                        this.benefit = dataSource.map(index=>{\n                            return {\n                                component:  index.component,\n                                segment:    index.segment,\n                                amount:     index.amount\n                            }\n                        })\n                        new Promise(resolve => {\n                            setTimeout(() => {\n                                resolve('resolved');\n                                let data = new EmploymentRecord({\n                                    id:                         this.employmentRecord.id ? this.employmentRecord.id : '',\n                                    employee:                   {\n                                        id:                     this.employee.id,\n                                        employeeId:             this.employee.employeeId,\n                                        lastName:               this.employee.lastName,\n                                        firstName:              this.employee.firstName,\n                                        gender:                 this.employee.gender,\n                                        bank:                   {\n                                            id:                 this.employee.bank.id,\n                                            bankName:           this.employee.bank.bankName,\n                                            uuid:               this.employee.bank.uuid,\n                                        },\n                                        employeeType:           this.employee.employeeType,\n                                        spouseGender:           this.employee.spouseGender,\n                                        natureEmployee:         this.employee.natureEmployee,\n                                        noOfChildren:           this.employee.noOfChildren,\n                                        bankAccount:            this.employee.bankAccount,\n                                        paymentMethod:          this.employee.paymentMethod,\n                                        spouseNatureEmployee:   this.employee.spouseNatureEmployee,\n                                        payrollLiabilitie:      {\n                                            uuid:               this.employee.payrollLiabilitie.uuid,\n                                            local_name:         this.employee.payrollLiabilitie.local_name,\n                                            type_code:          this.employee.payrollLiabilitie.type_code,\n                                            name:               this.employee.payrollLiabilitie.name,\n                                            number:             this.employee.payrollLiabilitie.number\n                                        },\n                                        salaryAcc:              {\n                                            uuid:               this.employee.payrollLiabilitie.uuid,\n                                            local_name:         this.employee.payrollLiabilitie.local_name,\n                                            type_code:          this.employee.payrollLiabilitie.type_code,\n                                            name:               this.employee.payrollLiabilitie.name,\n                                            number:             this.employee.payrollLiabilitie.number\n                                        }\n                                    },\n                                    date:             this.recordDate,\n                                    location:         this.locationSelected,\n                                    natureRecord:     this.natureRecordSelected,\n                                    natureContract:   this.natureContractSelected,\n                                    position:         this.positionSelected,\n                                    department:       this.positionSelected.department,\n                                    salaryType:       this.salaryTypeSelected,\n                                    natureSalary:     this.natureSalarySelected,\n                                    currency:         this.currencySelected,\n                                    salary:           this.employmentRecord.salary,\n                                    status:           1,\n                                    benefit:          this.benefit,\n                                    segment:          this.segmentAR,\n                                    workDay:          this.workDaySelected,\n                                    employmentId:     this.$route.params.id,\n                                    startingTime:     this.startingTimeSelected,\n                                    applyOvertime:    this.applyOvertime,\n                                    group:            this.group,\n                                    loggedUser:       this.loggedUser\n                                })\n                                window.console.log('data', data)\n                                employeeHandler.createEmployment(data).then(response => {\n                                    if (response.data.statusCode === 201) {\n                                        this.$snotify.success('Success')\n                                        let result = response.data.data\n                                        this.close(result.employee)\n                                    }\n                                }).catch(e => {\n                                    this.$snotify.error('Something went wrong')\n                                    this.errors.push(e)\n                                })\n                            }, 300);\n                        })\n                    }\n                }\n            },\n            cancel(){\n                this.clear()\n            },\n            isEdit(){},\n            async loadSingleEmployee() {\n                new Promise(resolve => {\n                    setTimeout(() => {\n                        resolve('resolved');\n                        this.showLoading = true\n                        employeeHandler.get(this.$route.params.id).then(res => {\n                            this.showLoading = true                          \n                            if (res.data.statusCode === 200) {\n                                let result = res.data.data[0]\n                                window.console.log(1212121,result)\n                                if(result){\n                                    this.employee = result\n                                    this.employeeName = result.employeeId +'-'+result.firstName + ' ' + result.lastName\n                                    if(this.$route.query.type == 'edit'){\n                                        window.console.log(1,this.$route.query)\n                                        this.getEmployment()\n                                    }else{\n                                        window.console.log(2,this.$route.query)\n                                        this.loadSegment()\n                                        this.addRow()\n                                    }\n                                }\n                            }\n                        })\n                    }, 300);\n                })\n            },\n            async getEmployment(){\n                new Promise(resolve => {\n                    setTimeout(() => {\n                        resolve('resolved');\n                        this.showLoading = true\n                        employeeHandler.getEmploymentByEmployee(this.$route.params.record_id).then(res => {\n                            this.showLoading = true\n                            if (res.data.statusCode === 200) {\n                                this.employmentSingle = res.data.data[0]\n                                if(this.employmentSingle){\n                                    this.natureRecordSelected   = this.employmentSingle.natureRecord\n                                    this.natureContractSelected = this.employmentSingle.natureContract\n                                    this.locationSelected       = this.employmentSingle.location\n                                    this.positionSelected       = this.employmentSingle.position\n                                    this.natureSalarySelected   = this.employmentSingle.natureSalary\n                                    this.salaryTypeSelected     = this.employmentSingle.salaryType\n                                    this.currencySelected       = this.employmentSingle.currency\n                                    this.employmentRecord       = this.employmentSingle\n                                    this.workDaySelected        = this.employmentSingle.workDay\n                                    this.startingTimeSelected   = this.employmentSingle.startingTime\n                                    this.applyOvertime          = this.employmentSingle.applyOvertime\n                                    this.recordDate             = this.employmentSingle.date\n                                    this.BenefiteList           = this.employmentSingle.benefit\n                                    this.segmentList            = this.employmentSingle.segment  \n                                    this.group                  = this.employmentSingle.group  \n                                }\n                                this.changeSalaryType()    \n                                this.showLoading            = false \n                            }             \n                        })\n                    }, 300);\n                })\n            },\n            // async loadEmploymentRecord(){\n            //     new Promise(resolve => {\n            //         setTimeout(() => {\n            //             resolve('resolved');\n            //             this.showLoading = true\n            //             employeeHandler.getEmploymentListByEmployee(this.$route.params.id).then(res => {\n            //                 this.showLoading = false\n            //                 this.employmentList = res\n            //                 if(this.employmentList){\n            //                     this.employmentOld = this.employmentList.filter(m => m.status === 1)\n            //                     this.employment_id = this.employmentOld[0].id\n            //                 }\n            //             })\n            //         }, 300);\n            //     })\n            // },\n            close(data){\n                this.clear()\n                if (this.$route.params.query !== undefined) {\n                    window.history.go(-1)\n                } else {\n                    this.$router.push({\n                        name: 'Payroll', params: {\n                            data: data\n                        }\n                    })\n                }\n            },\n            clear(){\n                this.natureRecordSelected   = {id: \"new_employment\", name: \"New Employment\"},\n                this.natureContractSelected = {id: \"fixed_duration_contract\", name: \"Fixed Duration Contract\"},\n                this.locationSelected       = {}\n                this.natureSalarySelected   = {id: \"gross_amount\", name: \"Gross Amount\"}\n                this.salaryTypeSelected     = 'Monthly'\n                this.employmentRecord       = {}\n                this.workDaySelected        = {}\n                this.startingTimeSelected   = {}\n                this.positionSelected       = {}\n                this.applyOvertime          = false\n                this.recordDate             = kendo.toString(new Date(), 'yyyy-MM-dd')\n                this.BenefiteList           = []\n                this.segmentList            = []\n                this.group                  = ''\n            },\n            changeSalaryType(){\n                if(this.salaryTypeSelected == 'Hourly'){\n                    this.salaryPer = 'per Hour'\n                }else{\n                    this.salaryPer = 'per Month'\n                }\n                window.console.log(1, this.salaryTypeSelected)\n            },\n            async loadGroup(){\n                new Promise(resolve => {\n                    setTimeout(() => {\n                        resolve('resolved');\n                        this.showLoading = true\n                        payrollHandler.getGroup().then(res => {\n                            if(res.data.length > 0){\n                                this.groups = res.data\n                            }\n                            this.showLoading = false\n                        })\n                    }, 300);\n                })\n            },\n        },\n        mounted: async function () {\n            await this.loadPosition()\n            await this.loadLocation()\n            await this.loadComponent()\n            await this.loadCurrency()\n            await this.loadAccount()\n            await this.loadGroup()\n            // await this.loadSingleEmployee()\n        },\n        watch: {\n            '$route': 'loadAccount'\n        }\n    }\n\n</script>\n<style scoped>\n    .small_sidebar {\n        height: 97%;\n        position: relative;\n        padding: 12px;\n    }\n    .hide_small_bar_class {\n        max-width: 0;\n        transition: .5s ease-in;\n        flex: 0 0 0;\n        padding: 0;\n    }\n\n    .hide_big_bar_class {\n        max-width: 100%;\n        transition: .5s ease-in;\n        flex: 0 0 100%;\n    }\n    .iconArrow {\n        right: -35px;\n        position: absolute;\n        bottom: -10px;\n    }\n    .iconArrowHide {\n        position: absolute;\n        right: -7px;\n        bottom: -10px;\n    }\n    .theme--light.v-data-table > .v-data-table__wrapper > table > tbody > tr:hover:not(.v-data-table__expanded__content):not(.v-data-table__empty-wrapper){\n        background-color: transparent !important;\n    }\n    .detial_smallside_p{\n        position: absolute;\n        bottom: 10px;\n    }   \n    .k-scrollbar .k-scrollbar-vertical .k-grid-header{\n        width: 0px!important;\n        padding-right: 16px!important;\n        \n    }\n</style>"]}]}