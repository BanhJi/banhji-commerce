{"remainingRequest":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/macos/Desktop/banhji-0.2/banhji-commerce/src/views/suppliers/purchase/purchase_recurring/RecurringPurchase.vue?vue&type=style&index=0&id=4c86372a&scoped=true&lang=css&","dependencies":[{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/src/views/suppliers/purchase/purchase_recurring/RecurringPurchase.vue","mtime":1642155812745},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/@vue/cli-service/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLmItc2VhcmNoOmJlZm9yZSB7CiAgICBjb2xvcjogI2ZmZiAhaW1wb3J0YW50Owp9Cg=="},{"version":3,"sources":["RecurringPurchase.vue"],"names":[],"mappingsqfA;AACA;AACA","file":"RecurringPurchase.vue","sourceRoot":"src/views/suppliers/purchase/purchase_recurring","sourcesContent":["<template>\n    <v-row>\n        <v-col sm=\"12\" cols=\"12\" class=\"grayBg px-6\">\n            <v-card color=\"white\" class=\"pa-3 no_border\" elevation=\"0\">\n            <v-row>\n                <v-col sm=\"9\" cols=\"12\" class=\"py-0\">\n                <h2 class=\"mb-0 font_20\">{{ $t(\"recurring_purchases\") }}</h2>\n                <p class=\"mb-0\">{{ $t(\"recurring_purchase_payable_desc\") }}</p>\n                </v-col>\n                </v-row>\n                <v-row class=\"\">\n                    <v-col sm=\"4\" cols=\"12\" class=\"py-0\">\n                        <v-select\n                            class=\"mt-1\"\n                            :items=\"dateSorters\"\n                            v-model=\"mDateSorter\"\n                            @change=\"onSorterChanges\"\n                            clearable\n                            outlined\n                            placeholder=\"ALL\"\n                        />\n                    </v-col>\n\n                    <v-col sm=\"3\" cols=\"12\" class=\"py-0\">\n                        <app-datepicker\n                            :initialDate=\"startDate\"\n                            @emitDate=\"startDate = $event\"\n                        />\n                    </v-col>\n\n                    <v-col sm=\"3\" cols=\"12\" class=\"py-0\">\n                        <app-datepicker\n                            :initialDate=\"endDate\"\n                            @emitDate=\"endDate = $event\"\n                        />\n                    </v-col>\n\n                    <v-col sm=\"1\" cols=\"1\" class=\"pt-1\">\n                        <v-btn color=\"primary white--text\" @click=\"searchTransaction\">\n                            <i class=\"b-search\" style=\"font-size: 18px; color:#fff\"/>\n                        </v-btn>\n                    </v-col>\n                </v-row>\n                <!-- loading -->\n                <LoadingMe\n                    :isLoading=\"showLoading\"\n                    :fullPage=\"false\"\n                    type=\"loading\"\n                    :myLoading=\"true\"\n                >\n                </LoadingMe>\n\n                <v-row class=\"mt-0\">\n                    <v-col sm=\"12\" cols=\"12\" class=\"py-0\">\n                        <template>\n                            <kendo-datasource\n                                ref=\"gridTransactionDS\"\n                                :group=\"group\"\n                                :data=\"recurringList\"\n                            />\n                            <kendo-grid\n                                id=\"gridPurchaseRecurring\"\n                                class=\"grid-function\"\n                                :data-source-ref=\"'gridTransactionDS'\"\n                                :editable=\"false\"\n                                :groupable=\"true\"\n                                :navigatable=\"true\"\n                                :noRecords=\"true\"\n                                :schema-model-id=\"'id'\"\n                                :scrollable-virtual=\"true\"\n                            >\n                                <!--                <kendo-grid-toolbar class=\"k-grid-toolbar\">\n                                                                  <button type=\"button\" class=\"k-button\" v-on:click=\"clickMe\">Create Custom</button>\n                                                                </kendo-grid-toolbar>-->\n                                <!--                <kendo-grid-column-->\n                                <!--                  :field=\"'check'\"-->\n                                <!--                  :title=\"'-'\"-->\n                                <!--                  :headerTemplate=\"headerTemplate\"-->\n                                <!--                  :template=\"checkTemplate\"-->\n                                <!--                  :width=\"50\"-->\n                                <!--                  :column-menu=\"false\"-->\n                                <!--                  :headerAttributes=\"{-->\n                                <!--                    style: 'background-color: #EDF1F5;',-->\n                                <!--                    class: 'text-center',-->\n                                <!--                  }\"-->\n                                <!--                  :attributes=\"{ style: 'text-align: center' }\"-->\n                                <!--                />-->\n                                <kendo-grid-column\n                                    :field=\"'name'\"\n                                    :attributes=\"{ class: 'tb_name_td' }\"\n                                    :title=\"$t('name')\"\n                                    :width=\"200\"\n                                    :template=\"'<span>#=name#</span>'\"\n                                    :headerAttributes=\"{ style: 'background-color: #EDF1F5' }\"\n                                />\n                                <kendo-grid-column\n                                    :field=\"'customerName'\"\n                                    :title=\"$t('supplier_name')\"\n                                    :width=\"200\"\n                                    :template=\"'<span>#=customerName#</span>'\"\n                                    :headerAttributes=\"{ style: 'background-color: #EDF1F5' }\"\n                                />\n                                <kendo-grid-column\n                                    :field=\"'txnNextDate'\"\n                                    :title=\"$t('next_date')\"\n                                    :width=\"150\"\n                                    :template=\"dateFormat\"\n                                    :headerAttributes=\"{ style: 'background-color: #EDF1F5' }\"\n                                />\n                                <kendo-grid-column\n                                    :field=\"'transactionType'\"\n                                    :title=\"$t('tran_type')\"\n                                    :width=\"150\"\n                                    :template=\"'<span>#=transactionType.name?transactionType.name:``#</span>' \"\n                                    :headerAttributes=\"{ style: 'background-color: #EDF1F5' }\"\n                                />\n                                <kendo-grid-column\n                                    :field=\"'type'\"\n                                    :title=\"$t('type')\"\n                                    :width=\"100\"\n                                    :template=\"'<span>#=type#</span>'\"\n                                    :headerAttributes=\"{ style: 'background-color: #EDF1F5' }\"\n                                />\n                                <kendo-grid-column\n                                    :field=\"'amount'\"\n                                    :title=\"$t('amount')\"\n                                    :width=\"100\"\n                                    :attributes=\"{ style: 'text-align: right' }\"\n                                    :template=\"'<span>#=kendo.toString(amount, decimalFormat)#</span>'\"\n                                    :headerAttributes=\"{ style: 'background-color: #EDF1F5, color: green !important',}\"\n                                />\n                                <kendo-grid-column\n                                    :field=\"''\"\n                                    :title=\"$t(' ')\"\n                                    :width=\"60\"\n                                    :command=\"[{ iconClass: 'k-icon k-i-file-txt .k-i-txtUnicode: 6f', text: ' ', click: goToConvert }]\"\n                                    :headerAttributes=\"{ style: 'text-align: left; background-color: #EDF1F5', }\"\n                                />\n                            </kendo-grid>\n                        </template>\n                    </v-col>\n                </v-row>\n            </v-card>\n        </v-col>\n    </v-row>\n</template>\n\n<script>\nimport kendo from \"@progress/kendo-ui\";\nimport RecurringModel from \"@/scripts/invoice/model/RecurringDetail\";\nimport DatePickerComponent from \"@/components/custom_templates/DatePickerComponent\";\n\nconst $ = require(\"jquery\");\nconst recurringHandler = require(\"@/scripts/invoice/handler/recurringHandler\");\nconst billingHandler = require(\"@/scripts/invoice/handler/billingHandler\");\nconst recurringModel = new RecurringModel({});\nexport default {\n    name: \"RecurringPurchase\",\n    components: {\n        LoadingMe: () => import(`@/components/Loading`),\n        \"app-datepicker\": DatePickerComponent,\n    },\n    data: () => ({\n        showLoading: false,\n        isLoaded: false,\n        recurringList: [],\n        dateSorters: ['Today', 'This Week', 'This Month', 'This Year', 'Last Month' , 'Last Year'],\n        mDateSorter: \"Today\",\n        startDate: new Date().toISOString().substr(0, 10),\n        endDate: new Date().toISOString().substr(0, 10),\n        recurring: recurringModel,\n        group: {field: \"customerName\"},\n        schemaModelFields: {\n            id: {editable: false, nullable: true},\n            check: {type: \"boolean\"},\n        },\n        transportUrl: recurringHandler.url(\"\"),\n    }),\n    methods: {\n        initToolbar(that) {\n            let grid = $(\"#gridPurchaseRecurring\").data(\"kendoGrid\");\n            let gridElement = grid.element;\n            let toolbarElement = gridElement.find(\".k-grid-toolbar\");\n            toolbarElement.on(\"click\", \".reload\", function (e) {\n                e.preventDefault();\n                onReloadData(that);\n                // grid.dataSource.read()\n            });\n            toolbarElement.on(\"click\", \".to-purchase\", function (e) {\n                e.preventDefault();\n                onToPurchaseClick(that, data);\n            });\n            $(\"#header-chb\").change(function (ev) {\n                let checked = ev.target.checked;\n                data = [];\n                $(\".row-checkbox\").each(function (idx, item) {\n                    if (checked) {\n                        if (\n                            !$(item)\n                                .closest(\"tr\")\n                                .is(\".k-state-selected\")\n                        ) {\n                            $(item).click();\n                        }\n                    } else {\n                        if (\n                            $(item)\n                                .closest(\"tr\")\n                                .is(\".k-state-selected\")\n                        ) {\n                            $(item).click();\n                        }\n                    }\n                });\n            });\n            let checkedIds = {};\n            let data = [];\n\n            function selectRow() {\n                let checked = this.checked,\n                    row = $(this).closest(\"tr\"),\n                    grid = $(\"#gridPurchaseRecurring\").data(\"kendoGrid\"),\n                    dataItem = grid.dataItem(row);\n\n                checkedIds[dataItem.id] = checked;\n                if (checked) {\n                    //-select the row\n                    row.addClass(\"k-state-selected\");\n                    data.push({\n                        recurringId: dataItem.id,\n                        id: dataItem.txnId,\n                        txnNextDate: dataItem.txnNextDate,\n                        checked: checked,\n                    });\n                } else {\n                    //-remove selection\n                    row.removeClass(\"k-state-selected\");\n                    const index = data.findIndex((item) => {\n                        return dataItem.id === item.recurringId;\n                    });\n                    data.splice(index, 1, {\n                        recurringId: dataItem.id,\n                        id: dataItem.txnId,\n                        txnNextDate: dataItem.txnNextDate,\n                        checked: checked,\n                    });\n                }\n            }\n\n            function onToPurchaseClick(that, data) {\n                const selectedRow = data.filter((m) => {\n                    return m.checked === true;\n                });\n                that.recurringToPurchases(selectedRow);\n            }\n\n            function onReloadData(that) {\n                that.searchTransaction();\n            }\n\n            grid.table.on(\"click\", \".row-checkbox\", selectRow);\n        },\n        toolbarTemplate: function () {\n            const templateHtml =\n                '<span style=\"float: right; margin-bottom: 8px;z-index: 116;position: absolute;right: 21px;top: 14px;\"' +\n                '<a class=\"k-pager-refresh k-link k-button reload\" title=\"Refresh\"><span class=\"k-icon k-i-reload\"></span></a>' +\n                \"</span>\" +\n                '<span style=\"float: right; margin-bottom: 8px;z-index: 116;position: absolute;right: 60px;top: 14px;\"' +\n                '<a class=\"k-pager-refresh k-link k-button to-purchase\" title=\"Convert to purchase\" @click=\"onToPurchaseClick\"><span class=\"k-icon k-i-edit-tools\"></span></a>' +\n                \"</span>\";\n\n            return kendo.template(templateHtml);\n        },\n        async recurringToPurchases(data) {\n            if (data.length > 0) {\n                this.$swal({\n                    title: \"Are you sure?\",\n                    text: \"Convert to invoice\",\n                    icon: \"info\",\n                    showCancelButton: true,\n                    confirmButtonColor: \"#4d4848\",\n                    cancelButtonColor: \"#ED1A3A\",\n                    confirmButtonText: \"Yes, convert it!\",\n                }).then((result) => {\n                    if (result.value) {\n                        for (const itm of data) {\n                            this.onConvertToPurchase(\n                                itm.recurringId,\n                                itm.id,\n                                itm.txnNextDate,\n                                false\n                            );\n                            // const index = this.recurringList.findIndex(item => {\n                            //   return (itm.recurringId === item.id)\n                            // })\n                            // this.recurringList.splice(index, itm)\n                        }\n                        this.searchTransaction();\n                    }\n                });\n            }\n        },\n        parameterMap: function (options, operation) {\n            if (operation !== \"read\" && options) {\n                return kendo.stringify(options);\n            }\n        },\n        async searchTransaction() {\n            new Promise((resolve) => {\n                setTimeout(() => {\n                    resolve(\"resolved\");\n                    this.showLoading = true;\n                    const startDate = this.startDate;\n                    const endDate = this.endDate;\n                    const strFilter =\n                        \"?start=\" +\n                        startDate +\n                        \"&end=\" +\n                        endDate +\n                        \"&type=Recurring Purchase\";\n                    recurringHandler.list(strFilter).then((res) => {\n                        if (res.data.statusCode === 200) {\n                            this.recurringList = res.data.data;\n                        }\n                        this.showLoading = false;\n                    });\n                }, 10);\n            });\n        },\n        onSorterChanges(val) {\n            let today = new Date();\n            switch (val) {\n                case \"Today\":\n                    this.startDate = kendo.toString(today, \"yyyy-MM-dd\");\n                    this.endDate = kendo.toString(today, \"yyyy-MM-dd\");\n\n                    break;\n                case \"This Week\":\n                    var first = today.getDate() - today.getDay(),\n                        last = first + 6;\n\n                    this.startDate = kendo.toString(\n                        new Date(today.setDate(first)),\n                        \"yyyy-MM-dd\"\n                    );\n                    this.endDate = kendo.toString(\n                        new Date(today.setDate(last)),\n                        \"yyyy-MM-dd\"\n                    );\n\n                    break;\n                case \"This Month\":\n                    this.startDate = kendo.toString(\n                        new Date(today.getFullYear(), today.getMonth(), 1),\n                        \"yyyy-MM-dd\"\n                    );\n                    this.endDate = kendo.toString(\n                        new Date(today.getFullYear(), today.getMonth(), 31),\n                        \"yyyy-MM-dd\"\n                    );\n\n                    break;\n                case \"This Year\":\n                    this.startDate = kendo.toString(\n                        new Date(today.getFullYear(), 0, 1),\n                        \"yyyy-MM-dd\"\n                    );\n                    this.endDate = kendo.toString(\n                        new Date(today.getFullYear(), 11, 31),\n                        \"yyyy-MM-dd\"\n                    );\n                 break\n                case \"Last Month\":\n                  this.startDate = kendo.toString(new Date(today.getFullYear(), today.getMonth(), -30), 'yyyy-MM-dd');\n                  this.endDate = kendo.toString(new Date(today.getFullYear(), today.getMonth() -1, +31), 'yyyy-MM-dd');\n        \n                  break\n                case \"Last Year\":\n                  this.startDate = kendo.toString(new Date(today.getFullYear(), -11, -30), 'yyyy-MM-dd');\n                  this.endDate = kendo.toString(new Date(today.getFullYear(), -1, +31), 'yyyy-MM-dd');\n                    break;\n                default:\n                    this.startDate = \"\";\n                    this.endDate = \"\";\n            }\n        },\n        headerTemplate() {\n            return `<input type='checkbox' id='header-chb' class='k-checkbox header-checkbox'>`;\n        },\n        checkTemplate(dataItem) {\n            return `<input type='checkbox' #= ${dataItem.check} ? \\\\'checked=\"checked\"\\\\' : '' # class='k-checkbox row-checkbox' />`;\n        },\n        goToConvert(e) {\n            e.preventDefault();\n            let grid = kendo.jQuery(\"#gridPurchaseRecurring\").data(\"kendoGrid\");\n            let dataItem = grid.dataItem($(e.currentTarget).closest(\"tr\"));\n            const txnId = dataItem.txnId;\n            const id = dataItem.id;\n            const txnNextDate = dataItem.txnNextDate;\n            this.$swal({\n                title: \"Are you sure?\",\n                text: \"Convert to purchase\",\n                icon: \"info\",\n                showCancelButton: true,\n                confirmButtonColor: \"#4d4848\",\n                cancelButtonColor: \"#ED1A3A\",\n                confirmButtonText: \"Yes, convert it!\",\n            }).then((result) => {\n                if (result.value) {\n                    this.showLoading = true;\n                    this.onConvertToPurchase(id, txnId, txnNextDate, true);\n                }\n            });\n        },\n        async onConvertToPurchase(id, txnId, txnNextDate, isGoToView) {\n            new Promise((resolve) => {\n                setTimeout(() => {\n                    resolve(\"resolved\");\n                    let data = {\n                        id: txnId,\n                        recurringId: id,\n                        transactionDate: txnNextDate,\n                        type: \"Purchase\",\n                        actionType: \"recurring\",\n                    };\n                    this.showLoading = true;\n                    billingHandler\n                        .createPurchase(data)\n                        .then((response) => {\n                            if (response.data.statusCode === 201) {\n                                this.$snotify.success(\"Successfully\");\n                                const res = response.data.data;\n                                this.showLoading = false;\n                                if (res.id) {\n                                    if (isGoToView) {\n                                        this.goTo(res.id);\n                                    }\n                                }\n                            }\n                        })\n                        .catch((e) => {\n                            this.showLoading = false;\n                            this.$snotify.error(\"Something went wrong\");\n                            this.errors.push(e);\n                        });\n                }, 10);\n            });\n        },\n        goTo(id) {\n            this.$router.push({\n                path: \"credit_purchase_view/\" + id,\n                name: \"Credit Purchase View\",\n                params: {id: id},\n            });\n        },\n        dateFormat(dataItem) {\n            return kendo.toString(\n                new Date(dataItem.txnNextDate),\n                `${this.recurring.dateFormat}`\n            );\n        },\n        customerName(dataItem) {\n            if (dataItem.hasOwnProperty(\"customer\")) {\n                if (dataItem.customer.hasOwnProperty(\"id\")) {\n                    return dataItem.customer.name;\n                }\n            } else {\n                return \"\";\n            }\n        },\n        rowNumberTmpl(dataItem) {\n            let ds = this.$refs.gridTransactionDS.kendoWidget(),\n                index = ds.indexOf(dataItem);\n            return index + 1;\n        },\n        async loadRecurringPurchase() {\n            new Promise((resolve) => {\n                setTimeout(() => {\n                    resolve(\"resolved\");\n                    this.showLoading = true;\n                    recurringHandler.list().then((res) => {\n                        if (res.data.statusCode === 200) {\n                            this.recurringList = res.data.data;\n                        }\n                        this.showLoading = false;\n                    });\n                }, 10);\n            });\n        },\n    },\n    mounted: async function () {\n        await this.loadRecurringPurchase();\n        // this.initToolbar(this);\n    },\n    computed: {},\n    watch: {\n        // '$route': 'loadViewInvoice'\n    },\n};\n</script>\n<style scoped>\n.b-search:before {\n    color: #fff !important;\n}\n</style>\n"]}]}