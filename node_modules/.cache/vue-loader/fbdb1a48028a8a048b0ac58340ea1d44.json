{"remainingRequest":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/macos/Desktop/banhji-0.2/banhji-commerce/src/views/finances/NewLoan.vue?vue&type=style&index=0&id=05f88974&scoped=true&lang=css&","dependencies":[{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/src/views/finances/NewLoan.vue","mtime":1638499443232},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/@vue/cli-service/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgpAbWVkaWEgKG1pbi13aWR0aDogMTI2NHB4KSB7CiAgICAuY29udGFpbmVyIHsKICAgICAgICAvKiBtYXgtd2lkdGg6IDExODVweDsgKi8KICAgICAgICBtYXgtd2lkdGg6IDEwODBweCAhaW1wb3J0YW50OwogICAgfQp9CgpAbWVkaWEgKG1heC13aWR0aDogNTc2cHgpIHsKICAgIC5tYi02IHsKICAgICAgICBtYXJnaW4tYm90dG9tOiAwICFpbXBvcnRhbnQ7CiAgICB9Cn0K"},{"version":3,"sources":["NewLoan.vue"],"names":[],"mappingsuiBA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"NewLoan.vue","sourceRoot":"src/views/finances","sourcesContent":["<template>\n    <v-app>\n        <v-container>\n            <v-row>\n                <v-col cols=\"12\" sm=\"12\">\n                    <v-card\n                        outlined\n                        dense\n                        class=\"pa-4 no_border rounded-sm\"\n                        color=\"white\"\n                    >\n                        <v-form ref=\"form\" v-model=\"valid\" lazy-validation>\n                            <v-card outlined dense class=\"no_border\">\n                                <h2 class=\"mb-0\">{{ $t(\"add_new_loan\") }}</h2>\n                                <v-icon\n                                    @click=\"cancel\"\n                                    style=\"\n                                        cursor: pointer;\n                                        color: #333;\n                                        font-size: 40px;\n                                    \"\n                                    class=\"float-right\"\n                                >close\n                                </v-icon>\n                            </v-card>\n                            <v-card\n                                outlined\n                                dense\n                                class=\"px-4 no_border mb-4\"\n                                color=\"grayBg\"\n                            >\n                                <!-- Form -->\n                                <v-row>\n                                    <v-col sm=\"4\" cols=\"12\" class=\"pb-0\">\n                                        <label class=\"label\">{{ $t(\"date\") }}</label>\n                                        <app-datepicker\n                                            :initialDate=\"loan.issuedDate\"\n                                            @emitDate=\"loan.issuedDate = $event\"\n                                        />\n\n                                        <label class=\"label\"> {{ $t(\"name\") }}</label>\n                                        <v-text-field\n                                            name=\"loan\"\n                                            v-model=\"loan.name\"\n                                            class=\"mt-1\"\n                                            :rules=\"[ (v) => !!v || 'Name is required' ]\"\n                                            outlined\n                                            required\n                                        />\n                                    </v-col>\n                                    <v-col sm=\"4\" cols=\"12\" class=\"pb-0\">\n                                        <label class=\"label\">{{ $t(\"financial_institutions\") }}</label>\n                                        <v-select\n                                            id=\"bankSelector\"\n                                            class=\"mt-1\"\n                                            tag=\"financialInstituteSelector\"\n                                            :items=\"banks\"\n                                            item-value=\"uuid\"\n                                            item-text=\"name\"\n                                            v-model=\"loan.financialInstitutions\"\n                                            :rules=\"[ (v) => !!v || 'Financial institute is required' ]\"\n                                            no-data-text=\"No data found.\"\n                                            return-object\n                                            outlined\n                                            loading=\"true\"\n                                            single-line\n                                        >\n                                            <template slot=\"selection\" slot-scope=\"{ item }\">\n                                             {{ item.name }}\n                                            </template>\n                                            <template slot=\"item\" slot-scope=\"{ item }\">\n                                               {{ item.name }}\n                                            </template>\n                                        </v-select>\n\n                                        <label class=\"label\">{{ $t(\"type_of_loan\") }}</label>\n                                        <v-select\n                                            class=\"mt-1\"\n                                            :items=\"loanTypes\"\n                                            item-value=\"uuid\"\n                                            item-text=\"name\"\n                                            v-model=\"loan.typeOfLoan\"\n                                            no-data-text=\"No data found.\"\n                                            return-object\n                                            :rules=\"[ (v) => !!v || 'Type of loan institute is required' ]\"\n                                            outlined\n                                        >\n                                            <template slot=\"selection\" slot-scope=\"{ item }\">\n                                                {{ item.code }} - {{ item.name }}\n                                            </template>\n                                            <template slot=\"item\" slot-scope=\"{ item }\">\n                                                {{ item.code }} - {{ item.name }}\n                                            </template>\n                                        </v-select>\n                                    </v-col>\n                                    <v-col sm=\"4\" cols=\"12\" class=\"pb-0\">\n                                        <label class=\"label\">{{ $t(\"request_amount\") }}</label>\n                                        <!--                                        <v-text-field-->\n                                        <!--                                            class=\"mt-1\"-->\n                                        <!--                                            v-model=\"loan.amount\"-->\n                                        <!--                                            outlined-->\n                                        <!--                                            required-->\n                                        <!--                                        />-->\n                                        <vue-numeric\n                                            style=\"width: 100%;font-size: 18px;background-color: #ffff;border-radius: 4px;text-align: right;border: 1px solid #ddd !important; padding: 9px !important; margin-bottom: 15px;\"\n                                            class=\"mt-1 mr-2 mt-0 text-bold pa-4\"\n                                            currency=\"\"\n                                            separator=\",\"\n                                            v-bind:minus=\"false\"\n                                            v-bind:precision=\"inputDec\"\n                                            v-model=\"loan.amount\"\n                                            :rules=\"[v => !!v || 'Amount is required']\"\n                                            outlined\n                                        >\n                                        </vue-numeric>\n                                        <label class=\"label\">{{ $t(\"loan_currency\") }}</label>\n                                        <v-select\n                                            id=\"loanCurrency\"\n                                            class=\"mt-1\"\n                                            :items=\"currencyList\"\n                                            item-value=\"uuid\"\n                                            item-text=\"code\"\n                                            v-model=\"loan.currency\"\n                                            no-data-text=\"No data found.\"\n                                            return-object\n                                            outlined\n                                            loading=\"true\"\n                                            :rules=\"[ (v) => !!v || 'Currency is required' ]\"\n                                            single-line\n                                        >\n                                            <template\n                                                class=\"v-serlect\"\n                                                slot=\"selection\"\n                                                slot-scope=\"{ item }\"\n                                            >\n                                                {{ item.code }} - {{ item.name }}\n                                            </template>\n                                            <template\n                                                class=\"v-serlect\"\n                                                slot=\"item\"\n                                                slot-scope=\"{ item }\"\n                                            >\n                                                {{ item.code }} - {{ item.name }}\n                                            </template>\n                                        </v-select>\n                                    </v-col>\n                                </v-row>\n                                <v-row>\n                                    <v-col sm=\"12\" cols=\"12\" class=\"py-0\">\n                                        <label class=\"label\"> {{ $t(\"description\") }}</label>\n                                        <v-textarea no-resize height=\"90px\"\n                                                    id=\"loandDescription\"\n                                                    class=\"mt-1\"\n                                                    outlined\n                                                    v-model=\"loan.description\"\n                                                    rows=\"3\"\n                                                    required\n                                        />\n                                    </v-col>\n                                </v-row>\n                                <!-- End form input -->\n                            </v-card>\n                            <v-divider/>\n                            <!-- Footer -->\n                            <v-card outlined dense class=\"no_border function_footer\">\n                                <!-- Warning Message -->\n                                <v-alert type=\"warning\"\n                                         v-model=\"alert\"\n                                         dismissible>\n                                    <span v-html=\"errorMessage\"/>\n                                </v-alert>\n                                <v-btn\n                                    outlined\n                                    class=\"text-capitalize  black--text float-left\"\n                                    color=\"primary\"\n                                    ref=\"btnCancel\"\n                                    @click=\"cancel\"\n                                >{{ $t(\"cancel\") }}\n                                </v-btn\n                                >\n                                <v-btn\n                                    @click=\"onSaveOptionClick(SaveOption.SAVENEW)\"\n                                    color=\"primary\"\n                                    class=\"ml-2 float-right text-capitalize  white--text\"\n                                >{{ $t(\"save_new\") }}\n                                </v-btn\n                                >\n                                <v-btn\n                                    @click=\"onSaveOptionClick(SaveOption.SAVECLOSE)\"\n                                    color=\"secondary\"\n                                    class=\"float-right white--text text-capitalize \"\n                                >{{ $t(\"save_close\") }}\n                                </v-btn\n                                >\n                            </v-card>\n                        </v-form>\n                    </v-card>\n                </v-col>\n            </v-row>\n            <LoadingMe\n                :isLoading=\"isLoading\"\n                :fullPage=\"true\"\n                :myLoading=\"true\"\n                :alertMessage=\"loadingAlert\"\n                :color=\"loadingColorAlert\"\n                :alertText=\"loadingTextAlert\"\n            />\n            <LoadingMe\n                :isLoading=\"showLoading\"\n                :fullPage=\"true\"\n                :myLoading=\"true\"/>\n            <LoadingMe\n                :isLoading=\"bankLoading\"\n                :fullPage=\"true\"\n                :myLoading=\"true\"/>\n        </v-container>\n    </v-app>\n</template>\n\n<script>\n// component\nimport LoadingMe from \"@/components/Loading\";\n// import {i18n} from \"@/i18n\";\nimport kendo from \"@progress/kendo-ui\";\nimport DatePickerComponent from \"@/components/custom_templates/DatePickerComponent\";\nimport {CurrencyModel} from \"@/scripts/model/AppModels\";\n// model\nimport LoanModel from \"@/scripts/financing/model/Loan\"\n// handler\nconst loanHandler = require(\"@/scripts/financing/handler/loanHandler\")\n\nconst {bankHandler, currencyHandler, entityTypeHandler} = require(\"@/scripts/AppHandlers\");\nconst {LoanStatus, EntityType, SaveOption} = require(\"@/scripts/default_setup/Collections\");\n\nconst currencyType = {\n    FUNCTIONAL_CURRENCY: 'fun-c',\n    TRANSACTION_CURRENCY: 'txn-c',\n    REPORTING_CURRENCY: 'rpt-c',\n    TAX_EXCHANGE_CURRENCY: 'tax-c',\n}\nimport VueNumeric from 'vue-numeric'\nimport saleFormContentHandler from \"@/scripts/saleFormContentHandler\";\nexport default {\n    name: \"NewLoan\",\n    components: {\n        LoadingMe,\n        \"app-datepicker\": DatePickerComponent,\n        VueNumeric\n    },\n    props: {\n        initLoan: {},\n    },\n    data: () => ({\n        /* Obj */\n        loan: new LoanModel({}),\n        // Form validation\n        valid: true,\n        isEdit: false,\n        bankLoading: false,\n        saveMode: '',\n        alert: false,\n        errorMessage: '',\n        SaveOption: SaveOption,\n        // LoadingMe\n        isLoading: false,\n        loadingAlert: false,\n        loadingColorAlert: \"\",\n        loadingTextAlert: \"\",\n        // Other\n        banks: [],\n        currencies: [],\n        loanTypes: [],\n        showLoading: false,\n        currencyList: [],\n        inputDec: 2,\n        numberFormat: '',\n        saleFormContent: {}\n    }),\n    methods: {\n        /* Set Default Data */\n        setDefaultData() {\n            this.loan = new LoanModel({})\n            this.loan.issuedDate = new Date().toISOString().substr(0, 10)\n            this.loan.status = LoanStatus.PENDING\n            this.loan.typeOfLoan = this.loanTypes[0]\n            this.loan.currency = this.currencyList[0]\n        },\n        getLastDayOfTheMonth(date) {\n            window.console.log(date.getMonth());\n            return new Date(date.getFullYear(), date.getMonth() + 1, 0).getDate();\n        },\n        toNumberOfYearMonth(numberOfMonth) {\n            window.console.log(numberOfMonth);\n            let year = parseInt(parseInt(numberOfMonth) / 12);\n            let month = parseInt(numberOfMonth) - year * 12;\n            return {\n                year: year,\n                month: month,\n            };\n        },\n        onRequestDateChanged() {\n            this.menuJDate1 = false;\n            let exDate = new Date(this.request_date);\n            let duration = parseInt(this.loan.duration);\n            let isLastDayOfTheMonth = false;\n            let lastDay = this.getLastDayOfTheMonth(exDate);\n            if (parseInt(lastDay) == parseInt(exDate.getDate())) {\n                isLastDayOfTheMonth = true;\n            }\n            let numOfMonths = duration + exDate.getMonth() + 1;\n            let addMonth = this.toNumberOfYearMonth(numOfMonths);\n            if (isLastDayOfTheMonth) {\n                let month = addMonth.month;\n                let year = parseInt(exDate.getFullYear()) + addMonth.year;\n                let day = parseInt(this.getLastDayOfTheMonth(new Date(year, month, 0)));\n                /*\n                using the time to hold back the current time so the that date won't switch to other day\n                base on the ISOTime zoon with +7 for Cambodia.\n                */\n                this.exp_date = new Date(year, month - 1, day, 12, 0, 0)\n                    .toISOString()\n                    .substring(0, 10);\n            } else {\n                this.exp_date = new Date(exDate).toISOString().substr(0, 10);\n            }\n        },\n        // All Saves\n        onSaveOptionClick(mode) {\n            if (this.$refs.form.validate()) {\n                this.saveMode = mode\n                this.loan.saveOption = mode\n                this.save()\n            } else {\n                this.alertError()\n            }\n        },\n        cancel() {\n            this.$swal({\n                title: 'Are you sure?',\n                text: \"You won't be able to revert this!\",\n                icon: 'warning',\n                showCancelButton: true,\n                confirmButtonColor: '#4d4848',\n                cancelButtonColor: '#ED1A3A',\n                confirmButtonText: 'Yes, discard it!'\n            }).then((result) => {\n                if (result.value) {\n                    this.clear()\n                    this.$router.go(-1)\n                }\n            })\n        },\n        clear() {\n            // Reset Form\n            // this.$refs.form.reset();\n\n            this.isEdit = false;\n\n            // Set default data\n            this.setDefaultData()\n        },\n        save() {\n            let self = this;\n            // Convert date to ISO\n            this.loan.issuedDate = kendo.toString(new Date(this.loan.issuedDate), 'yyyy-MM-dd');\n            if(this.isEdit == false){\n                this.loan.maturityDate = ''\n                this.loan.approveDate = ''\n                this.loan.firstPaymentDate = ''\n                this.loan.number = ''\n                this.loan.duration = 0\n                this.loan.monthlyRepayment = 0\n                this.loan.paymentTerm = {}\n                this.loan.receiptDate = ''\n            }\n            // Sync Data\n            this.showLoading = true;\n            loanHandler.loanCreate(new LoanModel(this.loan))\n                .then(function (response) {\n                    if (response) {\n                        self.responseStatus(response.status);\n                    } else {\n                        self.alertError();\n                    }\n                })\n                .catch(function (error) {\n                    self.alertError(error);\n                })\n                .finally(function () {\n                    self.showLoading = false;\n                })\n        },\n        // Response Status\n        responseStatus(status) {\n            switch (status) {\n                case 200:// Ok\n                    this.showAlert()\n\n                    // Reset to default data\n                    this.clear();\n\n                    break\n                case 201:// Duplicate\n                    this.showAlert()\n\n                    // Reset to default data\n                    this.clear();\n                    break\n                default:\n                    break\n            }\n        },\n        // Sweetalert2\n        changeAlertStatus() {\n            this.loadingAlert = true\n            setTimeout(() => {\n                this.loadingAlert = false\n            }, 6200);\n        },\n        showAlert() {\n            this.showLoading = false\n            this.changeAlertStatus()\n            this.loadingTextAlert = \"Added Successful\"\n            this.loadingColorAlert = \"#3DA72E\"\n            switch (this.saveMode) {\n                case 'saveClose':// Save Close\n                    this.$swal({\n                        position: 'products',\n                        icon: 'success',\n                        title: 'Your work has been saved',\n                        showConfirmButton: true,\n                        confirmButtonColor: '#4d4848',\n                        cancelButtonColor: '#ED1A3A',\n                        confirmButtonText: 'Yes, discard it!'\n                    }).then((result) => {\n                        if (result.value) {\n                            window.history.go(-1)\n                            return false\n                        }\n                    })\n                    break;\n                default:// Save New\n                    this.$swal({\n                        position: 'products',\n                        icon: 'success',\n                        title: 'Your work has been saved',\n                        showConfirmButton: true,\n                        confirmButtonColor: '#4d4848',\n                        cancelButtonColor: '#ED1A3A',\n                        confirmButtonText: 'Yes, discard it!'\n                    })\n                    break;\n            }\n            this.saveMode = ''\n        },\n        alertError(msg) {\n            if (msg) {\n                this.$swal({\n                    position: 'center',\n                    icon: 'error',\n                    title: 'Oops...!',\n                    text: msg,\n                    showConfirmButton: true\n                })\n            } else {\n                this.showLoading = false\n                this.loadingTextAlert = \"Failed!\"\n                this.loadingColorAlert = \"#eb8334\"\n                this.changeAlertStatus()\n            }\n        },\n        async loadCurrencyData() {\n            new Promise(resolve => {\n                setTimeout(() => {\n                    resolve('resolved')\n                    this.showLoading = true\n                    currencyHandler.list(currencyType.FUNCTIONAL_CURRENCY).then(response => {\n                        if (response.data.statusCode === 200) {\n                            this.currencyList = response.data.data\n                            if(this.currencyList.length > 0){\n                                this.loan.currency = this.currencyList[0]\n                            }\n                            this.showLoading = false\n                        }\n                    }).catch()\n                    {\n                        this.showLoading = false\n                    }\n                }, 300)\n            })\n        },\n        async loadSaleFormContent() {\n            new Promise((resolve) => {\n                setTimeout(() => {\n                    resolve(\"resolved\");\n                    saleFormContentHandler.list().then((res) => {\n                        if (res.data.statusCode === 200) {\n                            const data = res.data.data;\n                            if (data.length > 0) {\n                                this.saleFormContent = data[0];\n                                this.numberFormat = 'n' + this.saleFormContent.decimal\n                                this.inputDec = parseInt(this.saleFormContent.decimal)\n                            }\n                        }\n                    });\n                }, 10);\n            });\n        },\n    },\n    watch: {\n        initLoan() {\n            this.loan = this.initLoan;\n        }\n    },\n    mounted: async function () {\n        await this.loadSaleFormContent();\n        // Set Default Data\n        if (this.initLoan) {\n            this.loan = this.initLoan;\n        }\n\n        // Call Bank List\n        this.bankLoading = true\n        let self = this\n        bankHandler.getAll()\n            .then((result) => {\n                this.banks = result.data;\n                self.bankLoading = false\n            });\n\n        // Call Loan Type\n        entityTypeHandler.getByEntityType(EntityType.LOAN)\n            .then((result) => {\n                this.loanTypes = result;\n                this.loan.typeOfLoan = this.loanTypes[0]\n            });\n\n        // Call Currency List\n        currencyHandler.getJson().then((result) => {\n            let currencylist = Object.values(result.data);\n            currencylist.forEach((value) => {\n                let cur = new CurrencyModel(value);\n                this.currencies.push(cur);\n            });\n        });\n        await this.loadCurrencyData()\n    },\n};\n</script>\n\n<style scoped>\n@media (min-width: 1264px) {\n    .container {\n        /* max-width: 1185px; */\n        max-width: 1080px !important;\n    }\n}\n\n@media (max-width: 576px) {\n    .mb-6 {\n        margin-bottom: 0 !important;\n    }\n}\n</style>\n"]}]}