{"remainingRequest":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/macos/Desktop/banhji-0.2/banhji-commerce/src/views/share_funding/donor/CustomerTypeDonor.vue?vue&type=style&index=0&id=db2da62e&scoped=true&lang=css&","dependencies":[{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/src/views/share_funding/donor/CustomerTypeDonor.vue","mtime":1639966363974},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/@vue/cli-service/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi50ZXh0X3RpcCB7CiAgbGluZS1oZWlnaHQ6IDEwcHggIWltcG9ydGFudDsKfQoKQG1lZGlhIChtYXgtd2lkdGg6IDU3NnB4KSB7Cgp9Cg=="},{"version":3,"sources":["CustomerTypeDonor.vue"],"names":[],"mappingsoBA;AACA;AACA;;AAEA;;AAEA","file":"CustomerTypeDonor.vue","sourceRoot":"src/views/share_funding/donor","sourcesContent":["<template>\n  <v-row>\n    <v-col sm=\"10\" cols=\"12\" class=\"pt-0\">\n      <div>\n        <h2  class=\"mb-0 font_20\">{{ $t('donor_type') }}</h2>\n        <!-- <p class=\"mb-0\">{{ $t('_type_desc') }} </p> -->\n      </div>\n    </v-col>\n    <v-col sm=\"2\" cols=\"12\" class=\"pt-0\">\n      <v-dialog v-model=\"dialogM2\" max-width=\"680px\">\n        <template v-slot:activator=\"{ on }\">\n          <v-btn class=\"white--text float-right text-capitalize\" color=\"primary\" v-on=\"on\"\n                 @click=\"onNewClick\">\n            {{ $t('create_new') }}\n          </v-btn>\n        </template>\n        <v-card>\n          <div class=\"modal_header\">\n                      <v-card-title>{{ $t('type') }}</v-card-title>\n          <v-icon @click=\"dialogM2 = false\">close</v-icon>\n          </div>\n\n      \n          <v-card-text class=\"modal_text_content\">\n            <v-form\n                ref=\"form\"\n                v-model=\"valid\"\n                lazy-validation>\n              <v-row class=\"pt-3\">\n                <v-col sm=\"12\" cols=\"12\" class=\"py-0\">\n                  <v-row>\n                    <v-col class=\"py-0\" sm=\"6\" cols=\"12\">\n                      <label class=\"label\">{{ $t('type_name') }}</label>\n                      <v-text-field\n                          class=\"mt-1\"\n                          outlined\n                          :rules=\"[v => !!v || $t('name_is_required')]\"\n                          v-model=\"customerType.name\"\n                          placeholder=\"Type Name\"\n                      />\n\n                      <label class=\"label\">{{ $t('abbreviation') }}</label>\n                      <v-text-field\n                          class=\"mt-1\"\n                          outlined\n                          tage=\"Abbreviation\"\n                          v-model=\"customerType.abbr\"\n                          placeholder=\"Abbr\"\n                          :rules=\"[v => !!v || $t('is_required')]\"\n                      />\n\n\n                      <label class=\"label\">{{ $t('sale_deposit') }}</label>\n                      <v-select\n                          class=\"mt-1\"\n                          outlined\n                          :items=\"accDeposit\"\n                          return-object\n                          item-text=\"name\"\n                          tage=\"PurchaseDeposit\"\n                          :rules=\"[v => !!v || $t('is_required')]\"\n                          item-value=\"id\"\n                          v-model=\"customerType.saleDepositAcc\"\n                      />\n                      <label class=\"label\">{{ $t('settlement_discount') }}</label>\n                      <v-select\n                          class=\"mt-1\"\n                          outlined\n                          return-object\n                          id=\"\"\n                          :items=\"accDiscount\"\n                          item-text=\"name\"\n                          tage=\"SettlementDiscount\"\n                          item-value=\"id\"\n                          :rules=\"[v => !!v || $t('is_required')]\"\n                          v-model=\"customerType.saleDiscountAcc\"\n                      />\n                      <label class=\"label\">{{ $t('qr_payment') }}</label>\n                      <v-select\n                          class=\"mt-1\"\n                          outlined\n                          return-object\n                          id=\"\"\n                          :items=\"qrPayment\"\n                          item-text=\"name\"\n                          tage=\"PaymentOption\"\n                          item-value=\"id\"\n                          clearable\n                          v-model=\"customerType.qrPayment\"\n                      />\n                      <label class=\"label\">{{ $t('bank_transfer') }}</label>\n                      <v-select\n                          class=\"mt-1\"\n                          outlined\n                          return-object\n                          clearable\n                          id=\"\"\n                          :items=\"bankTransfer\"\n                          item-text=\"name\"\n                          tage=\"PaymentOption\"\n                          item-value=\"id\"\n                          v-model=\"customerType.bankTransfer\"\n                      />\n                    </v-col>\n                    <v-col class=\"py-0\" sm=\"6\" cols=\"12\">\n                      <label class=\"label\">{{ $t('nature') }}</label>\n                      <v-select\n                          class=\"mt-1\"\n                          id=\"\"\n                          :items=\"natures\"\n                          item-text=\"name\"\n                          tage=\"Nature\"\n                          item-value=\"id\"\n                          :rules=\"[v => !!v || $t('is_required')]\"\n                          v-model=\"customerType.nature\"\n                          placeholder=\"Nature\"\n                          outlined\n                          return-object\n                      />\n                      <label class=\"label\">{{ $t('account_receivable') }}</label>\n                      <v-select\n                          class=\"mt-1\"\n                          outlined\n                          :items=\"receivableAcc\"\n                          return-object\n                          item-text=\"name\"\n                          tage=\"AccountReceivable\"\n                          :rules=\"[v => !!v || $t('is_required')]\"\n                          item-value=\"id\"\n                          v-model=\"customerType.receivableAcc\"\n                      />\n                      <label class=\"label\">{{ $t('default_price_level') }}</label>\n                      <v-select\n                          class=\"mt-1\"\n                          id=\"\"\n                          :items=\"priceLevel\"\n                          item-text=\"name\"\n                          v-model=\"customerType.priceLevel\"\n                          placeholder=\"Default price level\"\n                          outlined\n                          return-object\n                      />\n                      <label class=\"label\">{{ $t('default_tax') }}</label>\n                      <v-select\n                          class=\"mt-1\"\n                          id=\"\"\n                          :items=\"vat\"\n                          item-text=\"defaultTax\"\n                          tage=\"Tax\"\n                          item-value=\"id\"\n                          v-model=\"customerType.saleTax\"\n                          placeholder=\"Default Tax\"\n                          outlined\n                          return-object\n                      />\n\n\n                      <label class=\"label\">{{ $t('cash_payment') }}</label>\n                      <v-select\n                          class=\"mt-1\"\n                          outlined\n                          return-object\n                          id=\"\"\n                          :items=\"cashPayment\"\n                          item-text=\"name\"\n                          tage=\"PaymentOption\"\n                          item-value=\"id\"\n                          :rules=\"[v => !!v || $t('is_required')]\"\n                          v-model=\"customerType.cashPayment\"\n                      />\n                      <label class=\"label\">{{ $t('bill_payment') }}</label>\n                      <v-select\n                          class=\"mt-1\"\n                          outlined\n                          return-object\n                          id=\"\"\n                          clearable\n                          :items=\"billPayment\"\n                          item-text=\"name\"\n                          tage=\"PaymentOption\"\n                          item-value=\"id\"\n                          v-model=\"customerType.billPayment\"\n                      />\n                    </v-col>\n                  </v-row>\n                </v-col>\n              </v-row>\n            </v-form>\n          </v-card-text>\n          <v-divider/>\n          <v-card-actions class=\"modal_footer\">\n            <v-row>\n              <v-col sm=\"6\" cols=\"6\" class=\"py-0\">\n                <v-btn color=\"black\"\n                       outlined\n                       class=\" text-capitalize  black--text float-left\"\n                       @click=\"dialogM2 = false\">{{ $t('cancel') }}\n                </v-btn>\n              </v-col>\n              <v-col sm=\"6\" cols=\"6\" class=\"py-0\">\n                <v-btn color=\"primary\"\n                       :disabled=\"disabled\"\n                       class=\"px-3  white--text text-capitalize float-right\"\n                       @click.native=\"onSaveClose\">\n                  {{ $t('save_close') }}\n                </v-btn>\n              </v-col>\n            </v-row>\n          </v-card-actions>\n\n        </v-card>\n      </v-dialog>\n    </v-col>\n\n    <v-col sm=\"12\" cols=\"12\">\n      <template>\n        <LoadingMe\n            :isLoading=\"showLoading\"\n            :fullPage=\"false\"\n            type=\"loading\"\n            :myLoading=\"true\"/>\n        <kendo-datasource ref=\"dataSource\"\n                          :data=\"customerTypes\"/>\n        <kendo-grid id=\"gridCustomerType\" class=\"grid-function\"\n                    :data-source-ref=\"'dataSource'\"\n                    :sortable=\"false\"\n                    :filterable=\"false\"\n                    :noRecords=\"true\"\n                    :editable=\"false\"\n                    :toolbar=\"toolbarTemplate\"\n                    :excel-export=\"excelExport\"\n                    :excel-file-name=\"'CustomerTypes.xlsx'\"\n                    :excel-filterable=\"true\"\n                    :scrollable-virtual=\"true\">\n          <kendo-grid-column\n              :field=\"'name'\"\n              :title=\"$t('name')\"\n              :template=\"'<span>#=name#</span>'\"\n              :group-footer-template=\"'Total: '\"\n              :width=\"200\"\n              :headerAttributes=\"{\n                                                        style: 'background-color: #EDF1F5'\n                                                    }\"/>\n          <kendo-grid-column\n              :field=\"'abbr'\"\n              :title=\"$t('abbr')\"\n              :width=\"100\"\n              :headerAttributes=\"{\n                                                        style: 'background-color: #EDF1F5'\n                                                    }\"/>\n          <kendo-grid-column\n              :field=\"'nature.name'\"\n              :title=\"$t('nature')\"\n              :template=\"'<span>#=nature.name#</span>'\"\n              :width=\"200\"\n              :headerAttributes=\"{ style: 'background-color: #EDF1F5' }\"/>\n          <kendo-grid-column\n              :command=\"{\n                            iconClass: 'k-icon k-i-edit',\n                            text: ' ',\n                            click: onEditClick,\n                            class: 'btn-plus',\n                          }\"\n              :title=\"''\"\n              :width=\"50\"\n              :headerAttributes=\"{\n                            style:\n                              'text-align: left; background-color: #EDF1F5',\n                          }\"\n          />\n\n        </kendo-grid>\n      </template>\n    </v-col>\n  </v-row>\n</template>\n\n<script>\nimport {dataStore} from \"@/observable/store\";\nimport CustomerTypeModel from '@/scripts/model/CustomerType'\nimport AccountMappingModel from '@/scripts/account-map/Account'\nimport priceLevelHandler from \"@/scripts/priceLevelHandler\";\nimport kendo from \"@progress/kendo-ui\";\n\nconst $ = kendo.jQuery;\nimport TaxModel from \"@/scripts/model/Tax\";\nimport PriceLevelModel from \"@/scripts/priceLevel/PriceLevel\"\nimport PaymentOptionModel from \"@/scripts/model/PaymentOption\";\n\nconst paymentOptionHandler = require(\"@/scripts/paymentOptionHandler\");\n\nconst accountHandler = require(\"@/scripts/handler/accounting/account\")\nconst customerTypeHandler = require(\"@/scripts/customerTypeHandler\")\nconst otherHandler = require(\"@/scripts/otherHandler\")\nconst settingsHandler = require(\"@/scripts/settingHandler\")\nconst settingHandler = require(\"@/scripts/settingsHandler\")\nconst {PAYMENT_OPINION_TYPE} = require(\"@/scripts/default_setup/Setting\");\n\nconst customerTypeModel = new CustomerTypeModel({})\n// const OPTION_TYPE = 'Customer'\n// const strFilter = '?optionType=' + OPTION_TYPE\nconst strFilterTerm = '?type=pmt-customer'\nimport JSZip from \"jszip\";\n\nwindow.JSZip = JSZip;\nexport default {\n  components: {\n    LoadingMe: () => import(`@/components/Loading`),\n  },\n  data: () => ({\n    dialogM2: '',\n    disabled: false,\n    valid: false,\n    showLoading: true,\n    natures: [],\n    mNature: {},\n    customerType: customerTypeModel,\n    customerTypes: [],\n    receivableAcc: [],\n    mReceivableAcc: [],\n    accDeposit: [],\n    mAccDeposit: [],\n    accDiscount: [],\n    mAccDiscount: [],\n    tax: [],\n    vat: [],\n    mVAT: [],\n    mShipVAT: [],\n    paymentMethodF: ['Cash Payment', 'Bill Payment', 'QR Payment', 'Bank Transfer'],\n    mPaymentMethod: 'Cash Payment',\n    paymentTerm: [],\n    mPaymentTerm: {},\n    priceLevel: [],\n    cashPayment: [],\n    billPayment: [],\n    qrPayment: [],\n    bankTransfer: []\n  }),\n  props: {},\n  computed: {\n    appType(){\n      return dataStore.productType\n    }\n  },\n  watch: {},\n  methods: {\n    excelExport: function (e) {\n      // const pivot = this.$refs.gridTransactionDS.kendoWidget()\n      // pivot.saveAsExcel()\n      window.console.log(e.data);\n    },\n    initToolbar(that) {\n      let grid = $(\"#gridCustomerType\").data(\"kendoGrid\");\n      let gridElement = grid.element;\n      let toolbarElement = gridElement.find(\".k-grid-toolbar\");\n      toolbarElement.on(\"click\", \".k-pager-refresh\", function (e) {\n        e.preventDefault();\n        onReloadData(that);\n      });\n      toolbarElement.on(\"click\", \".k-pager-excel\", function (e) {\n        e.preventDefault();\n        onExportExcel(that);\n      });\n\n      function onReloadData(that) {\n        that.loadCustomerType();\n      }\n\n      function onExportExcel(that) {\n        that.exportToExcel();\n      }\n    },\n    toolbarTemplate: function () {\n      const templateHtml =\n          '<span>' +\n          '<a class=\"k-pager-excel k-link k-button excel\" title=\"Export to Excel\"> <span class=\"k-icon k-i-excel\"></span>Export to excel </a>' +\n          '</span><span>&nbsp;&nbsp;</span>' +\n          '<span style=\"position:absolute; right:5px\">' +\n          '</span>' +\n          '<span>' +\n          '<a class=\"k-pager-refresh k-link k-button reload\" title=\"Refresh\"><span class=\"k-icon k-i-reload\"></span> Refresh </a>' +\n          '</span>'\n\n      return kendo.template(templateHtml)\n    },\n    onNewClick() {\n      this.customerType = {}\n      this.customerType.id = ''\n      this.clear()\n    },\n    close() {\n      this.dialogM2 = false\n    },\n    clear() {\n      this.customerType = new CustomerTypeModel({})\n      this.mNature = {}\n    },\n    async onEditClick(e) {\n      new Promise(resolve => {\n        setTimeout(() => {\n          resolve('resolved');\n          e.preventDefault();\n          let grid = kendo.jQuery(\"#gridCustomerType\").data(\"kendoGrid\");\n          let dataItem = grid.dataItem($(e.currentTarget).closest(\"tr\"));\n          this.customerType = dataItem\n          // window.console.log(this.customerType, 'customerType')\n          // this.mNature = value.nature\n          // this.mReceivableAcc = value.receivableAcc\n          // this.mVAT = value.saleTax\n          // this.mAccDeposit = value.saleDepositAcc\n          // this.mAccDiscount = value.saleDiscountAcc\n          // // this.mPaymentTerm = value.paymentTerm\n          // this.mPaymentMethod = value.paymentOption\n          this.dialogM2 = true\n        }, 10);\n      })\n    },\n    async onSaveClose() {\n      if (!this.$refs.form.validate()) {\n        this.$refs.form.validate()\n        return\n      }\n      new Promise(resolve => {\n        setTimeout(() => {\n          resolve('resolved');\n          // window.console.log(this.mPaymentMethod)\n          const nature_ = this.customerType.nature || {}\n          const nature = {\n            id: nature_.id || '',\n            name: nature_.name || '',\n            isSystem: nature_.isSystem || 0\n          }\n          let data = {\n            \"id\": this.customerType.id ? this.customerType.id : '',\n            \"name\": this.customerType.name,\n            \"abbr\": this.customerType.abbr,\n            \"nature\": nature,\n            \"receivableAcc\": new AccountMappingModel(this.customerType.receivableAcc),\n            \"saleTax\": new TaxModel(this.customerType.saleTax),\n            \"saleDepositAcc\": new AccountMappingModel(this.customerType.saleDepositAcc),\n            \"saleDiscountAcc\": new AccountMappingModel(this.customerType.saleDiscountAcc),\n            \"priceLevel\": new PriceLevelModel(this.customerType.priceLevel),\n            \"cashPayment\": new PaymentOptionModel(this.customerType.cashPayment),\n            \"qrPayment\": new PaymentOptionModel(this.customerType.qrPayment),\n            \"bankTransfer\": new PaymentOptionModel(this.customerType.bankTransfer),\n            \"billPayment\": new PaymentOptionModel(this.customerType.billPayment),\n          }\n          this.disabled = true\n          // window.console.log(JSON.stringify(this.customerType.cashPayment), 'priceLevel')\n\n          this.showLoading = true\n          customerTypeHandler.create(data).then(response => {\n            if (response.data.statusCode === 201) {\n              this.disabled = false\n              this.showLoading = false\n              this.loadCustomerType()\n              this.clear()\n              this.close()\n              // this.$refs.form.reset()\n            }\n          }).catch(e => {\n            this.disabled = false\n            this.showLoading = false\n            this.errors.push(e)\n          })\n        }, 10);\n      })\n    },\n    exportToExcel() {\n      const grid = $(\"#gridCustomerType\").data(\"kendoGrid\")\n      grid.saveAsExcel()\n    },\n    async loadCustomerType() {\n      new Promise(resolve => {\n        setTimeout(() => {\n          resolve('resolved');\n          this.showLoading = true\n          customerTypeHandler.get().then(res => {\n            this.showLoading = false\n            // if(this.appType == 'npo'){\n              if(res.length !=0){\n                  // this.customerTypes = res.filter(o => o.abbr != 'GCL' && o.abbr != 'GCF' );\n                  this.customerTypes = res.filter(o => {\n                      const nature = o.nature || {}\n                      const name = nature.name || ''\n                      if (name.includes('Individual-') === false) {\n                          return o\n                      }\n                  });\n              }\n            // }else{\n            //    this.customerTypes = res\n            // }\n          })\n        }, 10);\n      })\n    },\n    async loadCustomerTypeNature() {\n      new Promise(resolve => {\n        setTimeout(() => {\n          resolve('resolved');\n          otherHandler.customerTypeNature().then(res => {\n            if (res.data.statusCode === 200) {\n              this.compeletLoading = false\n              this.natures = res.data.data\n            }\n          })\n        }, 10);\n      })\n    },\n    async loadAccount() {\n      new Promise(resolve => {\n        setTimeout(() => {\n          resolve('resolved');\n          accountHandler.getAll().then(res => {\n            this.showLoading = false\n            //Receivable Account\n            this.receivableAcc = res.data.filter(m => m.account_type.number === 7).map(item => {\n              return {\n                id: item.uuid,\n                uuid: item.uuid,\n                name: item.name,\n                local_name: item.local_name,\n                number: item.number,\n                is_taxable: item.is_taxable,\n                banhjiAccCode: item.banhjiAccCode,\n                group_code: item.group_code,\n                parent_account: item.parent_account,\n                type_code: item.type_code,\n                account_type: item.account_type\n              }\n            })\n            if (this.receivableAcc.length > 0) {\n              this.mReceivableAcc = this.receivableAcc[0]\n            }\n            //Deposit Account\n            this.accDeposit = res.data.filter(m => m.account_type.number === 20 || m.account_type.number === 28).map(item => {\n              return {\n                id: item.uuid,\n                uuid: item.uuid,\n                name: item.name,\n                local_name: item.local_name,\n                number: item.number,\n                is_taxable: item.is_taxable,\n                banhjiAccCode: item.banhjiAccCode,\n                group_code: item.group_code,\n                parent_account: item.parent_account,\n                type_code: item.type_code,\n                account_type: item.account_type\n              }\n            })\n            if (this.accDeposit.length > 0) {\n              this.mAccDeposit = this.accDeposit[0]\n            }\n            //Discount Account\n            this.accDiscount = res.data.filter(m => m.account_type.number === 38).map(item => {\n              return {\n                id: item.uuid,\n                uuid: item.uuid,\n                name: item.name,\n                local_name: item.local_name,\n                number: item.number,\n                is_taxable: item.is_taxable,\n                banhjiAccCode: item.banhjiAccCode,\n                group_code: item.group_code,\n                parent_account: item.parent_account,\n                type_code: item.type_code,\n                account_type: item.account_type\n              }\n            })\n            if (this.accDiscount.length > 0) {\n              this.mAccDiscount = this.accDiscount[0]\n            }\n          })\n        }, 10);\n      })\n    },\n    async loadTax() {\n      new Promise(resolve => {\n        setTimeout(() => {\n          resolve('resolved');\n          settingsHandler.get().then(res => {\n            this.showLoading = false\n            this.tax = res\n            let vAT = this.tax.filter(m => m.taxType.typeId === 1 && m.transactionType === 'Sale') // valuable tax\n            this.vat = vAT // valuable tax\n            if (this.vat.length > 0) {\n              this.mVAT = this.vat[0]\n              this.mShipVAT = {}\n            }\n          })\n        }, 10);\n      })\n    },\n    async loadPaymentOption() {\n      new Promise(resolve => {\n        setTimeout(() => {\n          resolve('resolved');\n          const strFilter = '?optionType=Customer'\n          paymentOptionHandler.list(strFilter).then(res => {\n            if (res.data.statusCode === 200) {\n              this.showLoading = false\n              const data = res.data.data || []\n              this.cashPayment = data.filter(m => m.type === PAYMENT_OPINION_TYPE.CASH_PAYMENT)\n              this.billPayment = data.filter(m => m.type === PAYMENT_OPINION_TYPE.BILL_PAYMENT)\n              this.qrPayment = data.filter(m => m.type === PAYMENT_OPINION_TYPE.QR_PAYMENT)\n              this.bankTransfer = data.filter(m => m.type === PAYMENT_OPINION_TYPE.BANK_TRANSFER)\n            }\n          })\n        }, 10);\n      })\n    },\n    async loadPaymentTerm() {\n      new Promise(resolve => {\n        setTimeout(() => {\n          resolve('resolved');\n          settingHandler.getPaymentTerm(strFilterTerm).then(res => {\n            this.showLoading = false\n            this.paymentTerm = []\n            if (res.data.statusCode === 200) {\n              this.paymentTerm = res.data.data\n              if (this.paymentTerm.length > 0) {\n                this.mPaymentTerm = this.paymentTerm[0]\n              } else {\n                this.showLoading = false\n              }\n            }\n          })\n        }, 10);\n      })\n    },\n    async loadPriceLevel() {\n      const strFilter = '?nature=sale'\n      priceLevelHandler.get(strFilter).then((res) => {\n        this.priceLevel = res;\n        if (this.priceLevel.length > 0) {\n          this.customerType.priceLevel = this.priceLevel[0];\n        }\n      })\n    },\n  },\n  mounted: async function () {\n    await this.loadCustomerType()\n    await this.loadCustomerTypeNature()\n    await this.loadTax()\n    await this.loadPriceLevel()\n    await this.initToolbar(this)\n    await this.loadPaymentOption()\n  },\n  created: async function () {\n    await this.loadAccount()\n  }\n};\n</script>\n<style scoped>\n.text_tip {\n  line-height: 10px !important;\n}\n\n@media (max-width: 576px) {\n\n}\n</style>"]}]}