{"remainingRequest":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/src/views/budgeting/budgets/BudgetPerformance.vue?vue&type=style&index=0&id=7826824e&scoped=true&lang=css&","dependencies":[{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/src/views/budgeting/budgets/BudgetPerformance.vue","mtime":1638499443140},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/@vue/cli-service/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoudGhlbWUtLWxpZ2h0LnYtZGF0YS10YWJsZSB7CiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudCAhaW1wb3J0YW50Owp9Cgoudi1kYXRhLXRhYmxlID4gLnYtZGF0YS10YWJsZV9fd3JhcHBlciA+IHRhYmxlID4gdGJvZHkgPiB0ciA+IHRkIHsKICAgIGhlaWdodDogMzJweCAhaW1wb3J0YW50OwogICAgYm9yZGVyLWJvdHRvbTogdGhpbiBzb2xpZCByZ2JhKDAsIDAsIDAsIDAuMTIpICFpbXBvcnRhbnQ7CiAgICBib3JkZXItcmlnaHQ6IHRoaW4gc29saWQgcmdiYSgwLCAwLCAwLCAwLjEyKSAhaW1wb3J0YW50Owp9Ci52LWRhdGEtdGFibGUuc2ltcGxlMV90YWJsZS50aGVtZS0tbGlnaHQsCi52LWRhdGEtdGFibGUgPiAudi1kYXRhLXRhYmxlX193cmFwcGVyID4gdGFibGUgPiB0Ym9keSA+IHRyOmZpcnN0LWNoaWxkID4gdGQgewogICAgYm9yZGVyLXRvcDogdGhpbiBzb2xpZCByZ2JhKDAsIDAsIDAsIDAuMTIpICFpbXBvcnRhbnQ7Cn0KLnYtZGF0YS10YWJsZS5zaW1wbGVfdGFibGUudGhlbWUtLWxpZ2h0ewogICAgYm9yZGVyLWxlZnQ6IHRoaW4gc29saWQgcmdiYSgwLCAwLCAwLCAwLjEyKSAhaW1wb3J0YW50OwogICAgYm9yZGVyLXJpZ2h0OiB0aGluIHNvbGlkIHJnYmEoMCwgMCwgMCwgMC4xMikgIWltcG9ydGFudDsKfQoKLnRoZW1lLS1saWdodC52LWRhdGEtdGFibGUuc2ltcGxlMV90YWJsZSA+IC52LWRhdGEtdGFibGVfX3dyYXBwZXIgPiB0YWJsZSA+IHRoZWFkID4gdHI6bGFzdC1jaGlsZCA+IHRoOmxhc3QtY2hpbGR7CiAgICBib3JkZXItcmlnaHQ6IG5vbmUgIWltcG9ydGFudDsKfQoKLnRoZW1lLS1saWdodC52LWRhdGEtdGFibGUgPiAudi1kYXRhLXRhYmxlX193cmFwcGVyID4gdGFibGUgPiB0Ym9keSA+IHRyOmhvdmVyOm5vdCgudi1kYXRhLXRhYmxlX19leHBhbmRlZF9fY29udGVudCk6bm90KC52LWRhdGEtdGFibGVfX2VtcHR5LXdyYXBwZXIpIHsKICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50ICFpbXBvcnRhbnQ7Cn0KCi5ib3JkZXItYm90dG9tIHsKICAgIGJvcmRlci1ib3R0b206IHRoaW4gc29saWQgcmdiYSgwLCAwLCAwLCAwLjEyKSAhaW1wb3J0YW50Owp9CgouZm9udC1zbWFsbCB7CiAgICBmb250LXNpemU6IDEycHg7CiAgICBsaW5lLWhlaWdodDogMTVweDsKfQoKLmZvbnQtMjYgewogICAgZm9udC1zaXplOiAyNnB4ICFpbXBvcnRhbnQ7Cn0KLnYtZGF0YS10YWJsZS5zaW1wbGVfdGFibGUudGhlbWUtLWxpZ2h0ewogICAgYm9yZGVyLXRvcDogdGhpbiBzb2xpZCByZ2JhKDAsIDAsIDAsIDAuMTIpICFpbXBvcnRhbnQ7Cn0KLnRoZW1lLS1saWdodC52LWRhdGEtdGFibGUgPiAudi1kYXRhLXRhYmxlX193cmFwcGVyID4gdGFibGUgPiB0aGVhZCA+IHRyOmxhc3QtY2hpbGQgPiB0aHsKICAgIGJvcmRlci1ib3R0b206IG5vbmUgIWltcG9ydGFudDsKICAgIGJvcmRlci1yaWdodDogdGhpbiBzb2xpZCByZ2JhKDAsIDAsIDAsIDAuMTIpICFpbXBvcnRhbnQ7Cn0KLnRoZW1lLS1saWdodC52LWRhdGEtdGFibGUgPiAudi1kYXRhLXRhYmxlX193cmFwcGVyID4gdGFibGUgPiB0aGVhZCA+IHRyID4gdGh7CiAgICBib3JkZXItYm90dG9tOiB0aGluIHNvbGlkIHJnYmEoMCwgMCwgMCwgMC4xMikgIWltcG9ydGFudDsKICAgIGJvcmRlci1yaWdodDogdGhpbiBzb2xpZCByZ2JhKDAsIDAsIDAsIDAuMTIpICFpbXBvcnRhbnQ7Cn0KLnRoZW1lLS1saWdodC52LWRhdGEtdGFibGUgPiAudi1kYXRhLXRhYmxlX193cmFwcGVyID4gdGFibGUgPiB0Ym9keSA+IHRyOm5vdCg6bGFzdC1jaGlsZCkgPiB0ZDpsYXN0LWNoaWxkLAoudGhlbWUtLWxpZ2h0LnYtZGF0YS10YWJsZSA+IC52LWRhdGEtdGFibGVfX3dyYXBwZXIgPiB0YWJsZSA+IHRib2R5ID4gdHI6bm90KDpsYXN0LWNoaWxkKSA+IHRoOmxhc3QtY2hpbGQsCi50aGVtZS0tbGlnaHQudi1kYXRhLXRhYmxlID4gLnYtZGF0YS10YWJsZV9fd3JhcHBlciA+IHRhYmxlID4gdGJvZHkgPiB0ciA+IHRkOmxhc3QtY2hpbGR7CiAgICBib3JkZXItcmlnaHQ6IG5vbmUgIWltcG9ydGFudDsKfQoKCi52LWRhdGEtdGFibGUudGFibGVfbGlzdCA+IC52LWRhdGEtdGFibGVfX3dyYXBwZXIgPiB0YWJsZSA+IHRib2R5ID4gdHIgPiB0ZCB7CiAgICBoZWlnaHQ6IDMycHggIWltcG9ydGFudDsKICAgIGJvcmRlci1ib3R0b206IHRoaW4gc29saWQgcmdiYSgwLCAwLCAwLCAwLjEyKSAhaW1wb3J0YW50OwogICAgYm9yZGVyLXJpZ2h0OiBub25lICFpbXBvcnRhbnQ7Cn0KLnYtZGF0YS10YWJsZS50YWJsZV9saXN0LnRoZW1lLS1saWdodCA+IC52LWRhdGEtdGFibGVfX3dyYXBwZXIgPiB0YWJsZSA+IHRib2R5ID4gdHI6Zmlyc3QtY2hpbGQgPiB0ZHsKICAgIGJvcmRlci10b3A6IG5vbmUgIWltcG9ydGFudDsKfQoKQG1lZGlhIChtYXgtd2lkdGg6IDU3NnB4KSB7Cgp9Cg=="},{"version":3,"sources":["BudgetPerformance.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0rBA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA","file":"BudgetPerformance.vue","sourceRoot":"src/views/budgeting/budgets","sourcesContent":["<template>\n    <v-card color=\"white\" class=\"pl-2 no_border\" elevation=\"0\">\n        <!-- Title -->\n        <v-row>\n            <v-col sm=\"5\" cols=\"12\" class=\"py-0\">\n                <h3 class=\"text-left mb-1 font_20 line_24\">{{$t('budget_performance_report')}}</h3>\n                <p class=\"mb-0\">{{$t('a_detail_breakdown_of_budget_by_months')}}</p>\n            </v-col>\n        </v-row>\n\n        <!-- Search -->\n        <v-row class=\"mt-0\">\n            <v-col sm=\"3\" cols=\"12\" class=\"py-0 pt-6\">\n                <app-fiscal-date-dropdownlist\n                    :initFiscalDate=\"fiscalDate\"\n                    @emitFiscalDate=\"fiscalDate = $event\"\n                    @onChanged=\"onFiscalDateChanges\"\n                />\n            </v-col>\n            <v-col sm=\"3\" cols=\"12\" class=\"py-0 pt-6\">\n                <app-month-of-picker \n                    :initMonthOf=\"monthOf\" \n                    @emitMonthOf=\"monthOf = $event\"\n                    @onChanged=\"onMonthOfChanges\"\n                    :initMin=\"minMonth\"\n                    :initMax=\"maxMonth\" />\n            </v-col>\n            <v-col sm=\"3\" cols=\"12\" class=\"py-0 pt-6\">\n                <v-select class=\"mt-1\"\n                    :disabled=\"monthOf === ''\"\n                    placeholder=\"Select Budget\"\n                    @change=\"onChangeBudget\"\n                    v-model=\"budget\"\n                    :loading=\"loadingBudgetList\"\n                    :items=\"budgetList\"\n                    item-text=\"name\"\n                    item-value=\"uuid\"\n                    return-object\n                    clearable\n                    outlined />\n            </v-col>\n            <v-col sm=\"3\" cols=\"12\" class=\"py-0\">\n                <!-- Reporting Language -->\n                <label class=\"mb-1\">{{$t('language')}}:</label>\n                <app-reporting-language :initLanguage=\"reportingLanguage\" @emitLanguage=\"reportingLanguage = $event\" />\n            </v-col>\n        </v-row>\n\n        <!-- Summary -->\n        <v-row>\n            <v-col class=\"pt-0\" sm=\"6\" cols=\"12\">\n                <template>\n                    <v-simple-table class=\"table_list nomal_table\">\n                        <template>\n                            <tbody>\n                            <tr>\n                                <td style=\"width: 45%\" class=\"\">{{$t('budget_name')}}</td>\n                                <td class=\"\">{{ budget.name }}</td>\n                            </tr>\n                            <tr>\n                                <td class=\"\">{{$t('segment')}}</td>\n                                <td class=\"\" v-if=\"budget.segment\">{{ budget.segment.name }}</td>\n                            </tr>\n                            <tr>\n                                <td class=\"\">{{$t('fiscal_year')}}</td>\n                                <td class=\"\" v-if=\"budget.fiscal_year\">{{ Helper.formatFiscalDate(budget.fiscal_year.start_date) }}</td>\n                            </tr>\n                            <tr>\n                                <td class=\"\">{{$t('used_for_consolidation')}}</td>\n                                <td class=\"\">{{ budget.use_consolidation === 1 ? 'Yes' : 'No' }}</td>\n                            </tr>\n                            </tbody>\n                        </template>\n                    </v-simple-table>\n                </template>\n            </v-col>\n            <v-col class=\"pt-0\" sm=\"6\" cols=\"12\">\n                <template>\n                    <v-simple-table class=\"table_list nomal_table\">\n                        <template>\n                            <tbody>\n                            <tr>\n                                <td class=\"\">{{$t('created_on')}}</td>\n                                <!-- <td class=\"\">{{ budget.created_date }}</td> by rothny -->\n                                <td class=\"\" v-if=\"budget.created_date\">{{ Helper.dateFormat(budget.created_date) }}</td>\n                            </tr>\n                            <tr>\n                                <td class=\"\">{{$t('last_edited_on')}}</td>\n                                <td class=\"\">{{ budget.modified_date }}</td>\n                            </tr>\n                            <tr>\n                                <td class=\"\">{{$t('last_edited_by')}}</td>\n                                <td class=\"\">\n                                    {{ budget.modified_by.first_name === '' ? budget.created_by.first_name +' '+ budget.created_by.last_name : budget.modified_by.first_name +' '+ budget.modified_by.last_name }}\n                                </td>\n                            </tr>\n                            </tbody>\n                        </template>\n                    </v-simple-table>\n                </template>\n            </v-col>\n        </v-row>\n        \n        <!-- Grid -->\n        <v-row>\n            <v-col sm=\"12\" cols=\"12\" class=\"pt-1\">\n                <template>\n                    <kendo-datasource ref=\"statementPLDS\"\n                        :data=\"statementPLList\"\n                        :schema=\"schemaDefinition\"\n                        :sort=\"sortDefinition\"\n                        :group=\"groupDefinition\"\n                        :aggregate=\"aggregateDefinition\" />\n\n                    <kendo-grid id=\"incomeStatementGrid\" class=\"custom_grid\" \n                        :data-source-ref=\"'statementPLDS'\"\n                        :dataBound=\"dataBound\"\n                        :sortable=\"true\"\n                        :column-menu=\"false\"\n                        :reorderable=\"true\"\n                        :resizable=\"true\"\n                        :noRecords=\"true\"\n                        :groupable=\"groupable\"\n                        :columns=\"columns\" />\n\n                    <LoadingMe\n                        type=\"loading\"\n                        :isLoading=\"showLoading\"\n                        :myLoading=\"true\"\n                        :fullPage=\"false\" />\n                </template>\n\n            </v-col>\n        </v-row>\n    </v-card>\n</template>\n\n<script>\n    import kendo from '@progress/kendo-ui';\n    import {i18n} from '@/i18n';\n    import Helper from \"@/helper.js\";\n    /* Models */\n    import SegmentModel from \"@/scripts/model/Segment.js\";\n    import BudgetModel from \"@/scripts/model/Budget.js\";\n    import AccountModel from \"@/scripts/model/Account.js\";\n    \n    const incomeStatementHandler = require(\"@/scripts/handler/accounting/incomeStatementHandler\");\n    const OrderNumberPL = require(\"@/scripts/default_setup/OrderNumberPL.js\");\n    const NumberInWord = require(\"@/scripts/default_setup/NumberInWord.js\");\n\n    export default {\n        components:{\n            \"LoadingMe\": () => import('@/components/Loading'),\n            \"app-fiscal-date-dropdownlist\": () => import('@/components/kendo_templates/FiscalDateDropDownList'),\n            \"app-month-of-picker\": () => import('@/components/kendo_templates/MonthOfPicker'),\n            'app-reporting-language': () => import('@/components/kendo_templates/ReportingLanguageDropDownList'),\n        },\n        data: () => ({\n            loadingBudgetList: false,\n            monthOf : '',\n            budget : new BudgetModel(),\n            budgetList : [],\n            incomeStatements : [],\n            statementPLList : [],\n            fiscalDate : null,\n            fiscalMonths : [],\n            minMonth : '',\n            maxMonth : '',\n            Helper : Helper,\n            columns : [],\n            sortDefinition : { field: \"number\", dir: \"asc\" },\n            groupable: {\n                enabled: false,\n                showFooter: true\n            },\n\t\t\tgroupDefinition : [],\n\t\t\taggregateDefinition : [\n\t\t\t\t{ field: \"budget_month\", aggregate: \"sum\" },\n                { field: \"budget_ytd\", aggregate: \"sum\" },\n                { field: \"budget_whole\", aggregate: \"sum\" },\n                { field: \"actual_month\", aggregate: \"sum\" },\n                { field: \"actual_ytd\", aggregate: \"sum\" },\n                { field: \"actual_whole\", aggregate: \"sum\" },\n\t\t\t],\n\t\t\tschemaDefinition\t: {\n\t\t\t\tmodel: { id: \"uuid\" }\n\t\t\t},\n            // Reporting Language\n\t\t\treportingLanguage: 'english',\n\t\t\tfieldName : 'name',\n\t\t\tfieldType : 'type',\n            totalWord : 'Total',\n            // LoadingMe\n            showLoading: false,\n        }),\n        methods:{\n            onFiscalDateChanges(){\n                this.monthOf = '';\n                this.budget = new BudgetModel();\n                this.fiscalMonths = [];\n\n                if(this.fiscalDate !== null){\n                    /* Set Month Range */\n                    this.minMonth = this.fiscalDate.start_date;\n                    this.maxMonth = this.fiscalDate.end_date;\n                    \n                    /* Generate Months */\n                    this.fiscalMonths = Helper.generateFiscalMonths(this.fiscalDate.start_date, this.fiscalDate.end_date, \"12\");\n\n                    /* Load Budget */\n                    this.loadBudget();\n                }\n            },\n            onMonthOfChanges () {\n                if(this.incomeStatements.length > 0){\n                    /* Bind Data */\n                    this.bindData();\n                }\n            },\n            async loadBudget(){\n                this.loadingBudgetList = true;\n                let budgets = await this.$store.dispatch('budgets/getList'),\n                    segments = await this.$store.dispatch('segments/getList');\n\n                let budgetList = [];\n                budgets.forEach(value => {\n                    if(value.fiscal_year.uuid === this.fiscalDate.uuid && value.segment_uuid !== ''){\n                        let budget = new BudgetModel(value);\n                        budget.segment = new SegmentModel(segments.find(i => i.id === value.segment_uuid));\n                        budgetList.push(budget);\n                    }\n                });\n                this.budgetList = budgetList;\n                this.loadingBudgetList = false;\n            },\n            /* On Budget Changes */\n            onChangeBudget () {\n                this.search();\n            },\n            /* Search */\n            search () {\n                if(this.budget.uuid !== ''){\n                    let sdate = kendo.toString(new Date(this.fiscalDate.start_date), 'yyyy-MM-dd') + 'T00:00:00.000Z',\n                        edate = kendo.toString(new Date(this.fiscalDate.end_date), 'yyyy-MM-dd') + 'T23:59:59.999Z';\n                    \n                    // Empty statementPLDS\n                    let ds = this.$refs.statementPLDS.kendoWidget();\n                    ds.data([]);\n                        \n                    // Query Income Statement\n                    this.showLoading = true;\n                    incomeStatementHandler.getIncomeStatement({\n                        params : {\n                            start_date \t\t: sdate,\n                            end_date \t\t: edate,\n                            group_by \t\t: \"12\",\n                            segment_uuid    : this.budget.segment_uuid,\n                        }\n                    })\n                    .then(res => {\n                        if(res.data){\n                            this.incomeStatements = res.data;\n                            this.bindData();\n                        }\n                    })\n                    .finally(()=>{\n                        this.showLoading = false;\n                    });\n                }else{\n                    /* Alert Warning */\n                    this.$snotify.warning(i18n.t(\"please_select_budget\"));\n                }\n\t\t\t},\n            async bindData () {\n                let entries = [];\n                let Entry = kendo.data.Model.define({\n                    id: \"uuid\", // the identifier of the model\n                    fields: {\n                        /* Budget */\n                        \"budget_month\": { type: \"number\", defaultValue: 0 },\n                        \"budget_ytd\": { type: \"number\", defaultValue: 0 },\n                        \"budget_whole\": { type: \"number\", defaultValue: 0 },\n\n                        /* Actual */\n                        \"actual_month\": { type: \"number\", defaultValue: 0 },\n                        \"actual_ytd\": { type: \"number\", defaultValue: 0 },\n                        \"actual_whole\": { type: \"number\", defaultValue: 0 },\n\n                        /* Percentage */\n                        \"month_percentage\": { type: \"number\", defaultValue: 0 },\n                        \"ytd_percentage\": { type: \"number\", defaultValue: 0 },\n                        \"whole_percentage\": { type: \"number\", defaultValue: 0 },\n\n                        /* Account Information */\n                        \"name\": { type: \"string\", defaultValue: '' },\n                        \"local_name\": { type: \"string\", defaultValue: '' },\n                        \"type\": { type: \"string\", defaultValue: '' },\n                        \"type_local_name\": { type: \"string\", defaultValue: '' },\n                        \"account_type_number\": { type: \"number\", defaultValue: 0 },\n\n                        /* Other */\n                        \"order\": { type: \"number\", defaultValue: 0 },\n                    }\n                });\n\n                // Load Account List\n                let accounts = await this.$store.dispatch('accounting/getAccounts');\n\n                /* Find index of selected month */\n                let monthOfFormated = kendo.toString(new Date(this.monthOf), \"MMM yyyy\"),\n                    budgetMonthFormated = kendo.toString(new Date(this.monthOf), \"yyyy-MM\");\n\n                let monthOfIndex = this.fiscalMonths.indexOf(monthOfFormated);\n\n                /* Gathering from budget lines */\n                this.budget.lines.forEach(value => {\n                    let entry = new Entry(),\n                        nature = 1; /* Default Naure is Dr = 1 */\n\n                    /* Set Account Information */\n                    let account = new AccountModel(accounts.find(item => item.uuid === value.account_uuid));\n                    entry.uuid = account.uuid;\n                    entry.name = account.name;\n                    entry.local_name = account.local_name;\n                    entry.type = account.account_type.name;\n                    entry.type_local_name = account.account_type.local_name;\n                    entry.account_type_number = account.account_type.number;\n\n                    /* Reverse Nature */\n                    if(account.account_type.nature.toLowerCase() === \"cr\"){\n                        nature = -1;\n                    }\n\n                    /* Order */\n                    if(account.account_type.number === OrderNumberPL.OtherRevenue.number){//Other Revenue\n                        entry.order = OrderNumberPL.OtherRevenue.order;\n                    }else{\n                        entry.order = account.account_type.number;\n                    }\n\n                    /* BUDGET */\n                    /* Budget Whole */\n                    entry.budget_whole = value.amount * nature;\n                    \n                    value.monthly_amount.forEach(mline => {\n                        /* Budget Month */\n                        if(mline.month_of === budgetMonthFormated){\n                            entry.budget_month = mline.amount * nature;\n                        }\n\n                        /* Budget YTD */\n                        if (kendo.toString(new Date(mline.month_of),\"yyyy-MM-dd\") <= kendo.toString(new Date(this.monthOf),\"yyyy-MM-dd\")) {\n                            entry.budget_ytd += mline.amount * nature;\n                        }\n                    });\n\n                    /* ACTUAL */\n                    this.incomeStatements.forEach(plline => {\n                        if(plline.accountUUID === value.account_uuid){\n                            /* Actual Month */\n                            let propertyMonth = NumberInWord[monthOfIndex];// ['zero','one','two',...]\n                            entry.actual_month = plline[propertyMonth];// plline['zero']\n                            \n                            for (let i = 0; i < 12; i++) {\n                                let property = NumberInWord[i];\n\n                                /* Actual YTD */\n                                if(i <= monthOfIndex){\n                                    entry.actual_ytd += plline[property];\n                                }\n\n                                /* Actual Whole */\n                                entry.actual_whole += plline[property];\n                            }\n                        }\n                    });\n\n                    /* Percentage = Actual / Budget */\n                    if(entry.budget_month !== 0){\n                        entry.month_percentage = entry.actual_month / entry.budget_month;\n                    }\n                    if(entry.budget_ytd !== 0){\n                        entry.ytd_percentage = entry.actual_ytd / entry.budget_ytd;\n                    }\n                    if(entry.budget_whole !== 0){\n                        entry.whole_percentage = entry.actual_whole / entry.budget_whole;\n                    }\n\n                    /* Add entry */\n                    entries.push(entry);\n                });\n\n                /* Gathering from budget estimations */\n                this.budget.budget_estimations.forEach(value => {\n                    let entry = new Entry();\n\n                    /* Set Account Information */\n                    entry.uuid = value.accountUUID;\n                    entry.name = value.name;\n                    entry.local_name = value.local_name;\n                    entry.type = value.type;\n                    entry.type_local_name = value.type_local_name;\n                    entry.account_type_number = value.account_type_number;\n\n                    // Order\n                    if(value.account_type_number == OrderNumberPL.GrossProfit.number){// Gross Profit\n                        entry.order = OrderNumberPL.GrossProfit.order;\n                    }else if(value.account_type_number == OrderNumberPL.OtherRevenue.number){// Other Revenue\n                        entry.order = OrderNumberPL.OtherRevenue.order;\n                    }else if(value.account_type_number == OrderNumberPL.OperatingExpense.number){// Operating Expense\n                        entry.order = OrderNumberPL.OperatingExpense.order;\n                    }else if(value.account_type_number == OrderNumberPL.OperatingIncomeEBITDA.number){// Operating Income (EBITDA)\n                        entry.order = OrderNumberPL.OperatingIncomeEBITDA.order;\n                    }else if(value.account_type_number == OrderNumberPL.EarningBeforeInterestAndTaxEBIT.number){// Earning Before Interest And Tax(EBIT)\n                        entry.order = OrderNumberPL.EarningBeforeInterestAndTaxEBIT.order;\n                    }else if(value.account_type_number == OrderNumberPL.ProfitBeforeTax.number){// Profit Before Tax\n                        entry.order = OrderNumberPL.ProfitBeforeTax.order;\n                    }else if(value.account_type_number == OrderNumberPL.ProfitForThePeriod.number){// Profit For The Period\n                        entry.order = OrderNumberPL.ProfitForThePeriod.order;\n                    }else{\n                        entry.order = value.account_type_number;\n                    }\n\n                    /* BUDGET */\n\n                    /* Budget Month */\n                    let propertyBudgetMonth = NumberInWord[monthOfIndex];// ['zero','one','two',...]\n                    entry.budget_month = value[propertyBudgetMonth];// value['zero']\n\n                    for (let i = 0; i < 12; i++) {\n                        let property = NumberInWord[i];\n\n                        /* Budget YTD */\n                        if(i <= monthOfIndex){\n                            entry.budget_ytd += value[property];\n                        }\n\n                        /* Budget Whole */\n                        entry.budget_whole += value[property];\n                    }\n\n                    /* ACTUAL */\n                    this.incomeStatements.forEach(plline => {\n                        if(plline.account_type_number === value.account_type_number){\n                            /* Actual Month */\n                            let propertyActualMonth = NumberInWord[monthOfIndex];// ['zero','one','two',...]\n                            entry.actual_month = plline[propertyActualMonth];// plline['zero']\n\n                            for (let i = 0; i < 12; i++) {\n                                let property = NumberInWord[i];\n\n                                /* Actual YTD */\n                                if(i <= monthOfIndex){\n                                    entry.actual_ytd += plline[property];\n                                }\n\n                                /* Actual Whole */\n                                entry.actual_whole += plline[property];\n                            }\n                        }\n                    });\n\n                    /* Percentage = Actual / Budget */\n                    if(entry.budget_month !== 0){\n                        entry.month_percentage = entry.actual_month / entry.budget_month;\n                    }\n                    if(entry.budget_ytd !== 0){\n                        entry.ytd_percentage = entry.actual_ytd / entry.budget_ytd;\n                    }\n                    if(entry.budget_whole !== 0){\n                        entry.whole_percentage = entry.actual_whole / entry.budget_whole;\n                    }\n\n                    /* Add entry */\n                    entries.push(entry);\n                });\n\n                /* BIND STATMENT */\n                this.statementPLList = entries;\n                this.generateColumn();\n\t\t\t},\n            /* Databound */\n            dataBound(e) {\n                let grid = e.sender;\n\n\t\t\t\tgrid.dataSource.data().forEach(value => {\n\t\t\t\t\tif(value.account_type_number >= 100){\n\t\t\t\t\t\tlet row = grid.tbody.find(\"tr[data-uid='\" + value.uid + \"']\").prev(\".k-grouping-row\");\n\t\t\t\t\t\tgrid.collapseGroup(row);\n\t\t\t\t\t}\n\t\t\t\t});\n            },\n            // Generate Columns\n\t\t\tgenerateColumn () {\n                let headerAttributes = {\n                        \"class\": \"table-header-cell\",\n                        style: \"text-align: center; font-size: 14px\"\n                    },\n                    subHeaderAttributes = {\n                        \"class\": \"table-header-cell\",\n                        style: \"text-align: right; font-size: 14px\"\n                    },\n                    attributes = {\n                        \"class\": \"table-cell\",\n                        style: \"text-align: right; font-size: 14px\"\n                    };\n\n                /* Columns */\n\t\t\t\tlet columns = [\n\t\t\t\t\t{ \n\t\t\t\t\t\tfield: this.fieldName, \n\t\t\t\t\t\ttitle: i18n.t('account'),\n                        groupFooterTemplate: this.totalWord + \" #=value#\",\n\t\t\t\t\t\tlocked: true,\n\t\t\t\t\t\twidth:300\n\t\t\t\t\t},\n\t\t\t\t\t{ \n\t\t\t\t\t\tfield: this.fieldType, \n\t\t\t\t\t\ttitle: \"TYPE\",\n                        hidden: true,\n\t\t\t\t\t\tgroupHeaderTemplate:this.typeGroupHeaderTmpl,\n\t\t\t\t\t\twidth:300 \n\t\t\t\t\t},\n                    /* Selected Month */\n                    { \n\t\t\t\t\t\ttitle: kendo.toString(new Date(this.monthOf), 'MMMM yyyy'),\n                        headerAttributes : headerAttributes,\n                        columns: [\n                            { \n                                field: \"budget_month\",\n                                title: i18n.t('budget'),\n                                format: \"{0:n}\",\n                                aggregates: \"['sum']\",\n                                groupFooterTemplate: \"<div class='text-right text-bold text-black'>#=kendo.toString(sum, 'n')#</div>\",\n                                width:150,\n                                headerAttributes: subHeaderAttributes,\n                                attributes: attributes,\n                            },\n                            { \n                                field: \"actual_month\",\n                                title: i18n.t('actual'),\n                                format: \"{0:n}\",\n                                aggregates: \"['sum']\",\n                                groupFooterTemplate: \"<div class='text-right text-bold text-black'>#=kendo.toString(sum, 'n')#</div>\",\n                                width:150,\n                                headerAttributes: subHeaderAttributes,\n                                attributes: attributes,\n                            },\n                            { \n                                field: \"month_percentage\",\n                                title: \"%\",\n                                format: \"{0:p}\",\n                                width:150,\n                                headerAttributes: subHeaderAttributes,\n                                attributes: attributes,\n                            }\n                        ]\n\t\t\t\t\t},\n                    /* YTD(up to selected month) */\n                    { \n\t\t\t\t\t\ttitle: i18n.t('ytd_up_to_selected_month'),\n                        headerAttributes : headerAttributes,\n                        columns: [\n                            { \n                                field: \"budget_ytd\",\n                                title: i18n.t('budget'),\n                                format: \"{0:n}\",\n                                aggregates: \"['sum']\",\n                                groupFooterTemplate: \"<div class='text-right text-bold text-black'>#=kendo.toString(sum, 'n')#</div>\",\n                                width:150,\n                                headerAttributes: subHeaderAttributes,\n                                attributes: attributes,\n                            },\n                            { \n                                field: \"actual_ytd\",\n                                title: i18n.t('actual'),\n                                format: \"{0:n}\",\n                                aggregates: \"['sum']\",\n                                groupFooterTemplate: \"<div class='text-right text-bold text-black'>#=kendo.toString(sum, 'n')#</div>\",\n                                width:150,\n                                headerAttributes: subHeaderAttributes,\n                                attributes: attributes,\n                            },\n                            { \n                                field: \"ytd_percentage\",\n                                title: \"%\",\n                                format: \"{0:p}\",\n                                width:150,\n                                headerAttributes: subHeaderAttributes,\n                                attributes: attributes,\n                            }\n                        ]\n\t\t\t\t\t},\n                    /* Whole Year */\n                    { \n\t\t\t\t\t\ttitle: i18n.t('whole_year'),\n                        headerAttributes : headerAttributes,\n                        columns: [\n                            { \n                                field: \"budget_whole\",\n                                title: i18n.t('budget'),\n                                format: \"{0:n}\",\n                                aggregates: \"['sum']\",\n                                groupFooterTemplate: \"<div class='text-right text-bold text-black'>#=kendo.toString(sum, 'n')#</div>\",\n                                width:150,\n                                headerAttributes: subHeaderAttributes,\n                                attributes: attributes,\n                            },\n                            { \n                                field: \"actual_whole\",\n                                title: i18n.t('actual'),\n                                format: \"{0:n}\",\n                                aggregates: \"['sum']\",\n                                groupFooterTemplate: \"<div class='text-right text-bold text-black'>#=kendo.toString(sum, 'n')#</div>\",\n                                width:150,\n                                headerAttributes: subHeaderAttributes,\n                                attributes: attributes,\n                            },\n                            { \n                                field: \"whole_percentage\",\n                                title: \"%\",\n                                format: \"{0:p}\",\n                                width:150,\n                                headerAttributes: subHeaderAttributes,\n                                attributes: attributes,\n                            }\n                        ]\n\t\t\t\t\t},\n                ]\n\n                /* Set Columns */\n                this.columns = columns;\n\t\t\t},\n\t\t\t// On Reporint Language Changes\n\t\t\tonReportingLanguageChanges () {\n                this.fieldName = \"name\";\n                this.fieldType = \"type\";\n                this.totalWord = \"Total\";\n                if(this.reportingLanguage === \"local\"){\n                    this.fieldName = \"local_name\";\n                    this.fieldType = \"type_local_name\";\n                    this.totalWord = \"សរុប\";\n                }\n                \n                // Generate Group By\n                this.generateGroupBy();\n\n                // Generate column with new language\n                this.generateColumn();\n\t\t\t},\n            /* Templates */\n            typeGroupHeaderTmpl(dataItem) {\n\t\t\t\tlet name = dataItem.items[0].type;\n\n\t\t\t\tif(this.reportingLanguage === \"local\"){\n\t\t\t\t\tname = dataItem.items[0].type_local_name;\n\t\t\t\t}\n\n\t\t\t\treturn \"<span class='text-bold text-black'>\"+ name +\"</span>\";\n\t\t\t},\n\t\t\t// Generate Group By\n\t\t\tgenerateGroupBy(){\n\t\t\t\tthis.groupDefinition = {\n\t\t\t\t\tfield: this.fieldType, \n\t\t\t\t\taggregates : this.aggregateDefinition,\n\t\t\t\t\tcompare: function(a, b) {\n\t\t\t\t\t\tif (a.items[0].order === b.items[0].order) {\n\t\t\t\t\t\t\treturn 0;\n\t\t\t\t\t\t} else if (a.items[0].order > b.items[0].order) {\n\t\t\t\t\t\t\treturn 1;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn -1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n        },\n        watch : {\n            budget(){// Prevent null error\n                if(this.budget === null){\n                    this.budget = new BudgetModel();\n                }\n            },\n            reportingLanguage () {\n\t\t\t\tthis.onReportingLanguageChanges();\n            },\n        },\n        mounted () {\n\t\t\t// Generate Group By\n\t\t\tthis.generateGroupBy();\n\n\t\t\t// Initial Grid Columns\n\t\t\t// this.generateColumn();\n\t\t},\n    };\n</script>\n\n<style scoped>\n    .theme--light.v-data-table {\n        background-color: transparent !important;\n    }\n\n    .v-data-table > .v-data-table__wrapper > table > tbody > tr > td {\n        height: 32px !important;\n        border-bottom: thin solid rgba(0, 0, 0, 0.12) !important;\n        border-right: thin solid rgba(0, 0, 0, 0.12) !important;\n    }\n    .v-data-table.simple1_table.theme--light,\n    .v-data-table > .v-data-table__wrapper > table > tbody > tr:first-child > td {\n        border-top: thin solid rgba(0, 0, 0, 0.12) !important;\n    }\n    .v-data-table.simple_table.theme--light{\n        border-left: thin solid rgba(0, 0, 0, 0.12) !important;\n        border-right: thin solid rgba(0, 0, 0, 0.12) !important;\n    }\n\n    .theme--light.v-data-table.simple1_table > .v-data-table__wrapper > table > thead > tr:last-child > th:last-child{\n        border-right: none !important;\n    }\n\n    .theme--light.v-data-table > .v-data-table__wrapper > table > tbody > tr:hover:not(.v-data-table__expanded__content):not(.v-data-table__empty-wrapper) {\n        background-color: transparent !important;\n    }\n\n    .border-bottom {\n        border-bottom: thin solid rgba(0, 0, 0, 0.12) !important;\n    }\n\n    .font-small {\n        font-size: 12px;\n        line-height: 15px;\n    }\n\n    .font-26 {\n        font-size: 26px !important;\n    }\n    .v-data-table.simple_table.theme--light{\n        border-top: thin solid rgba(0, 0, 0, 0.12) !important;\n    }\n    .theme--light.v-data-table > .v-data-table__wrapper > table > thead > tr:last-child > th{\n        border-bottom: none !important;\n        border-right: thin solid rgba(0, 0, 0, 0.12) !important;\n    }\n    .theme--light.v-data-table > .v-data-table__wrapper > table > thead > tr > th{\n        border-bottom: thin solid rgba(0, 0, 0, 0.12) !important;\n        border-right: thin solid rgba(0, 0, 0, 0.12) !important;\n    }\n    .theme--light.v-data-table > .v-data-table__wrapper > table > tbody > tr:not(:last-child) > td:last-child,\n    .theme--light.v-data-table > .v-data-table__wrapper > table > tbody > tr:not(:last-child) > th:last-child,\n    .theme--light.v-data-table > .v-data-table__wrapper > table > tbody > tr > td:last-child{\n        border-right: none !important;\n    }\n\n\n    .v-data-table.table_list > .v-data-table__wrapper > table > tbody > tr > td {\n        height: 32px !important;\n        border-bottom: thin solid rgba(0, 0, 0, 0.12) !important;\n        border-right: none !important;\n    }\n    .v-data-table.table_list.theme--light > .v-data-table__wrapper > table > tbody > tr:first-child > td{\n        border-top: none !important;\n    }\n\n    @media (max-width: 576px) {\n\n    }\n</style>"]}]}