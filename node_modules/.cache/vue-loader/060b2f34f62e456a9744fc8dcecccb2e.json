{"remainingRequest":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/macos/Desktop/banhji-0.2/banhji-commerce/src/views/banking/banking/bank_center/Statement.vue?vue&type=style&index=0&id=73be49bc&scoped=true&lang=css&","dependencies":[{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/src/views/banking/banking/bank_center/Statement.vue","mtime":1641438291849},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/@vue/cli-service/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgpAbWVkaWEgKG1heC13aWR0aDogNTc2cHgpIHsKICAgIC52LWFwcGxpY2F0aW9uIHB7CiAgICAgICAgbWFyZ2luLWJvdHRvbTogMCAhaW1wb3J0YW50OwogICAgfQp9Cg=="},{"version":3,"sources":["Statement.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgaA;AACA;AACA;AACA;AACA","file":"Statement.vue","sourceRoot":"src/views/banking/banking/bank_center","sourcesContent":["<template>\n    <v-row class=\"mx-3 white\">\n        <v-col sm=\"6\" cols=\"12\">\n            <p >{{$t('updated_on')}} {{ lastUpdated }}</p>\n        </v-col>\n        <v-col sm=\"6\" cols=\"12\" >\n            <v-btn to=\"\" color=\"primary\"\n                class=\"white--text float-right text-capitalize ml-3 mb-3\" @click=\"initialData\">\n                {{$t('fetch_new_feeds')}}\n            </v-btn>\n            <v-btn to=\"\" color=\"primary\"\n                class=\"white--text float-right text-capitalize\" @click=\"showImport++\">\n                {{$t('import')}}\n            </v-btn>\n        </v-col>\n        <v-col sm=\"12\" cols=\"12\" class=\"pt-0\" v-if=\"showImport % 2\">\n            <v-row>\n                <v-col sm=\"9\" cols=\"9\" class=\"pt-0\">\n                    <v-file-input\n                        v-model=\"files\"\n                        :placeholder=\"'file: xlsm, xlsx, xls...'\"\n                        accept=\".xlsm, .xlsx, .xls\"\n                        prepend-icon=\"mdi-file\">\n                    <template v-slot:selection=\"{ text }\">\n                        <v-chip\n                            small\n                            label\n                            color=\"primary\"\n                        >\n                            {{ text }}\n                        </v-chip>\n                    </template>\n                </v-file-input>\n                </v-col>\n                <v-col sm=\"3\" cols=\"3\" class=\"pt-0\">\n                    <v-btn to=\"\" color=\"primary\"\n                        class=\"white--text float-right text-capitalize\" @click=\"importFile\">\n                        {{$t('upload')}}\n                    </v-btn>\n                </v-col>\n            </v-row>\n\n            <v-alert type=\"warning\"\n                    v-model=\"alert\"\n                    dismissible>\n                <span style=\"font-size: small;\" v-html=\"errorMessage\"/>\n            </v-alert>\n        </v-col>\n        <v-col sm=\"12\" cols=\"12\" class=\"pt-0\">\n            <div style=\"position:relative;\" class=\"reports_table\">\n                <LoadingMe\n                    :isLoading=\"showLoading\"\n                    :fullPage=\"false\"\n                    :myLoading=\"true\"\n                    type=\"loading\"\n                />\n                <v-data-table\n                    :headers=\"headers\"\n                    :items=\"bankStatements\"\n                    class=\"elevation-1\"\n                >\n                    <!-- Date -->\n                    <template v-slot:[`item.statement_date`]=\"{ item }\">\n                        <span>{{ Helper.dateFormat(item.statement_date) }}</span>\n                    </template>\n\n                    <!-- Description -->\n                    <template v-slot:[`item.details`]=\"{ item }\">\n                        <p style=\"font-size: x-small;\">{{ item.details }}</p>\n                    </template>\n\n                    <!-- Amount -->\n                    <template v-slot:[`item.amount`]=\"{ item }\">\n                        <span>{{ Number(item.amount).toLocaleString() }} {{ item.currency }}</span>\n                    </template>\n\n                    <!-- Status -->\n                    <template v-slot:[`item.journal_entry_uuid`]=\"{ item }\">\n                        <div v-if=\"item.reconcile_uuid\">\n                            {{$t('reconciled')}}\n                        </div>\n                        <div v-else>\n                            <v-btn color=\"primary\"\n                                class=\"white--text float-right text-capitalize\" \n                                @click=\"goReconcile(item)\"\n                                x-small>{{$t('Reconcile Now')}}\n                            </v-btn>\n                        </div>\n                    </template>\n\n                </v-data-table>\n            </div>\n        </v-col>\n        \n    </v-row>\n</template>\n<script>\n    import kendo from \"@progress/kendo-ui\";\n    import Helper from \"@/helper.js\";\n    import { i18n } from '@/i18n';\n    import { \n        BankAccountModel,\n        BankStatementModel,\n        ReconcileModel,\n        AccountModel,\n        JournalModel,\n        ExchangeRateModel,\n    } from \"@/scripts/model/AppModels\";\n    \n    /* Store */\n    import store from \"@/store\"\n    const institute = store.state.institute.institute\n\n    const {\n        bankStatementHandler,\n    } = require(\"@/scripts/AppHandlers\");\n\n    export default {\n        name: \"BankStatement\",\n        components: {\n            \"LoadingMe\": () => import('@/components/Loading'),\n        },\n        props: {\n            initBankAccount: {\n                type: Object,\n            },\n        },\n        data () {\n            return {\n                /* Obj */\n                bankAccount         : new BankAccountModel(),\n                reconcile           : new ReconcileModel(),\n                adjustmentJournal   : new JournalModel(),\n                adjustmentEntries   : [],\n                // Form validation\n                valid: true,\n                isEdit: false,\n                alert: false,\n                errorMessage: '',\n                Helper              : Helper,\n                user: Helper.getUser(),\n                // File upload\n                files               : null,\n                excelData           : [],\n                excelStatements     : [],\n                // Other\n                lastUpdated         : new Date(),\n                exchangeRate        : new ExchangeRateModel(institute.baseCurrency),\n                adjustmentAccount   : new AccountModel(),\n                showImport          : 0,\n                showReconcileDialog : false,\n                bankStatement       : null,\n                bankStatements      : [],\n                banhjiTxnAmount     : 0,\n                banhjiTransaction   : null,\n                banhjiTransactions  : [],\n                banhjiMatchedTxns   : [],\n                bankMappings        : [],\n                headers             : [\n                    { text: i18n.t('date'), value: 'statement_date' },\n                    { text: i18n.t('bank_detail'), value: 'details', width: \"25%\" },\n                    { text: i18n.t('amount'), value: 'amount' },\n                    { text: i18n.t('source'), value: 'source' },\n                    { text: i18n.t('status'), value: 'journal_entry_uuid' },\n                ],\n                // Kendo\n                schemaFields: {\n                    journal_date    : { type: \"date\" },\n                    journal_type    : { type: \"string\" },\n                    journal_number  : { type: \"string\" },\n                    description     : { type: \"string\" },\n                    amount          : { type: \"number\" }\n                },\n                // LoadingMe\n                showLoading: false,\n            }\n        },\n        methods: {\n            /* Initial Data */\n            initialData () {\n                this.bankAccount = Object.assign({}, this.initBankAccount);\n                this.loadBankStatement();\n            },\n            // Load data\n\t\t\tasync initialize() {\n\t\t\t\tthis.showLoading = true;\n\n\t\t\t\t/* Reset */\n\t\t\t\tstore.state.banking.bankMappingLoaded = false;\n\t\t\t\t\n\t\t\t\t/* Call Bank Mapping List */\n\t\t\t\tthis.bankMappings = await this.$store.dispatch('banking/getBankMappings');\n\t\t\t\t\n\t\t\t\tthis.showLoading = false;\n\t\t\t},\n            /* Load Statement */\n            loadBankStatement () {\n                if(this.bankAccount.uuid){\n                    this.showLoading = true;\n                    bankStatementHandler.getByBankAccountId(this.bankAccount.uuid)\n                    .then(res => {\n                        if (res.data) {\n                            this.bankStatements = [];\n                            \n                            res.data.forEach(value => {\n                                let bs = new BankStatementModel(value);\n                                this.bankStatements.push(bs);\n                            })\n                        }\n                    })\n                    .finally(()=>{\n                        this.showLoading = false;\n                    });\n                }else{\n                    /* Alert Warning */\n                    this.$snotify.warning(i18n.t(\"please_select_bank_account\"));\n                }\n            },\n            /* Import Excel */\n            async importFile() {\n                if(this.bankAccount.uuid){\n                    if (this.files !== null) {\n                        this.excelData = await Helper.getExcelData(this.files);\n                        this.generateExcelData();\n                    }else{\n                        /* Alert Warning */\n                        this.$snotify.warning(i18n.t(\"please_select_file\"));\n                    }\n                }else{\n                    this.$snotify.warning(i18n.t(\"please_select_bank_account\"));\n                }\n            },\n            /* Generate Excel Data */\n            generateExcelData(){\n                let bankStatementList = [],\n                    excelHeaders = this.excelData[0],\n                    bankRule = this.bankMappings.find(value => value.bank_uuid === this.bankAccount.bank.uuid);\n                    \n                this.excelData.forEach((excelElement, excelIndex) => {\n                    if(excelIndex > 0){// Skip header row 0\n                        let bankStatement = new BankStatementModel({\n                            bank_uuid: this.bankAccount.bank.uuid,\n                            bank_acc_uuid: this.bankAccount.uuid,\n                            bank_acc_number: this.bankAccount.number,\n                            source : 'imported',\n                        });\n\n                        // Matching by bank mapping rule\n                        bankRule.criteria.forEach(rule => {\n                            excelHeaders.forEach((header, headerIndex) => {\n                                /* Defind Headers */\n                                let excelHeader = header.trim(),\n                                    ruleHeader = rule.field.trim();\n                                    \n                                // Matching header name\n                                if(ruleHeader.includes(excelHeader)){\n                                    if(rule.field2.toLowerCase() === 'statement_date'){// Date\n                                        bankStatement.statement_date = Helper.toISODate(excelElement[headerIndex]);\n                                        bankStatement.entry_date = bankStatement.statement_date;\n                                    } else if(rule.field2.toLowerCase() === 'bank_ref'){// Number\n                                        bankStatement.bank_ref = excelElement[headerIndex];\n                                    } else if(rule.field2.toLowerCase() === 'details'){// Description\n                                        bankStatement.details = excelElement[headerIndex];\n                                    } else if(rule.field2.toLowerCase() === 'debit'){// Debit\n                                        let amt = excelElement[headerIndex];\n\n                                        if(!isNaN(amt)){// Check if number\n                                            bankStatement.amount = kendo.parseFloat(Math.abs(amt));\n                                        }\n                                    } else if(rule.field2.toLowerCase() === 'credit'){// Credit\n                                        let amt = excelElement[headerIndex];\n                                        \n                                        if(!isNaN(amt)){// Check if number\n                                            bankStatement.amount = kendo.parseFloat(Math.abs(amt) * -1);// Credit is negative\n                                        }\n                                    } else if(rule.field2.toLowerCase() === 'balance'){// Balance\n                                        let amt = excelElement[headerIndex];\n\n                                        if(!isNaN(amt)){// Check if number\n                                            bankStatement.balance = kendo.parseFloat(amt);\n                                        }\n                                    } else if(rule.field2.toLowerCase() === 'currency'){// Currency\n                                        bankStatement.currency = excelElement[headerIndex];\n                                    }\n                                }\n                            });\n                        })\n\n                        // Add bank statement\n                        bankStatementList.push(bankStatement);\n                    }\n                    \n                });\n\n                // Bind bank statement\n                this.excelStatements = bankStatementList;\n                \n                this.uploadStatement();\n            },\n            /* Validate Excel Statement */\n            validateExcelStatement(){\n                let result = true, msg = '';\n\n                // Empty Excel Statement\n                if(this.excelStatements.length === 0){\n                    result = false;\n                    msg += '<p>There is no data to import</p>';\n                }else{\n                    let invalidData = false;\n                    this.excelStatements.forEach((value, index) => {\n                        let d = new Date(value.date),\n                            validDate = false, validDetail = false, validAmount = false;\n\n                        // Date\n                        if (Object.prototype.toString.call(value.date) === \"[object Date]\") {\n                            // it is a date\n                            if (isNaN(d.getTime())) {\n                                // date is not valid\n                            } else {\n                                // date is valid\n                                validDate = true;\n                            }\n                        }\n\n                        // Description\n                        if(value.details !== ''){\n                            validDetail = true;\n                        }\n\n                        // Amount\n                        if(value.amount !== 0){\n                            validAmount = true;\n                        }\n\n                        // Check those require fields\n                        if(validDate && validDetail && validAmount){\n                            invalidData = true;\n                            msg += `<p>Invalid data at row number ${index+1}</p>`;\n                            \n                            // Exit Loop\n                            return false;\n                        }\n                    });\n\n                    // Validate Data\n                    if(invalidData){\n                        result = false;\n                    }\n                }\n\n                // Show Alert\n                this.errorMessage = msg;\n                this.alert = false;\n                if (result === false) {\n                    this.alert = true;\n                }\n\n                return result;\n            },\n            /* Clear */\n            clear () {\n                this.files = null;\n                this.showImport = 0;\n            },\n            /* Upload Statement */\n            uploadStatement(){\n                if(this.validateExcelStatement()){\n                    let isBatch = true;\n                    \n                    this.showLoading = true;\n                    bankStatementHandler.save(this.excelStatements, isBatch)\n                        .then(function (response) {\n                            this.responseStatus(response)\n                        })\n                        .finally(() => {\n                            this.showLoading = false;\n                        });\n                }\n            },\n            responseStatus(response) {\n                if (response) {\n                    /* Load data */\n                    this.initialData();\n\n                    /* Clear */\n                    this.clear();\n                    \n                    /* Alert Success */\n                    this.$snotify.success(i18n.t(\"successful\"));\n                } else {\n                    /* Alert Error */\n                    this.$snotify.error(i18n.t(\"error_something_wrong\"));\n                }\n            },\n            /* Go To Reconcile */\n            goReconcile(selectedItem) {\n                this.$router.push({ \n                    name: 'Bank Statement Reconciliation', \n                    params: { \n                        initBankStatement: new BankStatementModel(selectedItem),\n                    },\n                });\n            },\n        },\n        watch: {\n            initBankAccount: \"initialData\",\n        },\n        created() {\n            this.initialize();\n        },\n        mounted() {\n            this.initialData();\n        },\n    }\n</script>\n<style scoped>\n    @media (max-width: 576px) {\n        .v-application p{\n            margin-bottom: 0 !important;\n        }\n    }\n</style>"]}]}