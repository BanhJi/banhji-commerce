{"remainingRequest":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/src/views/accounting/reports/statement_profit_lost/StatementOfProfitOrLossBySegments.vue?vue&type=style&index=0&id=106d9997&scoped=true&lang=css&","dependencies":[{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/src/views/accounting/reports/statement_profit_lost/StatementOfProfitOrLossBySegments.vue","mtime":1638499443111},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/@vue/cli-service/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLnJlcG9ydHNfbGlzdCB7CiAgd2lkdGg6IDEwMCU7CiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjsKICBwYWRkaW5nOiAyMHB4IDIwcHggNXB4Owp9Ci5yZXBvcnRfZmlsdGVyIHsKICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjhmOGY5OwogIHBhZGRpbmc6IDAgMjBweCA1cHggMjBweDsKICBwb3NpdGlvbjogcmVsYXRpdmU7Cn0KLmR2X210IHsKICBtYXJnaW4tdG9wOiAyNHB4Owp9Ci5yZXBvcnRfZXhwb3J0IHsKICBwb3NpdGlvbjogYWJzb2x1dGU7CiAgdG9wOiAxNXB4Owp9Ci5yZXBvcnRfdG90YWwgewogIHBhZGRpbmc6IDEyLjVweDsKICB0ZXh0LWFsaWduOiByaWdodDsKICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlOwogIGZvbnQtd2VpZ2h0OiA3MDA7CiAgYm9yZGVyLXRvcDogMXB4IHNvbGlkICMzMzM7CiAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICMzMzM7Cn0KLmN1c3RvbV9leHBhbnNpb24KICAudi1leHBhbnNpb24tcGFuZWwtaGVhZGVyCiAgLnYtZXhwYW5zaW9uLXBhbmVsLWhlYWRlcl9faWNvbgogIC52LWljb24gewogIGRpc3BsYXk6IG5vbmUgIWltcG9ydGFudDsKfQoudi1leHBhbnNpb24tcGFuZWwgewogIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjY2NjY2NjOwogIGJvcmRlci1yYWRpdXM6IDA7Cn0KLnYtZXhwYW5zaW9uLXBhbmVsOjpiZWZvcmUgewogIGJveC1zaGFkb3c6IG5vbmU7Cn0KLnYtZXhwYW5zaW9uLXBhbmVsLWhlYWRlciB7CiAgcGFkZGluZzogMTVweDsKfQoudi1leHBhbnNpb24tcGFuZWwtY29udGVudF9fd3JhcCB7CiAgcGFkZGluZzogMCAzNXB4IDEwcHg7Cn0KQG1lZGlhIChtYXgtd2lkdGg6IDU3NnB4KSB7CiAgLmR2X210LAogIC5kdl9tdDggewogICAgbWFyZ2luLXRvcDogMDsKICB9CiAgLnJlcG9ydHNfbGlzdCB7CiAgICBtYXJnaW4tdG9wOiAwOwogIH0KfQo="},{"version":3,"sources":["StatementOfProfitOrLossBySegments.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"StatementOfProfitOrLossBySegments.vue","sourceRoot":"src/views/accounting/reports/statement_profit_lost","sourcesContent":["<template>\n  <v-row>\n    <v-col sm=\"12\" cols=\"12\" class=\"grayBg px-6\">\n      <v-card color=\"white\" class=\"pa-3 no_border\" elevation=\"0\">\n        <v-row class=\"mt-0\">\n          <v-col sm=\"12\" cols=\"12\" class=\"py-0\">\n            <app-searchdate\n              :initStartDate=\"startDate\"\n              @emitStartDate=\"startDate = $event\"\n              :initEndDate=\"endDate\"\n              @emitEndDate=\"endDate = $event\"\n            />\n          </v-col>\n        </v-row>\n        <v-row class=\"mt-0\">\n          <v-col class=\"py-0\" sm=\"4\" cols=\"4\">\n            <label class=\"label\">{{ $t(\"segment\") }}</label>\n            <app-segment-list-item-group\n              :initSegment=\"selectedSegmentIds\"\n              @emitSegment=\"selectedSegmentIds = $event\"\n            />\n          </v-col>\n          <v-col sm=\"4\" cols=\"4\" class=\"py-0\">\n            <div class=\"report_expor\">\n              <label class=\"mb-1\">{{ $t(\"reporting_language\") }}:</label>\n              <app-reporting-language\n                :initLanguage=\"reportingLanguage\"\n                @emitLanguage=\"reportingLanguage = $event\"\n              />\n            </div>\n          </v-col>\n          <v-col class=\"py-0\" sm=\"4\" cols=\"4\">\n            <v-btn class=\"white--text dv_mt\" color=\"primary\" @click=\"search\">\n              {{ $t(\"run_report\") }}\n            </v-btn>\n          </v-col>\n        </v-row>\n        <v-row>\n          <v-col sm=\"12\" cols=\"12\" class=\"custom_expansion py-0\">\n            <kendo-datasource\n              ref=\"statementPLDS\"\n              :data=\"statementPLList\"\n              :schema=\"schemaDefinition\"\n              :sort=\"sortDefinition\"\n              :group=\"groupDefinition\"\n              :aggregate=\"aggregateDefinition\"\n            />\n\n            <kendo-grid\n              id=\"gridSPL\"\n              class=\"custom_grid\"\n              :data-source-ref=\"'statementPLDS'\"\n              :dataBound=\"dataBound\"\n              :change=\"onGridChanges\"\n              :selectable=\"true\"\n              :persistSelection=\"true\"\n              :sortable=\"true\"\n              :column-menu=\"true\"\n              :reorderable=\"true\"\n              :resizable=\"true\"\n              :noRecords=\"true\"\n              :toolbar=\"['excel']\"\n              :excel-file-name=\"'incomeStatement.xlsx'\"\n              :excel-filterable=\"true\"\n              :columns=\"columns\"\n            />\n          </v-col>\n        </v-row>\n        <LoadingMe\n          :isLoading=\"showLoading\"\n          :fullPage=\"false\"\n          :myLoading=\"true\"\n        />\n      </v-card>\n    </v-col>\n  </v-row>\n</template>\n\n<script>\nimport kendo from \"@progress/kendo-ui\";\nimport { i18n } from \"@/i18n\";\nimport Helper from \"@/helper.js\";\nimport { mapState } from \"vuex\";\n\nconst { incomeStatementHandler } = require(\"@/scripts/AppHandlers\");\nconst OrderNumberPL = require(\"@/scripts/default_setup/OrderNumberPL.js\");\n\nexport default {\n  components: {\n    LoadingMe: () => import(\"@/components/Loading\"),\n    \"app-searchdate\": () => import(\"@/components/custom_templates/SearchDate\"),\n    \"app-reporting-language\": () =>\n      import(\"@/components/kendo_templates/ReportingLanguageDropDownList\"),\n    \"app-segment-list-item-group\": () =>\n      import(\"@/components/dropdownlist/SegmentListItemGroup\"),\n  },\n  data: () => ({\n    // Obj\n    startDate: \"\",\n    endDate: \"\",\n    statementPLList: [],\n    selectedSegmentIds: [],\n    Helper: Helper,\n    // Reporting Language\n    reportingLanguage: \"english\",\n    fieldName: \"name\",\n    fieldType: \"type\",\n    // LodingMe\n    showLoading: false,\n    /* KENDO */\n    columns: [],\n    sortDefinition: { field: \"number\", dir: \"asc\" },\n    groupDefinition: [],\n    aggregateDefinition: [],\n    schemaDefinition: {\n      model: { id: \"accountUUID\" },\n    },\n  }),\n  methods: {\n    async loadData() {\n      // Call List\n      await this.$store.dispatch(\"segments/getList\");\n    },\n    /* KENDO */\n    /* On grid changes => link to GL */\n    onGridChanges() {\n      let grid = kendo.jQuery(\"#gridSPL\").data(\"kendoGrid\");\n      let selectedSegmentIds = grid.dataItem(grid.select());\n\n      this.$router.push({\n        path: \"general_ledger\",\n        query: {\n          account_id: selectedSegmentIds.accountUUID,\n          start_date: this.startDate,\n          end_date: this.endDate,\n        },\n      });\n    },\n    // Search journals\n    search() {\n      if (this.selectedSegmentIds.length > 0) {\n        let sdate = this.startDate,\n          edate = this.endDate;\n\n        if (sdate && edate) {\n          sdate =\n            kendo.toString(new Date(sdate), \"yyyy-MM-dd\") + \"T00:00:00.000Z\";\n\n          edate = new Date(edate);\n          edate = kendo.toString(edate, \"yyyy-MM-dd\") + \"T23:59:59.999Z\";\n        } else {\n          sdate = 0;\n          edate = 0;\n        }\n\n        // Empty dataSource\n        let ds = this.$refs.statementPLDS.kendoWidget();\n        ds.data([]);\n\n        // Query\n        this.showLoading = true;\n        incomeStatementHandler\n          .getBySegments(sdate, edate, this.selectedSegmentIds)\n          .then((response) => {\n            this.statements = response;\n            this.bindData();\n          })\n          .finally(() => {\n            this.showLoading = false;\n          });\n      } else {\n        Helper.alertErrorMsg(\"Please select segment\");\n      }\n    },\n    /* Bind Data */\n    async bindData() {\n      let entries = {};\n\n      for (let i = 0; i < this.selectedSegmentIds.length; i++) {\n        this.statements[i].forEach((value) => {\n          let entry = value;\n\n          // Order\n          if (value.account_type_number == OrderNumberPL.GrossProfit.number) {\n            // Gross Profit\n            entry.order = OrderNumberPL.GrossProfit.order;\n          } else if (\n            value.account_type_number == OrderNumberPL.OtherRevenue.number\n          ) {\n            // Other Revenue\n            entry.order = OrderNumberPL.OtherRevenue.order;\n          } else if (\n            value.account_type_number == OrderNumberPL.OperatingExpense.number\n          ) {\n            // Operating Expense\n            entry.order = OrderNumberPL.OperatingExpense.order;\n          } else if (\n            value.account_type_number ==\n            OrderNumberPL.OperatingIncomeEBITDA.number\n          ) {\n            // Operating Income (EBITDA)\n            entry.order = OrderNumberPL.OperatingIncomeEBITDA.order;\n          } else if (\n            value.account_type_number ==\n            OrderNumberPL.EarningBeforeInterestAndTaxEBIT.number\n          ) {\n            // Earning Before Interest And Tax(EBIT)\n            entry.order = OrderNumberPL.EarningBeforeInterestAndTaxEBIT.order;\n          } else if (\n            value.account_type_number == OrderNumberPL.ProfitBeforeTax.number\n          ) {\n            // Profit Before Tax\n            entry.order = OrderNumberPL.ProfitBeforeTax.order;\n          } else if (\n            value.account_type_number == OrderNumberPL.ProfitForThePeriod.number\n          ) {\n            // Profit For The Period\n            entry.order = OrderNumberPL.ProfitForThePeriod.order;\n          } else {\n            entry.order = value.account_type_number;\n          }\n\n          /* Grouping */\n          let groupName =\n            String(value.accountUUID) + String(value.account_type_number);\n          if (entries[groupName]) {\n            entries[groupName][\"s\" + i] = value.balance;\n          } else {\n            entries[groupName] = entry;\n\n            /* Add all segments to columns */\n            for (let j = 0; j < this.selectedSegmentIds.length; j++) {\n              entries[groupName][\"s\" + j] = 0;\n            }\n\n            entries[groupName][\"s\" + i] = value.balance;\n          }\n        });\n      }\n\n      this.statementPLList = Object.values(entries);\n      this.generateColumn();\n    },\n    // Row Template\n    accountTmpl(dataItem) {\n      let name = dataItem.number;\n\n      if (this.reportingLanguage === \"local\") {\n        name += \" - \" + dataItem.local_name;\n      } else {\n        name += \" - \" + dataItem.name;\n      }\n\n      return name;\n    },\n    typeGroupHeaderTmpl(dataItem) {\n      let name = dataItem.items[0].type;\n\n      if (this.reportingLanguage === \"local\") {\n        name = dataItem.items[0].type_local_name;\n      }\n\n      return \"<span class='text-bold text-black'>\" + name + \"</span>\";\n    },\n    /* Databound */\n    dataBound(e) {\n      let grid = e.sender;\n\n      grid.dataSource.data().forEach((value) => {\n        if (value.account_type_number >= 100) {\n          let row = grid.tbody\n            .find(\"tr[data-uid='\" + value.uid + \"']\")\n            .prev(\".k-grouping-row\");\n          grid.collapseGroup(row);\n        }\n      });\n    },\n    // Generate Columns\n    generateColumn() {\n      let columns = [\n        {\n          field: this.fieldName,\n          title: i18n.t(\"account\"),\n          template: this.accountTmpl,\n          locked: true,\n          width: 300,\n        },\n        {\n          field: this.fieldType,\n          title: \"TYPE\",\n          hidden: true,\n          groupHeaderTemplate: this.typeGroupHeaderTmpl,\n          width: 300,\n        },\n        {\n          field: \"statementGroup\",\n          title: \"STATEMENT GROUP\",\n          hidden: true,\n          groupHeaderTemplate:\n            \"<span class='text-bold text-black'>#=value#</span>\",\n          width: 300,\n        },\n        {\n          field: \"groupNature\",\n          title: \"NATURE\",\n          hidden: true,\n          groupHeaderTemplate:\n            \"<span class='text-bold text-black'>#=value#</span>\",\n          width: 300,\n        },\n      ];\n\n      let headerAttributes = {\n          class: \"table-header-cell\",\n          style: \"text-align: right;padding-right: 35px; font-size: 14px\",\n        },\n        attributes = {\n          class: \"table-cell\",\n          style: \"text-align: right; font-size: 14px\",\n        };\n\n      /* Set Column Segments */\n      for (let i = 0; i < this.selectedSegmentIds.length; i++) {\n        /* Segment */\n        let segment = this.segments.find(\n          (item) => item.id === this.selectedSegmentIds[i]\n        );\n\n        /* Column Segment */\n        columns.push({\n          field: \"s\" + i,\n          title: segment.name,\n          format: \"{0:n}\",\n          width: 200,\n          aggregates: \"['sum']\",\n          groupHeaderColumnTemplate:\n            \"<div class='text-right text-bold text-black'>#=kendo.toString(sum, 'n')#</div>\",\n          headerAttributes: headerAttributes,\n          attributes: attributes,\n        });\n      }\n\n      this.columns = columns;\n    },\n    // On Reporint Language Changes\n    onReportingLanguageChanges() {\n      this.fieldName = \"name\";\n      this.fieldType = \"type\";\n      if (this.reportingLanguage === \"local\") {\n        this.fieldName = \"local_name\";\n        this.fieldType = \"type_local_name\";\n      }\n\n      // Generate Group By\n      this.generateGroupBy();\n\n      // Generate column with new language\n      this.generateColumn();\n    },\n    // Generate Group By\n    generateGroupBy() {\n      /* Aggregate Defintion */\n      let aggregateDefinition = [];\n      for (let i = 0; i < 50; i++) {\n        aggregateDefinition.push({ field: \"s\" + i, aggregate: \"sum\" });\n      }\n      this.aggregateDefinition = aggregateDefinition;\n\n      this.groupDefinition = {\n        field: this.fieldType,\n        aggregates: aggregateDefinition,\n        compare: function(a, b) {\n          if (a.items[0].order === b.items[0].order) {\n            return 0;\n          } else if (a.items[0].order > b.items[0].order) {\n            return 1;\n          } else {\n            return -1;\n          }\n        },\n      };\n    },\n  },\n  watch: {\n    reportingLanguage() {\n      this.onReportingLanguageChanges();\n    },\n  },\n  computed: mapState({\n    segments: (state) => state.segments.list,\n  }),\n  created() {\n    this.loadData();\n  },\n  mounted() {\n    // Generate Group By\n    this.generateGroupBy();\n\n    // Initial Grid Columns\n    this.generateColumn();\n  },\n};\n</script>\n\n<style scoped>\n.reports_list {\n  width: 100%;\n  background-color: #fff;\n  padding: 20px 20px 5px;\n}\n.report_filter {\n  background-color: #f8f8f9;\n  padding: 0 20px 5px 20px;\n  position: relative;\n}\n.dv_mt {\n  margin-top: 24px;\n}\n.report_export {\n  position: absolute;\n  top: 15px;\n}\n.report_total {\n  padding: 12.5px;\n  text-align: right;\n  text-transform: uppercase;\n  font-weight: 700;\n  border-top: 1px solid #333;\n  border-bottom: 1px solid #333;\n}\n.custom_expansion\n  .v-expansion-panel-header\n  .v-expansion-panel-header__icon\n  .v-icon {\n  display: none !important;\n}\n.v-expansion-panel {\n  border-bottom: 1px solid #cccccc;\n  border-radius: 0;\n}\n.v-expansion-panel::before {\n  box-shadow: none;\n}\n.v-expansion-panel-header {\n  padding: 15px;\n}\n.v-expansion-panel-content__wrap {\n  padding: 0 35px 10px;\n}\n@media (max-width: 576px) {\n  .dv_mt,\n  .dv_mt8 {\n    margin-top: 0;\n  }\n  .reports_list {\n    margin-top: 0;\n  }\n}\n</style>\n"]}]}