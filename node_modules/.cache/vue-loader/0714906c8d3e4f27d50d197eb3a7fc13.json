{"remainingRequest":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/macos/Desktop/banhji-0.2/banhji-commerce/src/views/customers/CashReceipt.vue?vue&type=style&index=0&id=ee9a34fe&scoped=true&lang=css&","dependencies":[{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/src/views/customers/CashReceipt.vue","mtime":1642478961304},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/@vue/cli-service/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLmstZHJvcGRvd24gewogICAgd2lkdGg6IDEwMCU7CiAgICBtYXJnaW4tdG9wOiAzcHg7Cn0KCi5mdW5jdGlvbl93cmFwcGVyIHsKICAgIGJveC1zaGFkb3c6IG5vbmUgIWltcG9ydGFudDsKfQoKLnYtYXBwbGljYXRpb24tLWlzLWx0ciAudi10ZXh0LWZpZWxkIC52LWlucHV0X19hcHBlbmQtaW5uZXIgewogICAgbWFyZ2luLXRvcDogMCAhaW1wb3J0YW50Owp9Cgoudi1pbnB1dF9fc2xvdCB7CiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmICFpbXBvcnRhbnQ7Cn0KCi5mdW5jdGlvbl9jb250ZW50IC5sYWJlbCB7CiAgICBtYXJnaW4tYm90dG9tOiAxMHB4OwogICAgZGlzcGxheTogaW5saW5lLWJsb2NrOwp9CgouYm9yZGVyX3JhZGl1czEwIHsKICAgIGJvcmRlci1yYWRpdXM6IDEwcHggIWltcG9ydGFudDsKICAgIGJhY2tncm91bmQtY29sb3I6ICNGMkYyRjI7Cn0KCi5wYS0zLnYtY2FyZCBoNCB7CiAgICBmb250LXNpemU6IDE4cHg7CiAgICBjb2xvcjogIzMzMzsKfQoKLnBhLTMudi1jYXJkIHAgewogICAgZm9udC1zaXplOiAxMnB4OwogICAgY29sb3I6ICNCNUI1QjU7Cn0KCi5hdHRhY2htZW50X2ZpbGUgewogICAgYmFja2dyb3VuZC1jb2xvcjogI0VGRURFRDsKICAgIGJvcmRlci1yYWRpdXM6IDAgIWltcG9ydGFudDsKfQoKLmF0dGFjaG1lbnRfdGFibGUudi1kYXRhLXRhYmxlIHRhYmxlIHsKICAgIGJvcmRlcjogdGhpbiBzb2xpZCByZ2JhKDAsIDAsIDAsIDAuMTIpOwp9CgouYXR0YWNobWVudF90YWJsZSB0YWJsZSB0ciB0aCB7CiAgICBib3JkZXItbGVmdDogdGhpbiBzb2xpZCByZ2JhKDAsIDAsIDAsIDAuMTIpOwogICAgaGVpZ2h0OiAzNXB4OwogICAgYm9yZGVyLXJpZ2h0OiB0aGluIHNvbGlkIHJnYmEoMCwgMCwgMCwgMC4xMik7Cn0KCi5ibG9ja19kZWJpdCwKLmJsb2NrX2NyZWRpdCB7CiAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgI2ZmZjsKfQoKLmJsb2NrX2RlYml0IHAubnVtYmVyLAouYmxvY2tfY3JlZGl0IHAubnVtYmVyIHsKICAgIGZvbnQtc2l6ZTogMjVweDsKICAgIGNvbG9yOiAjN0Y3RjdGOwp9CgouYmxvY2tfZGViaXQgaDUsCi5ibG9ja19jcmVkaXQgaDUsCi5ibG9ja19kaWZmZXJlbmNlIGg1IHsKICAgIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7CiAgICBjb2xvcjogIzdGN0Y3RjsKICAgIGZvbnQtc2l6ZTogMTVweDsKICAgIGZvbnQtd2VpZ2h0OiBub3JtYWw7Cn0KCi5ibG9ja19kaWZmZXJlbmNlIGg1IHsKICAgIGZvbnQtc2l6ZTogMThweDsKfQoKLmJsb2NrX2RpZmZlcmVuY2UgaDUgc3BhbiB7CiAgICBmb250LXNpemU6IDE1cHg7Cn0KCi5jdXN0b21fZ3JpZCB0YWJsZSB0aDpsYXN0LWNoaWxkIHsKICAgIHRleHQtYWxpZ246IHJpZ2h0ICFpbXBvcnRhbnQ7Cn0KCi5wcmltYXJ5LS10ZXh0IHsKICAgIGNvbG9yOiAjMDNiMTU0Owp9CgpAbWVkaWEgKG1pbi13aWR0aDogMTI2NHB4KSB7CiAgICAuY29udGFpbmVyIHsKICAgICAgICBtYXgtd2lkdGg6IDEyNTBweDsKICAgIH0KfQoKQG1lZGlhIChtYXgtd2lkdGg6IDU3NnB4KSB7CiAgICAucHQtNi5jb2wtc20tNS5jb2wtMTIgewogICAgICAgIHBhZGRpbmctdG9wOiAwICFpbXBvcnRhbnQ7CiAgICB9CgogICAgLmNvZGVfdGV4dCB7CiAgICAgICAgd2lkdGg6IDEwMCU7CiAgICB9CgogICAgLnBob25lX25vX3B0IHsKICAgICAgICBwYWRkaW5nLXRvcDogMCAhaW1wb3J0YW50OwogICAgfQoKICAgIC5zZWxlY3RfdGVtcGxhdGUsCiAgICAuc2F2ZV9vcHRpb24gewogICAgICAgIG1hcmdpbi1ib3R0b206IDEwcHg7CiAgICB9Cn0KCi5oaWRlX3NtYWxsX2Jhcl9jbGFzcyB7CiAgICBtYXgtd2lkdGg6IDA7CiAgICB0cmFuc2l0aW9uOiAuNXMgZWFzZS1pbjsKICAgIGZsZXg6IDAgMCAwOwp9CgouaGlkZV9iaWdfYmFyX2NsYXNzIHsKICAgIG1heC13aWR0aDogMTAwJTsKICAgIHRyYW5zaXRpb246IC41cyBlYXNlLWluOwogICAgZmxleDogMCAwIDEwMCU7Cn0KCi5pbmZvX2FkZCB7CiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmZmZmOwp9Cgouc21hbGxfc2lkZWJhciB7CiAgICBoZWlnaHQ6IDk4JTsKICAgIHBvc2l0aW9uOiByZWxhdGl2ZTsKICAgIHBhZGRpbmc6IDEycHg7CiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjRURGMUY1Owp9CgouaWNvbkFycm93IHsKICAgIHJpZ2h0OiAtMzVweDsKICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICAgIGJvdHRvbTogLTEwcHg7Cn0KCi5pY29uQXJyb3dIaWRlIHsKICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICAgIHJpZ2h0OiAtN3B4OwogICAgYm90dG9tOiAtMTBweDsKfQoKLmNvbG9yX2dyZXkgewogICAgY29sb3I6ICM4MDgwODA7Cn0KCi5jYXJkX2dyZWVuIHsKICAgIG1pbi1oZWlnaHQ6IDcwcHg7CiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDBiMDUwICFpbXBvcnRhbnQ7CiAgICBjb2xvcjogI2ZmZmZmZjsKfQoKLmxiX2JvbGQgewogICAgZm9udC1zaXplOiAxMnB4Owp9CgouZGV0aWFsX3NtYWxsc2lkZV9wIHsKICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICAgIGJvdHRvbTogMTBweDsKfQoKLmNhcmRfYmFja2dyb3VuZCB7CiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjRURGMUY1OwogICAgbWluLWhlaWdodDogMTIwcHg7Cn0KCi5kZXBvc2l0ZV9pbnB1dCB7CiAgICB3aWR0aDogMTAwcHg7Cn0KCi5idG5fc2F2ZV9kcmFmdCB7CiAgICBjb2xvcjogI2ZmZmZmZjsKICAgIGJhY2tncm91bmQtY29sb3I6ICMwMGIwZjAgIWltcG9ydGFudDsKICAgIHRleHQtdHJhbnNmb3JtOiBjYXBpdGFsaXplOwp9Cgouc2F2ZV9vcHRpb24gewogICAgYmFja2dyb3VuZC1jb2xvcjogIzIwMzg2NCAhaW1wb3J0YW50Owp9CgouYnRuX2FkZF9zbWFsbCB7CiAgICBoZWlnaHQ6IDI3cHggIWltcG9ydGFudDsKICAgIG1pbi13aWR0aDogMjVweCAhaW1wb3J0YW50OwogICAgZm9udC1zaXplOiAxMHB4OwogICAgcGFkZGluZzogMCAyMnB4ICFpbXBvcnRhbnQ7CiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDBiMDUwICFpbXBvcnRhbnQ7CiAgICBjb2xvcjogI2ZmZmZmZjsKICAgIGJvcmRlci1yYWRpdXM6IDAgIWltcG9ydGFudDsKfQoKLmxpc3Rfc2l0ZV9pbnYgewogICAgYmFja2dyb3VuZC1jb2xvcjogIzkyZDA1MDsKICAgIGNvbG9yOiAjZmZmZmZmOwogICAgZm9udC1zaXplOiAxMnB4Owp9CgoubGlzdF9zaXRlX2V4cCB7CiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjYzVlMGI0OwogICAgY29sb3I6ICMwMDAwMDA7CiAgICBmb250LXNpemU6IDEycHg7CiAgICBsaW5lLWhlaWdodDogMTZweDsKICAgIG1pbi1oZWlnaHQ6IDQwcHg7Cn0KCi5jaGVja2JveF9pbnYgewogICAgcGFkZGluZzogMnB4OwogICAgbWFyZ2luLXRvcDogM3B4OwogICAgbWFyZ2luLXJpZ2h0OiAycHg7Cn0KCi5leHBfc2VsZWN0IHsKICAgIGZvbnQtc2l6ZTogMTJweCAhaW1wb3J0YW50Owp9CgoudGhlbWUtLWxpZ2h0LnYtZGF0YS10YWJsZSB0ZCB7CiAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgIzgwODA4MDsKICAgIGJvcmRlci10b3A6IDFweCBzb2xpZCAjODA4MDgwOwp9CgoudGhlbWUtLWxpZ2h0LnYtZGF0YS10YWJsZSA+IC52LWRhdGEtdGFibGVfX3dyYXBwZXIgPiB0YWJsZSA+IHRib2R5ID4gdHI6aG92ZXI6bm90KC52LWRhdGEtdGFibGVfX2V4cGFuZGVkX19jb250ZW50KTpub3QoLnYtZGF0YS10YWJsZV9fZW1wdHktd3JhcHBlcikgewogICAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQgIWltcG9ydGFudDsKfQoK"},{"version":3,"sources":["CashReceipt.vue"],"names":[],"mappingsgfile":"CashReceipt.vue","sourceRoot":"src/views/customers","sourcesContent":["<template>\n    <v-app>\n        <v-container>\n            <v-row>\n                <v-col sm=\"12\" cols=\"12\">\n                    <v-card outlined dense class=\"pa-4 no_border rounded-sm\" color=\"white\">\n                        <v-row>\n                            <v-col class=\"bigSide py-0\" sm=\"12\" cols=\"12\" style=\"transition: .3s ease-in;\"\n                                   :class=\"{'hide_big_bar_class':isHideBar}\">\n                                <v-form ref=\"form\" v-model=\"valid\" lazy-validation>\n                                    <v-card outlined dense class=\"no_border\">\n                                        <h2 class=\"mb-0\">{{ $t('cash_receipt') }} #{{ cashReceipt.referenceNo }}</h2>\n                                        <v-icon v-if=\"!isHideBar\"\n                                                @click=\"cancel()\"\n                                                style=\"cursor: pointer; color: #333; font-size: 40px;\"\n                                                class=\"float-right\"\n                                        >close\n                                        </v-icon>\n                                        <!--                                        <span style=\"transition: .3s ease-in; z-index:10;\"-->\n                                        <!--                                              :class=\"{'iconArrow': !isHideBar,'iconArrowHide': isHideBar }\">-->\n                                        <!--                                            <v-icon size=\"22\"-->\n                                        <!--                                                    class=\"arr_icon\"-->\n                                        <!--                                                    @click=\"hideSmallSidebar\"-->\n                                        <!--                                                    v-if=\"isHideBar\"> mdi-chevron-left-circle-->\n                                        <!--                                            </v-icon>-->\n                                        <!--                                            <v-icon size=\"22\"-->\n                                        <!--                                                    class=\"arr_icon\"-->\n                                        <!--                                                    @click=\"hideSmallSidebar\"-->\n                                        <!--                                                    v-if=\"!isHideBar\"> mdi-chevron-right-circle-->\n                                        <!--                                            </v-icon></span>-->\n                                    </v-card>\n                                    <v-card outlined dense class=\"px-3 no_border\" color=\"grayBg\" height=\"175px\">\n                                        <v-row>\n                                            <v-col sm=\"7\" cols=\"12\" class=\"pb-0\">\n                                                <label class=\"label\">{{ $t('select_option') }}</label>\n                                                <v-select class=\"mt-1\"\n                                                          v-model=\"mPaymentOption\"\n                                                          :items=\"paymentOptions\"\n                                                          @change=\"searchOptionChanged\"\n                                                          :placeholder=\"$t('search')\"\n                                                          outlined>\n                                                </v-select>\n\n                                                <v-row class=\"pt-3\" v-if=\"!showMe\">\n                                                    <v-col cols=\"10\" class=\"pr-1\">\n                                                        <v-text-field\n                                                            class=\"\"\n                                                            v-model=\"search\"\n                                                            outlined\n                                                            :placeholder=\"$t('search')\"\n                                                        />\n                                                    </v-col>\n                                                    <v-col cols=\"2\" class=\"pl-1\">\n                                                        <v-btn color=\"primary white--text\" @click=\"searchInvoice\">\n                                                            <i class=\"b-search\"\n                                                               style=\"font-size: 18px; color:#fff !important;\"/>\n                                                        </v-btn>\n                                                    </v-col>\n                                                </v-row>\n                                                <v-row class=\"pt-3\" v-if=\"showMe\">\n                                                    <v-col cols=\"10\" class=\"kendo_dropdown_custom mt-2 pb-3 pt-0 pr-0\">\n                                                        <dropdownlist\n                                                            :data-items=\"customers\"\n                                                            @change=\"onCustomerChanged\"\n                                                            :value=\"mCustomer\"\n                                                            :data-item-key=\"'id'\"\n                                                            :text-field=\"'numberName'\"\n                                                            :default-item=\"defaultItem\"\n                                                            :filterable=\"true\"\n                                                            @filterchange=\"onCustomerFilterChanged\">\n                                                        </dropdownlist>\n                                                    </v-col>\n                                                    <v-col cols=\"2\" class=\"pl-1\">\n                                                        <v-btn color=\"primary white--text\" @click=\"searchInvoice\">\n                                                            <i class=\"b-search\"\n                                                               style=\"font-size: 18px; color:#fff !important;\"/>\n                                                        </v-btn>\n                                                    </v-col>\n                                                </v-row>\n                                            </v-col>\n                                            <v-col sm=\"5\" cosl=\"12\">\n                                                <label class=\"label\">{{ $t('date') }}</label>\n                                                <app-datepicker :initialDate=\"cashReceipt.transactionDate\"\n                                                                :disabled=\"disabledMe\"\n                                                                @onChanged=\"onTransactionDateChanged\"\n                                                                @emitDate=\"cashReceipt.transactionDate = $event\"/>\n                                                <label class=\"label\">{{ $t('customer_name') }}</label>\n                                                <v-text-field\n                                                    class=\"mt-1\"\n                                                    v-model=\"name\"\n                                                    readonly=\"readonly\"\n                                                    outlined\n                                                />\n                                                <v-row>\n                                                    <v-col sm=\"6\" cols=\"12\" class=\"py-0\">\n\n\n                                                    </v-col>\n                                                    <!--                                                    <v-col sm=\"6\" cols=\"12\" class=\"py-0\">-->\n                                                    <!--                                                        <div class=\"d-flex justify-space-between\">-->\n                                                    <!--                                                            <div>-->\n                                                    <!--                                                                <p class=\"label mb-0\">{{ $t('currency') }}</p>-->\n                                                    <!--                                                                <p class=\"label mb-0\">{{ currencyCode }}</p>-->\n                                                    <!--                                                            </div>-->\n                                                    <!--                                                            <div>-->\n                                                    <!--                                                                <p class=\"label mb-0\">{{ $t('rate') }}</p>-->\n                                                    <!--                                                                <p class=\"label mb-0\">{{ transactionRate }}</p>-->\n                                                    <!--                                                            </div>-->\n                                                    <!--                                                        </div>-->\n                                                    <!--                                                    </v-col>-->\n                                                </v-row>\n                                            </v-col>\n                                        </v-row>\n                                    </v-card>\n\n                                    <v-row class=\"pt-3\" style=\"background-color: #fff;\">\n                                        <v-col sm=\"12\" cols=\"12\" class=\"pt-0\">\n                                            <LoadingMe\n                                                :isLoading=\"showLoading\"\n                                                :fullPage=\"false\"\n                                                :myLoading=\"true\"\n                                                :alertMessage=\"loadingAlert\"\n                                                :color=\"loadingColorAlert\"\n                                                :alertText=\"loadingTextAlert\"/>\n                                            <kendo-datasource ref=\"cashReceiptItemLineDS\"\n                                                              :change=\"dataSourceChanged\"\n                                                              :data=\"itemLines\"/>\n                                            <kendo-grid id=\"gridCashReceipt\" class=\"grid-function\"\n                                                        :data-source-ref=\"'cashReceiptItemLineDS'\"\n                                                        :sortable=\"false\"\n                                                        :groupable=\"false\"\n                                                        :filterable=\"false\"\n                                                        :column-menu=\"true\"\n                                                        :resizable=\"true\"\n                                                        :editable=\"true\"\n                                                        :noRecords=\"true\">\n                                                <!--                                                <kendo-grid-column-->\n                                                <!--                                                    :title=\"$t('no.')\"-->\n                                                <!--                                                    :width=\"55\"-->\n                                                <!--                                                    :column-menu=\"false\"-->\n                                                <!--                                                    :template=\"rowNumberTmpl\"-->\n                                                <!--                                                    :headerAttributes=\"{-->\n                                                <!--                                                                    style: 'background-color: #EDF1F5;',-->\n                                                <!--                                                                    class: 'text-products'-->\n                                                <!--                                                                }\"-->\n                                                <!--                                                    :attributes=\"{-->\n                                                <!--                                                                    style: 'text-align: products'-->\n                                                <!--                                                                }\"/>-->\n                                                <!--                        <kendo-grid-column-->\n                                                <!--                            :field=\"'check'\"-->\n                                                <!--                            :title=\"''\"-->\n                                                <!--                            :headerTemplate=\"headerTemplate\"-->\n                                                <!--                            :template=\"checkTemplate\"-->\n                                                <!--                            :width=\"60\"-->\n                                                <!--                            :column-menu=\"false\"-->\n                                                <!--                            :editable=\"()=>{ return false}\"-->\n                                                <!--                            :locked=\"true\"-->\n                                                <!--                            :headerAttributes=\"{ style: 'background-color: #EDF1F5;', class: 'text-center'\t}\"-->\n                                                <!--                            :attributes=\"{style: 'text-align: center'}\"/>-->\n                                                <kendo-grid-column\n                                                    :field=\"'referenceNo'\"\n                                                    :title=\"$t('invoice_no')\"\n                                                    :width=\"200\"\n                                                    :editable=\"()=>{ return false}\"\n                                                    :template=\"referenceNoTmp\"\n                                                    :locked=\"true\"\n                                                    :headerAttributes=\"{\n                                                                    style: 'background-color: #EDF1F5'\n                                                                }\"/>\n                                                <kendo-grid-column\n                                                    :field=\"'crn'\"\n                                                    :title=\"$t('crn')\"\n                                                    :width=\"100\"\n                                                    :template=\"crnTmp\"\n                                                    :hidden=\"true\"\n                                                    :editable=\"()=>{ return false}\"\n                                                    :locked=\"true\"\n                                                    :headerAttributes=\"{\n                                                                    style: 'background-color: #EDF1F5'\n                                                                }\"/>\n                                                <kendo-grid-column\n                                                    :field=\"'paymentCode'\"\n                                                    :title=\"$t('payment_code')\"\n                                                    :width=\"180\"\n                                                    :template=\"paymentCodeTmp\"\n                                                    :editable=\"()=>{ return false}\"\n                                                    :locked=\"true\"\n                                                    :lockable=\"false\"\n                                                    :headerAttributes=\"{\n                                                                    style: 'background-color: #EDF1F5'\n                                                                }\"/>\n                                                <kendo-grid-column\n                                                    :field=\"'dueDate'\"\n                                                    :title=\"$t('due_date')\"\n                                                    :width=\"150\"\n                                                    :lockable=\"false\"\n                                                    :template=\"formatDate\"\n                                                    :editable=\"()=>{ return false}\"\n                                                    :headerAttributes=\"{\n                                                                    style: 'background-color: #EDF1F5'\n                                                                }\"/>\n                                                <kendo-grid-column\n                                                    :field=\"'txnNote'\"\n                                                    :title=\"$t('note')\"\n                                                    :width=\"200\"\n                                                    :editable=\"()=>{ return false}\"\n                                                    :hidden=\"true\"\n                                                    :lockable=\"false\"\n                                                    :headerAttributes=\"{ style: 'text-align: left; background-color: #EDF1F5',}\"\n                                                    :attributes=\"{ style: 'text-align: left; ' }\"\n                                                />\n                                                <kendo-grid-column\n                                                    :field=\"'overDue'\"\n                                                    :title=\"$t('over_due')\"\n                                                    :width=\"150\"\n                                                    :lockable=\"false\"\n                                                    :hidden=\"true\"\n                                                    :editable=\"()=>{ return false}\"\n                                                    :template=\"overDue\"\n                                                    :headerAttributes=\"{\n                                                                    style: 'background-color: #EDF1F5'\n                                                                }\"/>\n\n                                                <kendo-grid-column\n                                                    :field=\"'paymentTerm'\"\n                                                    :title=\"$t('payment_term')\"\n                                                    :width=\"220\"\n                                                    :lockable=\"false\"\n                                                    :hidden=\"true\"\n                                                    :template=\"settlementDiscount\"\n                                                    :editable=\"()=>{ return false}\"\n                                                    :headerAttributes=\"{style: 'text-align: right; background-color: #EDF1F5'}\"\n                                                    :attributes=\"{style: 'text-align: right; '}\"/>\n                                                <kendo-grid-column\n                                                    :field=\"'paymentOption'\"\n                                                    :title=\"$t('payment_option')\"\n                                                    :width=\"200\"\n                                                    :lockable=\"false\"\n                                                    :template=\"PMTTemplate\"\n                                                    :editor=\"PaymentOptionEditor\"\n                                                    :headerAttributes=\"{style: 'text-align: right; background-color: #EDF1F5'}\"\n                                                    :attributes=\"{style: 'text-align: right; '}\"/>\n                                                <kendo-grid-column\n                                                    :field=\"'bankReferenceNo'\"\n                                                    :title=\"$t('bank_reference_no')\"\n                                                    :width=\"180\"\n                                                    :lockable=\"false\"\n                                                    :template=\"bankReferenceNo\"\n                                                    :headerAttributes=\"{style: 'text-align: right; background-color: #EDF1F5'}\"\n                                                    :attributes=\"{style: 'text-align: right; '}\"/>\n                                                <kendo-grid-column\n                                                    :field=\"'status'\"\n                                                    :title=\"$t('status')\"\n                                                    :width=\"100\"\n                                                    :lockable=\"false\"\n                                                    :template=\"status\"\n                                                    :hidden=\"true\"\n                                                    :editable=\"()=>{ return false}\"\n                                                    :headerAttributes=\"{style: 'text-align: right; background-color: #EDF1F5'}\"\n                                                    :attributes=\"{style: 'text-align: right; '}\"/>\n                                                <kendo-grid-column\n                                                    :field=\"'currencyCode'\"\n                                                    :title=\"$t('currency')\"\n                                                    :width=\"150\"\n                                                    :lockable=\"false\"\n                                                    :editable=\"()=>{ return false}\"\n                                                    :template=\"currency\"\n                                                    :headerAttributes=\"{\n                                                                    style: 'background-color: #EDF1F5'\n                                                                }\"/>\n                                                <kendo-grid-column\n                                                    :field=\"'amount'\"\n                                                    :title=\"$t('amount')\"\n                                                    :width=\"150\"\n                                                    :lockable=\"false\"\n                                                    :editable=\"()=>{ return false}\"\n                                                    :template=\"amount\"\n                                                    :attributes=\"{style: 'text-align: right; '}\"\n                                                    :headerAttributes=\"{\n                                                                    style: 'background-color: #EDF1F5'\n                                                                }\"/>\n\n                                                <kendo-grid-column\n                                                    :field=\"'penalty'\"\n                                                    :title=\"$t('penalty')\"\n                                                    :width=\"150\"\n                                                    :lockable=\"false\"\n                                                    :editor=\"penaltyEditor\"\n                                                    :template=\"penalty\"\n                                                    :headerAttributes=\"{style: 'text-align: right; background-color: #EDF1F5'}\"\n                                                    :attributes=\"{style: 'text-align: right; '}\"/>\n                                                <kendo-grid-column\n                                                    :field=\"'discount'\"\n                                                    :title=\"$t('discount')\"\n                                                    :editor=\"discountEditor\"\n                                                    :template=\"discount\"\n                                                    :width=\"150\"\n                                                    :lockable=\"false\"\n                                                    :headerAttributes=\"{\n                                                                        style: 'text-align: right; background-color: #EDF1F5'\n                                                                    }\"\n                                                    :attributes=\"{\n                                                                        style: 'text-align: right'\n                                                                    }\"/>\n                                                <kendo-grid-column\n                                                    :field=\"'amountTobePaid'\"\n                                                    :title=\"$t('amount_to_be_paid')\"\n                                                    :width=\"210\"\n                                                    :lockable=\"false\"\n                                                    :editable=\"()=>{ return false}\"\n                                                    :template=\"amountTobePaid\"\n                                                    :attributes=\"{style: 'text-align: right; '}\"\n                                                    :headerAttributes=\"{\n                                                                    style: 'background-color: #EDF1F5'\n                                                                }\"/>\n                                                <kendo-grid-column\n                                                    :field=\"'paidAmount'\"\n                                                    :title=\"$t('paid_amount')\"\n                                                    :width=\"200\"\n                                                    :lockable=\"false\"\n                                                    :editor=\"paidAmountEditor\"\n                                                    :template=\"paidAmountTmp\"\n                                                    :headerAttributes=\"{style: 'text-align: right; background-color: #EDF1F5'}\"\n                                                    :attributes=\"{style: 'text-align: right; '}\"/>\n                                            </kendo-grid>\n\n                                        </v-col>\n                                        <v-col sm=\"12\" cols=\"12\" class=\"pb-0\">\n                                            <v-row>\n                                                <v-col sm=\"6\" cols=\"12\" class=\"\">\n                                                    <v-card class=\"no-boxshadow pa-3\" color=\"grayBg\">\n                                                        <v-row>\n                                                            <v-col class=\"py-0\" sm=\"6\" cols=\"6\">\n                                                                <label>{{ $t('message_on_receipt') }}</label>\n                                                                <v-textarea class=\"mt-1\"\n                                                                            outlined\n                                                                            v-model=\"cashReceipt.transactionNote\"\n                                                                            no-resize\n                                                                            height=\"70px\"\n                                                                            rows=\"3\"\n                                                                            placeholder=\"This will appear on the invoice\"\n                                                                />\n                                                            </v-col>\n                                                            <v-col class=\"py-0\" sm=\"6\" cols=\"6\">\n                                                                <label>{{ $t('message_for_journal') }}</label>\n                                                                <v-textarea class=\"mt-1\"\n                                                                            outlined\n                                                                            v-model=\"cashReceipt.journalNote\"\n                                                                            no-resize\n                                                                            height=\"70px\"\n                                                                            rows=\"3\"\n                                                                            placeholder=\"This will appear on the invoice\"\n                                                                />\n                                                            </v-col>\n                                                        </v-row>\n                                                    </v-card>\n                                                    <!--                                                    <template>-->\n                                                    <!--                                                        <v-file-input class=\"mt-0 pt-0 \" sm=\"3\" cols=\"6\"-->\n                                                    <!--                                                                      v-model=\"files\"-->\n                                                    <!--                                                                      :placeholder=\"$t('attachment')\"-->\n                                                    <!--                                                                      multiple-->\n                                                    <!--                                                                      prepend-icon=\"mdi-paperclip\">-->\n                                                    <!--                                                            <template v-slot:selection=\"{ text }\">-->\n                                                    <!--                                                                <v-chip-->\n                                                    <!--                                                                    small-->\n                                                    <!--                                                                    label-->\n                                                    <!--                                                                    color=\"primary\">-->\n                                                    <!--                                                                    {{ text }}-->\n                                                    <!--                                                                </v-chip>-->\n                                                    <!--                                                            </template>-->\n                                                    <!--                                                        </v-file-input>-->\n                                                    <!--                                                    </template>-->\n                                                </v-col>\n                                                <v-col sm=\"6\" cols=\"12\">\n                                                    <v-simple-table>\n                                                        <template v-slot:default>\n                                                            <tbody>\n                                                            <tr>\n                                                                <td class=\"text-left text-uppercase\">{{ $t('penalty') }}\n                                                                </td>\n                                                                <td class=\"text-center\">:</td>\n                                                                <td class=\"text-left primary--text text-bold\">\n                                                                    {{ numberFormat(cashReceipt.penalty) }}\n                                                                </td>\n                                                            </tr>\n                                                            <tr>\n                                                                <td class=\"text-left text-uppercase\">{{\n                                                                        $t('discount')\n                                                                    }}\n                                                                </td>\n                                                                <td class=\"text-center\">:</td>\n                                                                <td class=\"text-left primary--text text-bold\">\n                                                                    {{ numberFormat(cashReceipt.discount) }}\n                                                                </td>\n                                                            </tr>\n                                                            <!--                                                            <tr>-->\n                                                            <!--                                                                <td class=\"text-left text-uppercase\">{{ $t('total') }}-->\n                                                            <!--                                                                </td>-->\n                                                            <!--                                                                <td class=\"text-center\">:</td>-->\n                                                            <!--                                                                <td class=\"text-left primary--text text-bold\">-->\n                                                            <!--                                                                    {{ numberFormat(cashReceipt.total) }}-->\n                                                            <!--                                                                </td>-->\n                                                            <!--                                                            </tr>-->\n                                                            <tr>\n                                                                <td class=\"text-left text-uppercase\">\n                                                                    {{ $t('exchange_amount') }} - {{ baseCurrencyCode }}\n                                                                </td>\n                                                                <td class=\"text-center\">:</td>\n                                                                <td class=\"text-left primary--text text-bold\">\n                                                                    {{ numberFormat(cashReceipt.exchangeAmount) }}\n                                                                </td>\n                                                            </tr>\n\n                                                            <tr hidden>\n                                                                <td class=\"text-left text-uppercase\">\n                                                                    {{ $t('dr') }}\n                                                                </td>\n                                                                <td class=\"text-center\">:</td>\n                                                                <td class=\"text-left primary--text text-bold\">\n                                                                    {{ numberFormat(dr) }}\n                                                                </td>\n                                                            </tr>\n                                                            <tr hidden>\n                                                                <td class=\"text-left text-uppercase\">\n                                                                    {{ $t('cr') }}\n                                                                </td>\n                                                                <td class=\"text-center\">:</td>\n                                                                <td class=\"text-left primary--text text-bold\">\n                                                                    {{ numberFormat(cr) }}\n                                                                </td>\n                                                            </tr>\n                                                            </tbody>\n                                                        </template>\n                                                    </v-simple-table>\n                                                </v-col>\n                                            </v-row>\n                                        </v-col>\n\n                                    </v-row>\n\n                                    <v-divider/>\n                                    <v-card outlined dense class=\"no_border function_footer\">\n                                        <!--                    <v-menu>-->\n                                        <!--                      <template v-slot:activator=\"{ on }\">-->\n                                        <!--                        <v-btn color=\"black\" outlined-->\n                                        <!--                               class=\"mr-2 text-capitalize  black&#45;&#45;text float-left\"-->\n                                        <!--                               v-on=\"on\">-->\n                                        <!--                          {{ $t('select_template') }}-->\n                                        <!--                          <v-icon size=\"\" class=\"ma-1\">expand_more</v-icon>-->\n                                        <!--                        </v-btn>-->\n                                        <!--                      </template>-->\n                                        <!--                      <v-list>-->\n                                        <!--                        <v-list-item v-for=\"(item, index) in templates\" :key=\"index\">-->\n                                        <!--                          <v-list-item-title>{{ item.title }}</v-list-item-title>-->\n                                        <!--                        </v-list-item>-->\n                                        <!--                      </v-list>-->\n                                        <!--                    </v-menu>-->\n                                        <v-btn color=\"black\"\n                                               outlined\n                                               class=\"text-capitalize  black--text float-left\"\n                                               @click=\"cancel\">{{ $t('cancel') }}\n                                        </v-btn>\n                                        <!--                    <v-menu>-->\n                                        <!--                      <template v-slot:activator=\"{ on }\">-->\n                                        <!--                        <v-btn color=\"primary\"-->\n                                        <!--                               class=\"ml-2 float-right text-capitalize  white&#45;&#45;text\"-->\n                                        <!--                               v-on=\"on\">-->\n                                        <!--                          {{ $t('save_option') }}-->\n                                        <!--                          <v-icon size=\"\" class=\"ma-1\">expand_more</v-icon>-->\n                                        <!--                        </v-btn>-->\n                                        <!--                      </template>-->\n                                        <!--                      <v-list rounded>-->\n                                        <!--                        <v-list-item-group>-->\n                                        <!--                          <v-list-item>-->\n                                        <!--                            <v-list-item-content>-->\n                                        <!--                              <v-list-item-title>{{ $t('save_print') }}-->\n                                        <!--                              </v-list-item-title>-->\n                                        <!--                            </v-list-item-content>-->\n                                        <!--                          </v-list-item>-->\n                                        <!--                          <v-list-item>-->\n                                        <!--                            <v-list-item-content>-->\n                                        <!--                              <v-list-item-title>{{ $t('save_draft') }}-->\n                                        <!--                              </v-list-item-title>-->\n                                        <!--                            </v-list-item-content>-->\n                                        <!--                          </v-list-item>-->\n                                        <!--                        </v-list-item-group>-->\n                                        <!--                      </v-list>-->\n                                        <!--                    </v-menu>-->\n                                        <v-btn v-if=\"!check_id_edit\"  color=\"primary\"\n                                               class=\"float-right white--text text-capitalize \"\n                                               @click=\"onSaveClose('close')\">\n                                            {{ $t('save_close') }}\n                                        </v-btn>\n                                        <v-btn v-if=\"!check_id_edit\" color=\"secondary\"\n                                               style=\"margin-right: 10px !important\"\n                                               class=\"white--text float-right text-capitalize\"\n                                               @click=\"onSaveClose('new')\">{{ $t(\"save_new\") }}\n                                        </v-btn>\n                                        <v-btn v-if=\"!check_id_edit\" color=\"secondary\"\n                                               style=\"margin-right: 10px !important\"\n                                               class=\"white--text float-right text-capitalize\"\n                                               @click=\"onSaveClose('print')\">{{ $t(\"save_print\") }}\n                                        </v-btn>\n                                        <v-btn v-if=\"check_id_edit\" color=\"secondary\"\n                                               class=\"white--text mx-2 float-right text-capitalize\"\n                                               @click=\"_print(4)\">\n                                            {{ $t(\"print\") }}\n                                        </v-btn>\n                                    </v-card>\n                                </v-form>\n                            </v-col>\n                        </v-row>\n\n                    </v-card>\n                </v-col>\n            </v-row>\n        </v-container>\n    </v-app>\n</template>\n\n<script>\nimport {i18n} from '@/i18n';\nimport {DropDownList} from '@progress/kendo-vue-dropdowns'\n\nimport DatePickerComponent from '@/components/custom_templates/DatePickerComponent'\nimport CashReceiptModel from \"@/scripts/cash-receipt/model/CashReceipt\";\nimport ItemLineModel from \"@/scripts/cash-receipt/model/ItemLine\";\nimport kendo from \"@progress/kendo-ui\";\nimport PaymentOptionEditor from \"@/scripts/kendo_editor/PaymentOptionEditor\";\nimport Helper from \"@/helper\";\n\nconst prefixHandler = require(\"@/scripts/prefixHandler\")\nconst saleFormContentHandler = require(\"@/scripts/saleFormContentHandler\")\nconst billingHandler = require(\"@/scripts/invoice/handler/billingHandler\")\nconst customerHandler = require(\"@/scripts/customerHandler\")\nconst settingHandler = require(\"@/scripts/settingsHandler\")\n\nconst $ = kendo.jQuery //require(\"jquery\")\nconst paymentOptionHandler = require(\"@/scripts/paymentOptionHandler\")\n// const paymentOptionHandler = require(\"@/scripts/paymentOptionHandler\")\n\nconst cashReceiptModel = new CashReceiptModel(new Object())\nconst itemLineModel = new ItemLineModel({})\n\nconst keyField = 'id'\nconst textField = 'numberName'\nconst defaultItem = {[textField]: 'Select customer...', [keyField]: null}\nconst emptyItem = {[textField]: 'loading ...'}\nconst OPTION_TYPE = 'Customer'\nconst strFilter = '?optionType=' + OPTION_TYPE\n\nconst cookieJS = require(\"@/cookie.js\");\nconst cookie = cookieJS.getCookie();\n// from\nconst {getFormSetting} = require(\"@/scripts/settingsHandler.js\")\nimport {print} from \"@/form/Sale.js\";\n\nexport default {\n    name: \"CashReceipt\",\n    props: ['id'],\n    components: {\n        LoadingMe: () => import(`@/components/Loading`),\n        'app-datepicker': DatePickerComponent,\n        'dropdownlist': DropDownList\n    },\n    data: () => ({\n        check_id_edit: true,\n        PaymentOptionEditor: PaymentOptionEditor,\n        showLoading: false,\n        loadingAlert: false,\n        loadingColorAlert: '',\n        loadingTextAlert: '',\n        alert: false,\n        files: [],\n        valid: true,\n        loggedUser: {\n            id: cookie.creator,\n            name: cookie.email\n        },\n        itemLines: [],\n        templates: [\n            {title: 'Draft'},\n            {title: 'Open'},\n            {title: 'Partially Closed'},\n            {title: 'Closed'},\n        ],\n        col_expand: 9,\n        col_hide: 3,\n        isHideBar: false,\n        paymentOptions: ['Invoice', 'CRN', 'Payment Code', 'Customer'],\n        mPaymentOption: 'Invoice',\n        paymentMethod: ['Cash', 'Cheque'],\n        transactionDate: new Date().toISOString().substr(0, 10),\n        cashReceipt: cashReceiptModel,\n        itemLine: itemLineModel,\n        saleFormContent: {},\n        search: '',\n        transactionTypes: [],\n        customers: [],\n        mCustomer: {},\n        defaultItem: defaultItem,\n        cusBaseUrl: customerHandler.search(),\n        filter: '',\n        name: '',\n        referenceNo: '',\n        oldTotal: 0,\n        dateFormat: itemLineModel.dateFormat,\n        group: {field: 'customer.name'},\n        banks: [],\n        txnList: [],\n        currencyCode: '',\n        transactionRate: 1,\n        schemaDefinition: {\n            model: {\n                id: \"id\",\n                fields: {\n                    id: {editable: false},\n                    check: {type: 'boolean'},\n                    referenceNo: {editable: false},\n                    amount: {type: 'number'},\n                    amountTobePaid: {type: 'number'},\n                    overDue: {type: 'number'},\n                    crn: {type: 'string'},\n                    paidAmount: {type: 'number'},\n                    discount: {type: 'number'},\n                    penalty: {type: 'number'},\n                    paymentCode: {type: 'number'}\n                }\n            }\n        },\n        baseCurrency: {},\n        baseCurrencyCode: '',\n        jRaw: [],\n        gainLossAcc: {},\n        otherRevenueAcc: {},\n        gainOrLossDescription: 'gain/loss on exchange rate',\n        penaltyDescription: 'penalty',\n        cr: 0,\n        dr: 0,\n\n    }),\n    methods: {\n        nameTemplate(dataItem) {\n            window.console.log(dataItem, ':text-field')\n            const customer = dataItem.customer || {}\n            const name = customer.name || ''\n            const number = customer.number || ''\n            return number + ' - ' + name\n        },\n        _print(id) {\n            let print_data = this.cashReceipt;\n            print_data['baseCurrencyCode'] = this.baseCurrencyCode\n            let params = \"?formType=CashReceipt\"\n            getFormSetting(params).then(res => {\n                if (res.data.statusCode === 200) {\n                    if (res.data.data.length > 0) {\n                        window.console.log(res.data.data[\"0\"].settings);\n                        print(print_data, id, res.data.data[\"0\"].settings);\n                    } else {\n                        this.$snotify.error(i18n.t('please_save_form_in_setting'))\n                    }\n                }\n            });\n        },\n        removeDuplicate(array) {\n            const result = [];\n            const map = new Map();\n            for (const item of array) {\n                if (!map.has(item.id)) {\n                    map.set(item.id, true);    // set any value to Map\n                    result.push(item)\n                }\n            }\n            return result\n        },\n        crnTmp(dataItem) {\n            if (dataItem) {\n                if (dataItem.hasOwnProperty('crn')) {\n                    return dataItem.crn\n                }\n            }\n            return ''\n        },\n        currency(dataItem) {\n            if (dataItem) {\n                if (dataItem.hasOwnProperty('currencyCode')) {\n                    return dataItem.currencyCode\n                }\n            }\n            return ''\n        },\n        paymentCodeTmp(dataItem) {\n            if (dataItem) {\n                if (dataItem.hasOwnProperty('paymentCode')) {\n                    return dataItem.paymentCode\n                }\n            }\n            return ''\n        },\n        referenceNoTmp(dataItem) {\n            if (dataItem) {\n                if (dataItem.hasOwnProperty('referenceNo')) {\n                    return dataItem.referenceNo\n                }\n            }\n            return ''\n        },\n        paidAmountTmp(dataItem) {\n            if (dataItem) {\n                if (dataItem.hasOwnProperty('paidAmount')) {\n                    return kendo.toString(dataItem.paidAmount || 0, dataItem.decimalFormat)\n                }\n            }\n            return 0\n        },\n        amountTobePaid(dataItem) {\n            if (dataItem) {\n                if (dataItem.hasOwnProperty('amountTobePaid')) {\n                    return kendo.toString(dataItem.amountTobePaid || 0, dataItem.decimalFormat)\n                }\n            }\n            return 0\n        },\n        discount(dataItem) {\n            if (dataItem) {\n                if (dataItem.hasOwnProperty('discount')) {\n                    return kendo.toString(dataItem.discount || 0, dataItem.decimalFormat)\n                }\n            }\n            return 0\n        },\n        amount(dataItem) {\n            if (dataItem) {\n                if (dataItem.hasOwnProperty('amount')) {\n                    return kendo.toString(dataItem.amount || 0, dataItem.decimalFormat)\n                }\n            }\n            return 0\n        },\n        penalty(dataItem) {\n            if (dataItem) {\n                if (dataItem.hasOwnProperty('penalty')) {\n                    return kendo.toString(dataItem.penalty || 0, dataItem.decimalFormat)\n                }\n            }\n            return 0\n        },\n        bankReferenceNo(dataItem) {\n            if (dataItem) {\n                if (dataItem.hasOwnProperty('bankReferenceNo')) {\n                    return dataItem.bankReferenceNo\n                }\n            }\n            return ''\n        },\n        overDue(dataItem) {\n            if (dataItem) {\n                if (dataItem.hasOwnProperty('overDue')) {\n                    return dataItem.overDue || 0\n                }\n            }\n            return 0\n        },\n        // async loadTransactionRate(code) {\n        //     new Promise(resolve => {\n        //         setTimeout(() => {\n        //             resolve('resolved')\n        //             const date = new Date(this.transactionDate).toISOString().substr(0, 10)\n        //             // const priceLevel = this.invoice.priceLevel\n        //             if (code !== undefined || code !== '') {\n        //                 this.showLoading = true\n        //                 currencyHandler.getLastExchangeRateByDate(date, code).then(res => {\n        //                     if (res.data.statusCode === 200) {\n        //                         this.showLoading = false\n        //                         const exchangeRate = res.data.data\n        //                         this.currencyCode = exchangeRate.code\n        //                         this.transactionRate = exchangeRate.rate\n        //                         this.cashReceipt.txnRate = exchangeRate.rate\n        //                         this.cashReceipt.exchangeRate = exchangeRate\n        //                         this.showLoading = false\n        //                     }\n        //                 })\n        //             }\n        //\n        //         }, 10)\n        //     })\n        // },\n        async initData() {\n            if (this.$route.params.id !== undefined) {\n                const queryString = this.$route.query\n                let type = ''\n                let option = 0\n                if (queryString.hasOwnProperty('type')) {\n                    type = queryString.type\n                    option = queryString.option\n                    if (type === 'pmt') {\n                        this.mPaymentOption = option\n                        this.search = this.$route.params.id\n                        this.searchInvoice()\n                    }\n                } else {\n                    await this.loadCashReceiptView()\n                }\n\n            } else {\n                this.initRow()\n            }\n        },\n        paidAmountEditor(container, options) {\n            kendo.jQuery('<input data-bind=\"value:' + options.field + '\"/>')\n                .appendTo(container)\n                .kendoNumericTextBox({\n                    decimals: 30,\n                    format: `n${this.saleFormContent.decimal}`,\n                    min: 0\n                });\n        },\n        discountEditor(container, options) {\n            kendo.jQuery('<input data-bind=\"value:' + options.field + '\"/>')\n                .appendTo(container)\n                .kendoNumericTextBox({\n                    decimals: 30,\n                    format: `n${this.saleFormContent.decimal}`,\n                    min: 0\n                });\n        },\n        penaltyEditor(container, options) {\n            kendo.jQuery('<input data-bind=\"value:' + options.field + '\"/>')\n                .appendTo(container)\n                .kendoNumericTextBox({\n                    decimals: 30,\n                    format: `n${this.saleFormContent.decimal}`,\n                    min: 0\n                });\n        },\n        onTransactionDateChanged() {\n            this.generateNumber()\n            this.searchInvoice()\n        },\n        generateNumber() {\n            if (this.$route.params.id) {\n                const tranDate = new Date(this.cashReceipt.transactionDate)\n                const tranDateReceipt = new Date(this.cashReceipt.transactionDate)\n                const tranDateM = tranDate.getFullYear() + tranDate.getMonth()\n                const tranDateReceiptM = tranDateReceipt.getFullYear() + tranDateReceipt.getMonth()\n                if (tranDateM === tranDateReceiptM) {\n                    this.cashReceipt.referenceNo = this.referenceNo\n                    return\n                }\n            }\n            if (this.cashReceipt.transactionDate !== '' && this.transactionTypes.length > 0) {\n                let data = {\n                    abbr: this.cashReceipt.transactionType.abbr,\n                    structure: this.cashReceipt.transactionType.structure,\n                    transactionDate: this.cashReceipt.transactionDate,\n                    sequcencing: this.cashReceipt.transactionType.sequcencing,\n                    prefixSeparator: this.cashReceipt.transactionType.prefixSeparator || '',\n                    numberSeparator: this.cashReceipt.transactionType.numberSeparator || '',\n                    format: this.cashReceipt.transactionType.format || 5,\n                    type: 'Cash Receipt',\n                    entity: 1\n                }\n                billingHandler.lastNumber(data).then(response => {\n                    if (response.data.statusCode === 200) {\n                        const res = response.data.data\n                        const lastNumber = this.zeroPad(parseInt(res.lastNumber), this.cashReceipt.transactionType.format)\n                        const number = res.suffix + this.cashReceipt.transactionType.numberSeparator + lastNumber\n                        this.cashReceipt.number = number\n                        if (this.cashReceipt.transactionType.hasOwnProperty('prefixSeparator')) {\n                            const prefixSep = this.cashReceipt.transactionType.prefixSeparator\n                            this.cashReceipt.referenceNo = this.cashReceipt.transactionType.abbr + prefixSep + number\n                        }\n                    }\n                }).catch(e => {\n                    this.errors.push(e)\n                })\n            }\n        },\n        zeroPad(num, places) {\n            return String(num).padStart(places, '0')\n        },\n        getCircularReplacer() {\n            const seen = new WeakSet();\n            return (key, value) => {\n                if (typeof value === \"object\" && value !== null) {\n                    if (seen.has(value)) {\n                        return;\n                    }\n                    seen.add(value);\n                }\n                return value;\n            };\n        },\n        autoCalculate() {\n            //todo: note : rateTobase is cash receipt rate , txnRate is invoice rate\n            let ds = this.$refs.cashReceiptItemLineDS.kendoWidget(),\n                receiptAmount = 0, discount = 0, penalty = 0, convertedAmount = 0, exchangeDiscount = 0,\n                exchangePenalty = 0, paidAmountTxn = 0, exchangePenaltyTxn = 0, exchangeDiscountTxn = 0\n            const row = ds.data().filter(n => n.paidAmount > 0)\n            this.jRaw = []\n            row.forEach(value => {\n                let paidAmt = 0, nature = '', invRate = 0, receiptRate = 0, rawPaidAmount = 0, rawDiscountAmount = 0,\n                    rawPenaltyAmount = 0, currencyCode = ''\n                let discountAmount = 0, arAmount = 0, refNo = '', payOption = {}, penaltyAmount = 0,\n                    currency = {}, gainLoss = 0, lastXRate = {}, location = {}, segment = {}, project = {},\n                    locationId = '', segmentId = '', projectId = '', txnId = ''\n                if (value.referenceNo) {\n                    refNo = value.referenceNo\n                }\n                if (value.id) {\n                    txnId = value.id || ''\n                }\n                if (value.txnRate) {\n                    invRate = parseFloat(value.txnRate)\n                }\n                if (value.currencyCode) {\n                    currencyCode = (value.currencyCode) || ''\n                }\n                if (value.currency) {\n                    currency = (value.currency) || {}\n                }\n                if (value.location) {\n                    location = (value.location) || {}\n                    if (location.hasOwnProperty('id')) {\n                        locationId = location.id\n                    }\n                }\n                if (value.segment) {\n                    segment = (value.segment) || {}\n                    if (segment.hasOwnProperty('id')) {\n                        segmentId = segment.id\n                    }\n                }\n                if (value.project) {\n                    project = (value.project) || {}\n                    if (project.hasOwnProperty('id')) {\n                        projectId = project.id\n                    }\n                }\n                if (value.exchangeRate) {\n                    lastXRate = (value.exchangeRate) || {}\n                }\n                if (value.rateTobase) {\n                    receiptRate = parseFloat(value.rateTobase)\n                }\n                if (value.paidAmount) {\n                    receiptAmount += kendo.parseFloat(value.paidAmount)\n                    convertedAmount += (kendo.parseFloat(value.paidAmount) * receiptRate)\n                    paidAmountTxn += (kendo.parseFloat(value.paidAmount) * invRate)\n                    paidAmt = kendo.parseFloat(value.paidAmount) * receiptRate\n                    rawPaidAmount = kendo.parseFloat(value.paidAmount)\n                    window.console.log('convertedAmount', convertedAmount, '-', receiptRate)\n                }\n                if (value.discount) {\n                    // discount += kendo.parseFloat(value.discount)\n                    discount += (kendo.parseFloat(value.discount) * receiptRate)\n                    exchangeDiscount += (kendo.parseFloat(value.exchangeDiscount) * receiptRate)\n                    exchangeDiscountTxn += (kendo.parseFloat(value.discount) * invRate)\n                    discountAmount = kendo.parseFloat(value.discount) * receiptRate\n                    rawDiscountAmount = kendo.parseFloat(value.discount)\n                }\n                if (value.penalty) {\n                    // penalty += kendo.parseFloat(value.penalty)\n                    penalty += (kendo.parseFloat(value.penalty) * receiptRate)\n                    penaltyAmount = (kendo.parseFloat(value.penalty)) * receiptRate\n                    exchangePenalty += (kendo.parseFloat(value.exchangePenalty) * receiptRate)\n                    rawPenaltyAmount = kendo.parseFloat(value.penalty)\n                    exchangePenaltyTxn += kendo.parseFloat(value.penalty) * invRate\n                    // todo: Other Revenue Penalty\n                    if (penaltyAmount > 0) {\n                        if (penaltyAmount * -1 > 0) {\n                            nature = 'dr'\n                        } else {\n                            nature = 'cr'\n                        }\n                        if (this.otherRevenueAcc.hasOwnProperty('id')) {\n                            const obj = {\n                                id: this.otherRevenueAcc.id + '-' + nature + '-' + currencyCode + '-' + invRate + '-' + locationId + '-' + projectId + '-' + segmentId + '-' + txnId,\n                                txnId: txnId,\n                                projectId: projectId,\n                                locationId: locationId,\n                                segmentId: segmentId,\n                                currencyCode: currencyCode,\n                                currency: currency,\n                                lastXRate: lastXRate,\n                                referenceNo: refNo,\n                                transactionDate: value.transactionDate || '',\n                                paymentOption: value.paymentOption || '',\n                                bankReferenceNo: value.bankReferenceNo || '',\n                                // line: new ItemLineModel(value),\n                                receiptRate: receiptRate,\n                                description: 'Penalty',\n                                cashBasicEntries: {},\n                                account: this.otherRevenueAcc,\n                                accountId: this.otherRevenueAcc.id,\n                                amount: rawPenaltyAmount * -1,\n                                exchangeAmount: penaltyAmount * -1,\n                                type: nature,\n                                typeAs: 'Penalty'\n                            }\n                            const objCashBasic = {\n                                id: this.otherRevenueAcc.id + '-' + nature + '-' + currencyCode + '-' + invRate + '-' + locationId + '-' + projectId + '-' + segmentId + '-' + txnId,\n                                txnId: txnId,\n                                projectId: projectId,\n                                locationId: locationId,\n                                segmentId: segmentId,\n                                currencyCode: currencyCode,\n                                currency: currency,\n                                lastXRate: lastXRate,\n                                referenceNo: refNo,\n                                transactionDate: value.transactionDate || '',\n                                paymentOption: value.paymentOption || '',\n                                bankReferenceNo: value.bankReferenceNo || '',\n                                // line: new ItemLineModel(value),\n                                receiptRate: receiptRate,\n                                description: 'Penalty',\n                                account: this.otherRevenueAcc,\n                                accountId: this.otherRevenueAcc.id,\n                                amount: rawPenaltyAmount * -1,\n                                exchangeAmount: penaltyAmount * -1,\n                                type: nature,\n                                typeAs: 'Penalty'\n                            }\n                            obj.cashBasicEntries = objCashBasic\n                            this.jRaw.push(obj)\n                        }\n                    }\n                }\n                // todo: gain or loss exchange rate\n                gainLoss = parseFloat((invRate - receiptRate) * (rawPaidAmount + rawDiscountAmount - rawPenaltyAmount))\n                if (gainLoss !== 0) {\n                    if (gainLoss > 0) {\n                        nature = 'dr'\n                    } else {\n                        nature = 'cr'\n                    }\n                    window.console.log('gainLoss', gainLoss, paidAmt, this.gainLossAcc)\n                    // if (gainLoss) {\n                    if (this.gainLossAcc.hasOwnProperty('id')) {\n                        const obj = {\n                            id: this.gainLossAcc.id + '-' + nature + '-' + currencyCode + '-' + invRate + '-' + locationId + '-' + projectId + '-' + segmentId + '-' + txnId,\n                            txnId: txnId,\n                            projectId: projectId,\n                            locationId: locationId,\n                            segmentId: segmentId,\n                            currencyCode: currencyCode,\n                            currency: currency,\n                            lastXRate: lastXRate,\n                            referenceNo: refNo,\n                            transactionDate: value.transactionDate || '',\n                            paymentOption: value.paymentOption || '',\n                            bankReferenceNo: value.bankReferenceNo || '',\n                            // line: new ItemLineModel(value),\n                            receiptRate: gainLoss > 0 ? receiptRate : invRate,\n                            description: this.gainOrLossDescription,\n                            account: this.gainLossAcc,\n                            cashBasicEntries: {},\n                            accountId: this.gainLossAcc.id,\n                            amount: 0,\n                            exchangeAmount: gainLoss,\n                            type: nature,\n                            typeAs: 'GainOrLoss'\n                        }\n                        const objCashBasic = {\n                            id: this.gainLossAcc.id + '-' + nature + '-' + currencyCode + '-' + invRate + '-' + locationId + '-' + projectId + '-' + segmentId + '-' + txnId,\n                            txnId: txnId,\n                            projectId: projectId,\n                            locationId: locationId,\n                            segmentId: segmentId,\n                            currencyCode: currencyCode,\n                            currency: currency,\n                            lastXRate: lastXRate,\n                            referenceNo: refNo,\n                            transactionDate: value.transactionDate || '',\n                            paymentOption: value.paymentOption || '',\n                            bankReferenceNo: value.bankReferenceNo || '',\n                            // line: new ItemLineModel(value),\n                            receiptRate: gainLoss > 0 ? receiptRate : invRate,\n                            description: this.gainOrLossDescription,\n                            account: this.gainLossAcc,\n                            accountId: this.gainLossAcc.id,\n                            amount: 0,\n                            exchangeAmount: gainLoss,\n                            type: nature,\n                            typeAs: 'GainOrLoss'\n                        }\n                        obj.cashBasicEntries = objCashBasic\n                        this.jRaw.push(obj)\n                    }\n                    // }\n                }\n\n                //Todo: AR  Cr\n                arAmount = (rawPaidAmount + rawDiscountAmount - rawPenaltyAmount)\n                if (arAmount * -1 > 0) {\n                    nature = 'dr'\n                } else {\n                    nature = 'cr'\n                }\n                if (value.hasOwnProperty('receivableAcc')) {\n                    let cashBasicEntries = []\n                    if (value.hasOwnProperty('cashBasicIncomeAcc')) {\n                        const cashBasicIncomeAcc = value.cashBasicIncomeAcc || []\n                        cashBasicIncomeAcc.forEach((k, index) => {\n                            const account = k.account || {}\n                            const accountId = k.accountId || ''\n                            const amount = arAmount * (k.amountPercentage || 0)\n                            if (accountId) {\n                                cashBasicEntries.push({\n                                    id: accountId + '-' + nature + '-' + currencyCode + '-' + invRate + '-' + locationId + '-' + projectId + '-' + segmentId + '-' + txnId,\n                                    txnId: txnId,\n                                    projectId: projectId,\n                                    locationId: locationId,\n                                    segmentId: segmentId,\n                                    currencyCode: currencyCode,\n                                    currency: currency,\n                                    lastXRate: lastXRate,\n                                    referenceNo: refNo,\n                                    transactionDate: value.transactionDate || '',\n                                    paymentOption: value.paymentOption || '',\n                                    bankReferenceNo: value.bankReferenceNo || '',\n                                    // line: new ItemLineModel(value),\n                                    receiptRate: invRate,\n                                    description: this.cashReceipt.journalNote || refNo,\n                                    account: account,\n                                    accountId: accountId,\n                                    amount: amount * -1,\n                                    exchangeAmount: amount * -1 * invRate,\n                                    type: nature,\n                                    typeAs: 'Income'\n                                })\n                                const receivableAcc = value.receivableAcc\n                                if (receivableAcc) {\n                                    if (receivableAcc.hasOwnProperty('id')) {\n                                        this.jRaw.push({\n                                            id: receivableAcc.id + '-' + nature + '-' + currencyCode + '-' + invRate + '-' + locationId + '-' + projectId + '-' + segmentId + '-' + txnId + '-' + index,\n                                            txnId: txnId,\n                                            projectId: projectId,\n                                            locationId: locationId,\n                                            segmentId: segmentId,\n                                            currencyCode: currencyCode,\n                                            currency: currency,\n                                            lastXRate: lastXRate,\n                                            referenceNo: refNo,\n                                            transactionDate: value.transactionDate || '',\n                                            paymentOption: value.paymentOption || '',\n                                            bankReferenceNo: value.bankReferenceNo || '',\n                                            // line: new ItemLineModel(value),\n                                            receiptRate: invRate,\n                                            description: this.cashReceipt.journalNote || refNo,\n                                            account: receivableAcc,\n                                            cashBasicEntries: cashBasicEntries[index],\n                                            accountId: receivableAcc.id,\n                                            amount: index === 0 ? (arAmount * -1) : 0,\n                                            exchangeAmount: index === 0 ? (arAmount * -1 * invRate) : 0,\n                                            type: nature,\n                                            typeAs: 'AR'\n                                        })\n                                    }\n                                }\n                            }\n                        })\n                    }\n                }\n\n                //Todo: Cash Account  Dr\n                if (value.paymentOption) {\n                    payOption = value.paymentOption\n                    const cashAmount = (rawPaidAmount) //+ ((invRate - receiptRate) * (rawPaidAmount + rawDiscountAmount))\n                    // const cashAmount = rawPaidAmount + (gainLoss ) + rawPaidAmount\n                    if (cashAmount > 0) {\n                        nature = 'dr'\n                    } else {\n                        nature = 'cr'\n                    }\n                    if (payOption.hasOwnProperty('account')) {\n                        const payOptionAcc = payOption.account || {}\n                        if (payOptionAcc.hasOwnProperty('id')) {\n                            const obj = {\n                                id: payOptionAcc.id + '-' + nature + '-' + currencyCode + '-' + invRate + '-' + locationId + '-' + projectId + '-' + segmentId + '-' + txnId,\n                                txnId: txnId,\n                                projectId: projectId,\n                                locationId: locationId,\n                                segmentId: segmentId,\n                                currencyCode: currencyCode,\n                                currency: currency,\n                                lastXRate: lastXRate,\n                                referenceNo: refNo,\n                                transactionDate: value.transactionDate || '',\n                                paymentOption: value.paymentOption || '',\n                                bankReferenceNo: value.bankReferenceNo || '',\n                                receiptRate: invRate,\n                                description: this.cashReceipt.journalNote || refNo,\n                                account: payOptionAcc,\n                                accountId: payOptionAcc.id,\n                                amount: cashAmount,\n                                cashBasicEntries: {},\n                                exchangeAmount: cashAmount * receiptRate,\n                                type: nature,\n                                typeAs: 'CashAccount'\n                            }\n                            const objCashBasicEntry = {\n                                id: payOptionAcc.id + '-' + nature + '-' + currencyCode + '-' + invRate + '-' + locationId + '-' + projectId + '-' + segmentId + '-' + txnId,\n                                txnId: txnId,\n                                projectId: projectId,\n                                locationId: locationId,\n                                segmentId: segmentId,\n                                currencyCode: currencyCode,\n                                currency: currency,\n                                lastXRate: lastXRate,\n                                referenceNo: refNo,\n                                transactionDate: value.transactionDate || '',\n                                paymentOption: value.paymentOption || '',\n                                bankReferenceNo: value.bankReferenceNo || '',\n                                receiptRate: invRate,\n                                description: this.cashReceipt.journalNote || refNo,\n                                account: payOptionAcc,\n                                accountId: payOptionAcc.id,\n                                amount: cashAmount,\n                                exchangeAmount: cashAmount * receiptRate,\n                                type: nature,\n                                typeAs: 'CashAccount'\n                            }\n                            obj.cashBasicEntries = objCashBasicEntry\n                            // obj.cashBasicEntries = objCashBasicEntry\n                            // let obj1 = obj\n                            // obj1['cashBasicEntries'] = obj\n                            // window.console.log('cashBasicEntries', obj1)\n                            this.jRaw.push(obj)\n                        }\n                    }\n                }\n                //Todo: Settlement Discount  Dr\n                if (value.paymentTerm) {\n                    if (discountAmount > 0) {\n                        const settlementDisc = value.paymentTerm\n                        if (discountAmount > 0) {\n                            nature = 'dr'\n                        } else {\n                            nature = 'cr'\n                        }\n                        if (settlementDisc.hasOwnProperty('account')) {\n                            const settlementDiscAcc = settlementDisc.account\n                            if (settlementDiscAcc.hasOwnProperty('id')) {\n                                const obj = {\n                                    id: settlementDiscAcc.id + '-' + nature + '-' + currencyCode + '-' + invRate + '-' + locationId + '-' + projectId + '-' + segmentId + '-' + txnId,\n                                    txnId: txnId,\n                                    projectId: projectId,\n                                    locationId: locationId,\n                                    segmentId: segmentId,\n                                    currencyCode: currencyCode,\n                                    currency: currency,\n                                    lastXRate: lastXRate,\n                                    referenceNo: refNo,\n                                    transactionDate: value.transactionDate || '',\n                                    paymentOption: value.paymentOption || '',\n                                    bankReferenceNo: value.bankReferenceNo || '',\n                                    // line: new ItemLineModel(value),\n                                    receiptRate: receiptRate,\n                                    description: 'Receipt Settlement Discount',\n                                    account: settlementDiscAcc,\n                                    cashBasicEntries: {},\n                                    accountId: settlementDiscAcc.id,\n                                    amount: rawDiscountAmount,\n                                    exchangeAmount: discountAmount,\n                                    type: nature,\n                                    typeAs: 'Settlement Discount'\n                                }\n                                const objCashbasic = {\n                                    id: settlementDiscAcc.id + '-' + nature + '-' + currencyCode + '-' + invRate + '-' + locationId + '-' + projectId + '-' + segmentId + '-' + txnId,\n                                    txnId: txnId,\n                                    projectId: projectId,\n                                    locationId: locationId,\n                                    segmentId: segmentId,\n                                    currencyCode: currencyCode,\n                                    currency: currency,\n                                    lastXRate: lastXRate,\n                                    referenceNo: refNo,\n                                    transactionDate: value.transactionDate || '',\n                                    paymentOption: value.paymentOption || '',\n                                    bankReferenceNo: value.bankReferenceNo || '',\n                                    // line: new ItemLineModel(value),\n                                    receiptRate: receiptRate,\n                                    description: 'Receipt Settlement Discount',\n                                    account: settlementDiscAcc,\n                                    accountId: settlementDiscAcc.id,\n                                    amount: rawDiscountAmount,\n                                    exchangeAmount: discountAmount,\n                                    type: nature,\n                                    typeAs: 'Settlement Discount'\n                                }\n                                obj.cashBasicEntries = objCashbasic\n                                this.jRaw.push(obj)\n                            }\n                        }\n                    }\n                }\n            })\n            // this.invoiceTxn(txnIds)\n\n            this.cashReceipt.total = receiptAmount\n            this.cashReceipt.exchangeAmount = convertedAmount\n            this.cashReceipt.discount = discount\n            this.cashReceipt.exchangeDiscount = exchangeDiscount\n\n            this.cashReceipt.penalty = penalty\n\n            this.cashReceipt.exchangePenaltyTxn = exchangePenaltyTxn\n            this.cashReceipt.paidAmountTxn = paidAmountTxn\n            this.cashReceipt.exchangeDiscountTxn = exchangeDiscountTxn\n            this.cashReceipt.exchangePenalty = exchangePenalty\n\n            this.shrinkData(this.jRaw)\n            // let itemLineDS = this.$refs.itemLineDS.kendoWidget()\n            // const dataRow = itemLineDS.data().filter(n => n.paidAmount > 0)\n            //\n            // window.console.log(this.jRaw, 'cash jRaw')\n        },\n        shrinkData(obj) {\n            const uniques = this.removeDuplicate(obj) /*[...new Set(accountId.map(i => {\n                return {\n                    id_: i.id_,\n                    id: i.id,\n                    type: i.type\n                }\n            }))]*/\n            uniques.forEach(n => {\n                const found = obj.filter(m => m.id === n.id)\n                let amount = 0, exchangeAmount = 0\n                found.forEach(z => {\n                    amount += parseFloat(z.amount || 0)\n                    exchangeAmount += parseFloat(z.exchangeAmount || 0)\n                })\n                n.exchangeAmount = parseFloat(exchangeAmount) //this.numberFormat(amount)\n                n.amount = parseFloat(amount)  //parseFloat(parseFloat(amount / parseFloat(n.receiptRate))) //this.numberFormat(amount * parseFloat(this.invoice.txnRate)) //.toFixed(this.saleFormContent.decimal)\n            })\n            this.jRaw = uniques\n            let dr = 0, cr = 0\n            this.jRaw.forEach(j => {\n                switch (j.type) {\n                    case 'cr':\n                        cr += parseFloat(j.exchangeAmount)\n                        break\n                    case 'dr':\n                        dr += parseFloat(j.exchangeAmount)\n                        break\n                    default:\n                        break\n                }\n            })\n            const txnId = this.jRaw.map(o => o.txnId)\n            var uSet = new Set(txnId);\n            const uniqueSet = [...uSet]\n            let jRaws = []\n            uniqueSet.forEach(n => {\n                const found = this.jRaw.filter(m => m.txnId === n)\n                jRaws.push({\n                    id: n,\n                    currencyCode: found[0].currencyCode,\n                    projectId: found[0].projectId,\n                    segmentId: found[0].segmentId,\n                    locationId: found[0].locationId,\n                    referenceNo: found[0].referenceNo,\n                    entries: JSON.parse(JSON.stringify(found))\n                })\n            })\n            this.jRaw = jRaws\n            this.dr = dr\n            this.cr = cr\n            window.console.log('dr=', dr, 'cr=', cr, 'dr+cr = ', dr + cr)\n            window.console.log(JSON.stringify(this.jRaw), 'uniques')\n\n        },\n        invoiceTxn() {\n            let txnIds = [], ids = []\n            const ds = this.$refs.cashReceiptItemLineDS.kendoWidget()\n            const data = ds.data()\n            data.forEach(value => {\n                if (value.id) {\n                    txnIds.push({\n                        id: value.id,\n                        status: 1\n                    })\n                }\n            })\n            ids = Object.values(txnIds.reduce((r, o) => (r[o.id] = o, r), {}))\n            ids.forEach(m => {\n                const lines = data.filter(n => n.id === m.id)\n                let paidAmt = 0\n                let amountTobePaid = 0\n                lines.forEach(x => {\n                    if (x.paidAmount) {\n                        paidAmt += x.paidAmount\n                    }\n                    if (x.amountTobePaid) {\n                        amountTobePaid += x.amountTobePaid\n                    }\n                })\n                const pAmt = this.numberFormat(paidAmt)\n                const amtTobePaid = this.numberFormat(amountTobePaid)\n                if (pAmt === amtTobePaid) {\n                    m['status'] = 3 //Paid\n                } else {\n                    m['status'] = 2 // Partially Paid\n                }\n            })\n            this.txnList = ids\n        },\n        initRow() {\n            let ds = this.$refs.cashReceiptItemLineDS.kendoWidget()\n            ds.insert([this.itemLine])\n\n        },\n        async initGrid(that) {\n            let grid = $('#gridCashReceipt').data('kendoGrid')\n            new Promise(resolve => {\n                setTimeout(() => {\n                    resolve('resolved')\n                    $('#header-chb').change(function (ev) {\n                        let checked = ev.target.checked\n                        data = []\n                        $('.row-checkbox').each(function (idx, item) {\n                            if (checked) {\n                                if (!($(item).closest('tr').is('.k-state-selected'))) {\n                                    $(item).click()\n                                    let mRow = $(item).closest('tr')\n                                    let dataItem = grid.dataItem(mRow)\n                                    data.push(dataItem)\n                                }\n\n                            } else {\n                                $(item).click()\n                            }\n                        })\n                        that.checkedChanged(data)\n                    })\n                }, 10)\n            })\n\n            //\n            // let checkedIds = {}\n            let data = []\n            //\n            // function selectRow(that) {\n            //     let checked = this.checked,\n            //         row = $(this).closest(\"tr\"),\n            //         grid = $('#itemLine').data('kendoGrid'),\n            //         dataItem = grid.dataItem(row)\n            //\n            //     checkedIds[dataItem.paymentCode] = checked;\n            //     window.console.log('here',dataItem)\n            //     if (checked) {\n            //         //-select the row\n            //         row.addClass(\"k-state-selected\")\n            //         data.push(dataItem)\n            //\n            //         that.checkedChanged(dataItem)\n            //     } else {\n            //         //-remove selection\n            //         row.removeClass(\"k-state-selected\")\n            //     }\n            // }\n            // if (grid) {\n            //     grid.table.on(\"click\", \".row-checkbox\", selectRow(that))\n            // }\n\n        },\n        checkedChanged(data) {\n            data.forEach(m => {\n                if (parseFloat(m.paidAmount) === 0) {\n                    m.paidAmount = m.amountTobePaid\n                }\n                const index = this.itemLines.findIndex(item => {\n                    return ((m.paymentCode === item.paymentCode) && parseFloat(item.paidAmount) === 0)\n                })\n                this.itemLines.splice(index, 1, m)\n            })\n            this.autoCalculate()\n        },\n        headerTemplate() {\n            return `<input type='checkbox' id='header-chb' class='k-checkbox header-checkbox'>`\n        },\n        checkTemplate(dataItem) {\n            return `<input type='checkbox' #= ${dataItem.check} ? \\\\'checked=\"checked\"\\\\' : '' # class='k-checkbox row-checkbox' />`\n        },\n        formatDate(dataItem) {\n            if (dataItem.hasOwnProperty('dueDate')) {\n                return kendo.toString(new Date(dataItem.dueDate), this.dateFormat)\n            }\n            return ''\n        },\n        settlementDiscount(dataItem) {\n            if (dataItem.hasOwnProperty('paymentTerm')) {\n                return dataItem.paymentTerm.name || ''\n            }\n            return ''\n        },\n        status(dataItem) {\n            if (dataItem) {\n                if (dataItem.hasOwnProperty('status')) {\n                    const status = dataItem.status\n                    let statusText = ''\n                    switch (status) {\n                        case 1:\n                            statusText = 'OPEN'\n                            break\n                        case 2:\n                            statusText = 'Partially Paid'\n                            break\n                        case 4:\n                            statusText = 'VOID'\n                            break\n                        case 3:\n                            statusText = 'PAID'\n                            break\n                    }\n                    return statusText\n                }\n            }\n            return ''\n        },\n        onCustomerChanged(event) {\n            const value = event.value\n            if (value && value[textField] === emptyItem[textField]) {\n                return;\n            }\n            this.mCustomer = value\n            this.cashReceipt.customer = value\n        },\n        onCustomerFilterChanged(event) {\n            const filter = event.filter.value\n            this.loadData(0, filter, this.cusBaseUrl)\n            this.filter = filter\n        },\n        loadData(skip, filter, baseUrl) {\n            const url = baseUrl +\n                `?filter=${filter}`\n            this.requestStarted = true;\n            fetch(url)\n                .then((response) => {\n                    return response.json()\n                })\n                .then(this.afterFetch)\n        },\n        afterFetch(json) {\n            this.customers = json.data\n        },\n        numberFormat(value) {\n            return kendo.toString(value, `n${this.saleFormContent.decimal}`)\n        },\n        rowNumberTmpl(dataItem) {\n            let ds = this.$refs.cashReceiptItemLineDS.kendoWidget(),\n                index = ds.indexOf(dataItem);\n            return index + 1;\n        },\n        dataSourceChanged(e) {\n            let dataRow = e.items[0] || {}\n            if (Object.keys(dataRow).length > 0) {\n                dataRow.set('optionType', OPTION_TYPE)\n            }\n\n            if (e.field) {\n                let amountTobePaid = 0, paidAmount = 0, variance = 0\n                switch (e.field) {\n                    case \"discount\":\n                        dataRow.set('amountTobePaid', (parseFloat(dataRow.amount) + parseFloat(dataRow.penalty)) - parseFloat(dataRow.discount))\n                        dataRow.set('exchangeDiscount', (parseFloat(dataRow.discount) * parseFloat(dataRow.rateTobase)))\n                        dataRow.set('exchangeDiscountTxn', parseFloat(dataRow.discount) * parseFloat(dataRow.txnRate))\n                        window.console.log((parseFloat(dataRow.discount) * parseFloat(dataRow.rateTobase)), '----')\n                        break\n                    case \"penalty\":\n                        dataRow.set('amountTobePaid', (parseFloat(dataRow.amount) + parseFloat(dataRow.penalty)) - parseFloat(dataRow.discount))\n                        dataRow.set('exchangePenalty', parseFloat(dataRow.penalty) * parseFloat(dataRow.rateTobase))\n                        dataRow.set('exchangePenaltyTxn', parseFloat(dataRow.penalty) * parseFloat(dataRow.txnRate))\n\n                        break\n                    case \"paidAmount\":\n                        amountTobePaid = parseFloat(dataRow.amountTobePaid)\n                        paidAmount = parseFloat(dataRow.paidAmount)\n                        variance = parseFloat(dataRow.penalty) - parseFloat(dataRow.discount)\n                        if (paidAmount > amountTobePaid) {\n                            paidAmount = amountTobePaid\n                        } else if (paidAmount < variance) {\n                            paidAmount = variance\n                        }\n                        dataRow.set('paidAmount', paidAmount)\n                        dataRow.set('paidAmountTobase', (paidAmount * parseFloat(dataRow.rateTobase)))\n                        dataRow.set('paidAmountTxn', (paidAmount * parseFloat(dataRow.txnRate)))\n                        break\n                    default:\n                        break\n                }\n\n                this.invoiceTxn()\n                this.autoCalculate()\n\n            }\n        },\n        searchOptionChanged() {\n        },\n        cancel() {\n            this.$swal({\n                title: i18n.t('msg_title_warning'),\n                text: i18n.t('msg_discard'),\n                icon: \"warning\",\n                showCancelButton: true,\n                cancelButtonText: i18n.t('cancel'),\n                confirmButtonColor: \"#4d4848\",\n                cancelButtonColor: \"#ED1A3A\",\n                confirmButtonText: i18n.t('discard'),\n            }).then((result) => {\n                if (result.value) {\n                    this.clear();\n                    this.$router.go(-1);\n                }\n            });\n        },\n        PMTTemplate(dataItem) {\n            const pmt = dataItem.paymentOption || {}\n            if (pmt) {\n                return `<span>${pmt.bankAccountName || ``}</span>`\n            } else {\n                return ``\n            }\n        },\n        async loadPaymentOption() {\n            new Promise(resolve => {\n                setTimeout(() => {\n                    resolve('resolved')\n                    this.paymentMethod = []\n                    paymentOptionHandler.list(strFilter).then(res => {\n                        if (res.data.statusCode === 200) {\n                            this.showLoading = false\n                            this.paymentMethod = res.data.data\n                        }\n                    }).catch()\n                    {\n                        this.showLoading = false\n                    }\n                }, 10)\n            })\n        },\n        async loadOtherAccount() {\n            new Promise(resolve => {\n                setTimeout(() => {\n                    resolve('resolved')\n                    settingHandler.getOtherAccount().then(res => {\n                        if (res.data.statusCode === 200) {\n                            this.showLoading = false\n                            const response = res.data.data\n                            const data = response.filter(o => o.banhjiAccCode === '740010')\n                            // window.console.log(data, ' this.gainLossAc')\n                            if (data.length > 0) {\n                                this.gainLossAcc = data[0].account\n                                window.console.log(this.gainLossAcc, 'data[0].account')\n                            }\n                            const data_ = response.filter(o => o.banhjiAccCode === '740040')\n                            if (data_.length > 0) {\n                                this.otherRevenueAcc = data_[0].account\n                            }\n                        }\n                    }).catch()\n                    {\n                        this.showLoading = false\n                    }\n                }, 10)\n            })\n        },\n        PaymentMethodDropDownEditor(container, options) {\n            kendo.jQuery('<input name=\"' + options.field + '\"/>')\n                .appendTo(container)\n                .kendoDropDownList({\n                    autoBind: true,\n                    autoWidth: true,\n                    height: 400,\n                    dataTextField: \"name\",\n                    dataValueField: \"id\",\n                    template: \"<span>#=name#</span>\",\n                    optionLabel: \"--Select--\",\n                    dataSource: new kendo.data.DataSource({\n                        data: this.paymentMethod\n                    })\n                })\n        },\n        hideSmallSidebar() {\n            this.isHideBar = !this.isHideBar;\n        },\n        async loadPrefix() {\n            new Promise(resolve => {\n                setTimeout(() => {\n                    resolve('resolved');\n                    prefixHandler.get('cash receipt').then(res => {\n                        if (res.data.statusCode === 200) {\n                            this.showLoading = false\n                            this.transactionTypes = res.data.data\n                            if (this.transactionTypes.length > 0) {\n                                this.cashReceipt.transactionType = this.transactionTypes[0]\n                                if (!this.$route.params.id) {\n                                    this.generateNumber()\n                                }\n                            }\n                        }\n                    })\n                }, 10);\n            })\n        },\n        async loadSaleFormContent() {\n            new Promise(resolve => {\n                setTimeout(() => {\n                    resolve('resolved');\n                    saleFormContentHandler.list().then(res => {\n                        if (res.data.statusCode === 200) {\n                            const data = res.data.data\n                            if (data.length > 0) {\n                                this.saleFormContent = data[0]\n                            }\n                        }\n                    })\n                }, 10)\n            })\n        },\n        async searchInvoice() {\n            new Promise(resolve => {\n                setTimeout(() => {\n                    resolve('resolved');\n                    let data = {}\n                    this.showLoading = true\n                    window.console.log(this.mPaymentOption, 'payment ')\n                    if (this.mPaymentOption === 'Invoice') {\n                        data = {\n                            search: this.search,\n                            type: 'invoice',\n                            transactionDate: this.cashReceipt.transactionDate,\n                        }\n                    } else if (this.mPaymentOption === 'CRN') {\n                        data = {\n                            search: this.search,\n                            type: 'crn',\n                            transactionDate: this.cashReceipt.transactionDate,\n                        }\n                    } else if (this.mPaymentOption === 'Payment Code') {\n                        data = {\n                            search: this.search,\n                            type: 'payment code',\n                            transactionDate: this.cashReceipt.transactionDate,\n                        }\n                    } else if (this.mPaymentOption === 'Customer') {\n                        data = {\n                            search: this.mCustomer.id,\n                            type: 'customer',\n                            transactionDate: this.cashReceipt.transactionDate,\n                        }\n                    }\n                    this.itemLines = []\n                    if (data.search) {\n                        if (data.search.length > 4) {\n                            this.showLoading = true\n                            try {\n                                billingHandler.search(data).then(res => {\n                                    if (res.data.statusCode === 200) {\n                                        const response = res.data.data\n                                        const result = res.data.result\n                                        this.showLoading = false\n                                        if (response.length > 0) {\n                                            this.itemLines = response\n                                            const obj = response[0]\n                                            this.autoCalculate()\n                                            if (obj.hasOwnProperty('customer')) {\n                                                this.cashReceipt.customer = obj.customer\n                                                if (obj.customer.hasOwnProperty('name')) {\n                                                    this.name = obj.customer.name\n                                                }\n                                            }\n                                        }\n                                        const baseCurrency = result\n                                        this.baseCurrency = baseCurrency\n                                        this.cashReceipt.currency = baseCurrency\n                                        if (baseCurrency) {\n                                            if (baseCurrency.hasOwnProperty('code')) {\n                                                this.baseCurrencyCode = baseCurrency.code\n                                                // if (code) {\n                                                //     this.loadTransactionRate(baseCurrency.code)\n                                                // }\n                                            }\n                                        }\n                                    }\n                                })\n                            } catch (e) {\n                                this.showLoading = false\n                            }\n                        } else {\n                            this.showLoading = false\n                        }\n\n                    } else {\n                        this.showLoading = false\n                    }\n                }, 10)\n            })\n        },\n        async onSaveClose(save) {\n            if (!this.$refs.form.validate()) {\n                this.$refs.form.validate()\n                return\n            }\n            let itemLineDS = this.$refs.cashReceiptItemLineDS.kendoWidget()\n            let dataValidate = 0\n            const dataRow = itemLineDS.data().filter(n => n.paidAmount > 0).map(o => {\n                return new ItemLineModel(o)\n            })\n\n            if (dataRow.length > 0) {\n                dataRow.forEach((value, index) => {\n                    if (value.paymentOption.id == undefined || value.paymentOption.id == '') {\n                        this.$snotify.error('Please check payment option again' + (index + 1))\n                    } else {\n                        dataValidate += 1\n                    }\n                });\n                if (dataRow.length === dataValidate) {\n                    let isAutoGenerate = 1\n                    // this.autoCalculate()\n                    if (this.$route.params.id) {\n                        const tranDate = new Date(this.cashReceipt.transactionDate)\n                        const tranDateReceipt = new Date(this.cashReceipt.transactionDate)\n                        const tranDateM = tranDate.getFullYear() + tranDate.getMonth()\n                        const tranDateReceiptM = tranDateReceipt.getFullYear() + tranDateReceipt.getMonth()\n                        if (tranDateM === tranDateReceiptM) {\n                            isAutoGenerate = 0\n                        }\n                    }\n                    //todo: match Cash receipt model\n                    this.cashReceipt.paidOption = this.mPaymentOption\n                    this.cashReceipt.transactionDateTZ = Helper.toISODate(this.cashReceipt.transactionDate)\n                    this.cashReceipt.paidOptionText = this.search ? this.search : this.mCustomer\n                    this.cashReceipt.itemLine = dataRow\n                    this.cashReceipt['jRaw'] = this.jRaw\n                    this.cashReceipt.loggedUser = this.loggedUser\n                    this.cashReceipt['oldTotal'] = this.oldTotal\n                    this.cashReceipt['isAutoGenerate'] = isAutoGenerate\n                    this.cashReceipt['txnList'] = this.txnList\n                    this.cashReceipt['transactionDate'] = this.cashReceipt.transactionDate\n                    this.cashReceipt['actionType'] = this.$route.params.id ? this.$route.query.type : 'new'\n\n                    this.showLoading = true\n                    // let data = this.cashReceipt\n                    // window.console.log(JSON.stringify(data), '----', isAutoGenerate)\n                    billingHandler.createReceipt(this.cashReceipt).then(response => {\n                        if (response.data.statusCode === 201) {\n                            this.showLoading = false\n                            // this.close(response.data.data)\n                            this.$snotify.success('Successfully')\n                            if (save == 'new') {\n                                this.clear()\n                            } else if (save == 'print') {\n                                this._print(4);\n                                this.clear();\n                            } else {\n                                this.clear()\n                                this.close()\n                            }\n                        }\n                    }).catch(e => {\n                        this.$snotify.error('Something went wrong')\n                        this.errors.push(e)\n                    })\n                }\n            }\n        },\n        async loadCashReceiptView() {\n            new Promise(resolve => {\n                setTimeout(() => {\n                    resolve('resolved')\n                    this.itemLines = []\n                    billingHandler.txnView(this.$route.params.id).then(res => {\n                        if (res.data.statusCode === 200) {\n                            this.showLoading = false\n                            const response = res.data.data\n                            if (response.length > 0) {\n                                this.cashReceipt = response[0]\n                                this.referenceNo = this.cashReceipt.referenceNo\n                                this.oldTotal = this.cashReceipt.total\n                                this.itemLines = response[0].itemLine\n                                if (this.cashReceipt.hasOwnProperty('customer')) {\n                                    if (this.cashReceipt.customer.hasOwnProperty('name')) {\n                                        this.name = this.cashReceipt.customer.name\n                                    }\n                                }\n                            }\n                        }\n                    }).catch()\n                    {\n                        this.showLoading = false\n                    }\n                }, 10)\n            })\n        },\n        clear() {\n            let ds = this.$refs.cashReceiptItemLineDS.kendoWidget();\n            ds.data([]);\n            this.id = undefined\n            this.mCustomer = {}\n            this.name = ''\n            this.mPaymentOption = 'Invoice'\n            this.cashReceipt = new CashReceiptModel()\n            this.cashReceipt.transactionType = this.transactionTypes[0]\n            this.generateNumber()\n        },\n        close() {\n            this.$router.go(-1);\n        }\n    },\n    watch: {\n        // id() {\n        //     if (this.$route.params.id === undefined) {\n        //         this.clear()\n        //     } else {\n        //         this.showLoading = true\n        //         this.loadOtherAccount()\n        //         this.initData()\n        //     }\n        // },\n        checkId(){\n            if (this.$route.params.id === undefined) {\n                this.clear()\n                this.check_id_edit = false\n            } else {\n                this.showLoading = true\n                this.check_id_edit = true\n                this.loadCashReceiptView()\n            }\n        }\n    },\n    created() {\n        // fetch the data when the view is created and the data is\n        // already being observed\n        // this.loadObj()\n        // this.loadPaymentOption()\n    },\n    mounted: async function () {\n        await this.loadOtherAccount()\n        await this.loadPrefix()\n        await this.loadSaleFormContent()\n        this.loadData(0, this.filter, this.cusBaseUrl)\n        await this.initGrid(this)\n        await this.initData()\n        if (this.$route.params.id === undefined) {\n            this.check_id_edit = false\n        } else {\n            this.check_id_edit = true\n        }\n\n    },\n    computed: {\n        disabledMe() {\n            return !!this.$route.params.id;\n        },\n        showMe() {\n            return this.mPaymentOption === 'Customer' // or some other more complicated logic\n        },\n        checkId() {\n            return this.$route.params.id;\n        }\n    }\n};\n</script>\n\n<style scoped>\n.k-dropdown {\n    width: 100%;\n    margin-top: 3px;\n}\n\n.function_wrapper {\n    box-shadow: none !important;\n}\n\n.v-application--is-ltr .v-text-field .v-input__append-inner {\n    margin-top: 0 !important;\n}\n\n.v-input__slot {\n    background-color: #fff !important;\n}\n\n.function_content .label {\n    margin-bottom: 10px;\n    display: inline-block;\n}\n\n.border_radius10 {\n    border-radius: 10px !important;\n    background-color: #F2F2F2;\n}\n\n.pa-3.v-card h4 {\n    font-size: 18px;\n    color: #333;\n}\n\n.pa-3.v-card p {\n    font-size: 12px;\n    color: #B5B5B5;\n}\n\n.attachment_file {\n    background-color: #EFEDED;\n    border-radius: 0 !important;\n}\n\n.attachment_table.v-data-table table {\n    border: thin solid rgba(0, 0, 0, 0.12);\n}\n\n.attachment_table table tr th {\n    border-left: thin solid rgba(0, 0, 0, 0.12);\n    height: 35px;\n    border-right: thin solid rgba(0, 0, 0, 0.12);\n}\n\n.block_debit,\n.block_credit {\n    border-bottom: 1px solid #fff;\n}\n\n.block_debit p.number,\n.block_credit p.number {\n    font-size: 25px;\n    color: #7F7F7F;\n}\n\n.block_debit h5,\n.block_credit h5,\n.block_difference h5 {\n    text-transform: uppercase;\n    color: #7F7F7F;\n    font-size: 15px;\n    font-weight: normal;\n}\n\n.block_difference h5 {\n    font-size: 18px;\n}\n\n.block_difference h5 span {\n    font-size: 15px;\n}\n\n.custom_grid table th:last-child {\n    text-align: right !important;\n}\n\n.primary--text {\n    color: #03b154;\n}\n\n@media (min-width: 1264px) {\n    .container {\n        max-width: 1250px;\n    }\n}\n\n@media (max-width: 576px) {\n    .pt-6.col-sm-5.col-12 {\n        padding-top: 0 !important;\n    }\n\n    .code_text {\n        width: 100%;\n    }\n\n    .phone_no_pt {\n        padding-top: 0 !important;\n    }\n\n    .select_template,\n    .save_option {\n        margin-bottom: 10px;\n    }\n}\n\n.hide_small_bar_class {\n    max-width: 0;\n    transition: .5s ease-in;\n    flex: 0 0 0;\n}\n\n.hide_big_bar_class {\n    max-width: 100%;\n    transition: .5s ease-in;\n    flex: 0 0 100%;\n}\n\n.info_add {\n    background-color: #ffffff;\n}\n\n.small_sidebar {\n    height: 98%;\n    position: relative;\n    padding: 12px;\n    background-color: #EDF1F5;\n}\n\n.iconArrow {\n    right: -35px;\n    position: absolute;\n    bottom: -10px;\n}\n\n.iconArrowHide {\n    position: absolute;\n    right: -7px;\n    bottom: -10px;\n}\n\n.color_grey {\n    color: #808080;\n}\n\n.card_green {\n    min-height: 70px;\n    background-color: #00b050 !important;\n    color: #ffffff;\n}\n\n.lb_bold {\n    font-size: 12px;\n}\n\n.detial_smallside_p {\n    position: absolute;\n    bottom: 10px;\n}\n\n.card_background {\n    background-color: #EDF1F5;\n    min-height: 120px;\n}\n\n.deposite_input {\n    width: 100px;\n}\n\n.btn_save_draft {\n    color: #ffffff;\n    background-color: #00b0f0 !important;\n    text-transform: capitalize;\n}\n\n.save_option {\n    background-color: #203864 !important;\n}\n\n.btn_add_small {\n    height: 27px !important;\n    min-width: 25px !important;\n    font-size: 10px;\n    padding: 0 22px !important;\n    background-color: #00b050 !important;\n    color: #ffffff;\n    border-radius: 0 !important;\n}\n\n.list_site_inv {\n    background-color: #92d050;\n    color: #ffffff;\n    font-size: 12px;\n}\n\n.list_site_exp {\n    background-color: #c5e0b4;\n    color: #000000;\n    font-size: 12px;\n    line-height: 16px;\n    min-height: 40px;\n}\n\n.checkbox_inv {\n    padding: 2px;\n    margin-top: 3px;\n    margin-right: 2px;\n}\n\n.exp_select {\n    font-size: 12px !important;\n}\n\n.theme--light.v-data-table td {\n    border-bottom: 1px solid #808080;\n    border-top: 1px solid #808080;\n}\n\n.theme--light.v-data-table > .v-data-table__wrapper > table > tbody > tr:hover:not(.v-data-table__expanded__content):not(.v-data-table__empty-wrapper) {\n    background-color: transparent !important;\n}\n\n</style>"]}]}