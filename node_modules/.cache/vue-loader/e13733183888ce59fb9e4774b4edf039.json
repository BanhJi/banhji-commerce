{"remainingRequest":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/macos/Desktop/banhji-0.2/banhji-commerce/src/views/suppliers/PurchaseReturns.vue?vue&type=style&index=0&id=260f5d50&scoped=true&lang=css&","dependencies":[{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/src/views/suppliers/PurchaseReturns.vue","mtime":1642155812738},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/@vue/cli-service/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["PurchaseReturns.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4tfile":"PurchaseReturns.vue","sourceRoot":"src/views/suppliers","sourcesContent":["<template>\n    <v-app>\n        <v-container>\n            <v-row>\n                <v-col sm=\"12\" cols=\"12\">\n                    <v-card\n                        outlined\n                        dense\n                        class=\"pa-4 no_border rounded-sm\"\n                        color=\"white\">\n                        <v-row>\n                            <v-col\n                                class=\"bigSide pr-2 py-0\"\n                                sm=\"8\"\n                                cols=\"12\"\n                                style=\"transition: .3s ease-in;\"\n                                :class=\"{ hide_big_bar_class: isHideBar }\">\n                                <v-form ref=\"form\" v-model=\"valid\" lazy-validation>\n                                    <v-card outlined dense class=\"no_border\">\n                                        <h2 class=\"mb-0\">{{ $t(\"debit_note\") }}</h2>\n                                        <v-icon\n                                            v-if=\"isHideBar\"\n                                            @click=\"cancel()\"\n                                            style=\"cursor: pointer; color: #333; font-size: 40px;\"\n                                            class=\"float-right\">close\n                                        </v-icon>\n                                        <span style=\"transition: .3s ease-in; z-index:10;\"\n                                              :class=\"{iconArrow: !isHideBar, iconArrowHide: isHideBar}\">\n                                            <v-icon size=\"22\"\n                                                    class=\"arr_icon\"\n                                                    @click=\"hideSmallSidebar\"\n                                                    v-if=\"isHideBar\">mdi-chevron-left-circle\n                                            </v-icon>\n                                            <v-icon\n                                                size=\"22\"\n                                                class=\"arr_icon\"\n                                                @click=\"hideSmallSidebar\"\n                                                v-if=\"!isHideBar\">mdi-chevron-right-circle\n                                            </v-icon>\n                                        </span>\n                                    </v-card>\n                                    <v-card outlined dense class=\"px-3 rounded-4 no_border\" color=\"grayBg\">\n                                        <v-row>\n                                            <v-col sm=\"4\" cols=\"12\" class=\"pt-4 pl-4\">\n                                                <label class=\"label  mb-0 mt-1\">{{ $t(\"supplier\") }}</label>\n                                                <v-row>\n                                                    <v-col sm=\"12\"\n                                                           cols=\"12\"\n                                                           class=\"kendo_dropdown_custom py-0 mt-1 pb-4\">\n                                                        <dropdownlist\n                                                            :data-items=\"supplierList\"\n                                                            @change=\"onChange\"\n                                                            :value=\"supplier\"\n                                                            :data-item-key=\"dataItemKey\"\n                                                            :text-field=\"textField\"\n                                                            :default-item=\"defaultItem\"\n                                                            :filterable=\"true\"\n                                                            @filterchange=\"onFilterChange\"/>\n                                                    </v-col>\n                                                </v-row>\n                                                <label style=\"line-height: 23px;\"\n                                                       class=\"label\">{{ $t(\"reason_for_debit_note\") }}</label>\n                                                <v-textarea class=\"mt-1\"\n                                                            v-model=\"debitMemo.reasonForDebitNote\"\n                                                            outlined\n                                                            :rules=\"[(v) => !!v || 'required']\"\n                                                            no-resize\n                                                            height=\"40px\"\n                                                            rows=\"6\"/>\n                                            </v-col>\n                                            <v-col sm=\"4\" cols=\"12\" class=\"pt-4 pr-4\">\n                                                <label class=\"label  mb-0\">{{ $t(\"date\") }}</label>\n                                                <app-datepicker :initialDate=\"transactionDate\"\n                                                                :disabled=\"disabled\"\n                                                                @onChanged=\"onPriceLevelChange\"\n                                                                @emitDate=\"transactionDate = $event\"/>\n                                                <label class=\"label mb-0\">{{ $t(\"price_level\") }}</label>\n                                                <v-select\n                                                    class=\"mt-1\"\n                                                    v-model=\"debitMemo.priceLevel\"\n                                                    :items=\"priceLevel\"\n                                                    item-value=\"id\"\n                                                    @change=\"onPriceLevelChange\"\n                                                    item-text=\"name\"\n                                                    return-object\n                                                    clearable\n                                                    placeholder=\"Price Level\"\n                                                    tage=\"Default Price Level\"\n                                                    :rules=\"[(v) => !!v || 'required']\"\n                                                    required\n                                                    outlined/>\n                                            </v-col>\n                                            <v-col sm=\"4\" cols=\"12\" class=\"pt-4 pr-4\">\n                                                <label class=\"label mb-0 mt-1\">{{ $t(\"number\") }}</label>\n                                                <v-row class=\"mt-1 mr-0\">\n                                                    <v-col sm=\"3\" cols=\"3\" class=\"py-0 pr-0\">\n                                                        <div class=\"code_text text-bold\">\n                                                            {{ debitMemo.transactionType.abbr }}\n                                                        </div>\n                                                    </v-col>\n                                                    <v-col sm=\"7\" cols=\"7\" class=\"py-0 pl-0 pr-1\">\n                                                        <v-text-field\n                                                            class=\" custom-border \"\n                                                            v-model=\"debitMemo.number\"\n                                                            :disabled=\"true\"\n                                                            outlined\n                                                            :rules=\"[(v) => !!v || 'Number is required']\"\n                                                            required/>\n                                                    </v-col>\n                                                    <v-col sm=\"2\" cols=\"2\" class=\"py-0 px-0\">\n                                                        <v-icon\n                                                            color=\"black\"\n                                                            size=\"30\"\n                                                            class=\"border_qrcode\"\n                                                            @click=\"generateNumber\">mdi-qrcode\n                                                        </v-icon>\n                                                    </v-col>\n                                                </v-row>\n                                                <div class=\"d-flex justify-space-between\">\n                                                    <div>\n                                                        <p class=\"label mb-0\">{{ $t(\"currency\") }}</p>\n                                                        <p class=\"label mb-0 pt-3\">{{ currencyCode }}</p>\n                                                    </div>\n                                                    <div class=\"pl-3\">\n                                                        <p class=\"label mb-0 text-right\">{{ $t(\"rate\") }}</p>\n                                                        <v-text-field\n                                                            class=\"mt-1\"\n                                                            type=\"number\"\n                                                            v-model=\"debitMemo.txnRate\"\n                                                            outlined\n                                                            min=\"0.000000001\"\n                                                            step=\"0.5\"\n                                                            :rules=\"[(v) => !!v || 'Number is required', (v) => v > 0 || 'Number must be greater than 0!']\"\n                                                            required/>\n                                                    </div>\n                                                </div>\n                                            </v-col>\n                                        </v-row>\n                                    </v-card>\n\n                                    <v-row style=\"background-color: #fff;\">\n                                        <v-col sm=\"12\" cols=\"12\" class=\"pb-0\">\n                                            <kendo-datasource\n                                                ref=\"itemLineDS\"\n                                                :data=\"itemLines\"\n                                                :change=\"dataSourceChanged\"/>\n                                            <kendo-grid\n                                                id=\"gridItemLine\"\n                                                class=\"grid-function\"\n                                                :data-source-ref=\"'itemLineDS'\"\n                                                :sortable=\"false\"\n                                                :column-menu=\"true\"\n                                                :editable=\"true\"\n                                                :scrollable-virtual=\"true\">\n                                                <kendo-grid-column\n                                                    :command=\"{iconClass: 'k-icon k-i-trash', text: ' ', click: removeRow, class: 'btn-plus'}\"\n                                                    :title=\"''\"\n                                                    :width=\"63\"\n                                                    :headerAttributes=\"{style: 'text-align: left; background-color: #EDF1F5'}\"/>\n                                                <kendo-grid-column\n                                                    :title=\"$t('no.')\"\n                                                    :width=\"53\"\n                                                    :column-menu=\"false\"\n                                                    :template=\"rowNumberTmpl\"\n                                                    :headerAttributes=\"{style: 'background-color: #EDF1F5;', class: 'text-products'}\"\n                                                    :attributes=\"{style: 'text-align: products'}\"/>\n                                                <kendo-grid-column\n                                                    :field=\"'serviceDate'\"\n                                                    :title=\"$t('date_from')\"\n                                                    :width=\"160\"\n                                                    :hidden=\"!purchaseFormContent.serviceDate\"\n                                                    :template=\"'<span>#= kendo.toString(new Date(serviceDate), dateFormat)#</span>'\"\n                                                    :editor=\"ServiceDateEditor\"\n                                                    :headerAttributes=\"{style: 'background-color: #EDF1F5'}\"/>\n                                                <kendo-grid-column\n                                                    :field=\"'serviceDateTo'\"\n                                                    :title=\"$t('date_to')\"\n                                                    :width=\"160\"\n                                                    :hidden=\"!purchaseFormContent.serviceDateTo\"\n                                                    :template=\"'<span>#= kendo.toString(new Date(serviceDateTo), dateFormat)#</span>'\"\n                                                    :editor=\"ServiceDateToEditor\"\n                                                    :headerAttributes=\"{style: 'background-color: #EDF1F5'}\"/>\n                                                <kendo-grid-column\n                                                    :field=\"'item'\"\n                                                    :title=\"$t('item')\"\n                                                    :template=\"itemTemplate\"\n                                                    :editor=\"ItemDropDownEditor\"\n                                                    :width=\"200\"\n                                                    :headerAttributes=\"{style: 'background-color: #EDF1F5'}\"/>\n                                                <kendo-grid-column\n                                                    :field=\"'description'\"\n                                                    :title=\"$t('description')\"\n                                                    :template=\"'<span>#=description#</span>'\"\n                                                    :width=\"160\"\n                                                    :headerAttributes=\"{style: 'background-color: #EDF1F5'}\"/>\n                                                <kendo-grid-column\n                                                    :field=\"'qty'\"\n                                                    :title=\"$t('qty')\"\n                                                    :format=\"'{0:n}'\"\n                                                    :template=\"'<span>#=qty#</span>'\"\n                                                    :width=\"80\"\n                                                    :headerAttributes=\"{style: 'text-align: left; background-color: #EDF1F5',}\"\n                                                    :attributes=\"{ style: 'text-align: right; ' }\"/>\n                                                <kendo-grid-column\n                                                    :field=\"'uom'\"\n                                                    :title=\"$t('uom')\"\n                                                    :width=\"120\"\n                                                    :template=\"UOMTemplate\"\n                                                    :editor=\"UOMDropDownEditor\"\n                                                    :headerAttributes=\"{style:'text-align: left; background-color: #EDF1F5'}\"\n                                                    :attributes=\"{style: 'text-align: left'}\"/>\n                                                <kendo-grid-column\n                                                    :field=\"'cost'\"\n                                                    :title=\"$t('cost')\"\n                                                    :width=\"200\"\n                                                    :template=\"priceTemplate\"\n                                                    :headerAttributes=\"{style:'text-align: left; background-color: #EDF1F5'}\"\n                                                    :attributes=\"{style: 'text-align: right'}\"/>\n                                                <kendo-grid-column\n                                                    :field=\"'amount'\"\n                                                    :title=\"$t('amount')\"\n                                                    :width=\"200\"\n                                                    :editable=\"() => {return false}\"\n                                                    :template=\"amountTemplate\"\n                                                    :headerAttributes=\"{style:'text-align: left; background-color: #EDF1F5'}\"\n                                                    :attributes=\"{style: 'text-align: right'}\"/>\n                                                <kendo-grid-column\n                                                    :field=\"'discountItem'\"\n                                                    :title=\"$t('discount_item')\"\n                                                    :width=\"150\"\n                                                    :hidden=\"!purchaseFormContent.discountItem\"\n                                                    :template=\"discountItemTemplate\"\n                                                    :editor=\"DiscountItemDropDownEditor\"\n                                                    :headerAttributes=\"{style:'text-align: left; background-color: #EDF1F5'}\"\n                                                    :attributes=\"{style: 'text-align: left'}\"/>\n                                                <kendo-grid-column\n                                                    :field=\"'vatTax'\"\n                                                    :title=\"$t('tax')\"\n                                                    :width=\"150\"\n                                                    :template=\"vatTemplate\"\n                                                    :editor=\"VatTaxDropDownEditor\"\n                                                    :headerAttributes=\"{style:'text-align: left; background-color: #EDF1F5',}\"\n                                                    :attributes=\"{ style: 'text-align: left' }\"/>\n                                                <kendo-grid-column\n                                                    :field=\"'class1'\"\n                                                    :title=\"$t('class_1')\"\n                                                    :hidden=\"!purchaseFormContent.class1\"\n                                                    :template=\"'<span>#=class1.name || ``#</span>'\"\n                                                    :width=\"200\"\n                                                    :editor=\"ClassEditor.class1\"\n                                                    :headerAttributes=\"{style:'text-align: left; background-color: #EDF1F5',}\"\n                                                    :attributes=\"{ style: 'text-align: left' }\"/>\n                                                <kendo-grid-column\n                                                    :field=\"'class2'\"\n                                                    :title=\"$t('class_2')\"\n                                                    :hidden=\"!purchaseFormContent.class2\"\n                                                    :template=\"'<span>#=class2.name || ``#</span>'\"\n                                                    :width=\"200\"\n                                                    :editor=\"ClassEditor.class2\"\n                                                    :headerAttributes=\"{style:'text-align: left; background-color: #EDF1F5'}\"\n                                                    :attributes=\"{ style: 'text-align: left' }\"/>\n                                                <kendo-grid-column\n                                                    :field=\"'class3'\"\n                                                    :title=\"$t('class_3')\"\n                                                    :hidden=\"!purchaseFormContent.class3\"\n                                                    :template=\"'<span>#=class3.name || ``#</span>'\"\n                                                    :width=\"200\"\n                                                    :editor=\"ClassEditor.class3\"\n                                                    :headerAttributes=\"{style:'text-align: left; background-color: #EDF1F5'}\"\n                                                    :attributes=\"{ style: 'text-align: left' }\"/>\n                                                <kendo-grid-column\n                                                    :field=\"'class4'\"\n                                                    :title=\"$t('class_4')\"\n                                                    :hidden=\"!purchaseFormContent.class4\"\n                                                    :template=\"'<span>#=class4.name || ``#</span>'\"\n                                                    :width=\"200\"\n                                                    :editor=\"ClassEditor.class4\"\n                                                    :headerAttributes=\"{style:'text-align: left; background-color: #EDF1F5'}\"\n                                                    :attributes=\"{ style: 'text-align: left' }\"/>\n                                                <kendo-grid-column\n                                                    :field=\"'class5'\"\n                                                    :title=\"$t('class_5')\"\n                                                    :hidden=\"!purchaseFormContent.class5\"\n                                                    :template=\"'<span>#=class5.name || ``#</span>'\"\n                                                    :width=\"200\"\n                                                    :editor=\"ClassEditor.class5\"\n                                                    :headerAttributes=\"{style:'text-align: left; background-color: #EDF1F5',}\"\n                                                    :attributes=\"{ style: 'text-align: left' }\"/>\n                                            </kendo-grid>\n                                        </v-col>\n                                        <v-col sm=\"12\" cols=\"12\" class=\"pt-1\">\n                                            <v-row>\n                                                <v-col sm=\"7\" cols=\"12\" class=\"py-0\">\n                                                    <v-btn\n                                                        class=\"float-left btn_plus mr-2\"\n                                                        @click=\"addRow\">\n                                                        <v-icon size=\"\" class=\"ma-1\">mdi-plus</v-icon>\n                                                    </v-btn>\n                                                </v-col>\n                                                <v-col sm=\"5\" cols=\"12\" class=\"py-0\">\n                                                    <v-simple-table>\n                                                        <template v-slot:default>\n                                                            <tbody>\n                                                            <tr hidden=\"true\">\n                                                                <td class=\"text-left\">{{ $t(\"subtotal\") }}</td>\n                                                                <td class=\"text-center\">:</td>\n                                                                <td class=\"text-right\">\n                                                                    {{ numberFormat(debitMemo.subTotal) }}\n                                                                </td>\n                                                            </tr>\n                                                            <tr hidden=\"true\">\n                                                                <td class=\"text-left\">{{ $t(\"discount\") }}</td>\n                                                                <td class=\"text-center\">:</td>\n                                                                <td class=\"text-right\">\n                                                                    ({{ numberFormat(debitMemo.discount) }})\n                                                                </td>\n                                                            </tr>\n                                                            <tr hidden=\"true\">\n                                                                <td class=\"text-left\">{{ $t(\"total_tax\") }}</td>\n                                                                <td class=\"text-center\">:</td>\n                                                                <td class=\"text-right\">\n                                                                    {{ numberFormat(debitMemo.taxAmount) }}\n                                                                </td>\n                                                            </tr>\n                                                            <tr>\n                                                                <td class=\"text-left text-uppercase\">{{\n                                                                        $t(\"total\")\n                                                                    }}\n                                                                </td>\n                                                                <td class=\"text-center\">:</td>\n                                                                <td class=\"text-right primary--text text-bold\">\n                                                                    {{ numberFormat(debitMemo.itemLineExchangeAmount) }}\n                                                                </td>\n                                                            </tr>\n                                                            </tbody>\n                                                        </template>\n                                                    </v-simple-table>\n                                                </v-col>\n                                            </v-row>\n                                        </v-col>\n                                    </v-row>\n                                    <v-row>\n                                        <v-col sm=\"12\" cols=\"12\" class=\"py-0\">\n                                            <v-col sm=\"12\" cols=\"12\" class=\"pt-0\">\n                                                <h3 class=\"mb-0 text-uppercase color_grey mb-3\">\n                                                    {{ $t(\"apply_to_purchase\") }}</h3>\n                                                <label class=\"label font_14\">{{ $t(\"purchase_to_be_offset\") }}</label>\n                                                <v-select\n                                                    class=\" mt-1\"\n                                                    v-model=\"offsetPurchase\"\n                                                    :items=\"offsetPurchases\"\n                                                    @change=\"offsetInvoiceChanged\"\n                                                    :item-text=\"(item) => `${item.referenceNo} - ${status(item.status)}`\"\n                                                    item-value=\"id\"\n                                                    clearable\n                                                    return-object\n                                                    tage=\"Offset Purchase\"\n                                                    placeholder=\"Offset Purchase\"\n                                                    :loading=\"isLoading === 1\"\n                                                    :rules=\"[(v) => !!v || 'is required']\"\n                                                    outlined/>\n                                                <kendo-datasource\n                                                    ref=\"applyToLineDS\"\n                                                    :data=\"offsetList\"\n                                                    :change=\"onApplyToLineChange\"/>\n                                                <kendo-grid\n                                                    id=\"gridApplyTo\"\n                                                    ref=\"gridApplyTo\"\n                                                    class=\"grid-function\"\n                                                    :data-source-ref=\"'applyToLineDS'\"\n                                                    :sortable=\"false\"\n                                                    :filterable=\"false\"\n                                                    :column-menu=\"true\"\n                                                    :editable=\"true\"\n                                                    :noRecords=\"true\"\n                                                    :scrollable-virtual=\"true\">\n                                                    <!--                                                                <kendo-grid-norecords>-->\n                                                    <!--                                                                    <div  class=\"k-loading-mask customPosition\"><span class='k-loading-text'></span><div class='k-loading-image'/>-->\n                                                    <!--                                                                        <div class='k-loading-color'/></div>-->\n                                                    <!--                                                                </kendo-grid-norecords>-->\n                                                    <kendo-grid-column\n                                                        :title=\"$t('no.')\"\n                                                        :template=\"rowNumberTmplApply\"\n                                                        :width=\"55\"\n                                                        :editable=\"() => {return false}\"\n                                                        :column-menu=\"false\"\n                                                        :headerAttributes=\"{style: 'background-color: #EDF1F5;', class: 'text-products'}\"\n                                                        :attributes=\"{ style: 'text-align: products' }\"/>\n                                                    <kendo-grid-column\n                                                        :field=\"'referenceNo'\"\n                                                        :title=\"$t('number')\"\n                                                        :width=\"150\"\n                                                        :editable=\"() => {return false}\"\n                                                        :template=\"'<span>#=referenceNo||``#</span>'\"\n                                                        :headerAttributes=\"{style: 'background-color: #EDF1F5'}\"/>\n                                                    <kendo-grid-column\n                                                        :field=\"'currencyCode'\"\n                                                        :title=\"$t('currency')\"\n                                                        :width=\"150\"\n                                                        :editable=\"() => {return false}\"\n                                                        :headerAttributes=\"{style:'text-align: right; background-color: #EDF1F5',}\"\n                                                        :attributes=\"{ style: 'text-align: right' }\"/>\n                                                    <kendo-grid-column\n                                                        :field=\"'txnRate'\"\n                                                        :title=\"$t('rate')\"\n                                                        :width=\"200\"\n                                                        :hidden=\"true\"\n                                                        :editable=\"() => {return false}\"\n                                                        :headerAttributes=\"{style: 'text-align: right; background-color: #EDF1F5'}\"\n                                                        :attributes=\"{ style: 'text-align: right' }\"/>\n                                                    <kendo-grid-column\n                                                        :field=\"'amount'\"\n                                                        :title=\"$t('amount')\"\n                                                        :template=\"amountTemplate\"\n                                                        :width=\"200\"\n                                                        :editable=\"() => {return false}\"\n                                                        :headerAttributes=\"{style:'text-align: right; background-color: #EDF1F5'}\"\n                                                        :attributes=\"{ style: 'text-align: right' }\"/>\n                                                    <kendo-grid-column\n                                                        :field=\"'paidAmount'\"\n                                                        :title=\"$t('offset_amount')\"\n                                                        :editor=\"AmountEditor\"\n                                                        :template=\"paidAmountTemplate\"\n                                                        :width=\"200\"\n                                                        :editable=\"() => {return true}\"\n                                                        :headerAttributes=\"{style:'text-align: right; background-color: #EDF1F5',}\"\n                                                        :attributes=\"{ style: 'text-align: right' }\"/>\n                                                </kendo-grid>\n                                                <v-row>\n                                                    <v-col sm=\"7\" cols=\"7\" class=\"pt-0\"></v-col>\n                                                    <v-col sm=\"5\" cols=\"5\" class=\"pt-0\">\n                                                        <v-simple-table>\n                                                            <template v-slot:default>\n                                                                <tbody>\n                                                                <tr>\n                                                                    <td class=\"text-left text-uppercase\">{{\n                                                                            $t(\"total\")\n                                                                        }}\n                                                                    </td>\n                                                                    <td class=\"text-center\">:</td>\n                                                                    <td class=\"text-right primary--text text-bold\">\n                                                                        {{\n                                                                            numberFormat(debitMemo.applyToExchangeAmount)\n                                                                        }}\n                                                                    </td>\n                                                                </tr>\n                                                                </tbody>\n                                                            </template>\n                                                        </v-simple-table>\n                                                    </v-col>\n                                                </v-row>\n                                            </v-col>\n                                            <v-col sm=\"12\" cols=\"12\" class=\"pt-0\">\n                                                <h3 class=\"mb-0 text-uppercase color_grey mb-3\">{{\n                                                        $t(\"supplier_credit\")\n                                                    }}</h3>\n                                                <kendo-datasource\n                                                    ref=\"depositLineDS\"\n                                                    :data=\"depositLines\"\n                                                    :change=\"onDepositLineDSChange\"/>\n                                                <kendo-grid\n                                                    id=\"gridDeposit\"\n                                                    ref=\"gridDeposit\"\n                                                    class=\"grid-function\"\n                                                    :data-source-ref=\"'depositLineDS'\"\n                                                    :sortable=\"false\"\n                                                    :filterable=\"false\"\n                                                    :column-menu=\"true\"\n                                                    :editable=\"true\"\n                                                    :noRecords=\"true\"\n                                                    :scrollable-virtual=\"true\">\n                                                    <kendo-grid-column\n                                                        :field=\"'account'\"\n                                                        :title=\"$t('account')\"\n                                                        :width=\"200\"\n                                                        :template=\"'<span>#=account.name||``#</span>'\"\n                                                        :editor=\"AccountDropDownEditorDeposit\"\n                                                        :headerAttributes=\"{style: 'background-color: #EDF1F5'}\"/>\n                                                    <kendo-grid-column\n                                                        :field=\"'description'\"\n                                                        :title=\"$t('description')\"\n                                                        :width=\"200\"\n                                                        :headerAttributes=\"{style: 'background-color: #EDF1F5'}\"/>\n                                                    <kendo-grid-column\n                                                        :field=\"'amount'\"\n                                                        :title=\"$t('amount')\"\n                                                        :width=\"200\"\n                                                        :headerTemplate=\"amountLineHeaderTemplate\"\n                                                        :editor=\"AmountEditor\"\n                                                        :template=\"amountTemplate\"\n                                                        :headerAttributes=\"{style:'text-align: right; background-color: #EDF1F5'}\"\n                                                        :attributes=\"{ style: 'text-align: right' }\"/>\n                                                </kendo-grid>\n                                            </v-col>\n\n                                            <v-col sm=\"12\" cols=\"12\" class=\"pt-0\">\n                                                <h3 class=\"mb-0 text-uppercase color_grey mb-3\">{{\n                                                        $t(\"cash_refund\")\n                                                    }}</h3>\n                                                <kendo-datasource\n                                                    ref=\"cashRefundDS\"\n                                                    :change=\"onCashRefundChange\"\n                                                    :data=\"cashRefundLines\"/>\n                                                <kendo-grid\n                                                    id=\"gridCashRefund\"\n                                                    class=\"grid-function\"\n                                                    :data-source-ref=\"'cashRefundDS'\"\n                                                    :sortable=\"false\"\n                                                    :filterable=\"false\"\n                                                    :column-menu=\"true\"\n                                                    :editable=\"true\"\n                                                    :scrollable-virtual=\"true\">\n                                                    <kendo-grid-column\n                                                        :field=\"'paymentOption'\"\n                                                        :title=\"$t('payment_option')\"\n                                                        :width=\"250\"\n                                                        :template=\"methodTemplate\"\n                                                        :editor=\"PaymentOptionEditor\"\n                                                        :headerAttributes=\"{style: 'background-color: #EDF1F5'}\"/>\n                                                    <kendo-grid-column\n                                                        :field=\"'account'\"\n                                                        :title=\"$t('account')\"\n                                                        :width=\"200\"\n                                                        :template=\"accountTemplate\"\n                                                        :editor=\"AccountDropDownEditorRefund\"\n                                                        :headerAttributes=\"{style: 'background-color: #EDF1F5'}\"/>\n                                                    <kendo-grid-column\n                                                        :field=\"'description'\"\n                                                        :title=\"$t('description')\"\n                                                        :width=\"200\"\n                                                        :template=\"'<span>#=description#</span>'\"\n                                                        :headerAttributes=\"{style: 'background-color: #EDF1F5'}\"/>\n                                                    <kendo-grid-column\n                                                        :field=\"'refNo'\"\n                                                        :title=\"$t('payment_ref')\"\n                                                        :width=\"150\"\n                                                        :hidden=\"true\"\n                                                        :headerAttributes=\"{style:'text-align: right; background-color: #EDF1F5'}\"\n                                                        :attributes=\"{style: 'text-align: right'}\"/>\n                                                    <kendo-grid-column\n                                                        :field=\"'amount'\"\n                                                        :title=\"$t('amount')\"\n                                                        :headerTemplate=\"amountLineHeaderTemplate\"\n                                                        :width=\"200\"\n                                                        :template=\"amountTemplate\"\n                                                        :editor=\"AmountEditor\"\n                                                        :headerAttributes=\"{style:'text-align: right; background-color: #EDF1F5'}\"\n                                                        :attributes=\"{style: 'text-align: right'}\"/>\n                                                </kendo-grid>\n                                            </v-col>\n                                        </v-col>\n                                    </v-row>\n                                    <v-row class=\"pt-3\" style=\"background-color: #fff;\">\n                                        <!--                                        <v-col sm=\"12\" cols=\"12\" class=\"pt-0\">-->\n                                        <!--                                            <kendo-datasource-->\n                                        <!--                                                ref=\"accountLineDS\"-->\n                                        <!--                                                :data=\"accountLines\"-->\n                                        <!--                                                :change=\"onAccountLineDSChanged\"/>-->\n                                        <!--                                            <kendo-grid-->\n                                        <!--                                                id=\"gridAccountLine\"-->\n                                        <!--                                                ref=\"gridAccountLine\"-->\n                                        <!--                                                class=\"grid-function\"-->\n                                        <!--                                                :data-source-ref=\"'accountLineDS'\"-->\n                                        <!--                                                :sortable=\"false\"-->\n                                        <!--                                                :filterable=\"false\"-->\n                                        <!--                                                :column-menu=\"true\"-->\n                                        <!--                                                :editable=\"true\"-->\n                                        <!--                                                :noRecords=\"true\"-->\n                                        <!--                                                :scrollable-virtual=\"true\">-->\n                                        <!--                                                <kendo-grid-column-->\n                                        <!--                                                    :title=\"$t('no.')\"-->\n                                        <!--                                                    :template=\"rowNumberTmplAcc\"-->\n                                        <!--                                                    :width=\"55\"-->\n                                        <!--                                                    :column-menu=\"false\"-->\n                                        <!--                                                    :headerAttributes=\"{ style: 'background-color: #EDF1F5;',class: 'text-products', }\"-->\n                                        <!--                                                    :attributes=\"{  style: 'text-align: products', }\"/>-->\n                                        <!--                                                <kendo-grid-column-->\n                                        <!--                                                    :field=\"'account'\"-->\n                                        <!--                                                    :title=\"$t('account')\"-->\n                                        <!--                                                    :width=\"200\"-->\n                                        <!--                                                    :template=\"accountTemplate\"-->\n                                        <!--                                                    :editor=\"AccountDropDownEditor\"-->\n                                        <!--                                                    :headerAttributes=\"{  style: 'background-color: #EDF1F5', }\"/>-->\n                                        <!--                                                <kendo-grid-column-->\n                                        <!--                                                    :field=\"'description'\"-->\n                                        <!--                                                    :title=\"$t('description')\"-->\n                                        <!--                                                    :width=\"200\"-->\n                                        <!--                                                    :headerAttributes=\"{ style: 'background-color: #EDF1F5', }\"/>-->\n                                        <!--                                                <kendo-grid-column-->\n                                        <!--                                                    :field=\"'amount'\"-->\n                                        <!--                                                    :title=\"$t('amount')\"-->\n                                        <!--                                                    :format=\"'{0:n}'\"-->\n                                        <!--                                                    :width=\"150\"-->\n                                        <!--                                                    :editor=\"AmountEditor\"-->\n                                        <!--                                                    :headerAttributes=\"{ style: 'text-align: right; background-color: #EDF1F5', }\"-->\n                                        <!--                                                    :attributes=\"{ style: 'text-align: right',  }\"/>-->\n                                        <!--                                                <kendo-grid-column-->\n                                        <!--                                                    :field=\"'discountItem'\"-->\n                                        <!--                                                    :title=\"$t('discount')\"-->\n                                        <!--                                                    :template=\"'<span>#=discountItem.name||``#</span>'\"-->\n                                        <!--                                                    :editor=\"DiscountItemDropDownEditor\"-->\n                                        <!--                                                    :width=\"150\"-->\n                                        <!--                                                    :headerAttributes=\"{ style: 'text-align: right; background-color: #EDF1F5',  }\"-->\n                                        <!--                                                    :attributes=\"{  style: 'text-align: right',  }\"/>-->\n                                        <!--                                                <kendo-grid-column-->\n                                        <!--                                                    :field=\"'vatTax'\"-->\n                                        <!--                                                    :title=\"$t('tax')\"-->\n                                        <!--                                                    :template=\"'<span>#=vatTax.defaultTax||``#</span>'\"-->\n                                        <!--                                                    :editor=\"VatTaxDropDownEditor\"-->\n                                        <!--                                                    :width=\"150\"-->\n                                        <!--                                                    :headerAttributes=\"{ style:'text-align: right; background-color: #EDF1F5', }\"-->\n                                        <!--                                                    :attributes=\"{  style: 'text-align: right', }\"/>-->\n                                        <!--                                                <kendo-grid-column-->\n                                        <!--                                                    :command=\"{ iconClass: 'k-icon k-i-trash', text: 'Delete', click: removeRowAcc, class: 'btn-plus', }\"-->\n                                        <!--                                                    :title=\"$t('action')\"-->\n                                        <!--                                                    :width=\"100\"-->\n                                        <!--                                                    :headerAttributes=\"{ style:'text-align: right; background-color: #EDF1F5', }\"/>-->\n                                        <!--                                            </kendo-grid>-->\n                                        <!--                                        </v-col>-->\n                                        <v-col sm=\"12\" cols=\"12\" class=\"pb-0\">\n                                            <v-row>\n                                                <!--                                                <v-col sm=\"9\" cols=\"12\" class=\"\">-->\n                                                <!--                                                    <v-btn class=\"float-left btn_plus mr-2 rounded-0\"-->\n                                                <!--                                                           @click=\"addRowAcc\">-->\n                                                <!--                                                        <v-icon size=\"\" class=\"ma-1\">mdi-plus</v-icon>-->\n                                                <!--                                                    </v-btn>-->\n                                                <!--                                                    &lt;!&ndash;                                                    <v-btn class=\"float-left add_account mr-2 rounded-0 white&#45;&#45;text\"&ndash;&gt;-->\n                                                <!--                                                    &lt;!&ndash;                                                           to=\"add_item\">&ndash;&gt;-->\n                                                <!--                                                    &lt;!&ndash;                                                        {{ $t('add_account') }}&ndash;&gt;-->\n                                                <!--                                                    &lt;!&ndash;                                                    </v-btn>&ndash;&gt;-->\n                                                <!--                                                    &lt;!&ndash;                                                    <v-btn&ndash;&gt;-->\n                                                <!--                                                    &lt;!&ndash;                                                        class=\"float-left add_account mr-2  rounded-0 btn_save_draft\">&ndash;&gt;-->\n                                                <!--                                                    &lt;!&ndash;                                                        {{ $t('sub_total') }}&ndash;&gt;-->\n                                                <!--                                                    &lt;!&ndash;                                                    </v-btn>&ndash;&gt;-->\n                                                <!--                                                    &lt;!&ndash;                                                    <template>&ndash;&gt;-->\n                                                <!--                                                    &lt;!&ndash;                                                        <v-file-input class=\"mt-0 pt-0 \" sm=\"3\" cols=\"6\"&ndash;&gt;-->\n                                                <!--                                                    &lt;!&ndash;                                                                      v-model=\"files\"&ndash;&gt;-->\n                                                <!--                                                    &lt;!&ndash;                                                                      :placeholder=\"$t('attachment')\"&ndash;&gt;-->\n                                                <!--                                                    &lt;!&ndash;                                                                      multiple&ndash;&gt;-->\n                                                <!--                                                    &lt;!&ndash;                                                                      prepend-icon=\"mdi-paperclip\"&ndash;&gt;-->\n                                                <!--                                                    &lt;!&ndash;                                                        >&ndash;&gt;-->\n                                                <!--                                                    &lt;!&ndash;                                                            <template v-slot:selection=\"{ text }\">&ndash;&gt;-->\n                                                <!--                                                    &lt;!&ndash;                                                                <v-chip&ndash;&gt;-->\n                                                <!--                                                    &lt;!&ndash;                                                                    small&ndash;&gt;-->\n                                                <!--                                                    &lt;!&ndash;                                                                    label&ndash;&gt;-->\n                                                <!--                                                    &lt;!&ndash;                                                                    color=\"primary\"&ndash;&gt;-->\n                                                <!--                                                    &lt;!&ndash;                                                                >&ndash;&gt;-->\n                                                <!--                                                    &lt;!&ndash;                                                                    {{ text }}&ndash;&gt;-->\n                                                <!--                                                    &lt;!&ndash;                                                                </v-chip>&ndash;&gt;-->\n                                                <!--                                                    &lt;!&ndash;                                                            </template>&ndash;&gt;-->\n                                                <!--                                                    &lt;!&ndash;                                                        </v-file-input>&ndash;&gt;-->\n                                                <!--                                                    &lt;!&ndash;                                                    </template>&ndash;&gt;-->\n                                                <!--                                                </v-col>-->\n\n                                                <v-col sm=\"12\" cols=\"12\" class=\"py-0\">\n                                                    <v-row>\n                                                        <v-col sm=\"6\" cols=\"6\" class=\"pt-0\">\n                                                            <v-card class=\"no-boxshadow rounded-4 pa-3\" color=\"grayBg\">\n                                                                <v-row>\n                                                                    <v-col sm=\"12\" cols=\"12\" class=\"py-0\">\n                                                                        <label>{{ $t(\"message_on_memo\") }}</label>\n                                                                        <v-textarea\n                                                                            class=\"mt-1\"\n                                                                            v-model=\"debitMemo.transactionNote\"\n                                                                            outlined\n                                                                            no-resize\n                                                                            height=\"70px\"\n                                                                            tage=\"Message on Debit Memo\"\n                                                                            placeholder=\"This will appear on the Debit Memo\"/>\n                                                                        <label>{{ $t(\"message_for_journal\") }}</label>\n                                                                        <v-textarea\n                                                                            class=\"mt-1\"\n                                                                            v-model=\"debitMemo.journalNote\"\n                                                                            outlined\n                                                                            no-resize\n                                                                            height=\"70px\"\n                                                                            tage=\"Message on Order\"\n                                                                            placeholder=\"This will appear on the journal\"/>\n                                                                    </v-col>\n                                                                </v-row>\n                                                            </v-card>\n                                                        </v-col>\n                                                        <v-col sm=\"6\" cols=\"6\" class=\"pt-0\">\n                                                            <v-simple-table>\n                                                                <template v-slot:default>\n                                                                    <tbody>\n                                                                    <tr>\n                                                                        <td class=\"text-left\">{{ $t(\"amount_return\") }}\n                                                                            ({{ currencyCode }})\n                                                                        </td>\n                                                                        <td class=\"text-center\">:</td>\n                                                                        <td class=\"text-right\">\n                                                                            {{ numberFormat(debitMemo.itemLineAmount) }}\n                                                                        </td>\n                                                                    </tr>\n                                                                    <tr>\n                                                                        <td class=\"text-left\">{{ $t(\"offset_amount\") }}\n                                                                            ({{ currencyCode }})/td>\n                                                                        <td class=\"text-center\">:</td>\n                                                                        <td class=\"text-right\">\n                                                                            {{ numberFormat(debitMemo.amount) }}\n                                                                        </td>\n                                                                    </tr>\n                                                                    <tr>\n                                                                        <td class=\"text-left\">{{ $t(\"amount_return\") }}\n                                                                            ({{ baseCurrencyCode }})\n                                                                        </td>\n                                                                        <td class=\"text-center\">:</td>\n                                                                        <td class=\"text-right\">\n                                                                            {{\n                                                                                numberFormat(debitMemo.itemLineExchangeAmount)\n                                                                            }}\n                                                                        </td>\n                                                                    </tr>\n                                                                    <tr>\n                                                                        <td class=\"text-left\">{{ $t(\"offset_amount\") }}\n                                                                            ({{ baseCurrencyCode }})\n                                                                        </td>\n                                                                        <td class=\"text-center\">:</td>\n                                                                        <td class=\"text-right\">\n                                                                            {{ numberFormat(debitMemo.exchangeAmount) }}\n                                                                        </td>\n                                                                    </tr>\n                                                                    <tr>\n                                                                        <td class=\"text-left\">{{ $t(\"variance\") }}\n                                                                            <v-select\n                                                                                class=\"mt-1\"\n                                                                                v-model=\"debitMemo.varianceAcc\"\n                                                                                :items=\"varianceAccs\"\n                                                                                item-value=\"id\"\n                                                                                :item-text=\"(item) =>`${item.number} - ${item.name}`\"\n                                                                                @change=\"onVarianceAccChanged\"\n                                                                                return-object\n                                                                                tage=\"variance account\"\n                                                                                placeholder=\"account\"\n                                                                                clearable\n                                                                                outlined=\"\"/>\n                                                                        </td>\n                                                                        <td class=\"text-center\">:</td>\n                                                                        <td class=\"text-right\">\n                                                                            {{ formatVariance(debitMemo.variance) }}\n                                                                        </td>\n                                                                    </tr>\n                                                                    <tr hidden>\n                                                                        <td class=\"text-left\">{{ $t(\"dr\") }}</td>\n                                                                        <td class=\"text-center\">:</td>\n                                                                        <td class=\"text-right\">{{\n                                                                                numberFormat(dr)\n                                                                            }}\n                                                                        </td>\n                                                                    </tr>\n                                                                    <tr hidden>\n                                                                        <td class=\"text-left\">{{ $t(\"cr\") }}</td>\n                                                                        <td class=\"text-center\">:</td>\n                                                                        <td class=\"text-right\">{{\n                                                                                numberFormat(cr)\n                                                                            }}\n                                                                        </td>\n                                                                    </tr>\n                                                                    </tbody>\n                                                                </template>\n                                                            </v-simple-table>\n                                                        </v-col>\n                                                    </v-row>\n                                                </v-col>\n                                            </v-row>\n                                        </v-col>\n                                    </v-row>\n\n                                    <v-divider/>\n\n                                    <v-card outlined dense class=\"no_border function_footer\">\n                                        <v-alert type=\"warning\" v-model=\"alert\" dismissible>\n                                            <span v-html=\"errorMessage\"/>\n                                        </v-alert>\n                                        <v-menu>\n                                            <template v-slot:activator=\"{ on }\">\n                                                <v-btn class=\"mr-2 float-left select_template\"\n                                                       v-on=\"on\">{{ $t(\"select_template\") }}\n                                                    <v-icon size=\"\" class=\"ma-1\">expand_more</v-icon>\n                                                </v-btn>\n                                            </template>\n                                            <v-list>\n                                                <v-list-item v-for=\"(item, index) in templatesForm\" :key=\"index\">\n                                                    <v-list-item-title>{{ item.title }}</v-list-item-title>\n                                                </v-list-item>\n                                            </v-list>\n                                        </v-menu>\n                                        <v-btn\n                                            color=\"primary\"\n                                            outlined\n                                            class=\"float-left  black--text text-capitalize\"\n                                            @click=\"cancel\">{{ $t(\"cancel\") }}\n                                        </v-btn>\n                                        <!--                    <v-menu>-->\n                                        <!--                      <template v-slot:activator=\"{ on }\">-->\n                                        <!--                        <v-btn color=\"primary\"-->\n                                        <!--                               class=\"ml-2 float-right  white&#45;&#45;text text-capitalize\" v-on=\"on\">-->\n                                        <!--                          {{ $t('save_option') }}-->\n                                        <!--                          <v-icon size=\"\" class=\"ma-1\">expand_more</v-icon>-->\n                                        <!--                        </v-btn>-->\n                                        <!--                      </template>-->\n                                        <!--                      <v-list rounded>-->\n                                        <!--                        <v-list-item-group>-->\n                                        <!--                          <v-list-item>-->\n                                        <!--                            <v-list-item-content>-->\n                                        <!--                              <v-list-item-title>-->\n                                        <!--                                {{ $t('save_new') }}-->\n                                        <!--                              </v-list-item-title>-->\n                                        <!--                            </v-list-item-content>-->\n                                        <!--                          </v-list-item>-->\n                                        <!--                          <v-list-item>-->\n                                        <!--                            <v-list-item-content>-->\n                                        <!--                              <v-list-item-title>{{ $t('save_draft') }}-->\n                                        <!--                              </v-list-item-title>-->\n                                        <!--                            </v-list-item-content>-->\n                                        <!--                          </v-list-item>-->\n                                        <!--                        </v-list-item-group>-->\n                                        <!--                      </v-list>-->\n                                        <!--                    </v-menu>-->\n                                        <v-btn color=\"primary\"\n                                               class=\"float-right  white--text text-capitalize\"\n                                               @click=\"onSaveClose('close')\">\n                                            {{ $t(\"save_close\") }}\n                                        </v-btn>\n                                        <v-btn color=\"secondary\"\n                                               style=\"margin-right: 10px !important\"\n                                               class=\"white--text float-right text-capitalize\"\n                                               @click=\"onSaveClose('new')\" :hidden=\"hiddenButton\">{{ $t(\"save_new\") }}\n                                        </v-btn>\n                                    </v-card>\n                                </v-form>\n                            </v-col>\n\n                            <v-col\n                                class=\"smallSide pl-2\"\n                                sm=\"4\"\n                                style=\"transition: .3s ease-in;\"\n                                :class=\"{ hide_small_bar_class: isHideBar }\">\n                                <div class=\"d-flex justify-end\">\n                                    <h3 style=\"color: #b3b5bc; font-size:20px;\" v-if=\"!isHideBar\"\n                                        class=\"text-uppercase float-right mt-n3\">\n                                        <span class=\"pointer\" @click=\"Help('credit memo')\">{{ $t(\"help\") }}</span>\n                                        <v-icon @click=\"cancel()\"\n                                                style=\"cursor: pointer; color: #333; font-size: 40px;\"\n                                                class=\"float-right mt-n1\">close\n                                        </v-icon>\n                                    </h3>\n                                </div>\n\n                                <div v-if=\"!isHideBar\" class=\"small_sidebar mt-2 px-4 pt-4 grayBg\">\n                                    <v-card style=\"margin-bottom: 2px;\" outlined dense\n                                            class=\"pa-3 no_border my_card rounded-4 white--text\" color=\"primary\"\n                                            height=\"60px\">\n                                        <h3 class=\"text-left font_13 flex-1 text-uppercase\">\n                                            {{ $t('offset_amount') }}</h3>\n                                        <h3 class=\"text-right flex-1 font_20 niradei_heavy\">\n                                            {{ numberFormat(debitMemo.exchangeAmount) }} </h3>\n                                    </v-card>\n                                    <v-row>\n                                        <v-col sm=\"12\" cols=\"12\" class=\"pt-5\">\n                                            <label class=\"label mb-0\">{{ $t(\"segment\") }}</label>\n                                            <v-select\n                                                class=\"mt-1\"\n                                                v-model=\"debitMemo.segment\"\n                                                :items=\"segments\"\n                                                item-value=\"id\"\n                                                :disabled=\"true\"\n                                                :item-text=\"(item) => `${item.code} - ${item.name}`\"\n                                                return-object\n                                                tage=\"sub Of\"\n                                                placeholder=\"Sub Of\"\n                                                outlined=\"\"/>\n                                            <label class=\"label mb-0\">{{ $t(\"location\") }}</label>\n                                            <v-select\n                                                class=\"mt-1\"\n                                                v-model=\"debitMemo.location\"\n                                                :items=\"locations\"\n                                                item-value=\"id\"\n                                                :item-text=\"(item) => `${item.code} - ${item.name}`\"\n                                                return-object\n                                                tage=\"Location\"\n                                                :disabled=\"true\"\n                                                placeholder=\"bu/location\"\n                                                outlined=\"\"/>\n                                            <label class=\"label font_14\">{{ $t(\"project\") }}</label>\n                                            <v-select\n                                                class=\" mt-1\"\n                                                v-model=\"debitMemo.project\"\n                                                :items=\"customerProjects\"\n                                                :disabled=\"true\"\n                                                :item-text=\"(item) => `${item.code} - ${item.name}`\"\n                                                item-value=\"id\"\n                                                tage=\"Customer Project\"\n                                                placeholder=\"project\"\n                                                clearable\n                                                outlined/>\n                                            <label class=\"label font_14\">{{ $t(\"employee\") }}</label>\n                                            <v-col sm=\"12\"\n                                                   cols=\"12\"\n                                                   class=\"kendo_dropdown_custom pl-0 pb-3 pt-0\">\n                                                <dropdownlist\n                                                    :data-items=\"employees\"\n                                                    @change=\"onEmployeeChanged\"\n                                                    :value=\"mEmployee\"\n                                                    :data-item-key=\"'id'\"\n                                                    :text-field=\"'name'\"\n                                                    :default-item=\"defaultItem\"\n                                                    :filterable=\"true\"\n                                                    @filterchange=\"onEmployeeFilterChanged\">\n                                                </dropdownlist>\n                                            </v-col>\n                                        </v-col>\n                                    </v-row>\n                                    <v-divider class=\"mb-3\"/>\n                                    <!--                                    <v-card class=\"pa-3 mb-2 no-boxshadow\"-->\n                                    <!--                                            style=\"min-height: 70px; background-color: #ffffff !important;\">-->\n                                    <!--                                        &lt;!&ndash;                                        <h3 class=\"text-uppercase mb-2 font_18\">{{ $t('offset_amount') }}</h3>&ndash;&gt;-->\n                                    <!--                                        &lt;!&ndash;                                        <h3 class=\"text-bold float-right\" style=\"font-size: 22px\">200</h3>&ndash;&gt;-->\n                                    <!--                                    </v-card>-->\n                                    <!--                                    <v-row>-->\n                                    <!--                                        <v-col sm=\"12\" cols=\"12\" class=\"pt-1\">-->\n                                    <!--                                            <label-->\n                                    <!--                                                class=\"label text-bold text-uppercase font_14\">{{-->\n                                    <!--                                                    $t('invoice_to_offset')-->\n                                    <!--                                                }}</label>-->\n                                    <!--                                            <v-select class=\" mt-1\"-->\n                                    <!--                                                      :items=\"transaction\"-->\n                                    <!--                                                      :rules=\"[v => !!v || 'Payble Account is required']\"-->\n                                    <!--                                                      return-object-->\n                                    <!--                                                      tage=\"Invoice to Offset\"-->\n                                    <!--                                                      outlined-->\n                                    <!--                                            >-->\n                                    <!--                                                <template v-slot:item=\"{ item }\">-->\n                                    <!--                                                    <p class=\"d-block text-center\">{{ item.id }}. {{ item.name }}</p>-->\n                                    <!--                                                    <br>-->\n                                    <!--                                                    <div class=\"item_list d-flex\">-->\n                                    <!--                                                        <span>-->\n                                    <!--                                                            {{ item.no }}-->\n                                    <!--                                                        </span>-->\n                                    <!--                                                        <v-btn>Add</v-btn>-->\n                                    <!--                                                    </div>-->\n                                    <!--                                                </template>-->\n                                    <!--                                            </v-select>-->\n\n                                    <!--                                            <v-row>-->\n                                    <!--                                                <v-col sm=\"9\" cols=\"9\" class=\"py-1 pr-0\">-->\n                                    <!--                                                    <v-card outlined-->\n                                    <!--                                                            class=\"px-3 py-1 text-white no-boxshadow no_border justify-left d-flex\"-->\n                                    <!--                                                            style=\"background-color: #92d050; height: 30px\">-->\n                                    <!--                                                        <input type=\"checkbox\" class=\"checkbox_inv float-left\"/>-->\n                                    <!--                                                        <p class=\"mb-0\" style=\"width: 100%\">-->\n                                    <!--                                                            <span class=\"pl-3 float-left\">No. 00224</span>-->\n                                    <!--                                                            <span class=\"float-right\">2,500.00</span>-->\n                                    <!--                                                        </p>-->\n                                    <!--                                                    </v-card>-->\n                                    <!--                                                </v-col>-->\n                                    <!--                                                <v-col sm=\"3\" cols=\"3\" class=\"py-1  pl-1\">-->\n                                    <!--                                                    <v-btn-->\n                                    <!--                                                        class=\"text-white text-bold rounded-0 float-right text-uppercase\"-->\n                                    <!--                                                        style=\"height: 30px !important; background-color: rgb(0, 176, 80) !important\">-->\n                                    <!--                                                        {{ $t('add') }}-->\n                                    <!--                                                    </v-btn>-->\n                                    <!--                                                </v-col>-->\n                                    <!--                                            </v-row>-->\n                                    <!--                                            <v-row>-->\n                                    <!--                                                <v-col sm=\"9\" cols=\"9\" class=\"py-1 pr-0\">-->\n                                    <!--                                                    <v-card outlined-->\n                                    <!--                                                            class=\"px-3 py-1 text-white no-boxshadow no_border justify-left d-flex\"-->\n                                    <!--                                                            style=\"background-color: #92d050; height: 30px\">-->\n                                    <!--                                                        <input type=\"checkbox\" class=\"checkbox_inv float-left\"/>-->\n                                    <!--                                                        <p class=\"mb-0\" style=\"width: 100%\">-->\n                                    <!--                                                            <span class=\"pl-3 float-left\">No. 00224</span>-->\n                                    <!--                                                            <span class=\"float-right\">2,500.00</span>-->\n                                    <!--                                                        </p>-->\n                                    <!--                                                    </v-card>-->\n                                    <!--                                                </v-col>-->\n                                    <!--                                                <v-col sm=\"3\" cols=\"3\" class=\"py-1  pl-1\">-->\n                                    <!--                                                    <v-btn-->\n                                    <!--                                                        class=\"text-white text-bold rounded-0 float-right text-uppercase\"-->\n                                    <!--                                                        style=\"height: 30px !important; background-color: rgb(0, 176, 80) !important\">-->\n                                    <!--                                                        {{ $t('add') }}-->\n                                    <!--                                                    </v-btn>-->\n                                    <!--                                                </v-col>-->\n                                    <!--                                            </v-row>-->\n                                    <!--                                            <v-row>-->\n                                    <!--                                                <v-col sm=\"9\" cols=\"9\" class=\"py-1 pr-0\">-->\n                                    <!--                                                    <v-card outlined-->\n                                    <!--                                                            class=\"px-3 py-1 text-white no-boxshadow no_border justify-left d-flex\"-->\n                                    <!--                                                            style=\"background-color: #92d050; height: 30px\">-->\n                                    <!--                                                        <input type=\"checkbox\" class=\"checkbox_inv float-left\"/>-->\n                                    <!--                                                        <p class=\"mb-0\" style=\"width: 100%\">-->\n                                    <!--                                                            <span class=\"pl-3 float-left\">No. 00224</span>-->\n                                    <!--                                                            <span class=\"float-right\">2,500.00</span>-->\n                                    <!--                                                        </p>-->\n                                    <!--                                                    </v-card>-->\n                                    <!--                                                </v-col>-->\n                                    <!--                                                <v-col sm=\"3\" cols=\"3\" class=\"py-1  pl-1\">-->\n                                    <!--                                                    <v-btn-->\n                                    <!--                                                        class=\"text-white text-bold rounded-0 float-right text-uppercase\"-->\n                                    <!--                                                        style=\"height: 30px !important; background-color: rgb(0, 176, 80) !important\">-->\n                                    <!--                                                        {{ $t('add') }}-->\n                                    <!--                                                    </v-btn>-->\n                                    <!--                                                </v-col>-->\n                                    <!--                                            </v-row>-->\n                                    <!--                                            <v-row>-->\n                                    <!--                                                <v-col sm=\"9\" cols=\"9\" class=\"py-1 pr-0\">-->\n                                    <!--                                                    <v-card outlined-->\n                                    <!--                                                            class=\"px-3 py-1 text-white no-boxshadow no_border justify-left d-flex\"-->\n                                    <!--                                                            style=\"background-color: #92d050; height: 30px\">-->\n                                    <!--                                                        <input type=\"checkbox\" class=\"checkbox_inv float-left\"/>-->\n                                    <!--                                                        <p class=\"mb-0\" style=\"width: 100%\">-->\n                                    <!--                                                            <span class=\"pl-3 float-left\">No. 00224</span>-->\n                                    <!--                                                            <span class=\"float-right\">2,500.00</span>-->\n                                    <!--                                                        </p>-->\n                                    <!--                                                    </v-card>-->\n                                    <!--                                                </v-col>-->\n                                    <!--                                                <v-col sm=\"3\" cols=\"3\" class=\"py-1  pl-1\">-->\n                                    <!--                                                    <v-btn-->\n                                    <!--                                                        class=\"text-white text-bold rounded-0 float-right text-uppercase\"-->\n                                    <!--                                                        style=\"height: 30px !important; background-color: rgb(0, 176, 80) !important\">-->\n                                    <!--                                                        {{ $t('add') }}-->\n                                    <!--                                                    </v-btn>-->\n                                    <!--                                                </v-col>-->\n                                    <!--                                            </v-row>-->\n                                    <!--                                        </v-col>-->\n                                    <!--                                    </v-row>-->\n\n                                    <!--                                    <h4 class=\"mb-2 text-uppercase\">{{ $t('add_to_deposit') }}</h4>-->\n                                    <!--                                    <label class=\"label font_14\">{{ $t('sale_channel') }}</label>-->\n                                    <!--                                    <v-select class=\" mt-1\"-->\n                                    <!--                                              :items=\"suppliers\"-->\n                                    <!--                                              :rules=\"[v => !!v || 'Payble Account is required']\"-->\n                                    <!--                                              return-object-->\n                                    <!--                                              tage=\"Add to Deposit\"-->\n                                    <!--                                              outlined-->\n                                    <!--                                    />-->\n                                    <!--                                    <label class=\"label font_14\">{{ $t('deposit_amount') }}</label>-->\n                                    <!--                                    <v-text-field class=\" mt-1 mb-16\"-->\n                                    <!--                                                  tage=\"Deposit Amount\"-->\n                                    <!--                                                  outlined-->\n                                    <!--                                    />-->\n\n                                    <p class=\"mb-0 detial_smallside_p font_14\">\n                                        {{ $t(\"purchase_return_desc\") }}\n                                    </p>\n                                </div>\n                            </v-col>\n                        </v-row>\n                    </v-card>\n                </v-col>\n            </v-row>\n            <LoadingMe :isLoading=\"showLoading\" :fullPage=\"false\" :myLoading=\"true\"/>\n            <v-dialog v-model=\"dialogTax\" max-width=\"450px\">\n                <v-card>\n                    <div class=\"modal_header\">\n                        <v-card-title>{{ $t(\"tax_list\") }}</v-card-title>\n                        <v-icon @click=\"dialogTax = false\">close</v-icon>\n                    </div>\n                    <v-card-text cl ass=\"modal_text_content\">\n                        <v-row>\n                            <v-col sm=\"12\" cols=\"12\" class=\"pb-0\">\n                                <v-simple-table>\n                                    <template v-slot:default>\n                                        <tbody>\n                                        <tr v-for=\"(value, name) in taxListTotal\" v-bind:key=\"name\">\n                                            <td class=\"text-left\" width=\"180px\">{{ name }}</td>\n                                            <td class=\"text-center\">:</td>\n                                            <td class=\"text-right\">{{ numberFormat(value) }}</td>\n                                        </tr>\n                                        <tr>\n                                            <td class=\"text-left\" width=\"180px\">{{ $t(\"total\") }}</td>\n                                            <td class=\"text-center\">:</td>\n                                            <td class=\"text-right\">{{ numberFormat(debitMemo.taxAmount) }}</td>\n                                        </tr>\n                                        </tbody>\n                                    </template>\n                                </v-simple-table>\n                            </v-col>\n                        </v-row>\n                    </v-card-text>\n                    <v-divider/>\n                </v-card>\n            </v-dialog>\n        </v-container>\n    </v-app>\n</template>\n\n<script>\n// import kendo from '@progress/kendo-ui'\nimport {i18n} from \"@/i18n\";\nimport LoadingMe from \"@/components/Loading\";\nimport DatePickerComponent from \"@/components/custom_templates/DatePickerComponent\";\nimport DebitMemoModel from \"@/scripts/purchase_return/model/DebitMemo\";\nimport kendo from \"@progress/kendo-ui\";\nimport {uuid} from \"vue-uuid\";\nimport PurchaseFormContentModel from \"@/scripts/model/PurchaseFormContent\";\nimport {DropDownList} from \"@progress/kendo-vue-dropdowns\";\nimport ItemLineModel from \"@/scripts/purchase/model/ItemLine\";\n\nimport ApplyToLineModel from \"@/scripts/purchase_return/model/ApplyToLine\";\nimport DepositLineModel from \"@/scripts/purchase_return/model/DepositLine\";\nimport {ShowResource, dataStore} from \"@/observable/store\";\nimport PurchaseDepositItemLineModel from \"@/scripts/purchase_deposit/model/ItemLine\";\nimport {supplierHandler} from \"@/scripts/AppHandlers\";\nimport PaymentOptionEditor from \"@/scripts/kendo_editor/PaymentOptionEditor\";\nimport Helper from \"@/helper\";\n\nconst defaultItem = {[\"numberName\"]: \"Select vendor...\", [\"id\"]: null};\nconst prefixHandler = require(\"@/scripts/prefixHandler\");\nconst emptyItem = {[\"numberName\"]: \"loading ...\"};\nconst billingHandler = require(\"@/scripts/invoice/handler/billingHandler\");\nconst purchaseFormContentHandler = require(\"@/scripts/purchaseFormContentHandler\");\nconst employeeHandler = require(\"@/scripts/employeeHandler\");\nconst locationHandler = require(\"@/scripts/locationHandler\");\nconst productVariantHandler = require(\"@/scripts/productVariantHandler\");\nconst discountItemHandler = require(\"@/scripts/discountItemHandler\");\nconst accountHandler = require(\"@/scripts/handler/accounting/account\");\nconst uomPriceHandler = require(\"@/scripts/uomPriceHandler\");\nconst settingsHandler = require(\"@/scripts/settingsHandler\");\nconst projectHandler = require(\"@/scripts/projectHandler\");\nconst priceLevelHandler = require(\"@/scripts/priceLevelHandler\");\nconst settingHandler = require(\"@/scripts/settingHandler\");\nconst paymentTermHandler = require(\"@/scripts/paymentTermHandler\");\nconst currencyHandler = require(\"@/scripts/currency/handler/currencyHandler\");\nconst saleUnitItemHandler = require(\"@/scripts/saleUnitItemHandler\");\nconst paymentOptionHandler = require(\"@/scripts/paymentOptionHandler\");\n\nconst purchaseFormContentModel = new PurchaseFormContentModel({});\nconst itemLineModel = new ItemLineModel({});\n// const accountLineModel = new AccountLineModel({})\nconst applyToLineModel = new ApplyToLineModel({});\nconst depositLineModel = new DepositLineModel({});\nconst $ = kendo.jQuery\nconst itemLinePrefix = \"lin-\";\nconst textField = \"numberName\";\n\nconst debitMemoModel = new DebitMemoModel({});\nconst purchaseDepositItemLineModel = new PurchaseDepositItemLineModel({});\nconst {ClassEditor} = require(\"@/scripts/kendo_editor/Collections\");\nconst DISCOUNT_TYPE = \"?type=Purchase\";\nconst TRANSACTION_TYPE = \"Debit Memo\";\nconst OPTION_TYPE = \"Supplier\";\nconst strFilter = \"?optionType=\" + OPTION_TYPE;\nconst cookieJS = require(\"@/cookie.js\");\nconst cookie = cookieJS.getCookie();\n\nexport default {\n    name: \"DebitMemo\",\n    props: [\"id\"],\n    components: {\n        LoadingMe: LoadingMe,\n        \"app-datepicker\": DatePickerComponent,\n        dropdownlist: DropDownList,\n    },\n    data: () => ({\n        isLoading: 0,\n        PaymentOptionEditor: PaymentOptionEditor,\n        debitMemo: debitMemoModel,\n        purchaseFormContent: purchaseFormContentModel,\n        itemLine: itemLineModel,\n        // accountLine: accountLineModel,\n        applyToLine: applyToLineModel,\n        depositLine: depositLineModel,\n        purchaseDepositLine: purchaseDepositItemLineModel,\n\n        supplierList: [],\n        cashRefundLines: [],\n        itemLines: [],\n        taxListTotal: [],\n        supplier: {},\n        defaultItem: defaultItem,\n        dataItemKey: \"id\",\n        textField: \"numberName\",\n        filter: \"\",\n        supBaseUrl: supplierHandler.search(),\n        empBaseUrl: employeeHandler.search(),\n        employees: [],\n        mEmployee: {},\n        customerProjects: [],\n        priceLevel: [],\n        locations: [],\n        otherTax: [],\n        vatTax: [],\n        tax: [],\n        specificTax: [],\n        publicLightingTax: [],\n        saleUnitItemList: [],\n        supplierDiscountItem: [],\n        customerSaleUnit: [],\n        transactionType: [],\n        segments: [],\n        exchangeRate: [],\n        currencyCode: \"\",\n        transactionRate: 1,\n        accountLines: [],\n        transactionRateDate: \"\",\n        accounts: [],\n        depositLines: [],\n        offsetPurchases: [],\n        offsetList: [],\n        offsetPurchaseList: [],\n        offsetPurchase: {},\n        decimalFormat: \"n2\",\n        // LoadingMe\n        showLoading: false,\n        bill_date: \"\",\n        alert: false,\n        valid: true,\n        suppliers: [],\n        paymentMethod: [],\n        transactionDate: new Date().toISOString().substr(0, 10),\n        templatesForm: [\n            {title: \"Debit Note\", id: 1},\n        ],\n        isHideBar: false,\n        dialogTax: false,\n        baseCurrencyCode: \"\",\n        accCash: [],\n        accDeposit: [],\n        accDeposits: [],\n        ClassEditor: ClassEditor,\n        jRaw: [],\n        jRaw1: [],\n        jRaw2: [],\n        jRaw3: [],\n        jRaw4: [],\n        jRaw5: [],\n        gainLossAcc: {},\n        otherRevenueAcc: {},\n        varianceAccs: [],\n        taxListDetail: [],\n        cr: 0,\n        dr: 0,\n        loggedUser: {\n            id: cookie.creator,\n            name: cookie.email,\n        },\n        isPriceLevelChanged: false\n    }),\n    computed: {\n        disabled() {\n            return !!this.$route.params.id;\n        },\n        amountHeaderTemplate() {\n            if (this.supplier) {\n                if (this.supplier.hasOwnProperty(\"baseCurrency\")) {\n                    const baseCurrency = this.supplier.baseCurrency;\n                    if (baseCurrency.hasOwnProperty(\"code\")) {\n                        return \"Amount (\" + baseCurrency.code + \")\";\n                    }\n                }\n            }\n            return \"Amount\";\n        },\n        amountLineHeaderTemplate() {\n            if (this.currencyCode) {\n                return \"Amount (\" + this.currencyCode + \")\";\n            }\n            return \"Amount\";\n        },\n        hiddenButton() {\n            if (this.$route.query.type == \"edit\") {\n                return true\n            } else {\n                return false\n            }\n        }\n    },\n    methods: {\n        status(status) {\n            let statusText = ''\n            switch (status) {\n                case 1:\n                    statusText = 'Open'\n                    break\n                case 2:\n                    statusText = 'Partially Paid'\n                    break\n                case 3:\n                    statusText = 'Paid'\n                    break\n                case 4:\n                    statusText = 'Void'\n                    break\n            }\n            return statusText\n        },\n        purchaseTemplate() {\n            const offsetPurchase = this.offsetPurchase || {}\n            const referenceNo = offsetPurchase.referenceNo || ''\n            const status = offsetPurchase.status || ''\n            const statusText = this.status(status)\n            window.console.log('referenceNo + \\'-\\' + statusText', referenceNo + '-' + statusText)\n            return referenceNo + '-' + statusText\n        },\n        formatVariance(num) {\n            if (num) {\n                window.console.log(num, \"num\");\n                const varianceNumber = this.numberToString(parseFloat(num));\n                return varianceNumber;\n                //   if (varianceNumber.includes('.')) {\n                //     const strDigit = varianceNumber.split('.')\n                //     const head = strDigit[0]\n                //     const rightHead = strDigit[1]\n                //     const nums = this.countZeros(rightHead)\n                //     const substringRight = rightHead.substring(0, nums + 1)\n                //     return head + '.' + substringRight\n                //   } else {\n                //     return varianceNumber\n                //   }\n            }\n            return 0;\n        },\n        countZeros(num) {\n            if (num) {\n                let splitted = num.split(\"\");\n                let i = 0;\n                while (splitted.shift() == 0) {\n                    i += 1;\n                }\n                return i;\n            }\n            return 0;\n        },\n        numberToString(num) {\n            let numStr = String(num);\n            if (Math.abs(num) < 1.0) {\n                let e = parseInt(num.toString().split(\"e-\")[1]);\n                if (e) {\n                    let negative = num < 0;\n                    if (negative) num *= -1;\n                    num *= Math.pow(10, e - 1);\n                    numStr = \"0.\" + new Array(e).join(\"0\") + num.toString().substring(2);\n                    if (negative) numStr = \"-\" + numStr;\n                }\n            } else {\n                let e = parseInt(num.toString().split(\"+\")[1]);\n                if (e > 20) {\n                    e -= 20;\n                    num /= Math.pow(10, e);\n                    numStr = num.toString() + new Array(e + 1).join(\"0\");\n                }\n            }\n            // const zeros = this.numberOfZeros(numStr)\n            return numStr; //parseFloat(numStr).toFixed(zeros + 1)\n        },\n        showWaringMessage(title, text, confirmButtonText) {\n            this.$swal({\n                title: title,\n                text: text,\n                icon: \"warning\",\n                showCancelButton: false,\n                confirmButtonColor: \"#4d4848\",\n                cancelButtonColor: \"#ED1A3A\",\n                confirmButtonText: confirmButtonText,\n            }).then((result) => {\n                if (result.value) {\n                    window.console.log(\"1\");\n                }\n            });\n        },\n        offsetInvoiceChanged() {\n            //todo: add invoice to line\n            this.offsetList = [];\n            if (this.offsetPurchase) {\n                window.console.log(this.offsetPurchase, \"offsetPurchase\");\n                const txnId = this.offsetPurchase.id || {};\n                this.debitMemo.location = this.offsetPurchase.location || {};\n                this.debitMemo.segment = this.offsetPurchase.segment || {};\n                this.debitMemo.project = this.offsetPurchase.project || {};\n\n                if (txnId) {\n                    this.offsetList = this.offsetPurchaseList.filter(\n                        (o) => o.id === txnId\n                    );\n                }\n                this.onApplyToLineChange()\n            }\n        },\n        priceTemplate(dataItem) {\n            if (dataItem) {\n                if (dataItem.hasOwnProperty(\"cost\")) {\n                    return kendo.toString(dataItem.cost || 0, this.decimalFormat);\n                }\n            }\n            return 0;\n        },\n        Help(key_search) {\n            ShowResource(key_search);\n        },\n        methodTemplate(dataItem) {\n            const method = dataItem.paymentOption || {};\n            if (method) {\n                return `<span>${method.bankAccountName || ``}</span>`;\n            } else {\n                return ``;\n            }\n        },\n        amountTemplate(dataItem) {\n            if (dataItem) {\n                if (dataItem.hasOwnProperty(\"amount\")) {\n                    const amt = dataItem.amount;\n                    return kendo.toString(parseFloat(amt || 0), this.decimalFormat);\n                }\n            }\n            return 0;\n        },\n        paidAmountTemplate(dataItem) {\n            if (dataItem) {\n                if (dataItem.hasOwnProperty(\"paidAmount\")) {\n                    const amt = dataItem.paidAmount;\n                    return kendo.toString(parseFloat(amt || 0), this.decimalFormat);\n                }\n            }\n            return 0;\n        },\n        methodDropDownEditor(container, options) {\n            kendo\n                .jQuery('<input name=\"' + options.field + '\"/>')\n                .appendTo(container)\n                .kendoDropDownList({\n                    autoBind: true,\n                    autoWidth: true,\n                    height: 400,\n                    filter: \"startswith\",\n                    dataTextField: \"name\",\n                    dataValueField: \"id\",\n                    template: \"<span>#=code# - #= name#</span>\",\n                    optionLabel: \"--Select--\",\n                    dataSource: new kendo.data.DataSource({\n                        data: this.paymentMethod,\n                    }),\n                });\n        },\n        numberFormat(value) {\n            return kendo.toString(value, `${this.decimalFormat}`);\n        },\n        onDepositLineDSChange(e) {\n            if (e.field) {\n                let dataRow = e.items[0];\n                switch (e.field) {\n                    case \"amount\":\n                        dataRow.set(\"exchangeAmount\", dataRow.amount);\n                        break;\n                    default:\n                        break;\n                }\n                this.autoCalculate();\n                this.autoCalculateApplyTo();\n                this.autoCalculateDeposit();\n                this.autoCalculateCashRefund();\n                this.calculateAmount();\n            }\n        },\n        onApplyToLineChange(e) {\n            try {\n                if (e) {\n                    if (e.field) {\n                        let dataRow = e.items[0],\n                            offset = 0,\n                            amount = 0;\n                        switch (e.field) {\n                            case \"paidAmount\":\n                                amount = parseFloat(dataRow.amount);\n                                offset = parseFloat(dataRow.paidAmount);\n                                if (offset > amount) {\n                                    dataRow.set(\"paidAmount\", amount);\n                                    dataRow.set(\"paidAmountTobase\", amount * dataRow.txnRate);\n                                } else {\n                                    dataRow.set(\n                                        \"paidAmountTobase\",\n                                        dataRow.paidAmount * dataRow.txnRate\n                                    );\n                                    dataRow.set(\n                                        \"paidAmountTxn\",\n                                        offset * parseFloat(dataRow.txnRate)\n                                    );\n                                }\n                                break;\n                            default:\n                                break;\n                        }\n                        // this.autoCalculate();\n                        // this.autoCalculateApplyTo();\n                        // this.autoCalculateDeposit();\n                        // this.autoCalculateCashRefund();\n                        // this.calculateAmount();\n                    }\n                }\n                this.autoCalculate();\n                this.autoCalculateApplyTo();\n                this.autoCalculateDeposit();\n                this.autoCalculateCashRefund();\n                this.calculateAmount();\n            } catch (e) {\n                window.console.log('e--', e)\n            }\n\n        },\n        onCashRefundChange(e) {\n            if (e.field) {\n                let dataRow = e.items[0], pOption = {}\n                switch (e.field) {\n                    case \"paymentOption\":\n                        pOption = dataRow.paymentOption || {}\n                        dataRow.set(\"account\", pOption.account || {});\n                        break;\n                    default:\n                        break;\n                }\n            }\n            if (e.field) {\n                this.autoCalculate();\n                this.autoCalculateApplyTo();\n                this.autoCalculateDeposit();\n                this.autoCalculateCashRefund();\n                this.calculateAmount();\n            }\n        },\n        nowTimes() {\n            const perfData = window.performance.timing;\n            const pageLoadTime = perfData.loadEventEnd - perfData.navigationStart;\n            window.console.log(pageLoadTime, \"--\");\n        },\n        onEmployeeChanged(event) {\n            const value = event.value;\n            if (value && value[textField] === emptyItem[textField]) {\n                return;\n            }\n            this.mEmployee = value;\n            this.debitMemo.employee = value;\n        },\n        afterFetch_(json) {\n            this.employees = json.data;\n        },\n        onEmployeeFilterChanged(event) {\n            const filter = event.filter.value;\n            this.requestData_(0, filter, this.empBaseUrl);\n            this.filter_ = filter;\n        },\n        autoCalculateDiscount(discountItem, subTotal) {\n            if (discountItem) {\n                const nature = discountItem.nature || ''\n                const amount = discountItem.amount || 0\n                if (nature === 'Amount') {\n                    return parseFloat(amount)\n                } else if (nature === 'Percentage') {\n                    return (subTotal * (parseFloat(amount) / 100))\n                } else {\n                    return 0\n                }\n            } else {\n                return 0\n            }\n        },\n        autoCalculateTax(tax, amount) {\n            if (tax) {\n                var formula = tax.formula;\n                var inAmt = kendo.parseFloat(amount);\n                var nAmt = kendo.parseFloat(amount);\n                var taxBase = kendo.parseFloat(tax.taxBase) / 100;\n                var rate = kendo.parseFloat(tax.rate) / 100;\n                var total = eval(formula);\n                window.console.log(inAmt, nAmt, taxBase, rate, formula, total);\n                return total;\n            }\n            // return 0\n        },\n        async loadTransactionRate() {\n            new Promise((resolve) => {\n                setTimeout(() => {\n                    resolve(\"resolved\");\n                    const date = new Date(this.transactionDate)\n                        .toISOString()\n                        .substr(0, 10);\n                    const priceLevel = this.debitMemo.priceLevel;\n                    let code = \"\";\n                    this.offsetPurchases = [];\n                    this.offsetList = [];\n                    if (priceLevel) {\n                        if (priceLevel.hasOwnProperty(\"currency\")) {\n                            this.debitMemo.currency = priceLevel.currency;\n                            if (priceLevel.currency.hasOwnProperty(\"code\")) {\n                                code = priceLevel.currency.code;\n                            }\n                        }\n                        if (code !== undefined || code !== \"\") {\n                            this.showLoading = true;\n                            currencyHandler\n                                .getLastExchangeRateByDate(date, code)\n                                .then((res) => {\n                                    if (res.data.statusCode === 200) {\n                                        this.showLoading = false;\n                                        this.exchangeRate = res.data.data[0];\n                                        this.currencyCode = this.exchangeRate.code;\n                                        this.transactionRate = this.exchangeRate.rate;\n                                        this.debitMemo.txnRate = this.exchangeRate.rate;\n                                        this.transactionRateDate = this.exchangeRate.effectiveDate;\n                                        this.debitMemo.exchangeRate = this.exchangeRate;\n                                        this.showLoading = false;\n                                    }\n                                });\n                        }\n                        if (this.supplier) {\n                            this.searchPurchase();\n                        }\n                    } else {\n                        this.isLoading = 0\n                    }\n                }, 50);\n            });\n        },\n        async loadPaymentTerm() {\n            new Promise((resolve) => {\n                setTimeout(() => {\n                    resolve(\"resolved\");\n                    paymentTermHandler.getAll().then((res) => {\n                        this.showLoading = false;\n                        this.paymentTerms = res.data.data;\n                        if (this.paymentTerms.length > 0) {\n                            this.debitMemo.paymentTerm = this.paymentTerms[0];\n                        }\n                    });\n                }, 50);\n            });\n        },\n        errorMessage() {\n        },\n        async loadTax() {\n            new Promise((resolve) => {\n                setTimeout(() => {\n                    resolve(\"resolved\");\n                    settingHandler.get().then((res) => {\n                        const taxes = res;\n                        this.tax = taxes.filter(\n                            (m) =>\n                                (m.taxType.typeId === 1 ||\n                                    m.taxType.typeId === 10 ||\n                                    m.taxType.typeId === 2) &&\n                                m.transactionType === \"Purchase\"\n                        ); // valuable tax\n                    });\n                }, 50);\n            });\n        },\n        async loadLocation() {\n            this.locations = []\n            const roleType = dataStore.roleType || 0\n            if (roleType === 0) {\n                if (dataStore.roleData) {\n                    const roleData = dataStore.roleData || []\n                    const location = roleData.filter(itm => itm.type === 'location')\n                    const locationDefault = location.filter(m => m.isDefault === 1)\n                    this.locations = location\n                    if (this.$route.params.id === undefined || this.$route.params.id === '') {\n                        if (locationDefault.length > 0) {\n                            this.debitMemo.location = locationDefault[0];\n                        }\n                    }\n                }\n            } else if (roleType === 1) {\n                new Promise((resolve) => {\n                    setTimeout(() => {\n                        resolve(\"resolved\");\n                        this.locations = [];\n                        locationHandler\n                            .list()\n                            .then((res) => {\n                                if (res.data.statusCode === 200) {\n                                    this.locations = res.data.data;\n                                }\n                            })\n                    }, 10);\n                });\n            }\n        },\n        async loadProjectByCustomer() {\n            new Promise((resolve) => {\n                setTimeout(() => {\n                    resolve(\"resolved\");\n                    // projectHandler.getByCustomer(this.supplier.id).then(res => {\n                    projectHandler\n                        .list()\n                        .then((res) => {\n                            this.showLoading = true;\n                            if (res.data.statusCode === 200) {\n                                this.showLoading = false;\n                                this.customerProjects = res.data.data;\n                                if (this.customerProjects.length > 0) {\n                                    this.debitMemo.project = this.customerProjects[0];\n                                }\n                            }\n                        })\n                        .catch();\n                    {\n                        this.showLoading = false;\n                    }\n                }, 50);\n            });\n        },\n        async loadSegment() {\n            this.segments = []\n            const roleType = dataStore.roleType || 0\n            if (roleType === 0) {\n                if (dataStore.roleData) {\n                    const roleData = dataStore.roleData || []\n                    const segment = roleData.filter(itm => itm.type === 'segment')\n                    const segmentDefault = segment.filter(m => m.isDefault === 1)\n                    this.segments = segment\n                    if (this.$route.params.id === undefined || this.$route.params.id === '') {\n                        if (segmentDefault.length > 0) {\n                            this.debitMemo.segment = segmentDefault[0];\n                        }\n                    }\n                }\n            } else if (roleType === 1) {\n                new Promise((resolve) => {\n                    setTimeout(() => {\n                        resolve(\"resolved\");\n                        this.segments = [];\n                        settingsHandler\n                            .getSeg()\n                            .then((res) => {\n                                if (res.data.statusCode === 200) {\n                                    this.segments = res.data.data;\n                                }\n                            })\n                    }, 10);\n                });\n            }\n        },\n        async loadAccount() {\n            new Promise((resolve) => {\n                setTimeout(() => {\n                    resolve(\"resolved\");\n                    accountHandler.getAll().then((res) => {\n                        (async () => {\n                            this.accCash = res.data\n                                .filter((m) => m.account_type.number <= 5)\n                                .map((item) => {\n                                    return {\n                                        id: item.uuid,\n                                        uuid: item.uuid,\n                                        name: item.name,\n                                        local_name: item.local_name,\n                                        number: item.number,\n                                        is_taxable: item.is_taxable,\n                                        banhjiAccCode: item.banhjiAccCode,\n                                        group_code: item.group_code,\n                                        parent_account: item.parent_account,\n                                        type_code: item.type_code,\n                                        account_type: item.account_type,\n                                    };\n                                });\n\n                            this.accDeposits = res.data\n                                .filter(\n                                    (m) =>\n                                        m.account_type.number === 9 || m.account_type.number === 17\n                                )\n                                .map((item) => {\n                                    return {\n                                        id: item.uuid,\n                                        uuid: item.uuid,\n                                        name: item.name,\n                                        local_name: item.local_name,\n                                        number: item.number,\n                                        is_taxable: item.is_taxable,\n                                        banhjiAccCode: item.banhjiAccCode,\n                                        group_code: item.group_code,\n                                        parent_account: item.parent_account,\n                                        type_code: item.type_code,\n                                        account_type: item.account_type,\n                                    };\n                                });\n                            this.varianceAccs = res.data\n                                .filter(\n                                    (m) =>\n                                        m.account_type.number >= 33 && m.account_type.number <= 48\n                                )\n                                .map((item) => {\n                                    return {\n                                        id: item.uuid,\n                                        uuid: item.uuid,\n                                        name: item.name,\n                                        local_name: item.local_name,\n                                        number: item.number,\n                                        is_taxable: item.is_taxable,\n                                        banhjiAccCode: item.banhjiAccCode,\n                                        group_code: item.group_code,\n                                        parent_account: item.parent_account,\n                                        type_code: item.type_code,\n                                        account_type: item.account_type,\n                                    };\n                                });\n                            // this.accounts = await Promise.all(res.map(item => {\n                            //     return {\n                            //         id: item.uuid,\n                            //         name: item.name,\n                            //         number: item.number\n                            //     }\n                            // }));\n                        })();\n                    });\n                }, 50);\n            });\n        },\n        async loadPriceLevel() {\n            new Promise((resolve) => {\n                setTimeout(() => {\n                    resolve(\"resolved\");\n                    const strFilter = '?nature=purchase'\n                    priceLevelHandler.get(strFilter).then((res) => {\n                        this.priceLevel = res;\n                        if (this.priceLevel.length > 0) {\n                            this.debitMemo.priceLevel = this.priceLevel[0];\n                        }\n                    });\n                }, 50);\n            });\n        },\n        async loadDiscountItem() {\n            new Promise((resolve) => {\n                setTimeout(() => {\n                    resolve(\"resolved\");\n                    discountItemHandler.list(DISCOUNT_TYPE).then((res) => {\n                        if (res.data.statusCode === 200) {\n                            this.specificDiscountItem = res.data.data;\n                        }\n                    });\n                }, 50);\n            });\n        },\n        async loadPurchaseFormContent() {\n            new Promise((resolve) => {\n                setTimeout(() => {\n                    resolve(\"resolved\");\n                    purchaseFormContentHandler.list().then((res) => {\n                        if (res.data.statusCode === 200) {\n                            const data = res.data.data;\n                            if (data.length > 0) {\n                                this.purchaseFormContent = data[0];\n                                this.decimalFormat = \"n\" + this.purchaseFormContent.decimal;\n                                this.addRow();\n                                this.addRowDeposit();\n                                this.addRowCashRefund();\n                            }\n                        }\n                    });\n                }, 50);\n            });\n        },\n        async initData() {\n            if (this.$route.params.id !== undefined) {\n                await this.loadViewDebitMemo();\n            }\n            // else {\n            //     this.addRow()\n            //     this.addRowDeposit()\n            //     this.addRowCashRefund()\n            // }\n        },\n        taxMapping(objTax, tax) {\n            const taxId = tax.id || ''\n            const tax_ = objTax.filter(t => t.id === taxId)[0]\n            return tax_ || {\n                id: '',\n                defaultTax: ''\n            }\n        },\n        dataSourceChanged(e) {\n            if (e.field) {\n                let dataRow = e.items[0],\n                    buom = {}, vTax = {},\n                    conversionRate = 1,\n                    wac = 0,\n                    qoh = 0,\n                    amount = 0,\n                    xAmount = 0,\n                    cost = 0;\n                switch (e.field) {\n                    case \"item\":\n                        // this.attribute_ = this.attributes.filter(m => m.type.id === dataRow.variant.id)\n                        dataRow.set(\"description\", dataRow.item.description);\n                        buom = dataRow.item.uom || {};\n                        dataRow.set(\"buom\", buom);\n                        break;\n                    case \"cost\":\n                        try {\n                            amount = parseFloat(dataRow.cost) * parseFloat(dataRow.qty);\n                            xAmount = amount * parseFloat(this.debitMemo.txnRate);\n                            dataRow.set(\"cost\", parseFloat(dataRow.cost));\n                            dataRow.set(\"amount\", amount);\n                            dataRow.set(\"exchangeAmount\", xAmount);\n                            // window.console.log('price',dataRow.price)\n                        } catch {\n                            dataRow.set(\"cost\", 0);\n                            dataRow.set(\"amount\", 0);\n                            dataRow.set(\"exchangeAmount\", 0);\n                        }\n                        break;\n                    case \"uom\":\n                        if (this.isPriceLevelChanged === false) {\n                            try {\n                                buom = dataRow.uom.buom || {};\n                                buom = dataRow.uom.buom || {};\n                                qoh = dataRow.uom.qoh || 0;\n                                conversionRate = dataRow.uom.conversionRate || 1;\n                                wac = dataRow.uom.wac || 0;\n                                dataRow.set(\"buom\", buom);\n                                dataRow.set(\"wac\", wac);\n                                dataRow.set(\"qoh\", qoh);\n                                /* todo: mapping tax object */\n                                vTax = this.taxMapping(this.tax, dataRow.uom.purchaseTax || {})\n\n                                dataRow.set(\"vatTax\", vTax);\n                                dataRow.set(\"conversionRate\", parseFloat(conversionRate));\n\n                                // dataRow.set('price', parseFloat(dataRow.uom.price))\n                                // dataRow.set('amount', parseFloat(dataRow.uom.price) * parseFloat(dataRow.qty))\n                                if (dataRow.uom) {\n                                    // window.console.log(dataRow, 'dataRow')\n                                    amount = parseFloat(dataRow.uom.cost) * parseFloat(dataRow.qty);\n                                    xAmount = amount * parseFloat(this.debitMemo.txnRate);\n                                    cost = parseFloat(dataRow.uom.cost);\n\n                                    dataRow.set(\"cost\", cost);\n                                    dataRow.set(\"amount\", amount);\n                                    dataRow.set(\"exchangeAmount\", xAmount);\n                                } else {\n                                    window.console.log(dataRow, \"dataRow--\");\n                                    amount = parseFloat(dataRow.cost) * parseFloat(dataRow.qty);\n                                    xAmount = amount * parseFloat(this.debitMemo.txnRate);\n\n                                    dataRow.set(\"cost\", parseFloat(dataRow.cost));\n                                    dataRow.set(\"amount\", amount);\n                                    dataRow.set(\"exchangeAmount\", xAmount);\n                                }\n                            } catch {\n                                dataRow.set(\"buom\", {});\n                                dataRow.set(\"conversionRate\", 1);\n                                dataRow.set(\"cost\", 0);\n                                dataRow.set(\"amount\", 0);\n                                dataRow.set(\"qoh\", 0);\n                                dataRow.set(\"wac\", 0);\n                                dataRow.set(\"exchangeAmount\", 0);\n                            }\n                        }\n                        break;\n                    case \"qty\":\n                        try {\n                            amount = parseFloat(dataRow.cost) * parseFloat(dataRow.qty);\n                            xAmount = amount * parseFloat(this.debitMemo.txnRate);\n\n                            dataRow.set(\"cost\", parseFloat(dataRow.cost));\n                            dataRow.set(\"amount\", amount);\n                            dataRow.set(\"exchangeAmount\", xAmount);\n                        } catch {\n                            dataRow.set(\"cost\", 0);\n                            dataRow.set(\"amount\", 0);\n                            dataRow.set(\"exchangeAmount\", 0);\n                        }\n                        break;\n                    case \"otherTax\":\n                        // window.console.log(\"--\", dataRow)\n                        break;\n                    default:\n                        break;\n                }\n                if (e.field) {\n                    window.console.log(\"data row\", dataRow);\n                    this.autoCalculate();\n                    this.autoCalculateApplyTo();\n                    this.autoCalculateDeposit();\n                    this.autoCalculateCashRefund();\n                    this.calculateAmount();\n                }\n            }\n        },\n        autoCalculateTaxDetail() {\n            let ids = []\n            this.taxListDetail.forEach(n => {\n                ids.push(n.id || '')\n            })\n            const unique = [...new Set(ids)]\n            let result = []\n            unique.forEach(m => {\n                let amount = 0, row = {}, discount = 0, xDiscount = 0, xAmount = 0, taxAmount = 0, xTaxAmount = 0\n                let taxDetail = [], isVat = 0\n                const found = this.taxListDetail.filter(n => n.id === m)\n                // window.console.log('taxListDetailids', found)\n                found.forEach(k => {\n                    row = k\n                    if (k.isVat === 1) {\n                        isVat = 1\n                        const detail_ = k.detail || {}\n                        taxDetail.push(detail_)\n\n                    }\n                    taxAmount += k.taxAmount_ || 0\n                    xTaxAmount += (k.taxAmount_ || 0) * (k.txnRate || 1)\n                    amount += (k.amount || 0)\n                    xAmount += (k.amount || 0) * (k.txnRate || 1)\n                    discount += (k.discount || 0)\n                    xDiscount += (k.discount || 0) * (k.txnRate || 1)\n                })\n                let spTaxAmt = 0, spXTaxAmt = 0, plTaxAmt = 0, plXTaxAmt = 0, otTaxAmt = 0, otXTaxAmt = 0,\n                    spTaxName = '', plTaxName = '', otTaxName = '',\n                    spTaxNameLocale = '', plTaxNameLocale = '', otTaxNameLocale = '',\n                    spAccId = '', plAccId = '', otAccId = '',\n                    spRate = '', plRate = '', otRate = ''\n                taxDetail.forEach(n => {\n                    const spTax = n.specificTax || {}\n                    const plTax = n.publicLightingTax || {}\n                    const otherTax = n.otherTax || {}\n                    if (Object.keys(spTax).length > 0) {\n                        spTaxAmt += (spTax.taxAmount_ || 0)\n                        spXTaxAmt += ((spTax.taxAmount_ || 0) * (spTax.taxRate || 1))\n                        spTaxName = spTax.defaultTax || ''\n                        spTaxNameLocale = spTax.defaultTaxLocale || ''\n                        spAccId = spTax.account ? spTax.account.id : ''\n                        spRate = spTax.rate || 1\n                    }\n                    if (Object.keys(plTax).length > 0) {\n                        plTaxAmt += (plTax.taxAmount_ || 0)\n                        plXTaxAmt += ((plTax.taxAmount_ || 0) * (plTax.taxRate || 1))\n                        plTaxName = plTax.defaultTax || ''\n                        plTaxNameLocale = plTax.defaultTaxLocale || ''\n                        plAccId = plTax.account ? plTax.account.id : ''\n                        plRate = plTax.rate || 1\n                    }\n                    if (Object.keys(otherTax).length > 0) {\n                        otTaxAmt += (otherTax.taxAmount_ || 0)\n                        otXTaxAmt += ((otherTax.taxAmount_ || 0) * (plTax.taxRate || 1))\n                        otTaxName = otherTax.defaultTax || ''\n                        otTaxNameLocale = otherTax.defaultTaxLocale || ''\n                        otAccId = otherTax.account ? otherTax.account.id : ''\n                        otRate = otherTax.rate || 1\n                    }\n                })\n                if (isVat === 1) {\n                    row.detail = {\n                        specificTax: {\n                            name: spTaxName,\n                            nameLocale: spTaxNameLocale,\n                            amount: spTaxAmt,\n                            exchangeAmount: spXTaxAmt,\n                            accountId: spAccId,\n                            rate: spRate,\n                        },\n                        publicLightingTax: {\n                            name: plTaxName,\n                            nameLocale: plTaxNameLocale,\n                            amount: plTaxAmt,\n                            exchangeAmount: plXTaxAmt,\n                            accountId: plAccId,\n                            rate: plRate,\n                        },\n                        otherTax: {\n                            name: otTaxName,\n                            nameLocale: otTaxNameLocale,\n                            amount: otTaxAmt,\n                            exchangeAmount: otXTaxAmt,\n                            accountId: otAccId,\n                            rate: otRate,\n                        }\n                    }\n                } else {\n                    row.detail = {}\n                }\n\n                row['amount'] = amount\n                row['exchangeAmount'] = xAmount\n                row['taxAmount'] = taxAmount\n                row['exchangeTaxAmount'] = xTaxAmount\n                row['discount'] = discount\n                row['exchangeDiscount'] = xDiscount\n                row['currency'] = this.debitMemo.exchangeRate || {}\n                result.push(row)\n                taxDetail = []\n            })\n            this.debitMemo.saleTaxDetail = result\n            window.console.log('debitMemo.saleTaxDetail', result)\n        },\n        autoCalculate() {\n            let ds = this.$refs.itemLineDS.kendoWidget(),\n                subTotal = 0,\n                totalTax = 0,\n                discountTotal = 0,\n                spTax = 0,\n                pltax = 0,\n                otherTax = 0,\n                vatTax = 0,\n                taxList = [],\n                discountItem = [],\n                taxListDetail = [],\n                inclusiveTax = 0,\n                withholdingTaxAmount = 0,\n                whTaxAmount = 0,\n                itemSubtotal = 0,\n                txnItmSubtotal = 0,\n                serviceSubtotal = 0,\n                itemDiscount = 0,\n                serviceDiscount = 0,\n                txnDiscount = 0;\n            let nature = \"\",\n                currency = this.debitMemo.currency,\n                currencyCode = this.debitMemo.currency\n                    ? this.debitMemo.currency.code\n                    : \"\",\n                taxTypeId = 0; //, withholdingTaxAmount = 0\n            this.jRaw1 = [];\n            ds.data().forEach((value) => {\n                let modifierPrice = 0, incTax = 0;\n                if (value.modifier) {\n                    modifierPrice = kendo.parseFloat(value.modifier.price);\n                }\n\n                // subTotal += (kendo.parseFloat(value.amount) + modifierPrice)\n                let discount = 0;\n                if (value.discountItem) {\n                    const disItemField = value.discountItem;\n                    let subTo =\n                        kendo.parseFloat(value.cost) * kendo.parseFloat(value.qty);\n                    discount = this.autoCalculateDiscount(value.discountItem, subTo);\n                    value[\"discountAmount\"] = discount;\n                    value[\"discountExchangeAmount\"] =\n                        discount * kendo.parseFloat(this.debitMemo.txnRate);\n                    if (value.discountItem.hasOwnProperty(\"id\")) {\n                        discountItem.push(value.discountItem);\n                    }\n                    discountTotal += discount ? discount : 0;\n                    if (discount > 0) {\n                        nature = \"dr\";\n                    } else {\n                        nature = \"cr\";\n                    }\n                    if (disItemField.account) {\n                        if (disItemField.account.hasOwnProperty(\"id\")) {\n                            this.jRaw1.push({\n                                id: disItemField.account.id + \"-\" + nature,\n                                line: new ItemLineModel(value),\n                                currencyCode: currencyCode,\n                                currency: currency,\n                                memoRate: kendo.parseFloat(this.debitMemo.txnRate),\n                                lastXRate: this.debitMemo.exchangeRate,\n                                description: \"Discount\",\n                                account: disItemField.account,\n                                accountId: disItemField.account.id,\n                                amount: discount,\n                                exchangeAmount:\n                                    discount * kendo.parseFloat(this.debitMemo.txnRate),\n                                type: nature,\n                                typeAs: \"discount\",\n                            });\n                        }\n                    }\n                }\n                if (value.vatTax) {\n                    // window.console.log('Vat Tax', value.vatTax)\n                    let amt =\n                        kendo.parseFloat(spTax ? spTax : 0) +\n                        kendo.parseFloat(pltax ? pltax : 0) +\n                        kendo.parseFloat(otherTax ? otherTax : 0) +\n                        (kendo.parseFloat(value.amount ? value.amount : 0) -\n                            (discount ? discount : 0));\n                    vatTax = this.autoCalculateTax(value.vatTax, amt);\n                    vatTax = kendo.parseFloat(vatTax) ? kendo.parseFloat(vatTax) : 0;\n                    value[\"vatTaxAmount\"] = vatTax;\n                    value[\"vatTaxExchangeAmount\"] =\n                        vatTax * kendo.parseFloat(this.debitMemo.txnRate);\n                    const tax = value.vatTax;\n                    const baseAmount = tax.baseAmount;\n                    if (baseAmount) {\n                        if (baseAmount.toLowerCase() === \"inclusive\") {\n                            inclusiveTax += spTax;\n                            incTax = spTax;\n                        }\n                    }\n                    if (value.vatTax.hasOwnProperty(\"taxType\")) {\n                        taxList.push({\n                            name: value.vatTax.taxType.name,\n                            amount: vatTax,\n                            id: value.vatTax.taxType.id,\n                        });\n                        const vatTax_ = value.vatTax || {}\n                        vatTax_['taxAmount_'] = vatTax\n                        vatTax_['amount'] = value.amount || 0\n                        vatTax_['discount'] = discount || 0\n                        vatTax_['txnRate'] = this.debitMemo.txnRate || 1\n                        vatTax_['isVat'] = 1\n                        vatTax_.detail = {\n                            specificTax: {},\n                            publicLightingTax: {},\n                            otherTax: {},\n                        }\n                        taxListDetail.push(vatTax_);\n                    }\n                    if (value.vatTax.hasOwnProperty(\"taxType\")) {\n                        const taxType = value.vatTax.taxType || {};\n                        taxTypeId = taxType.typeId || 0;\n                    }\n                    let taxAmount = vatTax;\n                    let taxDescription = \"\";\n                    if (taxTypeId === 1) {\n                        nature = \"cr\";\n                        taxAmount = vatTax * -1;\n                        taxDescription = \"Purchase Tax\";\n                    } else if (taxTypeId === 2) {\n                        withholdingTaxAmount += vatTax\n                        whTaxAmount = vatTax\n                        nature = \"dr\";\n                        taxAmount = vatTax;\n                        taxDescription = \"Withholding Tax\";\n                    } else if (taxTypeId === 10) {\n                        nature = \"cr\";\n                        taxAmount = 0;\n                        taxDescription = \"No Tax\";\n                    }\n                    if (taxAmount > 0) {\n                        nature = \"dr\";\n                    } else {\n                        nature = \"cr\";\n                    }\n                    const vatTaxField = value.tax;\n                    if (taxAmount !== 0) {\n                        if (vatTaxField) {\n                            if (vatTaxField.account) {\n                                if (vatTaxField.account.hasOwnProperty(\"id\")) {\n                                    this.jRaw1.push({\n                                        id: vatTaxField.account.id + \"-\" + nature,\n                                        line: new ItemLineModel(value),\n                                        memoRate: kendo.parseFloat(this.debitMemo.txnRate),\n                                        lastXRate: this.debitMemo.exchangeRate,\n                                        currencyCode: currencyCode,\n                                        currency: currency,\n                                        description: taxDescription,\n                                        account: vatTaxField.account,\n                                        accountId: vatTaxField.account.id,\n                                        amount: taxAmount,\n                                        exchangeAmount:\n                                            taxAmount * kendo.parseFloat(this.debitMemo.txnRate),\n                                        type: nature,\n                                        typeAs: \"tax\",\n                                    });\n                                }\n                            }\n                        }\n                    }\n                }\n                totalTax +=\n                    kendo.parseFloat(spTax ? spTax : 0) +\n                    kendo.parseFloat(pltax ? pltax : 0) +\n                    kendo.parseFloat(otherTax ? otherTax : 0) +\n                    kendo.parseFloat(vatTax ? vatTax : 0);\n                subTotal +=\n                    kendo.parseFloat(value.amount) + modifierPrice - incTax;\n                const amt =\n                    kendo.parseFloat(value.amount) + modifierPrice - incTax;\n                const itemAmount = (amt + whTaxAmount) * -1;\n                const itemXAmount = itemAmount * kendo.parseFloat(this.debitMemo.txnRate);\n\n                const item = value.item;\n                const itmType = item.type || \"\";\n                if (itmType === \"Variant\") {\n                    itemSubtotal += kendo.parseFloat(value.cost) * kendo.parseFloat(value.qty);\n                    itemDiscount += kendo.parseFloat(discount);\n                } else if (itmType === \"Service\") {\n                    serviceSubtotal += kendo.parseFloat(value.cost) * kendo.parseFloat(value.qty);\n                    itemDiscount += kendo.parseFloat(discount);\n                } else {\n                    txnItmSubtotal += kendo.parseFloat(value.cost) * kendo.parseFloat(value.qty);\n                    itemDiscount += kendo.parseFloat(discount);\n                }\n                if (itemAmount > 0) {\n                    nature = \"dr\";\n                } else {\n                    nature = \"cr\";\n                }\n                if (item) {\n                    if (item.type === \"Service\") {\n                        if (item.hasOwnProperty(\"costOfGoodsSoldAcc\")) {\n                            if (item.costOfGoodsSoldAcc.hasOwnProperty(\"id\")) {\n                                let costOfGoodsSoldAcc = item.costOfGoodsSoldAcc;\n                                this.jRaw1.push({\n                                    id: costOfGoodsSoldAcc.id + \"-\" + nature,\n                                    line: new ItemLineModel(value),\n                                    memoRate: kendo.parseFloat(this.debitMemo.txnRate),\n                                    lastXRate: this.debitMemo.exchangeRate,\n                                    currencyCode: currencyCode,\n                                    currency: currency,\n                                    description: this.debitMemo.journalNote,\n                                    account: item.costOfGoodsSoldAcc,\n                                    accountId: item.costOfGoodsSoldAcc.id,\n                                    amount: itemAmount, // qty*avg_cost ,\n                                    exchangeAmount: itemXAmount, //xAmount,\n                                    type: nature,\n                                    typeAs: \"item\",\n                                });\n                            }\n                        }\n                        if (item.hasOwnProperty(\"deferredIncomeAcc\")) {\n                            if (item.deferredIncomeAcc.hasOwnProperty(\"id\")) {\n                                let deferredInAcc = item.deferredIncomeAcc;\n                                this.jRaw1.push({\n                                    id: deferredInAcc.id + \"-\" + nature,\n                                    line: new ItemLineModel(value),\n                                    memoRate: kendo.parseFloat(this.debitMemo.txnRate),\n                                    lastXRate: this.debitMemo.exchangeRate,\n                                    currencyCode: currencyCode,\n                                    currency: currency,\n                                    description: this.debitMemo.journalNote,\n                                    account: deferredInAcc,\n                                    accountId: deferredInAcc.id,\n                                    amount: itemAmount, // qty*avg_cost ,\n                                    exchangeAmount: itemXAmount, //,\n                                    type: nature,\n                                    typeAs: \"item\",\n                                });\n                            }\n                        }\n                    } else if (item.type === \"Variant\") {\n                        if (item.hasOwnProperty(\"inventoryAcc\")) {\n                            if (item.inventoryAcc.hasOwnProperty(\"id\")) {\n                                let inventoryAcc = item.inventoryAcc;\n                                this.jRaw1.push({\n                                    id: inventoryAcc.id + \"-\" + nature,\n                                    line: new ItemLineModel(value),\n                                    memoRate: kendo.parseFloat(this.debitMemo.txnRate),\n                                    lastXRate: this.debitMemo.exchangeRate,\n                                    currencyCode: currencyCode,\n                                    currency: currency,\n                                    description: this.debitMemo.journalNote,\n                                    account: item.inventoryAcc,\n                                    accountId: item.inventoryAcc.id,\n                                    amount: itemAmount, // qty*avg_cost ,\n                                    exchangeAmount: itemXAmount, //xAmount,\n                                    type: nature,\n                                    typeAs: \"item\",\n                                });\n                            }\n                        }\n                    } else if (item.type === \"Fixed Asset\") {\n                        if (item.hasOwnProperty(\"assetAcc\")) {\n                            if (item.assetAcc.hasOwnProperty(\"id\")) {\n                                let assetAcc = item.assetAcc;\n                                this.jRaw1.push({\n                                    id: assetAcc.id + \"-\" + nature,\n                                    line: new ItemLineModel(value),\n                                    memoRate: kendo.parseFloat(this.debitMemo.txnRate),\n                                    lastXRate: this.debitMemo.exchangeRate,\n                                    currencyCode: currencyCode,\n                                    currency: currency,\n                                    description: this.debitMemo.journalNote,\n                                    account: item.assetAcc,\n                                    accountId: item.assetAcc.id,\n                                    amount: itemAmount, // qty*avg_cost ,\n                                    exchangeAmount: itemXAmount, //xAmount,\n                                    type: nature,\n                                    typeAs: \"item\",\n                                });\n                            }\n                        }\n                    } else if (item.type === \"Transaction Item\") {\n                        if (item.hasOwnProperty(\"account\")) {\n                            if (item.account.hasOwnProperty(\"id\")) {\n                                this.jRaw1.push({\n                                    id: item.account.id + \"-\" + nature,\n                                    line: new ItemLineModel(value),\n                                    memoRate: kendo.parseFloat(this.debitMemo.txnRate),\n                                    lastXRate: this.debitMemo.exchangeRate,\n                                    currencyCode: currencyCode,\n                                    currency: currency,\n                                    description: this.debitMemo.journalNote,\n                                    account: item.account,\n                                    accountId: item.account.id,\n                                    amount: itemAmount, // qty*avg_cost ,\n                                    exchangeAmount: itemXAmount, //xAmount,\n                                    type: nature,\n                                    typeAs: \"item\",\n                                });\n                            }\n                        }\n                    }\n                }\n                //include Tax Amount\n                const amountNodiscount =\n                    kendo.parseFloat(value.cost) * kendo.parseFloat(value.qty) -\n                    discount;\n                const includeTaxAmount =\n                    amountNodiscount + vatTax + pltax + spTax + otherTax;\n                value[\"includeTaxAmount\"] = includeTaxAmount;\n                value[\"includeTaxExchangeAmount\"] =\n                    includeTaxAmount * kendo.parseFloat(this.debitMemo.txnRate);\n            });\n            this.debitMemo.itemSubtotal = itemSubtotal;\n            this.debitMemo.exchangeItemSubtotal =\n                itemSubtotal * kendo.parseFloat(this.debitMemo.txnRate);\n            this.debitMemo.serviceSubtotal = serviceSubtotal;\n            this.debitMemo.exchangeServiceSubtotal =\n                serviceSubtotal * kendo.parseFloat(this.debitMemo.txnRate);\n            this.debitMemo.txnItmSubtotal = txnItmSubtotal;\n            this.debitMemo.exchangeTxnItmSubtotal =\n                txnItmSubtotal * kendo.parseFloat(this.debitMemo.txnRate);\n            this.debitMemo.itemDiscount = itemDiscount;\n            this.debitMemo.exchangeItemDiscount =\n                itemDiscount * kendo.parseFloat(this.debitMemo.txnRate);\n            this.debitMemo.serviceDiscount = serviceDiscount;\n            this.debitMemo.exchangeServiceDiscount =\n                serviceDiscount * kendo.parseFloat(this.debitMemo.txnRate);\n            this.debitMemo.txnItmDiscount = txnDiscount;\n            this.debitMemo.exchangeTxnItmDiscount =\n                txnDiscount * kendo.parseFloat(this.debitMemo.txnRate);\n\n            let total =\n                kendo.parseFloat(subTotal) -\n                kendo.parseFloat(discountTotal) +\n                kendo.parseFloat(totalTax);\n            this.debitMemo.withholdingTaxAmount = withholdingTaxAmount\n            this.debitMemo.inclusiveTaxAmount = inclusiveTax;\n            this.debitMemo.itemLineSubTotal = subTotal;\n            this.debitMemo.itemLineTaxAmount = kendo.parseFloat(totalTax);\n            this.debitMemo.itemLineDiscountAmount = kendo.parseFloat(discountTotal);\n            this.debitMemo.itemLineAmount = kendo.parseFloat(total) - parseFloat(withholdingTaxAmount);\n            // this.autoCalculateTaxByType(taxList)\n            // const uniqueDiscount = this.removeDuplicate(discountItem);\n            this.shrinkDiscountItem(discountItem)\n            this.debitMemo.itemLineExchangeAmount = kendo.parseFloat(this.debitMemo.itemLineAmount) * kendo.parseFloat(this.debitMemo.txnRate);\n\n            // this.debitMemo.amount = kendo.parseFloat(this.debitMemo.itemLineAmount)\n            // this.debitMemo.variance = kendo.parseFloat(this.debitMemo.itemLineAmount)\n            // this.calculateAmount()\n        },\n        shrinkDiscountItem(discountItem) {\n            let uniqueDiscountItems = [];\n            const unique = this.removeDuplicate(discountItem);\n            unique.forEach((m) => {\n                const found = discountItem.filter((n) => n.id === m.id);\n                let amount = 0,\n                    exchangeAmount = 0;\n                found.map((o) => {\n                    amount += o.amount || 0;\n                });\n                found.map((o) => {\n                    exchangeAmount += o.exchangeAmount || 0;\n                });\n                uniqueDiscountItems.push({\n                    id: m.id,\n                    name: m.name,\n                    amount: amount,\n                    exchangeAmount: exchangeAmount,\n                });\n            });\n            this.supplierDiscountItem = uniqueDiscountItems;\n            this.debitMemo.supplierDiscountItem = uniqueDiscountItems;\n            window.console.log(uniqueDiscountItems, \"uniqueDiscountItems\");\n        },\n        autoCalculateApplyTo() {\n            let ds = this.$refs.applyToLineDS.kendoWidget(),\n                convertedAmount = 0,\n                amount = 0;\n            this.jRaw5 = [];\n            let txnRate = 1,\n                currency = this.debitMemo.currency,\n                currencyCode = this.debitMemo.currency\n                    ? this.debitMemo.currency.code\n                    : \"\";\n            ds.data().forEach((value) => {\n                const offsetAmount = kendo.parseFloat(\n                    value.paidAmount ? value.paidAmount : 0\n                );\n                if (offsetAmount > 0) {\n                    amount += kendo.parseFloat(value.paidAmount);\n                    convertedAmount +=\n                        kendo.parseFloat(value.paidAmount) *\n                        kendo.parseFloat(value.txnRate);\n                    txnRate = kendo.parseFloat(value.txnRate);\n                }\n            });\n            this.debitMemo.applyToExchangeAmount = convertedAmount;\n            this.debitMemo.applyToAmount = amount;\n            // this.calculateAmount()\n            //todo: AP\n            const apAcc = this.supplier.apAcc || {};\n            let nature = \"\";\n            if (this.debitMemo.applyToAmount > 0) {\n                nature = \"dr\";\n            } else {\n                nature = \"cr\";\n            }\n            if (apAcc) {\n                if (apAcc.hasOwnProperty(\"id\")) {\n                    if (this.debitMemo.applyToAmount !== 0) {\n                        this.jRaw5.push({\n                            id: apAcc.id + \"-\" + nature,\n                            line: new ItemLineModel({}),\n                            memoRate: txnRate,\n                            lastXRate: this.debitMemo.exchangeRate,\n                            currencyCode: currencyCode,\n                            currency: currency,\n                            description: this.debitMemo.transactionNote,\n                            account: apAcc,\n                            accountId: apAcc.id,\n                            exchangeAmount: this.debitMemo.applyToExchangeAmount,\n                            amount: this.debitMemo.applyToAmount,\n                            type: nature,\n                            typeAs: \"AP\",\n                        });\n                    }\n                }\n            }\n        },\n        calculateAmount() {\n            let offsetAmount = 0,\n                offsetXAmount = 0; // applyto_amount + deposit + cash refund\n\n            const applyToExchangeAmount = kendo.parseFloat(\n                this.debitMemo.applyToExchangeAmount\n            );\n            const exchangeDepositDeduction = kendo.parseFloat(\n                this.debitMemo.exchangeDepositDeduction\n            );\n            const exchangeRefundAmount = kendo.parseFloat(\n                this.debitMemo.exchangeRefundAmount\n            );\n\n            const applyToAmount = kendo.parseFloat(this.debitMemo.applyToAmount);\n            const depositAmount = kendo.parseFloat(this.debitMemo.depositAmount);\n            const refundAmount = kendo.parseFloat(this.debitMemo.refundAmount);\n\n            const itemLineExchange = kendo.parseFloat(this.debitMemo.itemLineExchangeAmount);\n            const itemLineAmount = kendo.parseFloat(this.debitMemo.itemLineAmount)\n\n            offsetXAmount = kendo.parseFloat(applyToExchangeAmount + exchangeDepositDeduction + exchangeRefundAmount);\n            offsetAmount = kendo.parseFloat(applyToAmount + depositAmount + refundAmount);\n\n            this.debitMemo.amount = offsetAmount;\n            this.debitMemo.exchangeAmount = offsetXAmount;\n            this.debitMemo.variance = itemLineAmount - offsetAmount;\n            this.debitMemo.exchangeVariance = itemLineExchange - offsetXAmount;\n            window.console.log(\"variance\", this.debitMemo.variance);\n            // if (offsetAmount > itemLineAmount) {\n            //   this.showWaringMessage('Debit Memo', 'Return amount and Offset amount must be equal!', 'OK')\n            //   // return\n            // }\n            window.console.log(offsetAmount, \"offsetAmount\");\n            this.jRaw4 = [];\n            let currency = this.debitMemo.currency,\n                currencyCode = this.debitMemo.currency\n                    ? this.debitMemo.currency.code\n                    : \"\";\n            // window.console.log(offsetAmount, 'offsetAmount')\n            if (this.debitMemo.variance !== 0) {\n                this.jRaw4 = [];\n                let nature = \"\";\n                if (this.debitMemo.varianceAcc) {\n                    if (this.debitMemo.variance > 0) {\n                        nature = \"dr\";\n                    } else {\n                        nature = \"cr\";\n                    }\n                    const varianceAcc = this.debitMemo.varianceAcc;\n                    if (varianceAcc.hasOwnProperty(\"id\")) {\n                        this.jRaw4.push({\n                            id: varianceAcc.id + \"-\" + nature,\n                            line: new ItemLineModel({}),\n                            memoRate: this.debitMemo.txnRate,\n                            lastXRate: this.debitMemo.exchangeRate,\n                            currencyCode: currencyCode,\n                            currency: currency,\n                            description: \"Variance\",\n                            account: varianceAcc,\n                            accountId: varianceAcc.id,\n                            amount: this.debitMemo.variance,\n                            exchangeAmount: this.debitMemo.exchangeVariance,\n                            type: nature,\n                            typeAs: \"GainLoss\",\n                        });\n                    }\n                }\n            }\n            this.shrinkData();\n            return offsetAmount;\n        },\n        onVarianceAccChanged() {\n            this.autoCalculate();\n            this.autoCalculateApplyTo();\n            this.autoCalculateDeposit();\n            this.autoCalculateCashRefund();\n            this.calculateAmount();\n        },\n        shrinkData() {\n            this.jRaw = [];\n            const obj = this.jRaw.concat(\n                this.jRaw1,\n                this.jRaw2,\n                this.jRaw3,\n                this.jRaw4,\n                this.jRaw5\n            );\n            const uniques = this.removeDuplicate(\n                obj\n            ); /*[...new Set(accountId.map(i => {\n                return {\n                    id_: i.id_,\n                    id: i.id,\n                    type: i.type\n                }\n            }))]*/\n\n            uniques.forEach((n) => {\n                const found = obj.filter((m) => m.id === n.id);\n                let amount = 0,\n                    exchangeAmount = 0;\n                found.forEach((z) => {\n                    amount += parseFloat(z.amount || 0);\n                    exchangeAmount += parseFloat(z.exchangeAmount || 0);\n                });\n                n.exchangeAmount = parseFloat(exchangeAmount); //this.numberFormat(amount)\n                n.amount = parseFloat(amount);\n            });\n            this.jRaw = uniques;\n            let dr = 0,\n                cr = 0;\n            this.jRaw.forEach((j) => {\n                switch (j.type) {\n                    case \"cr\":\n                        cr += parseFloat(j.amount);\n                        break;\n                    case \"dr\":\n                        dr += parseFloat(j.amount);\n                        break;\n                    default:\n                        break;\n                }\n            });\n            this.dr = dr;\n            this.cr = cr;\n            window.console.log(\"dr=\", dr, \"cr=\", cr, \"dr+cr = \", dr + cr);\n            window.console.log(JSON.stringify(this.jRaw), \"uniques\", this.debitMemo);\n        },\n        autoCalculateDeposit() {\n            let ds = this.$refs.depositLineDS.kendoWidget(),\n                amount = 0,\n                convertedAmount = 0;\n            let nature = \"\";\n            this.jRaw2 = [];\n            let currency = this.debitMemo.currency,\n                currencyCode = this.debitMemo.currency\n                    ? this.debitMemo.currency.code\n                    : \"\";\n            ds.data().forEach((value) => {\n                let description = \"\";\n                if (value.amount) {\n                    amount += kendo.parseFloat(value.amount);\n                    convertedAmount +=\n                        kendo.parseFloat(value.amount) *\n                        kendo.parseFloat(this.debitMemo.txnRate);\n                }\n                if (value.description) {\n                    description = value.description || \"\";\n                }\n                window.console.log(value.account, \"value.deposit\", amount);\n                if (value.account) {\n                    const account = value.account;\n                    if (account) {\n                        if (account.hasOwnProperty(\"id\")) {\n                            if (amount > 0) {\n                                nature = \"dr\";\n                            } else {\n                                nature = \"cr\";\n                            }\n                            this.jRaw2.push({\n                                id: account.id + \"-\" + nature,\n                                description: \"Deposit \" + description,\n                                line: new ItemLineModel({}),\n                                memoRate: this.debitMemo.txnRate,\n                                lastXRate: this.debitMemo.exchangeRate,\n                                currencyCode: currencyCode,\n                                currency: currency,\n                                account: account,\n                                accountId: account.id,\n                                amount: amount,\n                                exchangeAmount:\n                                    amount * kendo.parseFloat(this.debitMemo.txnRate),\n                                type: nature,\n                                typeAs: \"deposit\",\n                            });\n                        }\n                    }\n                }\n            });\n            this.debitMemo.depositAmount = amount;\n            this.debitMemo.exchangeDepositDeduction = convertedAmount;\n            // this.calculateAmount()\n        },\n        autoCalculateCashRefund() {\n            let ds = this.$refs.cashRefundDS.kendoWidget(),\n                amount = 0,\n                exchangeAmount = 0;\n            let nature = \"\";\n            this.jRaw3 = [];\n            let currency = this.debitMemo.currency,\n                currencyCode = this.debitMemo.currency\n                    ? this.debitMemo.currency.code\n                    : \"\";\n            ds.data().forEach((value) => {\n                let description = \"\";\n                if (value.amount) {\n                    amount += kendo.parseFloat(value.amount);\n                    exchangeAmount +=\n                        kendo.parseFloat(value.amount) *\n                        kendo.parseFloat(this.debitMemo.txnRate);\n                }\n                if (value.description) {\n                    description = value.description || \"\";\n                }\n                //todo: Cash Account\n                if (value.account) {\n                    const account = value.account;\n                    if (account) {\n                        if (account.hasOwnProperty(\"id\")) {\n                            if (amount > 0) {\n                                nature = \"dr\";\n                            } else {\n                                nature = \"cr\";\n                            }\n                            this.jRaw3.push({\n                                id: account.id + \"-\" + nature,\n                                description: \"Deposit \" + description,\n                                line: new ItemLineModel({}),\n                                memoRate: this.debitMemo.txnRate,\n                                lastXRate: this.debitMemo.exchangeRate,\n                                currencyCode: currencyCode,\n                                currency: currency,\n                                account: account,\n                                accountId: account.id,\n                                exchangeAmount:\n                                    kendo.parseFloat(this.debitMemo.txnRate) * amount,\n                                amount: amount,\n                                type: nature,\n                                typeAs: \"CashAccount\",\n                            });\n                        }\n                    }\n                }\n            });\n            this.debitMemo.refundAmount = amount;\n            this.debitMemo.exchangeRefundAmount = exchangeAmount;\n            // this.calculateAmount()\n        },\n        removeDuplicate(array) {\n            const result = [];\n            const map = new Map();\n            for (const item of array) {\n                if (!map.has(item.id)) {\n                    map.set(item.id, true); // set any value to Map\n                    result.push(item);\n                }\n            }\n            return result;\n        },\n        autoCalculateTaxByType(tax) {\n            // return by a key\n            const groupAll = (list) =>\n                list.reduce((tax, item) => {\n                    const taxAmount = tax[item.name] || 0;\n                    return Object.assign({}, tax, {\n                        [item.name]: taxAmount + parseFloat(item.amount),\n                    });\n                }, {});\n            this.taxListTotal = groupAll(tax);\n        },\n        async loadEmployeeCenter() {\n            new Promise((resolve) => {\n                setTimeout(() => {\n                    resolve(\"resolved\");\n                    this.employees = [];\n                    employeeHandler\n                        .center(undefined)\n                        .then((res) => {\n                            this.showLoading = true;\n                            if (res.data.statusCode === 200) {\n                                this.showLoading = false;\n                                this.employees = res.data.data;\n                                if (this.employees.length > 0) {\n                                    this.debitMemo.employee = this.employees[0];\n                                }\n                            }\n                        })\n                        .catch();\n                    {\n                        this.showLoading = false;\n                    }\n                }, 50);\n            });\n        },\n        async loadPrefix() {\n            new Promise((resolve) => {\n                setTimeout(() => {\n                    resolve(\"resolved\");\n                    prefixHandler.get(\"purchase return\").then((res) => {\n                        if (res.data.statusCode === 200) {\n                            this.showLoading = false;\n                            this.transactionType = res.data.data;\n                            if (this.transactionType.length > 0) {\n                                this.debitMemo.transactionType = this.transactionType[0];\n                                if (this.$route.params.id === undefined) {\n                                    this.generateNumber();\n                                }\n                            }\n                        }\n                    });\n                }, 50);\n            });\n        },\n        async loadSaleUnitItems() {\n            new Promise((resolve) => {\n                setTimeout(() => {\n                    resolve(\"resolved\");\n                    saleUnitItemHandler.list().then((res) => {\n                        if (res.data.statusCode === 200)\n                            this.saleUnitItemList = res.data.data;\n                    });\n                }, 50);\n            });\n        },\n        onFilterChange(event) {\n            const filter = event.filter.value;\n            this.requestData(0, filter, this.supBaseUrl);\n            this.filter = filter;\n        },\n        requestData(skip, filter, baseUrl) {\n            const url = baseUrl + `?filter=${filter}`;\n            fetch(url)\n                .then((response) => {\n                    return response.json();\n                })\n                .then(this.afterFetch);\n        },\n        afterFetch(json) {\n            this.supplierList = json.data;\n        },\n        onChange(event) {\n            const value = event.value;\n            if (value && value[\"numberName\"] === emptyItem[\"numberName\"]) {\n                return;\n            }\n            if (value) {\n                this.supplier = value;\n                const depositAcc = value.hasOwnProperty(\"purchaseDepositAcc\")\n                    ? value.purchaseDepositAcc\n                    : {};\n                this.debitMemo.supplier = value;\n                this.debitMemo.priceLevel = value.hasOwnProperty(\"priceLevel\")\n                    ? value.priceLevel\n                    : {};\n                this.decimalFormat = value.decimalFormat;\n                this.baseCurrencyCode = \"\";\n                if (value.baseCurrency) {\n                    this.baseCurrencyCode = value.baseCurrency.hasOwnProperty(\"code\")\n                        ? value.baseCurrency.code\n                        : \"\";\n                }\n\n                this.accDeposit = this.accDeposits.filter(\n                    (o) => o.id === depositAcc.id\n                );\n                this.loadTransactionRate();\n                // this.loadProjectByCustomer()\n                this.searchPurchase();\n                window.console.log(\n                    \"this.debitMemo.priceLevel\",\n                    this.debitMemo.priceLevel\n                );\n            }\n        },\n        hideSmallSidebar() {\n            this.isHideBar = !this.isHideBar;\n        },\n        generateNumber() {\n            if (this.$route.params.id) {\n                const tranDate = new Date(this.transactionDate);\n                const tranDateInvoice = new Date(this.debitMemo.transactionDate);\n                const tranDateM = tranDate.getFullYear() + tranDate.getMonth();\n                const tranDateInvoiceM =\n                    tranDateInvoice.getFullYear() + tranDateInvoice.getMonth();\n                if (tranDateM === tranDateInvoiceM) {\n                    this.debitMemo.referenceNo = this.referenceNo;\n                    return;\n                }\n            }\n\n            if (this.transactionDate !== \"\" && this.transactionType.length > 0) {\n                let data = {\n                    abbr: this.debitMemo.transactionType.abbr,\n                    structure: this.debitMemo.transactionType.structure,\n                    transactionDate: this.transactionDate,\n                    prefixSeparator: this.debitMemo.transactionType.prefixSeparator || '',\n                    numberSeparator: this.debitMemo.transactionType.numberSeparator || '',\n                    format: this.debitMemo.transactionType.format || 5,\n                    sequcencing: this.debitMemo.transactionType.sequcencing,\n                    type: TRANSACTION_TYPE,\n                    entity: 1,\n                };\n                billingHandler\n                    .lastNumber(data)\n                    .then((response) => {\n                        if (response.data.statusCode === 200) {\n                            const res = response.data.data;\n                            const lastNumber = this.zeroPad(\n                                parseInt(res.lastNumber),\n                                this.debitMemo.transactionType.format\n                            );\n                            const number =\n                                res.suffix +\n                                this.debitMemo.transactionType.numberSeparator +\n                                lastNumber;\n                            this.debitMemo.number = number;\n                        }\n                    })\n                    .catch((e) => {\n                        this.errors.push(e);\n                    });\n            }\n        },\n        zeroPad(num, places) {\n            return String(num).padStart(places, \"0\");\n        },\n        suffix(transactionDate) {\n            return kendo.toString(new Date(transactionDate), `yymm`);\n        },\n        cancel() {\n            this.clear()\n            this.$swal({\n                title: i18n.t(\"msg_title_warning\"),\n                text: i18n.t(\"msg_discard\"),\n                icon: \"warning\",\n                showCancelButton: true,\n                cancelButtonText: i18n.t(\"cancel\"),\n                confirmButtonColor: \"#4d4848\",\n                cancelButtonColor: \"#ED1A3A\",\n                confirmButtonText: i18n.t(\"discard\"),\n            }).then((resultCen) => {\n                if (resultCen.value) {\n                    this.$router.go(-1);\n                }\n            });\n        },\n        removeRow(e) {\n            e.preventDefault();\n            const grid = kendo.jQuery(\"#gridItemLine\").data(\"kendoGrid\"),\n                dataSource = grid.dataSource,\n                dataItem = grid.dataItem($(e.currentTarget).closest(\"tr\"));\n\n            if (dataSource.total() > 1) {\n                dataSource.remove(dataItem);\n                this.autoCalculate();\n            }\n        },\n        removeRowAcc(e) {\n            e.preventDefault();\n            const grid = kendo.jQuery(\"#gridAccountLine\").data(\"kendoGrid\"),\n                dataSource = grid.dataSource,\n                dataItem = grid.dataItem($(e.currentTarget).closest(\"tr\"));\n\n            if (dataSource.total() > 1) {\n                dataSource.remove(dataItem);\n            }\n        },\n        vatTemplate(dataItem) {\n            const vat = dataItem.vatTax;\n            if (vat) {\n                return `<span>${vat.defaultTax ? vat.defaultTax : ``}</span>`;\n            } else {\n                return ``;\n            }\n        },\n        accountTemplate(dataItem) {\n            const account = dataItem.account;\n            if (account) {\n                return `<span>${account.name ? account.name : ``}</span>`;\n            } else {\n                return ``;\n            }\n        },\n        itemTemplate(dataItem) {\n            const item = dataItem.item;\n            if (item) {\n                return `<span>${item.name ? item.name : ``}</span>`;\n            } else {\n                return ``;\n            }\n        },\n        UOMTemplate(dataItem) {\n            const uom = dataItem.uom;\n            const code = uom.code || ''\n            if (uom) {\n                return `<span>${uom.uom ? code : ``}</span>`;\n            } else {\n                return ``;\n            }\n        },\n        saleUnitTemplate(dataItem) {\n            const saleUnit = dataItem.saleUnit;\n            if (saleUnit) {\n                return `<span>${saleUnit.name ? saleUnit.name : ``}</span>`;\n            } else {\n                return ``;\n            }\n        },\n        empImpl(dataItem) {\n            let empIds = [];\n            dataItem.employee.forEach((m) => {\n                empIds.push(m.firstName + \" - \" + m.lastName);\n            });\n            // window.console.log(empIds.join(', '))\n            return `<span>${empIds.join(\", \")}</span>`;\n        },\n        discountItemTemplate(dataItem) {\n            const discountItem = dataItem.discountItem;\n            if (discountItem) {\n                return `<span>${discountItem.code ? discountItem.code : ``} - ${\n                    discountItem.name ? discountItem.name : ``\n                }</span>`;\n            } else {\n                return ``;\n            }\n        },\n        ServiceDateEditor(container, options) {\n            kendo\n                .jQuery('<input required name=\"' + options.field + '\"/>')\n                .appendTo(container)\n                .kendoDatePicker();\n\n            // let ds = this.$refs.itemLineDS.kendoWidget()\n            // window.console.log(ds.data())\n            // // const dateString = kendo.toString((new Date(options.model.items.serviceDate)), this.itemLine.dateFormat)\n            // // const dateString = kendo.toString(options.model.items.serviceDate)\n            // const $input = $(\"<input value=\" + options.model.serviceDate + \" />\").appendTo(container)\n            // $input.kendoDatePicker()\n            // // $input.appendTo(container)\n            // // options.model.items.serviceDate = dateString\n            // window.console.log($input)\n        },\n        ServiceDateToEditor(container, options) {\n            kendo\n                .jQuery('<input required name=\"' + options.field + '\"/>')\n                .appendTo(container)\n                .kendoDatePicker();\n        },\n        ItemDropDownEditor(container, options) {\n            kendo\n                .jQuery('<input name=\"' + options.field + '\"/>')\n                .appendTo(container)\n                .kendoDropDownList({\n                    autoBind: true,\n                    autoWidth: true,\n                    height: 400,\n                    filter: \"contains\",\n                    dataTextField: \"name\",\n                    dataValueField: \"id\",\n                    headerTemplate:\n                        '<div class=\"dropdown-header k-widget k-header\">' +\n                        \"<span>Items </span>\" +\n                        \"<span></span>\" +\n                        \"</div>\",\n                    template: \"<span>#=name#</span>\",\n                    optionLabel: \"--- Select ---\",\n                    dataSource: new kendo.data.DataSource({\n                        serverFiltering: true,\n                        transport: {\n                            read: {\n                                url: productVariantHandler.itemSearchURL(),\n                            },\n                            dataType: \"json\",\n                        },\n                        schema: {\n                            model: {\n                                id: \"id\",\n                                fields: {\n                                    id: {type: \"string\"},\n                                    name: {type: \"string\"},\n                                    sku: {type: \"string\"},\n                                },\n                            },\n                            data: function (response) {\n                                return response.data;\n                            },\n                            total: function (response) {\n                                return response.data.count;\n                            },\n                        },\n                        // data: this.variants\n                    }),\n                });\n        },\n        UOMDropDownEditor(container, options) {\n            kendo\n                .jQuery('<input name=\"' + options.field + '\"/>')\n                .appendTo(container)\n                .kendoDropDownList({\n                    autoBind: true,\n                    autoWidth: true,\n                    height: 400,\n                    filter: \"startswith\",\n                    dataTextField: \"code\",\n                    dataValueField: \"uomConvertId\",\n                    cascadeFrom: \"item\",\n                    template: \"<span>#=code || `-`#</span>\",\n                    optionLabel: \"--- Select ---\",\n                    dataSource: new kendo.data.DataSource({\n                        serverFiltering: true,\n                        transport: {\n                            read: {\n                                // url: uomPriceHandler.getURL(options.model.item.id, this.debitMemo.priceLevel.id, options.model.item.type),\n                                url: uomPriceHandler.uomPriceByPriceLevelURL(\n                                    \"id=\" +\n                                    options.model.item.id +\n                                    \"&plId=\" +\n                                    this.debitMemo.priceLevel.id +\n                                    \"&date=\" +\n                                    this.transactionDate + \"&nature=purchase\"\n                                ),\n                            },\n                            dataType: \"json\",\n                        },\n                        schema: {\n                            model: {\n                                id: \"id\",\n                                fields: {\n                                    id: {type: \"string\"},\n                                    // name: {type: \"string\"},\n                                    // sku: {type: \"string\"},\n                                },\n                            },\n                            data: function (response) {\n                                return response.data;\n                            },\n                            total: function (response) {\n                                return response.data.count;\n                            },\n                        },\n                        // data: this.variants\n                    }),\n                });\n        },\n        DiscountItemDropDownEditor(container, options) {\n            kendo\n                .jQuery('<input name=\"' + options.field + '\"/>')\n                .appendTo(container)\n                .kendoDropDownList({\n                    autoBind: true,\n                    autoWidth: true,\n                    height: 400,\n                    filter: \"startswith\",\n                    dataTextField: \"name\",\n                    dataValueField: \"id\",\n                    cascadeFrom: \"item\",\n                    template: \"<span>#=code# - #=name#</span>\",\n                    optionLabel: \"--- Select ---\",\n                    dataSource: new kendo.data.DataSource({\n                        serverFiltering: true,\n                        transport: {\n                            read: {\n                                url: discountItemHandler.getURL(DISCOUNT_TYPE),\n                            },\n                            dataType: \"json\",\n                        },\n                        schema: {\n                            model: {\n                                id: \"id\",\n                                fields: {\n                                    id: {type: \"string\"},\n                                    // name: {type: \"string\"},\n                                    // sku: {type: \"string\"},\n                                },\n                            },\n                            data: function (response) {\n                                return response.data;\n                            },\n                            total: function (response) {\n                                return response.data.count;\n                            },\n                        },\n                    }),\n                });\n        },\n        VatTaxDropDownEditor(container, options) {\n            kendo\n                .jQuery('<input name=\"' + options.field + '\"/>')\n                .appendTo(container)\n                .kendoDropDownList({\n                    autoBind: true,\n                    autoWidth: true,\n                    height: 400,\n                    filter: \"startswith\",\n                    dataTextField: \"defaultTax\",\n                    dataValueField: \"id\",\n                    template: \"<span>#=defaultTax#</span>\",\n                    optionLabel: \"--Select--\",\n                    dataSource: new kendo.data.DataSource({\n                        data: this.tax,\n                    }),\n                });\n        },\n        AccountDropDownEditor(container, options) {\n            kendo\n                .jQuery('<input name=\"' + options.field + '\"/>')\n                .appendTo(container)\n                .kendoDropDownList({\n                    autoBind: true,\n                    autoWidth: true,\n                    height: 400,\n                    filter: \"startswith\",\n                    dataTextField: \"name\",\n                    dataValueField: \"id\",\n                    template: \"<span>#=number# - #=name# </span>\",\n                    optionLabel: \"--Select--\",\n                    dataSource: new kendo.data.DataSource({\n                        data: this.accounts,\n                    }),\n                });\n        },\n        AccountDropDownEditorRefund(container, options) {\n            kendo\n                .jQuery('<input name=\"' + options.field + '\"/>')\n                .appendTo(container)\n                .kendoDropDownList({\n                    autoBind: true,\n                    autoWidth: true,\n                    height: 400,\n                    filter: \"startswith\",\n                    dataTextField: \"name\",\n                    dataValueField: \"id\",\n                    template: \"<span>#=number# - #=name# </span>\",\n                    optionLabel: \"--Select--\",\n                    dataSource: new kendo.data.DataSource({\n                        data: this.accCash,\n                    }),\n                });\n        },\n        AccountDropDownEditorDeposit(container, options) {\n            kendo\n                .jQuery('<input name=\"' + options.field + '\"/>')\n                .appendTo(container)\n                .kendoDropDownList({\n                    autoBind: true,\n                    autoWidth: true,\n                    height: 400,\n                    filter: \"startswith\",\n                    dataTextField: \"name\",\n                    dataValueField: \"id\",\n                    template: \"<span>#=number# - #=name# </span>\",\n                    optionLabel: \"--Select--\",\n                    dataSource: new kendo.data.DataSource({\n                        data: this.accDeposit,\n                    }),\n                });\n        },\n        SaleUnitDropDownEditor(container, options) {\n            kendo\n                .jQuery('<input name=\"' + options.field + '\"/>')\n                .appendTo(container)\n                .kendoDropDownList({\n                    autoBind: true,\n                    autoWidth: true,\n                    height: 400,\n                    filter: \"startswith\",\n                    dataTextField: \"name\",\n                    dataValueField: \"id\",\n                    template: \"<span>#=code# - #=name#</span>\",\n                    optionLabel: \"--- Select ---\",\n                    dataSource: new kendo.data.DataSource({\n                        data: this.saleUnitItemList,\n                    }),\n                });\n        },\n        AmountEditor(container, options) {\n            kendo\n                .jQuery('<input data-bind=\"value:' + options.field + '\"/>')\n                .appendTo(container)\n                .kendoNumericTextBox({\n                    decimals: 30,\n                    format: `${this.decimalFormat}`,\n                });\n        },\n        rowNumberTmpl(dataItem) {\n            let ds = this.$refs.itemLineDS.kendoWidget(),\n                index = ds.indexOf(dataItem);\n            return index + 1;\n        },\n        rowNumberTmplAcc(dataItem) {\n            let ds = this.$refs.accountLineDS.kendoWidget(),\n                index = ds.indexOf(dataItem);\n            return index + 1;\n        },\n        rowNumberTmplDeposit(dataItem) {\n            let ds = this.$refs.depositLineDS.kendoWidget(),\n                index = ds.indexOf(dataItem);\n            return index + 1;\n        },\n        rowNumberTmplApply(dataItem) {\n            let ds = this.$refs.applyToLineDS.kendoWidget(),\n                index = ds.indexOf(dataItem);\n            return index + 1;\n        },\n        addRow() {\n            let ds = this.$refs.itemLineDS.kendoWidget(),\n                total = ds.total();\n            this.itemLine.id = itemLinePrefix + uuid.v1();\n            ds.insert(total, this.itemLine);\n            // this.itemLines.push(this.itemLine)\n            // window.console.log('item Line', this.itemLine)\n        },\n        addRowAcc() {\n            // let ds = this.$refs.accountLineDS.kendoWidget(),\n            //     total = ds.total()\n            // this.accountLine.id = itemLinePrefix + uuid.v1()\n            // ds.insert(total, this.accountLine)\n        },\n        addRowDeposit() {\n            let ds = this.$refs.depositLineDS.kendoWidget(),\n                total = ds.total();\n            this.depositLine.id = itemLinePrefix + uuid.v1();\n            ds.insert(total, this.depositLine);\n        },\n        addRowCashRefund() {\n            let ds = this.$refs.cashRefundDS.kendoWidget(),\n                total = ds.total();\n            this.purchaseDepositLine.id = itemLinePrefix + uuid.v1();\n            this.purchaseDepositLine.optionType = OPTION_TYPE\n            ds.insert(total, this.purchaseDepositLine);\n        },\n        PurchaseDiscountItemEditor() {\n        },\n        async searchPurchase() {\n            new Promise((resolve) => {\n                setTimeout(() => {\n                    resolve(\"resolved\");\n                    let data = {};\n                    this.showLoading = true;\n                    const priceLevel = this.debitMemo.priceLevel;\n                    let code = \"\";\n                    if (this.supplier.id) {\n                        if (priceLevel) {\n                            if (priceLevel.hasOwnProperty(\"currency\")) {\n                                this.debitMemo.currency = priceLevel.currency;\n                                if (priceLevel.currency.hasOwnProperty(\"code\")) {\n                                    code = priceLevel.currency.code;\n                                }\n                            }\n                            data = {\n                                search: this.supplier.id,\n                                type: \"Vendor\",\n                                status: 3,\n                                transactionDate: this.transactionDate,\n                                currency: code,\n                            };\n                            this.offsetPurchases = [];\n                            this.isLoading = 1\n                            this.showLoading = true;\n                            if (code !== \"\") {\n                                try {\n                                    billingHandler.searchCashPayment(data).then((res) => {\n                                        if (res.data.statusCode === 200) {\n                                            this.isLoading = 0\n                                            const response = res.data.data;\n                                            // const result = res.data.result\n                                            this.showLoading = false;\n                                            if (response.length > 0) {\n                                                let uniqueIds = [];\n                                                this.offsetPurchaseList = response;\n                                                this.offsetPurchaseList.forEach((o) => {\n                                                    uniqueIds.push(o.id);\n                                                });\n                                                const unique = [...new Set(uniqueIds)];\n                                                this.offsetPurchases = [];\n                                                unique.forEach((txnId) => {\n                                                    const found = this.offsetPurchaseList.filter(\n                                                        (j) => j.id === txnId\n                                                    );\n                                                    found.forEach((k) => {\n                                                        this.offsetPurchases.push(k);\n                                                    });\n                                                });\n                                                // this.autoCalculate()\n                                            }\n                                        }\n                                    });\n                                } catch (e) {\n                                    this.showLoading = false;\n                                }\n                            }\n                        }\n                    }\n\n                }, 50);\n            });\n        },\n        async loadPaymentOption() {\n            new Promise((resolve) => {\n                setTimeout(() => {\n                    resolve(\"resolved\");\n                    this.paymentMethod = [];\n                    paymentOptionHandler\n                        .list(strFilter)\n                        .then((res) => {\n                            if (res.data.statusCode === 200) {\n                                this.showLoading = false;\n                                this.paymentMethod = res.data.data;\n                            }\n                        })\n                        .catch();\n                    {\n                        this.showLoading = false;\n                    }\n                }, 50);\n            });\n        },\n        async onSaveClose(isSave) {\n            if (!this.$refs.form.validate()) {\n                this.$refs.form.validate();\n                return;\n            }\n            if (this.$refs.applyToLineDS.kendoWidget().data().length <= 0) {\n                this.$snotify.error(\"Please input offset item\")\n                return;\n            }\n            const lDS = this.$refs.itemLineDS.kendoWidget();\n            let dataValidate = 0;\n            const itmLineR = lDS.data().filter((n) => n.amount > 0);\n            itmLineR.forEach((value, index) => {\n                window.console.log(0, value.uom.uom)\n                if (\n                    value.item.id === undefined ||\n                    value.uom.uom.id === undefined ||\n                    value.item.id === \"\" ||\n                    value.uom.uom.id === \"\"\n                ) {\n                    this.$snotify.error(\n                        \"Please select return item at row \" + (index + 1)\n                    );\n                } else {\n                    dataValidate += 1;\n                }\n            });\n            if (itmLineR.length === dataValidate) {\n                if (Object.keys(this.debitMemo.priceLevel).length > 0) {\n                    if (this.dr !== 0 && this.cr !== 0) {\n                        new Promise((resolve) => {\n                            setTimeout(() => {\n                                resolve(\"resolved\");\n                                let isAutoGenerate = 1;\n                                const offsetAmount = parseFloat(this.debitMemo.offsetAmount);\n                                const itemLineAmount = parseFloat(\n                                    this.debitMemo.itemLineAmount\n                                );\n                                const variance = parseFloat(this.debitMemo.variance);\n                                // const lDS = this.$refs.itemLineDS.kendoWidget()\n                                // const itmLineR = lDS.data().filter(n => n.amount > 0)\n                                // const applyToDS = this.$refs.applyToLineDS.kendoWidget()\n                                // const applyToLineR = applyToDS.data().filter(n => n.paidAmount > 0)\n                                // const depositLineDS = this.$refs.depositLineDS.kendoWidget()\n                                // const depositLineR = depositLineDS.data().filter(n => n.amount > 0)\n                                let noDepositAcc = 0,\n                                    noCashAccount = 0,\n                                    noVarianceAcc = 0;\n                                // if (itmLineR.length > 0 && depositLineR.length > 0 && applyToLineR.length > 0) {\n                                //todo: check offset amount\n                                if (offsetAmount > itemLineAmount) {\n                                    this.showWaringMessage(\n                                        \"Debit Memo\",\n                                        \"Return amount and Offset amount must be equal!\",\n                                        \"OK\"\n                                    );\n                                    return;\n                                }\n                                //todo: check customer credit case amount>0 and unselected account\n                                let ds = this.$refs.depositLineDS.kendoWidget();\n                                let rows = ds.data().filter((n) => n.amount > 0);\n                                rows.forEach((itm) => {\n                                    const account = itm.account;\n                                    if (!account.hasOwnProperty(\"id\")) {\n                                        this.showWaringMessage(\n                                            \"Debit Memo\",\n                                            \"Please select deposit account\",\n                                            \"OK\"\n                                        );\n                                        noDepositAcc = 1;\n                                        return;\n                                    }\n                                });\n                                //todo: check Cash refund case amount>0 and unselected account\n                                let dsRefund = this.$refs.cashRefundDS.kendoWidget();\n                                rows = dsRefund.data().filter((n) => n.amount > 0);\n                                rows.forEach((itm) => {\n                                    const account = itm.account;\n                                    if (!account.hasOwnProperty(\"id\")) {\n                                        this.showWaringMessage(\n                                            \"Debit Memo\",\n                                            \"Please select cash account\",\n                                            \"OK\"\n                                        );\n                                        noCashAccount = 1;\n                                        return;\n                                    }\n                                });\n                                //todo: check variance account\n                                if (variance !== 0) {\n                                    const varianceAcc = this.debitMemo.varianceAcc;\n                                    if (!varianceAcc) {\n                                        // if (!variance.hasOwnProperty('id')) {\n                                        this.showWaringMessage(\n                                            \"Debit Memo\",\n                                            \"Please select variance account\",\n                                            \"OK\"\n                                        );\n                                        noVarianceAcc = 1;\n                                        return;\n                                        // }\n                                    }\n                                }\n                                // }\n\n                                if (\n                                    noVarianceAcc === 0 &&\n                                    noDepositAcc === 0 &&\n                                    noCashAccount === 0\n                                ) {\n                                    if (this.$route.params.id) {\n                                        const tranDate = new Date(this.transactionDate);\n                                        const tranDateInvoice = new Date(\n                                            this.debitMemo.transactionDate\n                                        );\n                                        const tranDateM =\n                                            tranDate.getFullYear() + tranDate.getMonth();\n                                        const tranDateInvoiceM =\n                                            tranDateInvoice.getFullYear() +\n                                            tranDateInvoice.getMonth();\n                                        if (tranDateM === tranDateInvoiceM) {\n                                            isAutoGenerate = 0;\n                                        }\n                                    }\n\n                                    let itemLineDS = this.$refs.itemLineDS.kendoWidget();\n                                    let applyToLineDS = this.$refs.applyToLineDS.kendoWidget();\n                                    let cashRefundDS = this.$refs.cashRefundDS.kendoWidget();\n                                    let depositLineDS = this.$refs.depositLineDS.kendoWidget();\n                                    const itemLineR = itemLineDS\n                                        .data()\n                                        .filter((o) => o.amount)\n                                        .map((n) => {\n                                            return new ItemLineModel(n);\n                                        });\n                                    const applyToLineR = applyToLineDS\n                                        .data()\n                                        .filter((o) => o.paidAmount)\n                                        .map((n) => {\n                                            return new ApplyToLineModel(n);\n                                        });\n                                    const cashRefundR = cashRefundDS\n                                        .data()\n                                        .filter((o) => o.amount)\n                                        .map((n) => {\n                                            return {...n};\n                                        });\n                                    const depositLineR = depositLineDS\n                                        .data()\n                                        .filter((o) => o.amount)\n                                        .map((n) => {\n                                            return new DepositLineModel(n);\n                                        });\n                                    // let depositLineDS = this.$refs.depositLineDS.kendoWidget()\n                                    // const dataRow = applyToLineDS.data().filter(n => n.paidAmount > 0)\n                                    let data = {\n                                        id: this.debitMemo.id || '',\n                                        uuid: this.debitMemo.uuid || '',\n                                        journal_uuid: this.debitMemo.journal_uuid || '',\n                                        type: TRANSACTION_TYPE,\n                                        number: this.debitMemo.number,\n                                        abbr: this.debitMemo.transactionType.abbr,\n                                        transactionDate: this.transactionDate,\n                                        transactionDateTZ: Helper.toISODate(this.transactionDate),\n                                        supplier: this.supplier,\n                                        transactionType: this.debitMemo.transactionType,\n                                        currency: this.debitMemo.currency,\n                                        txnRate: this.debitMemo.txnRate,\n                                        rate: 1,\n                                        exchangeAmount: this.debitMemo.exchangeAmount,\n                                        exchangeRate: this.debitMemo.exchangeRate,\n                                        amount: this.debitMemo.amount,\n                                        variance: this.debitMemo.variance,\n                                        priceLevel: this.debitMemo.priceLevel,\n                                        reasonForDebitNote: this.debitMemo.reasonForDebitNote,\n                                        itemLine: itemLineR,\n                                        depositLine: depositLineR,\n                                        cashRefundLine: cashRefundR,\n                                        applyToLine: applyToLineR,\n\n                                        segment: this.debitMemo.segment,\n                                        location: this.debitMemo.location,\n                                        project: this.debitMemo.project,\n                                        employee: this.debitMemo.employee,\n                                        transactionNote: this.debitMemo.transactionNote,\n                                        journalNote: this.debitMemo.journalNote,\n\n                                        itemLineAmount: this.debitMemo.itemLineAmount,\n                                        itemLineExchangeAmount: this.debitMemo.itemLineExchangeAmount,\n                                        itemLineDiscountAmount: this.debitMemo.itemLineDiscountAmount,\n                                        itemLineTaxAmount: this.debitMemo.itemLineTaxAmount,\n                                        itemLineSubTotal: this.debitMemo.itemLineSubTotal,\n\n                                        applyToAmount: this.debitMemo.applyToAmount,\n                                        applyToExchangeAmount: this.debitMemo.applyToExchangeAmount,\n                                        exchangeDepositDeduction: this.debitMemo.exchangeDepositDeduction,\n                                        depositAmount: this.debitMemo.depositAmount,\n                                        refundAmount: this.debitMemo.refundAmount,\n\n                                        saveOption: this.debitMemo.saveOption,\n                                        status: 1,\n                                        approvedBy: this.debitMemo.approvedBy,\n                                        formTemplate: {},\n                                        createdAt: this.debitMemo.createdAt,\n                                        loggedUser: this.loggedUser,\n                                        isAutoGenerate: isAutoGenerate,\n                                        jRaw: this.jRaw,\n                                        supplierDiscountItem: this.debitMemo.supplierDiscountItem || [],\n                                        refFrom: this.debitMemo.refFrom || [],\n                                        refTo: this.debitMemo.refTo || [],\n                                        saleTaxDetail: this.debitMemo.saleTaxDetail || [],\n                                        exchangeVariance: this.debitMemo.exchangeVariance || 0,\n                                        actionType: this.$route.params.id\n                                            ? this.$route.query.type\n                                            : \"new\",\n                                    };\n                                    this.showLoading = true;\n                                    window.console.log(1, isSave)\n                                    this.clear();\n                                    window.console.log(2, data)\n\n                                    billingHandler.createDebitMemo(data).then((response) => {\n                                        if (response.data.statusCode === 201) {\n                                            this.showLoading = false;\n                                            this.$snotify.success(\"Successfully\");\n                                            if (isSave == \"new\") {\n                                                this.clear();\n                                            } else if (isSave == \"close\") {\n                                                this.clear();\n                                                this.close();\n                                            }\n                                        }\n                                    }).catch((e) => {\n                                        this.showLoading = false;\n                                        this.$snotify.error(\"Something went wrong\");\n                                        this.errors.push(e);\n                                    });\n                                } else {\n                                    this.showWaringMessage(\n                                        \"Debit Memo\",\n                                        \"Please check before save\",\n                                        \"OK\"\n                                    );\n                                }\n                            }, 10);\n                        });\n                    } else {\n                        this.showWaringMessage(\n                            \"Debit Memo\",\n                            \"Please check before save\",\n                            \"OK\"\n                        );\n                    }\n                } else {\n                    this.showWaringMessage(\n                        \"Debit Memo\",\n                        \"Please select price level\",\n                        \"OK\"\n                    );\n                }\n            }\n        },\n        close() {\n            window.history.go(-1);\n        },\n        async loadViewDebitMemo() {\n            new Promise((resolve) => {\n                setTimeout(() => {\n                    resolve(\"resolved\");\n                    if (this.$route.params.id) {\n                        this.showLoading = true;\n                        const strFilter = \"?id=\" + this.$route.params.id;\n                        billingHandler\n                            .debitMemoList(strFilter)\n                            .then((res) => {\n                                if (res.data.statusCode === 200) {\n                                    this.showLoading = false;\n                                    const saleReturn = res.data.data[0];\n                                    this.debitMemo = saleReturn;\n                                    this.itemLines = saleReturn.itemLine;\n                                    this.offsetPurchases = saleReturn.applyToLine;\n                                    this.cashRefundLines = saleReturn.cashRefundLine;\n                                    this.depositLines = saleReturn.depositLine;\n                                    this.supplier = this.debitMemo.supplier;\n                                    this.mEmployee = this.debitMemo.employee;\n                                    this.transactionDate = this.debitMemo.transactionDate;\n                                    this.supplierDiscountItem = this.debitMemo.supplierDiscountItem || [];\n                                    const depositAcc = this.supplier.hasOwnProperty(\n                                        \"purchaseDepositAcc\"\n                                    )\n                                        ? this.supplier.purchaseDepositAcc\n                                        : {};\n\n                                    if (this.cashRefundLines.length === 0) {\n                                        this.purchaseDepositLine.id = itemLinePrefix + uuid.v1();\n                                        this.cashRefundLines.push(this.purchaseDepositLine);\n                                        // this.addRowCashRefund()\n                                    }\n                                    if (this.depositLines.length === 0) {\n                                        this.purchaseDepositLine.id = itemLinePrefix + uuid.v1();\n                                        this.depositLines.push(this.purchaseDepositLine);\n                                        // this.addRowDeposit()\n                                    }\n                                    this.accDeposit = this.accDeposits.filter(\n                                        (o) => o.id === depositAcc.id\n                                    );\n                                }\n                            })\n                            .catch();\n                        {\n                            // this.showLoading = false\n                        }\n                    }\n                }, 50);\n            });\n        },\n        clear() {\n            this.showLoading = false;\n            this.supplier = {}\n            this.debitMemo = new DebitMemoModel();\n            this.offsetPurchase = {}\n            let applyToLineDS = this.$refs.applyToLineDS.kendoWidget();\n            this.offsetList = applyToLineDS.data([]);\n            let cashRefundDS = this.$refs.cashRefundDS.kendoWidget();\n            this.cashRefundLines = cashRefundDS.data([]);\n            let depositLineDS = this.$refs.depositLineDS.kendoWidget();\n            this.depositLines = depositLineDS.data([]);\n            let itemLineDS = this.$refs.itemLineDS.kendoWidget();\n            this.itemLines = itemLineDS.data([]);\n            this.addRow()\n            this.addRowAcc()\n            this.addRowDeposit()\n            this.addRowCashRefund()\n            this.loadPrefix()\n        },\n        onPriceLevelChange() {\n            this.isPriceLevelChanged = true\n            this.loadTransactionRate()\n            this.clearUOMItem()\n        },\n        async clearUOMItem() {\n            let ds = this.$refs.itemLineDS.kendoWidget()\n            ds.data().map(n => {\n                n.set('uom', {})\n            })\n            this.isPriceLevelChanged = false\n        },\n    },\n    watch: {\n        id() {\n            if (this.$route.params.id === undefined) {\n                this.clear();\n            } else {\n                this.loadViewDebitMemo();\n            }\n        },\n        // call again the method if the route changes\n    },\n    created() {\n        this.loadTax();\n        this.loadSaleUnitItems();\n        this.loadPrefix();\n        this.loadSegment();\n        this.loadLocation();\n        this.loadPaymentOption();\n    },\n    mounted: async function () {\n        await this.loadPurchaseFormContent();\n        this.requestData(0, this.filter, this.supBaseUrl);\n        // await this.loadDiscountItem()\n        await this.loadEmployeeCenter();\n        await this.loadPaymentTerm();\n        await this.loadAccount();\n        await this.loadPriceLevel();\n        await this.loadProjectByCustomer();\n        // await this.loadOtherCharge()\n        await this.initData();\n        this.nowTimes();\n    },\n};\n</script>\n\n<style scoped>\n.function_wrapper {\n    box-shadow: none !important;\n}\n\n.v-application--is-ltr .v-text-field .v-input__append-inner {\n    margin-top: 0 !important;\n}\n\n.v-input__slot {\n    background-color: #fff !important;\n}\n\n.function_content .label {\n    margin-bottom: 10px;\n    display: inline-block;\n}\n\n.border_radius10 {\n    border-radius: 10px !important;\n    background-color: #f2f2f2;\n}\n\n.pa-3.v-card h4 {\n    font-size: 18px;\n    color: #333;\n}\n\n.pa-3.v-card p {\n    font-size: 12px;\n    color: #b5b5b5;\n}\n\n.attachment_file {\n    background-color: #efeded;\n    border-radius: 0 !important;\n}\n\n.attachment_table.v-data-table table {\n    border: thin solid rgba(0, 0, 0, 0.12);\n}\n\n.attachment_table table tr th {\n    border-left: thin solid rgba(0, 0, 0, 0.12);\n    height: 35px;\n    border-right: thin solid rgba(0, 0, 0, 0.12);\n}\n\n.block_debit,\n.block_credit {\n    border-bottom: 1px solid #fff;\n}\n\n.block_debit p.number,\n.block_credit p.number {\n    font-size: 25px;\n    color: #7f7f7f;\n}\n\n.block_debit h5,\n.block_credit h5,\n.block_difference h5 {\n    text-transform: uppercase;\n    color: #7f7f7f;\n    font-size: 15px;\n    font-weight: normal;\n}\n\n.block_difference h5 {\n    font-size: 18px;\n}\n\n.block_difference h5 span {\n    font-size: 15px;\n}\n\n.custom_grid table th:last-child {\n    text-align: right !important;\n}\n\n@media (min-width: 1264px) {\n    .container {\n        max-width: 1250px;\n    }\n}\n\n@media (max-width: 576px) {\n    .pt-6.col-sm-5.col-12 {\n        padding-top: 0 !important;\n    }\n\n    .code_text {\n        width: 100%;\n    }\n\n    .phone_no_pt {\n        padding-top: 0 !important;\n    }\n\n    .select_template,\n    .save_option {\n        margin-bottom: 10px;\n    }\n}\n\n.hide_small_bar_class {\n    max-width: 0;\n    transition: 0.5s ease-in;\n    flex: 0 0 0;\n}\n\n.hide_big_bar_class {\n    max-width: 100%;\n    transition: 0.5s ease-in;\n    flex: 0 0 100%;\n}\n\n.info_add {\n    background-color: #ffffff;\n}\n\n.small_sidebar {\n    height: 98%;\n    position: relative;\n    padding: 12px;\n    background-color: #edf1f5;\n}\n\n.iconArrow {\n    right: -35px;\n    position: absolute;\n    bottom: -10px;\n}\n\n.iconArrowHide {\n    position: absolute;\n    right: -7px;\n    bottom: -10px;\n}\n\n.color_grey {\n    color: #808080;\n}\n\n.card_green {\n    min-height: 70px;\n    background-color: #00b050 !important;\n    color: #ffffff;\n}\n\n.lb_bold {\n    font-size: 12px;\n}\n\n.detial_smallside_p {\n    position: absolute;\n    bottom: 10px;\n}\n\n.card_background {\n    background-color: #edf1f5;\n    min-height: 120px;\n}\n\n.deposite_input {\n    width: 100px;\n}\n\n.btn_save_draft {\n    color: #ffffff;\n    background-color: #00b0f0 !important;\n    text-transform: capitalize;\n}\n\n.save_option {\n    background-color: #203864 !important;\n}\n\n.btn_add_small {\n    height: 27px !important;\n    min-width: 25px !important;\n    font-size: 10px;\n    padding: 0 22px !important;\n    background-color: #00b050 !important;\n    color: #ffffff;\n    border-radius: 0 !important;\n}\n\n.list_site_inv {\n    background-color: #92d050;\n    color: #ffffff;\n    font-size: 12px;\n}\n\n.list_site_exp {\n    background-color: #c5e0b4;\n    color: #000000;\n    font-size: 12px;\n    line-height: 16px;\n    min-height: 40px;\n}\n\n.checkbox_inv {\n    padding: 2px;\n    margin-top: 3px;\n    margin-right: 2px;\n}\n\n.exp_select {\n    font-size: 12px !important;\n}\n</style>\n"]}]}