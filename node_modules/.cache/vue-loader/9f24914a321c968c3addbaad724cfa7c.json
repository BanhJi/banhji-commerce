{"remainingRequest":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/macos/Desktop/banhji-0.2/banhji-commerce/src/views/budgeting/budgets/SegmentBudget.vue?vue&type=style&index=0&id=3a816dfb&scoped=true&lang=css&","dependencies":[{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/src/views/budgeting/budgets/SegmentBudget.vue","mtime":1642390528850},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/@vue/cli-service/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLmZ1bmN0aW9uX2NvbnRlbnQgewogICAgcGFkZGluZzogMCAyNXB4IDI1cHg7CiAgICBib3JkZXItYm90dG9tOiAwOwogICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZiAhaW1wb3J0YW50Owp9CgpAbWVkaWEgKG1pbi13aWR0aDogMTI2NHB4KSB7CiAgICAuY29udGFpbmVyIHsKICAgICAgICBtYXgtd2lkdGg6IDExODVweDsKICAgICAgICAvKiBtYXgtd2lkdGg6IDEwODBweCAhaW1wb3J0YW50OyAqLwogICAgfQp9CgouZ3JheUJnIHsKICAgIGJhY2tncm91bmQtY29sb3I6ICNGOEY4Rjk7Cn0KCkBtZWRpYSAobWF4LXdpZHRoOiA1NzZweCkgewogICAgLm1iLTYgewogICAgICAgIG1hcmdpbi1ib3R0b206IDAgIWltcG9ydGFudDsKICAgIH0KfQoKLnNlY3Rpb24yIHsKICAgIGJvcmRlcjogMXB4IHNvbGlkICNkNmQ3ZDg7Cn0KCi5ib3JkZXJfZ3JleSB7CiAgICBib3JkZXI6IDFweCBzb2xpZCAjZDZkN2Q4Owp9CgouYXR0YWNobWVudF90YWJsZSB7CiAgICB3aWR0aDogMTAwJTsKfQoKLmdyZXlEYXJrIHsKICAgIGJhY2tncm91bmQtY29sb3I6ICNmMmYyZjI7Cn0KCi51cGxvYWRfYnRuIHsKICAgIHdpZHRoOiA1NCU7CiAgICBtYXJnaW46IGF1dG87CiAgICBwYWRkaW5nOiAxMHB4IDZweDsKICAgIHRleHQtYWxpZ246IGNlbnRlcjsKICAgIGNvbG9yOiAjZmZmZjsKICAgIGJvcmRlci1yYWRpdXM6IDIycHg7CiAgICBiYWNrZ3JvdW5kOiAjOTJkMDUwOwp9CgoubXlfYm94X21pbl9oZWloZ3QgewogICAgaGVpZ2h0OiAyOTVweDsKfQoKLndpZHRoXzEwMCB7CiAgICB3aWR0aDogMTAwcHg7Cn0KLnYtZGF0YS10YWJsZS5zaW1wbGVfdGFibGUudGhlbWUtLWxpZ2h0ewogICAgYm9yZGVyLXRvcDogdGhpbiBzb2xpZCByZ2JhKDAsIDAsIDAsIDAuMTIpICFpbXBvcnRhbnQ7Cn0KLnYtZGF0YS10YWJsZS5zaW1wbGVfdGFibGUgPiAudi1kYXRhLXRhYmxlX193cmFwcGVyID4gdGFibGUgPiB0Ym9keSA+IHRyID4gdGQgewogICAgaGVpZ2h0OiAzMnB4ICFpbXBvcnRhbnQ7CiAgICBib3JkZXItYm90dG9tOiB0aGluIHNvbGlkIHJnYmEoMCwgMCwgMCwgMC4xMikgIWltcG9ydGFudDsKICAgIGJvcmRlci1yaWdodDogdGhpbiBzb2xpZCByZ2JhKDAsIDAsIDAsIDAuMTIpICFpbXBvcnRhbnQ7Cn0KLnRoZW1lLS1saWdodC52LWRhdGEtdGFibGUuc2ltcGxlX3RhYmxlID4gLnYtZGF0YS10YWJsZV9fd3JhcHBlciA+IHRhYmxlID4gdGhlYWQgPiB0ciA+IHRoewogICAgYm9yZGVyLWJvdHRvbTogdGhpbiBzb2xpZCByZ2JhKDAsIDAsIDAsIDAuMTIpICFpbXBvcnRhbnQ7Cn0KLnRoZW1lLS1saWdodC52LWRhdGEtdGFibGUuc2ltcGxlX3RhYmxlID4gLnYtZGF0YS10YWJsZV9fd3JhcHBlciA+IHRhYmxlID4gdGhlYWQgPiB0cjpsYXN0LWNoaWxkID4gdGh7CiAgICBib3JkZXItcmlnaHQ6IHRoaW4gc29saWQgcmdiYSgwLCAwLCAwLCAwLjEyKSAhaW1wb3J0YW50Owp9Ci50aGVtZS0tbGlnaHQudi1kYXRhLXRhYmxlLnNpbXBsZV90YWJsZSA+IC52LWRhdGEtdGFibGVfX3dyYXBwZXIgPiB0YWJsZSA+IHRoZWFkID4gdHIgPiB0aDpsYXN0LWNoaWxkLAoudi1kYXRhLXRhYmxlLnNpbXBsZV90YWJsZSA+IC52LWRhdGEtdGFibGVfX3dyYXBwZXIgPiB0YWJsZSA+IHRib2R5ID4gdHIgPiB0ZDpsYXN0LWNoaWxkewogICAgYm9yZGVyLXJpZ2h0OiBub25lICFpbXBvcnRhbnQ7Cn0KLnRoZW1lLS1saWdodC52LWRhdGEtdGFibGUgPiAudi1kYXRhLXRhYmxlX193cmFwcGVyID4gdGFibGUgPiB0Ym9keSA+IHRyOmhvdmVyOm5vdCgudi1kYXRhLXRhYmxlX19leHBhbmRlZF9fY29udGVudCk6bm90KC52LWRhdGEtdGFibGVfX2VtcHR5LXdyYXBwZXIpIHsKICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50ICFpbXBvcnRhbnQ7Cn0KCi5wcmltYXJ5LS10ZXh0LnRleHQtbGVmdC52LWJ0bjpob3ZlciwKLnRoZW1lLS1saWdodC52LWJ0bjpob3Zlcjo6YmVmb3JlewogICAgYmFja2dyb3VuZDogbm9uZSAhaW1wb3J0YW50Owp9Cg=="},{"version":3,"sources":["SegmentBudget.vue"],"names":[],"mappingsw0BA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"SegmentBudget.vue","sourceRoot":"src/views/budgeting/budgets","sourcesContent":["<template>\n    <v-app>\n        <v-container>\n            <v-row>\n                <v-col cols=\"12\" sm=\"12\">\n                    <v-card\n                        outlined\n                        dense\n                        class=\"pa-4 no_border rounded-sm\"\n                        color=\"white\"\n                    >\n                        <v-form ref=\"form\" v-model=\"valid\" lazy-validation>\n                            <v-card elevation=\"0\" class=\"pt-2 mb-3\">\n                                <h2 class=\"mb-0\">{{ $t(\"segment_budget\") }}</h2>\n                                <v-icon\n                                    onclick=\"window.history.go(-1); return false;\"\n                                    style=\"cursor: pointer; color: #333; font-size: 40px;\"\n                                    class=\"float-right\"\n                                >close\n                                </v-icon>\n                            </v-card>\n                            \n                            <!-- Search -->\n                            <v-card\n                                outlined\n                                class=\"px-4 no_border pt-4 pb-3\"\n                                color=\"grayBg\"\n                                min-height=\"98px\"\n                            >\n                                <v-row>\n                                    <v-col md=\"6\" sm=\"4\" cols=\"12\" class=\"py-0\">\n                                        <label class=\"label\">{{ $t(\"budget_name\") }}</label>\n                                        <v-text-field\n                                            class=\"mt-1\"\n                                            v-model=\"budget.name\"\n                                            :placeholder=\"$t('name')\"\n                                            outlined\n                                            required\n                                        />\n                                    </v-col>\n                                     <v-col md=\"3\" sm=\"4\" cols=\"12\" class=\"py-0  pt-3 text-center\">\n                                        <v-checkbox\n                                            v-model=\"budget.use_consolidation\"\n                                            true-value=\"1\"\n                                            false-value=\"0\"\n                                            :label=\"$t('used_consolidation')\" />\n                                    </v-col>\n                                     <v-col md=\"3\" sm=\"4\" cols=\"12\" class=\"py-0\">\n                                            <app-reporting-language\n                                                :initLanguage=\"reportingLanguage\"\n                                                @emitLanguage=\"reportingLanguage = $event\"\n                                                @onChanged=\"onReportingLanguageChanges\"\n                                            />\n                                    </v-col>\n                                </v-row>\n                                <v-row>\n                                    <v-col md=\"3\" sm=\"4\" cols=\"12\" class=\"py-0\">\n                                        <label class=\"label\">{{ $t(\"fiscal_year\") }}</label>\n                                        <app-fiscal-date-dropdownlist\n                                            :initFiscalDate=\"budget.fiscal_year\"\n                                            @emitFiscalDate=\"budget.fiscal_year = $event\"\n                                        />\n                                    </v-col>\n                                      <v-col md=\"3\" sm=\"4\" cols=\"12\" class=\"py-0\">\n                                        <label class=\"label\">{{ $t(\"segment\") }}</label>\n                                        <app-segment-dropdownlist\n                                            :initSegment=\"segment\"\n                                            @emitSegment=\"segment = $event\"\n                                        />\n                                    </v-col>\n                                    <v-col md=\"3\" sm=\"4\" cols=\"12\" class=\"py-6\">\n                                        <v-btn\n                                            class=\"text-capitalize  white--text\"\n                                            color=\"primary\"\n                                            @click=\"confirmReload\"\n                                        >\n                                            {{ $t(\"load_account\") }}\n                                        </v-btn>\n                                    </v-col>\n                                </v-row>\n                            </v-card>\n                            \n                            <!-- Dialog -->\n                            <div class=\"text-center\">\n                                <v-dialog\n                                    v-model=\"dialog\"\n                                    width=\"500\"\n                                >\n                                    <v-card>\n                                        <v-card-title class=\"text-h5 grey lighten-2\">\n                                            {{ selectedRow.account.number }} - {{ selectedRow.account.name }}\n                                        </v-card-title>\n\n                                        <v-card-text>\n                                            <v-text-field\n                                                class=\"mt-7\"\n                                                type=\"number\"\n                                                v-model=\"crossAmount\"\n                                                outlined\n                                            />\n                                        </v-card-text>\n\n                                        <v-divider></v-divider>\n\n                                        <v-card-actions>\n                                            <v-btn\n                                                color=\"secondary\"\n                                                text\n                                                @click=\"dialog = false\"\n                                                outlined\n                                            >\n                                                Cancel\n                                            </v-btn>\n                                            <v-spacer></v-spacer>\n                                            <v-btn\n                                                color=\"primary\"\n                                                text\n                                                @click=\"applyAcrossAmount\"\n                                                outlined\n                                            >\n                                                Enter\n                                            </v-btn>\n                                        </v-card-actions>\n                                    </v-card>\n                                </v-dialog>\n                            </div>\n\n                            <!-- Tree List -->\n                            <v-card\n                                outlined\n                                class=\"rounded-0 mt-4\"\n                                color=\"white\"\n                                min-height=\"98px\"\n                            >\n                                <v-row>\n                                    <v-col sm=\"12\" cols=\"12\" class=\"\">\n                                        <!-- Tree List -->\n                                        <div id=\"budgetLineTreeList\" />\n                                    </v-col>\n                                </v-row>\n\n                                <LoadingMe\n                                    type=\"loading\"\n                                    :isLoading=\"showLoading\"\n                                    :myLoading=\"true\"\n                                    :fullPage=\"true\" />\n\n                                <v-card-actions>\n                                    <v-alert\n                                        type=\"warning\"\n                                        v-model=\"alert\"\n                                        dismissible\n                                    >\n                                        <span v-html=\"errorMessage\"/>\n                                    </v-alert>\n\n                                    <v-btn\n                                        color=\"black\"\n                                        class=\"text-capitalize  white--text\"\n                                        @click=\"cancel\"\n                                    >{{ $t(\"cancel\") }}\n                                    </v-btn>\n\n                                    <v-spacer />\n                                    \n                                    <v-btn\n                                        class=\"text-capitalize white--text\"\n                                        color=\"primary\"\n                                        @click=\"onSaveOptionClick(SaveOption.SAVECLOSE)\"\n                                    >\n                                        {{ $t(\"save_close\") }}\n                                    </v-btn>\n                                </v-card-actions>\n                            </v-card>\n                        </v-form>\n                    </v-card>\n                </v-col>\n            </v-row>\n        </v-container>\n    </v-app>\n</template>\n\n<script>\nimport {i18n} from '@/i18n'\nimport kendo from \"@progress/kendo-ui\";\nimport Helper from \"@/helper.js\";\nimport BudgetModel from \"@/scripts/model/Budget.js\";\nimport BudgetLineModel from \"@/scripts/model/BudgetLine.js\";\nimport BudgetLineExtendedModel from \"@/scripts/model/BudgetLineExtended.js\";\nimport AccountModel from \"@/scripts/model/accounting/Account.js\";\nimport SegmentModel from \"@/scripts/model/Segment.js\";\n\n/* Editor */\nimport NumberInputBoxEditor from \"@/scripts/kendo_editor/NumberInputBox\";\nimport AccountSecondaryEditor from \"@/scripts/kendo_editor/AccountSecondary\";\n\n/* Store */\nimport store from \"@/store\"\nconst institute = store.state.institute.institute\nimport { mapState } from 'vuex';\n\nconst budgetHandler = require(\"@/scripts/handler/workingcapital/budgetHandler.js\");\nconst { SaveOption } = require(\"@/scripts/default_setup/Collections\");\n\nexport default {\n    name: \"SegmentBudget\",\n    props: {\n        initBudget: {\n            type: BudgetModel,\n        },\n    },\n    components: {\n        \"LoadingMe\": () => import('@/components/Loading'),\n        \"app-segment-dropdownlist\": () => import('@/components/dropdownlist/Segment'),\n        \"app-fiscal-date-dropdownlist\": () => import('@/components/kendo_templates/FiscalDateDropDownList'),\n        \"app-reporting-language\": () => import(\"@/components/kendo_templates/ReportingLanguageDropDownList\"),\n    },\n    data: () => ({\n        // Obj\n        budget: new BudgetModel(),\n        budgetLines: [],\n        segment: new SegmentModel(),\n        user: Helper.getUser(),\n        // Form validation\n        valid: true,\n        isEdit: false,\n        alert: false,\n        errorMessage: \"\",\n        saveMode: \"\",\n        SaveOption: SaveOption,\n        // Reporting Language\n        reportingLanguage: \"english\",\n        fieldName : 'account.name',\n        // LoadingMe\n        showLoading: false,\n        /* Dialog */\n        dialog: false,\n        selectedRow: new BudgetLineExtendedModel(),\n        crossAmount: 0,\n        /* Kendo */\n        columns: [],\n        budgetLineDS : new kendo.data.TreeListDataSource({\n            sort: [\n                { field: \"account.type_code\", dir: \"asc\" },\n                { field: \"number\", dir: \"asc\" },\n            ],\n            schema: {\n                model: {\n                    id: \"uuid\",\n                    expanded: true\n                }\n            }\n        }),\n    }),\n    methods: {\n        // Initial Data\n        initialData() {\n            if(this.initBudget){ // Edit Mode\n                this.isEdit = true;\n                this.budget = this.initBudget;\n                this.bindData();\n            }else{ // Brand New\n                this.isEdit = false;\n                this.setDefaultData();\n            }\n        },\n        /* Initial Tree List */\n        initialTreeList(){\n            kendo.jQuery(\"#budgetLineTreeList\").kendoTreeList({\n                dataSource: new kendo.data.TreeListDataSource(),\n                dataBound: this.onDataBound,\n                editable: \"incell\",\n                resizable: true,\n                columnMenu: true,\n                columns: this.columns,\n            });\n        },\n        // Set default data\n        setDefaultData() {\n            this.budget = new BudgetModel({\n                fiscal_year: institute.fiscalDate[0],\n            });\n        },\n        // Bind data for edit mode\n        async bindData() {\n            /* Segment */\n            await this.$store.dispatch('segments/getList');\n\t\t\tthis.segment = new SegmentModel(this.segments.find(i => i.id === this.budget.segment_uuid));\n            \n            this.setDefaultBudgetLine();\n        },\n        /* Confirm Reload Accounts */\n        confirmReload() {\n            if(this.budgetLineDS.total() === 0){\n                this.setDefaultBudgetLine();\n            }else{\n                this.$swal({\n                    title: i18n.t('reload_data_?'),\n                    text: i18n.t('this_will_reset_all_amount_to_zero'),\n                    icon: \"warning\",\n                    showCancelButton: true,\n                    cancelButtonText: i18n.t('cancel'),\n                    confirmButtonColor: \"#4d4848\",\n                    cancelButtonColor: \"#ED1A3A\",\n                    confirmButtonText: i18n.t('reload'),\n                }).then((result) => {\n                    if (result.value) {\n                        this.setDefaultBudgetLine();\n                    }\n                });\n            }\n        },\n        // Set Budget Lines\n        async setDefaultBudgetLine (){\n            this.showLoading = true;\n\n            // Account\n            await this.$store.dispatch('accounting/getAccounts');\n            \n            let g = {};\n            this.accounts.forEach(value => {\n                if(value.account_type.number >= 32 && value.account_type.number <= 43){//Filter PL accounts 32 to 43\n                    let account = value;\n\n                    /* GROUPING */\n                    /* Top Level Account Type */\n                    if(!g[account.type_code]){\n                        g[account.type_code] = new BudgetLineExtendedModel({\n                            uuid : account.type_code,\n                            number : account.type_code,\n                            account_uuid : account.uuid,\n                            account : account.account_type,\n                        });\n                    }\n\n                    /* Parent Level */\n                    let thisAccountParentId = \"\";\n                    if(account.hasOwnProperty(\"parent_account\")){\n                        let currentParentAccount = new AccountModel(account.parent_account), counter = 0;\n                        while (currentParentAccount.number !== \"\") {\n                            /* Get account by uuid or banhji_account_number */\n                            let accountParent = new AccountModel();\n                            if(currentParentAccount.uuid !== \"\"){/* Get by uuid */\n                                accountParent = new AccountModel(this.accounts.find((item) => item.uuid === currentParentAccount.uuid));\n                            }else{/* Get by banhji_account_number because default data has no uuid */\n                                if(currentParentAccount.banhji_account_number !== \"\"){\n                                    accountParent = new AccountModel(this.accounts.find((item) => item.banhji_account_number === currentParentAccount.banhji_account_number));\n                                }\n                            }\n\n                            /* Set This Account Parent Id */\n                            if(counter === 0){\n                                thisAccountParentId = accountParent.uuid;\n                            }\n\n                            /* Find Next Parent */\n                            let nextParent = new AccountModel();\n                            if(accountParent.hasOwnProperty(\"parent_account\")){\n                                let parentOfAccountParent = new AccountModel(accountParent.parent_account);\n                                if(parentOfAccountParent.number !== \"\"){\n                                    if(parentOfAccountParent.uuid !== \"\"){/* Get by uuid */\n                                        nextParent = this.accounts.find((item) => item.uuid === parentOfAccountParent.uuid);\n                                    }else{/* Get by banhji_account_number because default data has no uuid */\n                                        if(parentOfAccountParent.banhji_account_number !== \"\"){\n                                            nextParent = this.accounts.find((item) => item.banhji_account_number === parentOfAccountParent.banhji_account_number);\n                                        }\n                                    }\n                                }\n                            }\n                            \n                            /* Set Parent Id */\n                            let parentId = accountParent.type_code;\n                            nextParent = new AccountModel(nextParent);\n                            if(nextParent.number !== \"\"){\n                                parentId = nextParent.uuid;\n\n                                /* Set next parent account */\n                                Object.assign(currentParentAccount, nextParent);\n                            }else{\n                                /* Set loop to end */\n                                currentParentAccount.number = \"\";\n                            }\n\n                            /* Add Parent Level */\n                            if(!g[accountParent.uuid]){\n                                g[accountParent.uuid] = new BudgetLineExtendedModel({\n                                    uuid : accountParent.uuid,\n                                    account_uuid : accountParent.uuid,\n                                    number : accountParent.number,\n                                    parentId : parentId,\n                                    account : accountParent,\n                                });\n                            }\n                            \n                            /* Increase Counter By 1 */\n                            counter++;\n                        }/* End While Loop */\n                    }\n                    \n                    /* Child Level */\n                    if(!g[account.uuid]){\n                        g[account.uuid] = new BudgetLineExtendedModel({\n                            uuid : account.uuid,\n                            account_uuid : account.uuid,\n                            number : account.number,\n                            account : account,\n                        });\n                    }\n\n                    /* Set Parent Id Or Self Parent */\n                    if(thisAccountParentId !== \"\"){/* Child Level */\n                        g[account.uuid].parentId = thisAccountParentId;\n                    }else{/* Child As Parent */\n                        g[account.uuid].parentId = account.type_code; /* Self As Parent */\n                    }\n                    \n                    // 12 months with amount\n                    for (let i = 0; i < 12; i++) {\n                        // Set Month Of\n                        let sdate = new Date(this.budget.fiscal_year.start_date);\n                        sdate.setMonth(sdate.getMonth() + i);\n\n                        g[account.uuid].monthly_amount.push({\n                            month_of : sdate.toISOString().substr(0, 7),\n                            amount : 0,\n                        });\n                    }\n\n                    /* Matching Account */\n                    if(this.isEdit){\n                        let bline = this.budget.lines.find((item) => item.account_uuid === value.uuid);\n                        if(bline){\n                            /* Reverse Nature */\n                            let nature = 1; /* Default Naure is Dr = 1 */\n                            if(account.account_type.nature.toLowerCase() === \"cr\"){\n                                nature = -1;\n                            }\n\n                            g[account.uuid].secondary_account = new AccountModel(this.secondaryAccounts.find((item) => item.uuid === bline.secondary_account_uuid));\n                            g[account.uuid].note = bline.note;\n                            g[account.uuid].amount = bline.amount * nature;\n                            g[account.uuid].monthly_amount = bline.monthly_amount;\n                            g[account.uuid].monthly_amount.forEach(ma => {\n                                ma.amount = ma.amount * nature;\n                            });\n                        }\n                    }\n                }\n            });\n            \n            /* Bind Budget Line */\n            this.budgetLineDS.data(Object.values(g));\n\n            /* Set New Datasource */\n            let treeList = kendo.jQuery(\"#budgetLineTreeList\").data(\"kendoTreeList\");\n            treeList.setDataSource(this.budgetLineDS);\n\n            this.showLoading = false;\n        },\n        // Row Template\n        nameTmpl(dataItem){\n            /* Name in language */\n            let name = dataItem.account.name;\n            if(this.reportingLanguage === \"local\"){\n                name = dataItem.account.local_name;\n            }\n\n            /* Define result */\n            let result = `<span>${dataItem.number} - ${name}</span>`;\n\n            // /* Top Level */\n            if(dataItem.parentId === null){\n                result = `<span style='font-weight: bolder;'>${name}</span>`;\n            }\n\n            /* Parent Level */\n            if(dataItem.hasChildren && dataItem.number.length > 3){\n                result = `<span style='font-weight: bolder;'>${dataItem.number} - ${name}</span>`;\n            }\n\n            return result;\n        },\n        secondaryAccountTmpl(dataItem) {\n            let result = \"\";\n            if(dataItem.secondary_account.uuid !== ''){\n                result = `<span>${dataItem.secondary_account.number} - ${dataItem.secondary_account.name}</span>`;\n            }\n\n            return result;\n        },\n        copyAcross(e){\n            e.preventDefault();\n\n            let treeList = kendo.jQuery(\"#budgetLineTreeList\").data(\"kendoTreeList\");\n            this.selectedRow = treeList.dataItem(kendo.jQuery(e.target).closest(\"tr\"));\n\n            this.dialog = true;\n        },\n        applyAcrossAmount(){\n            this.dialog = false;\n\n            this.selectedRow.monthly_amount.forEach(value => {\n                value.amount = kendo.parseFloat(this.crossAmount);\n            });\n            this.selectedRow.amount = kendo.parseFloat(this.crossAmount) * 12;\n\n            /* Refresh */\n            let treeList = kendo.jQuery(\"#budgetLineTreeList\").data(\"kendoTreeList\");\n            treeList.refresh();\n\n            this.crossAmount = 0;\n        },\n        generateColumn() {\n            let headerAttributes = {\n                class: \"table-header-cell\",\n                style: \"font-weight: bold;text-align: center;padding-right: 35px; font-size: 14px\",\n            },\n            attributes = {\n                class: \"table-cell\",\n                style: \"text-align: right; font-size: 14px\",\n            };\n\n            let columns = [\n                {\n                    field: this.fieldName,\n                    title: i18n.t(\"account\"),\n                    template: this.nameTmpl,\n                    editable: ()=>{ return false },\n                    width: 300,\n                    headerAttributes: headerAttributes,\n                },\n                {\n                    field: \"secondary_account\",\n                    title: i18n.t(\"secondary_account\"),\n                    template: this.secondaryAccountTmpl,\n                    editor: AccountSecondaryEditor,\n                    hidden: !this.$store.state.accounting.secondaryAccount,\n                    editable: (dataItem)=>{\n                        return !dataItem.hasChildren;\n                    },\n                    width: 300,\n                },\n                {\n                    field: \"note\",\n                    title: i18n.t(\"note\"),\n                    width: 200,\n                },\n                {\n                    title: i18n.t(\"action\"),\n                    command: [{\n                        name: \"copycross\",\n                        text: \"copy cross\",\n                        click: this.copyAcross,\n                    }],\n                    width: 150,\n                }\n            ];\n            \n            /* 12 Months */\n            for (let i = 0; i < 12; i++) {\n                columns.push({\n                    field: `monthly_amount[${i}].amount`,\n                    format: \"{0:n}\",\n                    editor: NumberInputBoxEditor,\n                    width: 150,\n                    attributes: attributes,\n                });\n            }\n\n            /* Total */\n            columns.push({\n                field: \"amount\",\n                title: i18n.t(\"total\"),\n                format: \"{0:n}\",\n                editable: ()=>{return false},\n                width: 150,\n                attributes: attributes,\n            });\n\n            /* Set All Columns */\n            this.columns = columns;\n        },\n        /* On databound */\n        onDataBound (e) {\n            /* Titles */\n            let treeList = kendo.jQuery(\"#budgetLineTreeList\").data(\"kendoTreeList\");\n            if(this.budget.fiscal_year){\n                let fiscalMonths = Helper.generateFiscalMonths(this.budget.fiscal_year.start_date, this.budget.fiscal_year.end_date, \"12\");\n                for (let k = 0; k < 12; k++) {\n                    const element = fiscalMonths[k];\n                    treeList.thead.find(`[data-field~='monthly_amount[${k}].amount']`).html(element);\n                }\n            }\n\n            /* Headers */\n            var headers = e.sender.thead.children();\n            for (var i = 0; i < headers.length; i++) {\n                var th = kendo.jQuery(headers[i]);\n                th.css(\"font-weight\", \"bold\");\n                th.css(\"text-align\", \"center\");\n            }\n\n            /* Items */\n            var items = e.sender.items();\n            for (var j = 0; j < items.length; j++) {\n                var dataItem = e.sender.dataItem(items[j]);\n                var row = kendo.jQuery(items[j]);\n\n                /* Parent in bold */\n                if(dataItem.get(\"hasChildren\") || dataItem.get(\"parentId\") === null){\n                    row.find(\"[data-command='copycross']\").hide();\n                    row.css(\"font-weight\", \"bold\");\n                }\n            }\n        },\n        // DataSource Changes\n        onDataSourceChanges(e) {\n            if (e.field) {\n\t\t\t\tlet dataRow = e.items[0];\n\n                if (e.field === \"secondary_account\") {\n                    if (dataRow.secondary_account !== null) {\n                        dataRow.set(\"secondary_account_uuid\", dataRow.secondary_account.uuid);\n                    } else {\n                        // Set default when deselect\n                        dataRow.set(\"secondary_account_uuid\", \"\");\n                        dataRow.set(\"secondary_account\", new AccountModel());\n                    }\n                }\n            }\n\n            this.dataSourceAutoCalculate();\n        },\n        // Auto Calculate In DataSource\n        dataSourceAutoCalculate() {\n            // Sum Amount\n            this.budgetLineDS.data().forEach(value => {\n                let sumAmt = 0;\n                value.monthly_amount.forEach(ele => {\n                    sumAmt += ele.amount;\n                });\n                value.set(\"amount\", sumAmt);\n            });\n        },\n        // Shrink Data\n        shrinkData() {\n            // Segment\n            this.budget.segment_uuid = this.segment.id;\n\n            // Lines\n            let lines = [];\n            this.budgetLineDS.data().forEach(value => {\n                // Add account line with amount not 0\n                if(value.amount !== 0){\n                    /* Apply Nature */\n                    if(value.account.account_type.nature.toLowerCase() === \"cr\"){\n                        /* Amount */\n                        value.amount = value.amount * -1;\n\n                        /* Monthly Amount */\n                        value.monthly_amount.forEach(ele => {\n                            ele.amount = ele.amount * -1;\n                        });\n                    }\n\n                    lines.push(new BudgetLineModel(value));\n                }\n            });\n            this.budget.lines = lines;\n\n            // User\n            if (this.isEdit) {\n                this.budget.modified_by = this.user;\n            } else {\n                this.budget.created_by = this.user;\n            }\n        },\n        // Validating\n        validateForm() {\n            let result = true,\n                msg = \"\";\n\n            // Name\n            if(this.budget.name === ''){\n                msg += `<p>${i18n.t(\"name_is_required\")}</p>`;\n                result = false;\n            }\n\n            // Segment\n            if(this.segment.id === ''){\n                msg += `<p>${i18n.t(\"segment_is_required\")}</p>`;\n                result = false;\n            }\n\n            // Segment\n            if(this.budget.fiscal_year.id === ''){\n                msg += `<p>${i18n.t(\"fiscal_date_is_required\")}</p>`;\n                result = false;\n            }\n\n            // Amount\n            let hasZeroAmount = true;\n            this.budgetLineDS.data().forEach(value => {\n                if(value.amount !== 0 ){\n                    hasZeroAmount = false;\n\n                    return false;\n                }\n            });\n            if(hasZeroAmount){\n                msg += `<p>${i18n.t(\"please_enter_amount\")}</p>`;\n                result = false;\n            }\n\n            // Show Alert\n            this.errorMessage = msg;\n            this.alert = false;\n            if (result === false) {\n                this.alert = true;\n            }\n\n            return result;\n        },\n        // All Saves\n        async onSaveOptionClick(mode) {\n            if (this.$refs.form.validate() && this.validateForm()) {\n                this.saveMode = mode;\n                this.save();\n            }\n        },\n        cancel() {\n            this.$swal({\n                title: i18n.t('msg_title_warning'),\n                text: i18n.t('msg_discard'),\n                icon: \"warning\",\n                showCancelButton: true,\n                cancelButtonText: i18n.t('cancel'),\n                confirmButtonColor: \"#4d4848\",\n                cancelButtonColor: \"#ED1A3A\",\n                confirmButtonText: i18n.t('discard'),\n            }).then((result) => {\n                if (result.value) {\n                    this.clear();\n                    this.$router.go(-1);\n                }\n            });\n        },\n        clear() {\n            this.isEdit = false;\n            this.saveMode = '';\n\n            this.budget = new BudgetModel();\n            this.segment = new SegmentModel(),\n\n            // Datasoure\n            this.budgetLineDS.data([]);\n\n            this.setDefaultData();\n        },\n        save() {\n            let self = this;\n\n            // Shrink Data\n            this.shrinkData();\n\n            // Sync Data\n            this.showLoading = true;\n            budgetHandler.save(this.budget)\n                .then((response) => {\n                    if (response) {\n                        /* Update Vuex Data */\n                        this.$store.dispatch('budgets/saveBudget', response.data);\n\n                        self.responseStatus(response);\n                    }else{\n                        this.$snotify.error(i18n.t(\"error_something_wrong\"));\n                    }\n                })\n                .catch((error) => {\n                    self.showLoading = false;\n\t\t\t\t\tthis.$snotify.error(error);\n                })\n                .finally(()=>{\n                    self.showLoading = false;\n                });\n        },\n        // Response Status\n        responseStatus(response) {\n            if (response.status === 200) {\n                /* Save Close or Delete Action */\n\t\t\t\tif (\n\t\t\t\t\tthis.saveMode === SaveOption.SAVECLOSE ||\n\t\t\t\t\tthis.saveMode === SaveOption.DELETE\n\t\t\t\t) {\n\t\t\t\t\tif (this.isEdit) {\n\t\t\t\t\t\tthis.$router.go(-1);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t/* Reset Data */\n\t\t\t\tthis.clear();\n\n                /* Alert Success */\n                this.$snotify.success(i18n.t(\"successful\"));\n            } else {\n                /* Alert Error */\n                this.$snotify.error(i18n.t(\"error_something_wrong\"));\n            }\n        },\n        // On Reporint Language Changes\n        onReportingLanguageChanges() {\n            this.fieldName = \"account.name\";\n            if(this.reportingLanguage === \"local\"){\n                this.fieldName = \"account.local_name\";\n            }\n\n            this.generateColumn();\n        },\n    },\n    watch: {\n        initBudget: \"initialData\"\n    },\n    computed: mapState({\n        accounts: state => state.accounting.accounts,\n        secondaryAccounts: state => state.accounting.secondaryAccounts,\n        segments: state => state.segments.list,\n    }),\n    mounted () {\n        // Initial Data\n        this.initialData();\n        this.generateColumn();\n        this.initialTreeList();\n\n        /* Datasource bind functions */\n        this.budgetLineDS.bind(\"change\", this.onDataSourceChanges);\n    },\n};\n</script>\n\n<style scoped>\n.function_content {\n    padding: 0 25px 25px;\n    border-bottom: 0;\n    background-color: #fff !important;\n}\n\n@media (min-width: 1264px) {\n    .container {\n        max-width: 1185px;\n        /* max-width: 1080px !important; */\n    }\n}\n\n.grayBg {\n    background-color: #F8F8F9;\n}\n\n@media (max-width: 576px) {\n    .mb-6 {\n        margin-bottom: 0 !important;\n    }\n}\n\n.section2 {\n    border: 1px solid #d6d7d8;\n}\n\n.border_grey {\n    border: 1px solid #d6d7d8;\n}\n\n.attachment_table {\n    width: 100%;\n}\n\n.greyDark {\n    background-color: #f2f2f2;\n}\n\n.upload_btn {\n    width: 54%;\n    margin: auto;\n    padding: 10px 6px;\n    text-align: center;\n    color: #ffff;\n    border-radius: 22px;\n    background: #92d050;\n}\n\n.my_box_min_heihgt {\n    height: 295px;\n}\n\n.width_100 {\n    width: 100px;\n}\n.v-data-table.simple_table.theme--light{\n    border-top: thin solid rgba(0, 0, 0, 0.12) !important;\n}\n.v-data-table.simple_table > .v-data-table__wrapper > table > tbody > tr > td {\n    height: 32px !important;\n    border-bottom: thin solid rgba(0, 0, 0, 0.12) !important;\n    border-right: thin solid rgba(0, 0, 0, 0.12) !important;\n}\n.theme--light.v-data-table.simple_table > .v-data-table__wrapper > table > thead > tr > th{\n    border-bottom: thin solid rgba(0, 0, 0, 0.12) !important;\n}\n.theme--light.v-data-table.simple_table > .v-data-table__wrapper > table > thead > tr:last-child > th{\n    border-right: thin solid rgba(0, 0, 0, 0.12) !important;\n}\n.theme--light.v-data-table.simple_table > .v-data-table__wrapper > table > thead > tr > th:last-child,\n.v-data-table.simple_table > .v-data-table__wrapper > table > tbody > tr > td:last-child{\n    border-right: none !important;\n}\n.theme--light.v-data-table > .v-data-table__wrapper > table > tbody > tr:hover:not(.v-data-table__expanded__content):not(.v-data-table__empty-wrapper) {\n    background-color: transparent !important;\n}\n\n.primary--text.text-left.v-btn:hover,\n.theme--light.v-btn:hover::before{\n    background: none !important;\n}\n</style>\n"]}]}