{"remainingRequest":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/src/views/payroll/payment/cash_payment/CashPayment.vue?vue&type=style&index=0&id=c6e9326a&scoped=true&lang=css&","dependencies":[{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/src/views/payroll/payment/cash_payment/CashPayment.vue","mtime":1638499443260},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/@vue/cli-service/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgogICAgLnRoZW1lLS1saWdodC52LWRhdGEtdGFibGUgPiAudi1kYXRhLXRhYmxlX193cmFwcGVyID4gdGFibGUgPiB0Ym9keSA+IHRyOm5vdCg6bGFzdC1jaGlsZCkgPiB0ZDpub3QoLnYtZGF0YS10YWJsZV9fbW9iaWxlLXJvdyksCiAgICAudGhlbWUtLWxpZ2h0LnYtZGF0YS10YWJsZSA+IC52LWRhdGEtdGFibGVfX3dyYXBwZXIgPiB0YWJsZSA+IHRib2R5ID4gdHI6bm90KDpsYXN0LWNoaWxkKSA+IHRoOm5vdCgudi1kYXRhLXRhYmxlX19tb2JpbGUtcm93KSB7CiAgICAgICAgYm9yZGVyLWJvdHRvbTogdGhpbiBzb2xpZCAjZGRkOwogICAgfQoKICAgIC52LWRhdGEtdGFibGUgPiAudi1kYXRhLXRhYmxlX193cmFwcGVyID4gdGFibGUgPiB0Ym9keSA+IHRyID4gdGQgewogICAgICAgIGhlaWdodDogMzJweCAhaW1wb3J0YW50OwogICAgICAgIGJvcmRlci1ib3R0b206IHRoaW4gc29saWQgcmdiYSgwLCAwLCAwLCAwLjEyKSAhaW1wb3J0YW50OwogICAgICAgIGJvcmRlci10b3A6IHRoaW4gc29saWQgcmdiYSgwLCAwLCAwLCAwLjEyKSAhaW1wb3J0YW50OwogICAgfQogICAgLnYtdGV4dC1maWVsZF9fZGV0YWlsc3sKICAgICAgICBkaXNwbGF5OiBub25lICFpbXBvcnRhbnQ7CiAgICB9CgpAbWVkaWEgKG1pbi13aWR0aDogMTI2NHB4KSB7CiAgICAuY29udGFpbmVyIHsKICAgICAgICBtYXgtd2lkdGg6IDEwODBweCAhaW1wb3J0YW50OwogICAgfQoKfQoKLmstZHJvcGRvd24gewogICAgd2lkdGg6IDEwMCU7CiAgICBtYXJnaW4tdG9wOiAzcHg7Cn0K"},{"version":3,"sources":["CashPayment.vue"],"names":[],"mappingsw5BA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA","file":"CashPayment.vue","sourceRoot":"src/views/payroll/payment/cash_payment","sourcesContent":["<template>\n    <v-app>\n        <v-container>\n            <v-row>\n                <v-col cols=\"12\" sm=\"12\">\n                    <v-card outlined dense class=\"pa-4 no_border rounded-sm\" color=\"white\">\n                        <v-form ref=\"form\" v-model=\"valid\" lazy-validation>\n                            <v-card outlined dense class=\"no_border\">\n                                <h2 class=\"mb-0\">{{ $t('cash_payment') }}</h2>\n                                <v-icon\n                                    @click=\"cancel()\"\n                                    style=\"cursor: pointer; color: #333; font-size: 40px;\"\n                                    class=\"float-right\"\n                                >close\n                                </v-icon>\n                            </v-card>\n                            <v-card outlined dense class=\"px-3 no_border mb-3\" color=\"white\">\n                                <v-row class=\"grayBg\">\n                                    <v-col sm=\"4\" cols=\"12\" class=\"pb-0\">\n                                        <label class=\"label\">{{ $t(\"employee\") }}</label>\n                                        <v-autocomplete\n                                            v-model=\"employeeSelect\"\n                                            style=\"padding-top: 0px\"\n                                            :items=\"employees\"\n                                            item-value=\"id\"\n                                            :filter=\"employeeFilter\"\n                                            item-text=\"name\"\n                                            :search-input.sync=\"search\"\n                                            hide-no-data\n                                            hide-selected\n                                            placeholder=\"Start typing to Search\"\n                                            @change=\"employeeChange\"\n                                            return-object\n                                            outlined\n                                            append-icon=\"mdi-database-search\"\n                                        />\n                                    </v-col>\n                                    <v-col sm=\"4\" cols=\"12\" class=\"pb-0\">\n                                        <label class=\"label\">{{ $t(\"date\") }}</label>\n                                        <app-datepicker :initialDate=\"start_date\"  @emitDate=\"start_date = $event\" hint=\"MM/DD/YYYY format\"/>\n                                    </v-col>\n                                    <v-col sm=\"4\" cols=\"12\" class=\"pb-0\">\n                                        <label>{{ $t('payment_number') }}</label>\n                                        <v-row class=\"my-3 mr-0\">\n                                            <v-col sm=\"3\" cols=\"3\" class=\"pt-0 pr-0\">\n                                                <div style=\"line-height: 20px;\" class=\"code_text text-bold\">{{\n                                                    prefix.abbr}}\n                                                </div>\n                                            </v-col>\n                                            <v-col sm=\"7\" cols=\"7\" class=\"pt-0 pl-0 pr-1\">\n                                                <v-text-field class=\" custom-border \"\n                                                    v-model=\"number\"\n                                                    outlined\n                                                    :rules=\"[v => !!v || 'Number is required']\"\n                                                    required\n                                                    readonly/>\n                                            </v-col>\n                                            <v-col sm=\"2\" cols=\"2\" class=\"pt-0 px-0\">\n                                                <v-icon color=\"black\" size=\"30\" class=\"border_qrcode\"\n                                                        @click=\"generateNumber\">mdi-qrcode\n                                                </v-icon>\n                                            </v-col>\n                                        </v-row>\n                                    </v-col>\n                                </v-row>\n                                <v-row>\n                                    <v-col cols=\"12\">\n                                        <kendo-datasource ref=\"dataSourcePayment\"\n                                            :data=\"resultAR\"\n                                            :change=\"dataSourceChanged\"\n                                            />\n                                            <kendo-grid id=\"grid\" class=\"grid-function\"\n                                                :data-source-ref=\"'dataSourcePayment'\"\n                                                :sortable=\"false\"\n                                                :filterable=\"false\"\n                                                :column-menu=\"true\"\n                                                :editable=\"true\"\n                                                :scrollable-virtual=\"true\">\n                                                <kendo-grid-column\n                                                    :title=\"$t('month_of')\"\n                                                    :width=\"150\"\n                                                    :field=\"'monthOf'\"\n                                                    :column-menu=\"false\"\n                                                    :editable=\"()=>{ return false}\"\n                                                    :template=\"'<span>#=monthOf#</span>'\"\n                                                    :headerAttributes=\"{style: 'background-color: #EDF1F5;', class: 'text-products'}\"\n                                                    :attributes=\"{style: 'text-align: products'}\"/>\n                                                <kendo-grid-column\n                                                    :field=\"'slipNumber'\"\n                                                    :title=\"$t('pay_slip')\"\n                                                    :width=\"150\"\n                                                    :editable=\"()=>{ return false}\"\n                                                    :template=\"'<span>#=slipNumber#</span>'\"\n                                                    :headerAttributes=\"{\n                                                    style: 'background-color: #EDF1F5'}\"/>\n                                                <kendo-grid-column\n                                                    :field=\"'paymentCode'\"\n                                                    :title=\"$t('payment_code')\"\n                                                    :width=\"170\"\n                                                    :editable=\"()=>{ return false}\"\n                                                    :template=\"'<span>#=paymentCode#</span>'\"\n                                                    :headerAttributes=\"{\n                                                    style: 'background-color: #EDF1F5'}\"/>\n                                                <kendo-grid-column\n                                                    :field=\"'payDate'\"\n                                                    :title=\"$t('pay_date')\"\n                                                    :width=\"170\"\n                                                    :editable=\"()=>{ return false}\"\n                                                    :template=\"'<span>#=payDate#</span>'\"\n                                                    :headerAttributes=\"{\n                                                    style: 'background-color: #EDF1F5'}\"/>\n                                                <kendo-grid-column\n                                                    :field=\"'totalBenefit'\"\n                                                    :title=\"$t('Benefit')\"\n                                                    :width=\"150\"\n                                                    :hidden=\"true\"\n                                                    :editable=\"()=>{ return false}\"\n                                                    :template=\"'<span>#=kendo.toString(totalBenefit, `n2`)#</span>'\"\n                                                    :headerAttributes=\"{\n                                                    style: 'background-color: #EDF1F5'}\"\n                                                    :attributes=\"{style: 'text-align: right; '}\"/>\n                                                <kendo-grid-column\n                                                    :field=\"'taxBenefit'\"\n                                                    :title=\"$t('tax_benefit')\"\n                                                    :width=\"150\"\n                                                    :hidden=\"true\"\n                                                    :format=\"'{0:#,##0.##;(#,##0.##)}'\"\n                                                    :editable=\"()=>{ return false}\"\n                                                    :headerAttributes=\"{\n                                                    style: 'background-color: #EDF1F5'}\"\n                                                    :attributes=\"{style: 'text-align: right; '}\"/>\n                                                <kendo-grid-column\n                                                    :field=\"'amount'\"\n                                                    :title=\"$t('amount')\"\n                                                    :width=\"150\"\n                                                    :editable=\"()=>{ return false}\"\n                                                    :template=\"'<span>#=kendo.toString(amount, `n2`)#</span>'\"\n                                                    :headerAttributes=\"{\n                                                    style: 'background-color: #EDF1F5'}\"\n                                                    :attributes=\"{style: 'text-align: right; '}\"/>\n                                                <kendo-grid-column\n                                                    :field=\"'netSalary'\"\n                                                    :title=\"$t('net_salary')\"\n                                                    :width=\"150\"\n                                                    :hidden=\"true\"\n                                                    :editable=\"()=>{ return false}\"\n                                                    :template=\"'<span>#=kendo.toString(netSalary, `n2`)#</span>'\"\n                                                    :headerAttributes=\"{\n                                                    style: 'background-color: #EDF1F5'}\"\n                                                    :attributes=\"{style: 'text-align: right; '}\"/>\n                                                <kendo-grid-column\n                                                    :field=\"'currency'\"\n                                                    :title=\"$t('currency')\"\n                                                    :width=\"150\"\n                                                    :editable=\"()=>{ return false}\"\n                                                    :template=\"'<span>#=currency.code#</span>'\"\n                                                    :headerAttributes=\"{\n                                                    style: 'background-color: #EDF1F5; text-align: center'}\"\n                                                    :attributes=\"{style: 'text-align: center; '}\"/>\n                                                <kendo-grid-column\n                                                    :field=\"'paidAmount'\"\n                                                    :title=\"$t('paid_amount')\"\n                                                    :width=\"200\"\n                                                    :lockable=\"false\"\n                                                    :template=\"'<span>#= kendo.toString(paidAmount,`n2`)#</span>'\"\n                                                    :editor=\"paidAmountEditor\"\n                                                    :headerAttributes=\"{style: 'text-align: right; background-color: #EDF1F5'}\"\n                                                    :attributes=\"{style: 'text-align: right; '}\"/>\n                                                <kendo-grid-column\n                                                    :field=\"'paymentOption'\"\n                                                    :title=\"$t('payment_option')\"\n                                                    :width=\"200\"\n                                                    :lockable=\"false\"\n                                                    :editor=\"paymentOptionEditor\"\n                                                    :template=\"'<span>#= paymentOption.name#</span>'\"\n                                                    :headerAttributes=\"{style: 'text-align: right; background-color: #EDF1F5'}\"\n                                                    :attributes=\"{style: 'text-align: right; '}\"/>\n                                                <kendo-grid-column\n                                                    :field=\"'segment'\"\n                                                    :title=\"$t('segment')\"\n                                                    :width=\"200\"\n                                                    :template=\"'<span>#= segment.name#</span>'\"\n                                                    :headerAttributes=\"{style: 'text-align: right; background-color: #EDF1F5'}\"\n                                                    :attributes=\"{style: 'text-align: right; '}\"/>\n                                                <kendo-grid-column\n                                                    :width=\"100\"\n                                                    :command=\"{iconClass: 'k-icon k-i-trash', text: ' ', click: removeRow, class: 'btn-plus'}\"\n                                                    :title=\"$t('action')\"\n                                                    :headerAttributes=\"{style: 'text-align: left; background-color: #EDF1F5'}\"\n                                                    :attributes=\"{style: 'text-align: center;'}\"/>\n                                            </kendo-grid>\n                                    </v-col>\n                                    <v-col cols=\"12\" class=\"py-0\">\n                                        <v-row>\n                                            <v-col md=\"4\" sm=\"5\" cols=\"12\" class=\"py-0\">\n                                                <v-file-input class=\"mt-0 pt-0 \"\n                                                    v-model=\"files\"\n                                                    :placeholder=\"$t('attachment')\"\n                                                    multiple\n                                                    prepend-icon=\"mdi-paperclip\">\n                                                    <template v-slot:selection=\"{ text }\">\n                                                        <v-chip\n                                                            small\n                                                            label\n                                                            color=\"primary\">\n                                                            {{ text }}\n                                                        </v-chip>\n                                                    </template>\n                                                </v-file-input>\n                                            </v-col>\n                                             <v-col md=\"4\" sm=\"2\" cols=\"12\" class=\"py-0\"></v-col>\n                                            <v-col md=\"4\" sm=\"5\" cols=\"12\" class=\"py-0\">\n                                                <v-simple-table>\n                                                    <template v-slot:default>\n                                                        <tbody>\n                                                            <tr>\n                                                                <td class=\"text-left text-uppercase pr-0\">{{\n                                                                    $t('total')\n                                                                    }}\n                                                                </td>\n                                                                <td class=\"text-center\">:</td>\n                                                                <td class=\"text-right primary--text text-bold\"\n                                                                    id=\"total\">\n                                                                    {{amountFormat(totalNetPay)}}\n                                                                </td>\n                                                            </tr>\n                                                        </tbody>\n                                                    </template>\n                                                </v-simple-table>\n                                            </v-col>\n                                        </v-row>\n                                    </v-col>\n                                    <v-col sm=\"6\" class=\"py-0\">\n                                        <v-row>\n                                            <v-col sm=\"6\" cols=\"12\" class=\"py-0\">\n                                                <label>{{$t('message_on_payment')}}</label>\n                                                <v-textarea height=\"80px\"\n                                                    no-resize\n                                                    outlined\n                                                    rows=\"4\"\n                                                    v-model=\"messageOnPayment\"\n                                                />\n                                            </v-col>\n                                            <v-col sm=\"6\" cols=\"12\" class=\"py-0\">\n                                                <label>{{$t('message_on_journal')}}</label>\n                                                <v-textarea height=\"80px\"\n                                                    v-model=\"messageOnJournal\"\n                                                    no-resize\n                                                    outlined\n                                                    rows=\"4\"\n                                                />\n                                            </v-col>\n                                        </v-row>\n                                    </v-col>\n                                </v-row>\n                            </v-card>\n                            <v-divider class=\"mt-4\"/>\n                            <v-card outlined dense class=\"no_border function_footer\">\n                                <v-menu>\n                                    <template v-slot:activator=\"{ on }\">\n                                        <v-btn color=\"black\" outlined class=\"mr-2 text-capitalize  black--text float-left\" v-on=\"on\">\n                                            {{$t('select_template')}}\n                                            <v-icon size=\"\" class=\"ma-1\">expand_more</v-icon>\n                                        </v-btn>\n                                    </template>\n                                    <v-list>\n                                        <v-list-item v-for=\"(item, index) in templates\" :key=\"index\">\n                                            <v-list-item-title>{{ item.title }}</v-list-item-title>\n                                        </v-list-item>\n                                    </v-list>\n                                </v-menu>\n                                <v-btn color=\"black\"  class=\"text-capitalize  white--text float-left\" @click=\"cancel\">{{$t('cancel')}}</v-btn>\n                                <!-- <v-menu>\n                                    <template v-slot:activator=\"{ on }\">\n                                        <v-btn class=\"ml-2 float-right text-capitalize  white--text\"\n                                                color=\"primary\" v-on=\"on\">\n                                            {{ $t('save_option') }}\n                                            <v-icon size=\"\" class=\"ma-1\">expand_more</v-icon>\n                                        </v-btn>\n                                    </template>\n                                    <v-list rounded>\n                                        <v-list-item-group>\n                                            <v-list-item>\n                                                <v-list-item-content>\n                                                    <v-list-item-title @click=\"saveNew\">\n                                                        {{ $t('save_new') }}\n                                                    </v-list-item-title>\n                                                </v-list-item-content>\n                                            </v-list-item>\n                                            <v-list-item>\n                                                <v-list-item-content>\n                                                    <v-list-item-title>{{\n                                                            $t('save_close')\n                                                        }}\n                                                    </v-list-item-title>\n                                                </v-list-item-content>\n                                            </v-list-item>\n                                        </v-list-item-group>\n                                    </v-list>\n                                </v-menu> -->\n                                <v-btn class=\"float-right text-capitalize  white--text\"\n                                        color=\"primary\" @click=\"saveClose\">\n                                    {{ $t('save_close') }}\n                                </v-btn>\n                            </v-card>\n                        </v-form>\n                        <LoadingMe\n                            :isLoading=\"showLoading\"\n                            :fullPage=\"false\"\n                            :myLoading=\"true\"\n                            type=\"loading\"\n                       />\n                    </v-card>\n                </v-col>\n            </v-row>\n        </v-container>\n    </v-app>\n</template>\n\n<script>\n    import {i18n} from '@/i18n';\n    import LoadingMe from \"@/components/Loading\";\n    import DatePickerComponent from '@/components/custom_templates/DatePickerComponent'\n    import kendo from \"@progress/kendo-ui\"\n    import Helper from \"@/helper.js\";\n    import {JournalModel,\n        JournalEntryModel,\n        AccountModel,\n        CurrencyModel,} from \"@/scripts/model/AppModels\";\n    const { EntityType, } = require(\"@/scripts/default_setup/Collections\");\n    const employeeHandler   = require(\"@/scripts/employeeHandler\")\n    const payrollHandler    = require(\"@/scripts/payrollHandler\")\n    const settingsHandler   = require(\"@/scripts/settingsHandler\")\n    const paymentOptionHandler = require(\"@/scripts/paymentOptionHandler\");\n    const cookieJS = require(\"@/cookie.js\");\n    const cookie = cookieJS.getCookie();\n    export default {\n        name: \"Task\",\n        components: {\n            'LoadingMe': LoadingMe,\n            'app-datepicker' : DatePickerComponent\n        },\n        data: () => ({\n            showLoading: false,\n            template: [],\n            start_date: '',\n            files: [],\n            templates: [],\n            result:  [],\n            valid: true,\n            employees: [],\n            employeeSelect: '',\n            search: null,\n            totalNetPay: 0,\n            totalAmountPay: 0,\n            prefix:'',\n            number: '',\n            messageOnPayment: '',\n            messageOnJournal: '',\n            selectAccount: '',\n            accounts: [],\n            transations: [],\n            paymentOption: [],\n            resultPay: [],\n            raw_journal: [],\n            resultAR: [],\n            resultPayment: [],\n            payrollLiabilitie: {},\n            resultJournals: [],\n            payNumber:  {},\n            loggedUser: {\n                id: cookie.creator,\n                name: cookie.email\n            },\n            prefix_format: ''\n        }),\n        methods:{\n            amountFormat(value){\n                return kendo.toString(value,'n2');\n            },\n            async loadEmployee(){\n                new Promise(resolve => {\n                    setTimeout(() => {\n                        resolve('resolved')\n                        employeeHandler.center().then(res => {\n                            this.showLoading = true\n                            if (res.data.statusCode === 200) {\n                                this.showLoading = false\n                                this.employees = res.data.data\n                                this.start_date = new Date().toISOString().substr(0, 10)\n                            }\n                        }).catch()\n                        {\n                            this.showLoading = false\n                        }\n                    }, 300)\n                })\n            },\n            employeeFilter(item, queryText){\n                const textOne = item.name.toLowerCase()\n                const textTwo = item.employeeId.toLowerCase()\n                const searchText = queryText.toLowerCase()\n                return textOne.indexOf(searchText) > -1 ||\n                textTwo.indexOf(searchText) > -1\n            },\n            async payrollTansactions(){\n                let param ={\n                    employeeUuid: this.employeeSelect.id\n                }\n                new Promise(resolve => {\n                    setTimeout(() => {\n                        resolve('resolved')\n                        payrollHandler.getTransaction(param).then(res => {\n                            if (res.data.statusCode === 200) {\n                                this.showLoading = false\n                                this.transations = res.data.data \n                                if(this.transations.length > 0){\n                                    this.payrollLiabilitie = this.transations[0].payrollLiabilitie\n                                    this.loadResult()\n                                    this.initData()\n                                }else{\n                                    this.resultAR = []\n                                }                          \n                            }\n                        }).catch()\n                        {\n                            this.showLoading = false\n                        }\n                    }, 300)\n                })\n            },\n            async loadResult(){\n                let result = this.transations\n                let resultAR = []\n                 for (let i = 0; i < result.length; i ++) {\n                    result[i].segment.forEach(index => {\n                        let calculateNet        = (result[i].amount * index.percentage)/ 100\n                        let calculateGross      = (result[i].grossSalary * index.percentage)/ 100\n                        let calculateTaxBenefit = (-1 * (result[i].taxBenefit * index.percentage)/ 100) + 0.07\n                        let calculateBenefit = (result[i].totalBenefit * index.percentage)/ 100 \n                        let netSalary = calculateNet - calculateBenefit + calculateTaxBenefit\n                        resultAR.push({\n                            id:                 result[i].id,\n                            amount:             result[i].amount,\n                            paymentCode:        result[i].paymentCode,\n                            monthOf:            result[i].monthOf,\n                            employeeId:         result[i].employeeId,\n                            employeeName:       result[i].employeeName,\n                            location:           result[i].location,\n                            natureEmployee:     result[i].natureEmployee,\n                            salaryType:         result[i].salaryType,\n                            payDate:            result[i].payDate,\n                            payrollId:          result[i].payrollId,\n                            slipNumber:         result[i].slipNumber,\n                            paymentOption:      result[i].paymentOption,\n                            currency:           result[i].currency,\n                            payrollLiabilitie:  result[i].payrollLiabilitie,\n                            netPayFull:         result[i].netPay,\n                            grossSalary:        calculateGross,\n                            netPay:             calculateNet,\n                            netSalary:          netSalary,\n                            taxBenefit:         calculateTaxBenefit,\n                            totalBenefit:       calculateBenefit,\n                            percentage:         index.percentage,\n                            paidAmount:         calculateNet,\n                            segment:            index.component\n                        })\n                    })\n                }\n                this.resultAR = resultAR\n            },\n            employeeChange(){\n                this.payrollTansactions()\n                this.laodPaymentOption()\n            },\n            removeRow(e) {\n                e.preventDefault();\n                const grid = kendo.jQuery(\"#grid\").data(\"kendoGrid\"),\n                    dataSource = grid.dataSource,\n                    dataItem = grid.dataItem(kendo.jQuery(e.currentTarget).closest(\"tr\"));\n                if (dataSource.total() > 1) {\n                    dataSource.remove(dataItem);\n                    this.initData()\n                }\n            },\n            async initData(){\n                let ds = this.$refs.dataSourcePayment.kendoWidget();\n                let result = ds.data()\n                let totale = 0;\n                let totalNet = 0;\n                result.forEach(function(r){\n                    window.console.log('123456789', r)\n                    if(r.paidAmount && r.paymentOption.name !== ''){\n                        totale      += parseFloat(r.paidAmount)\n                        totalNet    += parseFloat(r.netPay)\n                    }\n                })\n                this.totalAmountPay = totale\n                this.totalNetPay    = totalNet\n                this.calculateJournal()\n            },\n            loadPrefixes() {\n                new Promise(resolve => {\n                    setTimeout(() => {\n                        resolve('resolved');\n                        settingsHandler.getPrefixes().then(res => {\n                            if (res.data.statusCode === 200) {\n                                let result = res.data.data\n                                this.prefixList = result.filter(p => p.type =='payroll_payment')\n                                this.prefix = this.prefixList[0]\n                                this.payNumber = this.prefix\n                                const lastNumber = this.zeroPad(parseInt(0), this.prefix.format)\n                                this.prefix_format = (this.prefix.abbr + this.prefix.numberSeparator + this.prefix.structure + this.prefix.numberSeparator + lastNumber + '@' + this.prefix.sequcencing)\n                            }\n                        })\n                    }, 300)\n                })\n            },\n            generateNumber() {\n                if(this.resultPayment.length == 0){\n                    let sequcencing = ''\n                    if(this.payNumber.sequcencing ==\"Year\"){\n                        sequcencing = new Date(this.start_date).toISOString().substr(0, 4)\n                    }else if(this.payNumber.sequcencing ==\"Month\"){\n                        sequcencing = new Date(this.start_date).toISOString().substr(0, 7)\n                    }else{\n                        sequcencing = ''\n                    }\n                    new Promise(resolve => {\n                        setTimeout(() => {\n                            resolve('resolved');\n                            let data = {\n                                abbr:       this.payNumber.abbr,\n                                structure:  this.payNumber.structure,\n                                date:       new Date(this.start_date),\n                                type:       'payroll_payment',\n                                pkId:       'ppm-',\n                                sequcencing: sequcencing\n                            }\n                            payrollHandler.getPrefixNumber(data).then(res => {\n                                this.showLoading = true;\n                                if(res.data.statusCode === 200){\n                                    this.showLoading = false;\n                                    const result = res.data.data\n                                    const lastNumber = this.zeroPad(parseInt(result.lastNumber), this.payNumber.format)\n                                    const number = result.suffix + this.payNumber.numberSeparator + lastNumber\n                                    this.lastNumber = lastNumber\n                                    this.number = number\n                                }\n                            })\n                        }, 300);\n                    })\n                }else{\n                    this.lastNumber = this.resultPay.lastNumber\n                    this.number = this.resultPay.number\n                }\n            },\n            zeroPad(num, places) {\n                return String(num).padStart(places, '0')\n            },\n            saveClose(){\n                let ds = this.$refs.dataSourcePayment.kendoWidget();\n                let d1 = ds.data().filter(i => i.paymentOption.name !=='' && i.paidAmount > 0)\n                if(d1.length > 0){\n                    this.initData()\n                    new Promise(resolve => {\n                        setTimeout(() => {\n                            resolve('resolved');\n                            const result = d1.map(o => {\n                                return {\n                                    employeeId:         o.employeeId,\n                                    employeeName:       o.employeeName,\n                                    grossSalary:        o.grossSalary,\n                                    id:                 o.id,\n                                    amount:             o.amount,\n                                    paymentCode:        o.paymentCode,\n                                    payDate:            o.payDate,\n                                    location:           o.location,\n                                    monthOf:            o.monthOf,\n                                    natureEmployee:     o.natureEmployee,\n                                    netPay:             o.netPay,\n                                    netSalary:          o.netSalary,\n                                    paidAmount:         o.paidAmount,\n                                    paymentOption:      o.paymentOption,\n                                    percentage:         o.percentage,\n                                    slipNumber:         o.slipNumber,\n                                    salaryType:         o.salaryType,\n                                    currency:           o.currency,\n                                    segment:            o.segment,\n                                    taxBenefit:         o.taxBenefit,\n                                    totalBenefit:       o.totalBenefit,  \n                                    payrollLiabilitie:  o.payrollLiabilitie,\n                                    payrollId:          o.payrollId,\n                                    netPayFull:         o.netPayFull\n                                }\n                            })\n                            let helper = {};\n                            let resPay = result.reduce(function(r, o) {\n                                let key = o.payrollId;\n                                if(!helper[key]) {\n                                    helper[key] = Object.assign({}, o); // create a copy of o\n                                    r.push(helper[key]);\n                                } else {\n                                    helper[key].amount += o.amount;\n                                }\n                                return r;\n                            }, []).map(a =>{\n                                 return {\n                                    amount:        a.amount,\n                                    payrollId:     a.payrollId,\n                                    netPayFull:    a.netPayFull\n                                 }\n                            });\n                            if (result.length > 0) {\n                                let data = {\n                                    payment_data: {\n                                        id:                   this.resultPay.id ? this.resultPay.id: '',\n                                        created:              kendo.toString(new Date(this.start_date),'yyyy-MM-dd'),\n                                        amountPay:            parseFloat(this.totalAmountPay),\n                                        netPay:               parseFloat(this.totalNetPay),\n                                        resPay:               resPay,\n                                        number:               this.number,\n                                        payNumber:            this.payNumber,\n                                        referenceNumber:      this.payNumber.abbr+this.payNumber.numberSeparator + this.number,\n                                        abbr:                 this.payNumber.abbr,\n                                        method:               \"payroll_payment\",\n                                        lastNumber:           parseInt(this.lastNumber),\n                                        messageOnJournal:     this.messageOnJournal,\n                                        messageOnPayment:     this.messageOnPayment,\n                                        payrollLiabilitie:    this.payrollLiabilitie,\n                                        paymentline:          result,\n                                        employee:             this.employeeSelect,\n                                    },\n                                    raw_journal:              this.raw_journal,\n                                    loggedUser:               this.loggedUser\n                                }\n                                this.showLoading = true\n                                window.console.log('data', data)\n                                payrollHandler.createPayment(data).then(response => {\n                                    this.showLoading = true\n                                    if (response.data.statusCode === 201) {\n                                        this.close() \n                                    }\n                                }).catch(e => {\n                                    this.$snotify.error('Something went wrong')\n                                    this.showLoading = false\n                                    this.errors.push(e)\n                                    this.close()\n                                })\n                            }else{\n                                this.$snotify.error('Please check again')\n                            }\n                        }, 300);\n                    })\n                }else{\n                     this.$snotify.error('Please check again')\n                }\n            },\n            saveNew(){\n                \n            },\n            close(){\n                this.$router.go(-1);\n                this.clear()\n            },\n            clear(){\n                this.employeeSelect = ''\n                this.start_date = ''\n                this.resultAR = []\n                this.messageOnPayment = ''\n                this.messageOnJournal = ''\n                this.totalNetPay = 0\n                this.loadPrefixes()\n            },\n            paidAmountEditor(container, options) {\n                kendo.jQuery('<input data-bind=\"value:' + options.field + '\"/>')\n                    .appendTo(container)\n                    .kendoNumericTextBox({\n                        decimals: 30,\n                    });\n            },\n            paymentOptionEditor(container, options){\n                kendo.jQuery('<input name=\"' + options.field + '\"/>')\n                .appendTo(container)\n                .kendoDropDownList({\n                    autoBind: true,\n                    autoWidth: true,\n                    height: 400,\n                    filter: \"contains\",\n                    dataTextField: \"name\",\n                    dataValueField: \"name\",\n                    template: \"<span>#=name#</span>\",\n                    optionLabel: \"--- Select ---\",\n                    dataSource: new kendo.data.DataSource({\n                        data: this.paymentOption,\n                    })\n                })\n            },\n            dataSourceChanged(e) {\n                if (e.field) {\n                    this.initData()\n                }\n            },\n            calculateJournal(){\n                let ds = this.$refs.dataSourcePayment.kendoWidget();\n                let dataSource = ds.data().map(i=>{\n                    return {\n                        currency:           i.currency,\n                        employeeId:         i.employeeId,\n                        employeeName:       i.employeeName,\n                        grossSalary:        i.grossSalary,\n                        id:                 i.id,\n                        location:           i.location,\n                        monthOf:            i.monthOf,\n                        paymentCode:        i.paymentCode,\n                        natureEmployee:     i.natureEmployee,\n                        netPay:             i.netPay,\n                        netSalary:          i.netSalary,\n                        paidAmount:         i.paidAmount,\n                        paymentOption:      i.paymentOption,\n                        payrollLiabilitie:  i.payrollLiabilitie,\n                        percentage:         i.percentage,\n                        slipNumber:         i.slipNumber,\n                        salaryType:         i.salaryType,\n                        segment:            i.segment,\n                        taxBenefit:         i.taxBenefit,\n                        totalBenefit:       i.totalBenefit,\n                    }\n                })\n                let lastResult = {}\n                let last_result = dataSource.reduce(function(m, n) {\n                    let key = n.paymentOption.code + n.segment.name\n                    if(!lastResult[key]) {\n                        lastResult[key] = Object.assign({}, n); // create a copy of o\n                        m.push(lastResult[key]);\n                    } else {\n                        lastResult[key].paidAmount          += n.paidAmount;\n                        lastResult[key].totalBenefit        += n.totalBenefit;\n                        lastResult[key].taxBenefit          += n.taxBenefit;\n                        lastResult[key].netPay              += n.netPay;\n                        lastResult[key].netSalary           += n.netSalary;\n                    }\n                    return m;\n                }, []);\n                if(last_result.length > 0){\n                    let journalEntry = []\n                    last_result.forEach(item=>{\n                        if(item.paymentOption.name !== ''){\n                            let descriptionD = item.paymentOption.account\n                            journalEntry.push(\n                                new JournalEntryModel({\n                                    description: item.payrollLiabilitie.name,\n                                    account: new AccountModel(item.payrollLiabilitie),\n                                    currency: new CurrencyModel(item.currency),\n                                    exchange_rate: 1,\n                                    amount:           item.netPay,//Dr,\n                                    class_1_uuid:     item.segment.id\n                                })\n                            )\n                            journalEntry.push(\n                                new JournalEntryModel({\n                                    description: descriptionD.name,\n                                    account: new AccountModel(descriptionD),\n                                    currency: new CurrencyModel(item.currency),\n                                    exchange_rate: 1,\n                                    amount:           item.paidAmount * -1, //Cr\n                                    class_1_uuid:     item.segment.id\n                                })\n                            )\n                        }\n                    })\n                    let journals = []\n                    let prefix_format = this.prefix_format\n                    window.console.log('journalEntry',journalEntry)\n                    last_result.forEach(index=>{\n                        window.console.log('item',index)\n                        if(index.paymentOption.name !==''){\n                            let line = journalEntry.filter(i=>i.class_1_uuid == index.segment.id) \n                            journals.push(new JournalModel({\n                                number:                       this.payNumber.abbr+this.payNumber.numberSeparator + this.number,\n                                journal_date:                 new Date(this.start_date),//'2021-02-01',\n                                created_date:                 new Date(this.start_date),\n                                month_of:                     Helper.toISODate(new Date(this.start_date).toISOString().substr(0, 7)),//'2021-02-01',   \n                                journal_type:                 EntityType.GENERAL_JOURNAL,\n                                transaction_type:             'Payroll Payment',\n                                segment_uuid:                 index.segment.id,\n                                journal_entries:              line,\n                                prefix_format:                prefix_format\n                            }))\n                        }\n                    })\n                    let result_journal = []\n                    let journalUuid     = ''\n                    let created_date    = ''\n                    if(this.resultJournals.length > 0){\n                        let jNal = this.resultJournals\n                        journals.forEach(res =>{\n                            let journalAR =  jNal.filter(n => n.segment_uuid = res.segment_uuid)\n                            if(journalAR.length > 0){\n                                journalUuid = journalAR[0].uuid\n                                created_date = journalAR[0].created_date\n                            }\n                            result_journal.push(new JournalModel( {\n                                uuid:                         journalUuid ? journalUuid: '',\n                                number:                       res.number,\n                                created_date:                 created_date ? created_date: '',\n                                journal_date:                 res.journal_date,\n                                month_of:                     res.month_of,\n                                journal_type:                 res.journal_type,\n                                transaction_type:             res.transaction_type,\n                                segment_uuid:                 res.segment_uuid,\n                                prefix_format:                res.prefix_format,\n                                journal_entries:              res.journal_entries,\n                            }))\n                        })\n                        this.raw_journal = result_journal\n                    }else{\n                        this.raw_journal = journals\n                    }\n                    // window.console.log(this.result_journal)\n                }\n            },\n            laodPaymentOption(){\n                new Promise(resolve => {\n                    setTimeout(() => {\n                        resolve('resolved');\n                        const strFilter = '?optionType=Supplier'\n                        paymentOptionHandler.list(strFilter)\n                        .then(res => {\n                            if(res){\n                                let resultPayOption = res.data\n                                this.paymentOption = resultPayOption.data\n                                this.showLoading = false\n                            }\n                        })\n                    }, 300);\n                })\n            },\n            async loadSinglePayment(){\n                this.showLoading = true\n                new Promise(resolve => {\n                    setTimeout(() => {\n                        resolve('resolved')\n                        this.showLoading = true\n                        payrollHandler.getPaymentSingle(this.$route.params.id).then(res => {\n                            this.showLoading = true\n                            if (res.statusCode === 200) {\n                                if(res.data.length > 0){\n                                    this.resultPay          =  res.data[0]\n                                    this.resultPayment      =  res.data\n                                    this.result             =  res.data\n                                    this.resultAR           = this.resultPay.paymentline\n                                    window.console.log(this.resultAR)\n                                    this.employeeSelect     = this.resultPay.employee\n                                    this.start_date         = new Date(this.resultPay.created).toISOString().substr(0, 10)\n                                    this.number             = this.resultPay.number\n                                    this.messageOnPayment   = this.resultPay.messageOnPayment\n                                    this.messageOnJournal   = this.resultPay.messageOnJournal\n                                    this.payrollLiabilitie  = this.resultPay.payrollLiabilitie\n                                    this.totalNetPay        = parseFloat(this.resultPay.amountPay)\n                                    this.loadJournal()\n                                    this.generateNumber()\n                                    this.showLoading = false\n                                }else{\n                                    this.generateNumber()\n                                    this.loadEmployee()\n                                }\n                            }\n                        }).catch()\n                        {\n                            this.showLoading = false\n                        }\n                    }, 300)\n                })\n            },\n            async loadJournal(){\n                new Promise(resolve => {\n                    setTimeout(() => {\n                        resolve('resolved');\n                        payrollHandler.getPayrollJournal( this.$route.params.id).then(res => {\n                            if (res.statusCode === 200) {\n                                this.resultJournals = res.data\n                            }\n                        })\n                    }, 300)\n                })\n            },\n            cancel(){\n                this.$swal({\n                    title: i18n.t('msg_title_warning'),\n                    text: i18n.t('msg_discard'),\n                    icon: \"warning\",\n                    showCancelButton: true,\n                    cancelButtonText: i18n.t('cancel'),\n                    confirmButtonColor: \"#4d4848\",\n                    cancelButtonColor: \"#ED1A3A\",\n                    confirmButtonText: i18n.t('discard'),\n                }).then((result) => {\n                    if (result.value) {\n                        this.$router.go(-1);\n                        this.clear()\n                    }\n                });\n            }\n        },\n        async mounted(){\n            await this.initData()\n            await this.loadEmployee()\n            await this.loadPrefixes()\n            await this.laodPaymentOption()\n            await this.loadSinglePayment()\n            await this.loadJournal()\n        },\n        watch:{\n            '$route': 'loadSinglePayment'\n        },        \n    };\n</script>\n\n<style scoped>\n    .theme--light.v-data-table > .v-data-table__wrapper > table > tbody > tr:not(:last-child) > td:not(.v-data-table__mobile-row),\n    .theme--light.v-data-table > .v-data-table__wrapper > table > tbody > tr:not(:last-child) > th:not(.v-data-table__mobile-row) {\n        border-bottom: thin solid #ddd;\n    }\n\n    .v-data-table > .v-data-table__wrapper > table > tbody > tr > td {\n        height: 32px !important;\n        border-bottom: thin solid rgba(0, 0, 0, 0.12) !important;\n        border-top: thin solid rgba(0, 0, 0, 0.12) !important;\n    }\n    .v-text-field__details{\n        display: none !important;\n    }\n\n@media (min-width: 1264px) {\n    .container {\n        max-width: 1080px !important;\n    }\n\n}\n\n.k-dropdown {\n    width: 100%;\n    margin-top: 3px;\n}\n</style>\n"]}]}