{"remainingRequest":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/macos/Desktop/banhji-0.2/banhji-commerce/src/views/micro_edition/revenues/Order.vue?vue&type=style&index=0&id=7c4ef35c&scoped=true&lang=css&","dependencies":[{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/src/views/micro_edition/revenues/Order.vue","mtime":1640595536828},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/@vue/cli-service/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgouZnVuY3Rpb25fY29udGVudCAubGFiZWwgewogIG1hcmdpbi1ib3R0b206IDEwcHg7CiAgZGlzcGxheTogaW5saW5lLWJsb2NrOwp9Ci5hbGxfY2VudGVyIHsKICBkaXNwbGF5OiBmbGV4OwogIGp1c3RpZnktY29udGVudDogY2VudGVyOwogIGFsaWduLWl0ZW1zOiBjZW50ZXI7Cn0KCkBtZWRpYSAobWluLXdpZHRoOiAxMjY0cHgpIHsKICAuY29udGFpbmVyIHsKICAgIG1heC13aWR0aDogMTA4MHB4ICFpbXBvcnRhbnQ7CiAgfQp9CgpAbWVkaWEgKG1heC13aWR0aDogNTc2cHgpIHsKICAucHQtNi5jb2wtc20tNS5jb2wtMTIgewogICAgcGFkZGluZy10b3A6IDAgIWltcG9ydGFudDsKICB9CgogIC5jb2RlX3RleHQgewogICAgd2lkdGg6IDEwMCU7CiAgfQoKICAucGhvbmVfbm9fcHQgewogICAgcGFkZGluZy10b3A6IDAgIWltcG9ydGFudDsKICB9CgogIC5zZWxlY3RfdGVtcGxhdGUsCiAgLnNhdmVfb3B0aW9uIHsKICAgIG1hcmdpbi1ib3R0b206IDEwcHg7CiAgfQp9Cg=="},{"version":3,"sources":["Order.vue"],"names":[],"mappingsw6FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"Order.vue","sourceRoot":"src/views/micro_edition/revenues","sourcesContent":["<template>\n  <v-app>\n    <v-container>\n      <v-row>\n        <v-col sm=\"12\" cols=\"12\">\n          <v-card\n            outlined\n            dense\n            class=\"pa-4 no_border rounded-sm\"\n            color=\"white\"\n          >\n            <v-row>\n              <v-col\n                class=\"py-0 pr-2\"\n                sm=\"12\"\n                cols=\"12\"\n                style=\"transition: 0.3s ease-in\"\n                :class=\"{ hide_big_bar_class: isHideBar }\"\n              >\n                <v-form ref=\"form\" v-model=\"valid\" lazy-validation>\n                  <v-card\n                    outlined\n                    dense\n                    class=\"no_border d-flex justify-space-between\"\n                  >\n                    <h2 class=\"mb-0\">{{ saleFormContent.saleOrder }}</h2>\n                    <div class=\"d-flex justify-end\">\n                      <h3\n                        style=\"color: #b3b5bc; font-size: 20px\"\n                        class=\"text-uppercase all_center\"\n                      >\n                        <span class=\"pointer\" @click=\"Help('sale order')\">{{\n                          $t(\"help\")\n                        }}</span>\n                        <v-icon\n                          @click=\"cancel()\"\n                          style=\"cursor: pointer; color: #333; font-size: 40px\"\n                          class=\"float-right mt-n1\"\n                          >close\n                        </v-icon>\n                      </h3>\n                    </div>\n                  </v-card>\n                  <v-card\n                    outlined\n                    dense\n                    class=\"px-3 mb-3 rounded-4 no_border\"\n                    color=\"grayBg\"\n                  >\n                    <v-row>\n                      <v-col sm=\"4\" cols=\"12\" class=\"pb-0\">\n         \n                        <label class=\"label mb-0\">{{\n                          $t(\"customer\")\n                        }}</label>\n                        <div class=\"kendo_dropdown_custom pb-2 mt-1\">\n                          <dropdownlist\n                            class=\"v-input__slot\"\n                            :data-items=\"customerList\"\n                            @change=\"onChange\"\n                            :rules=\"[(v) => !!v || 'Customer is required']\"\n                            :value=\"customer\"\n                            :data-item-key=\"dataItemKey\"\n                            :text-field=\"textField\"\n                            :default-item=\"defaultItem\"\n                            :filterable=\"true\"\n                            @filterchange=\"onFilterChange\"\n                            :required=\"true\"\n                            :valid=\"validCustomer\"\n                            :disabled=\"isEdit\"\n                          >\n                          </dropdownlist>\n                        </div>\n                        <label class=\"label\" style=\"\">{{ $t(\"date\") }}</label>\n                        <app-datepicker\n                          :initialDate=\"saleOrder.transactionDate\"\n                          @onChanged=\"onSaleOrderDateChanged\"\n                          @emitDate=\"saleOrder.transactionDate = $event\"\n                        />\n                      </v-col>\n                      <v-col sm=\"4\" cols=\"12\">\n                        <label class=\"label\">{{ $t(\"number\") }}</label>\n                        <div class=\"mt-1  d-flex mr-0\">\n                          <div class=\"code_text flex-1 text-bold\">\n                            {{ saleOrder.transactionType.abbr }}\n                          </div>\n                          <v-text-field\n                            class=\"flex-2 custom-border\"\n                            disabled\n                            v-model=\"saleOrder.number\"\n                            outlined\n                            :rules=\"[(v) => !!v || 'Number is required']\"\n                            required\n                          />\n                          <v-icon\n                            color=\"black\"\n                            size=\"30\"\n                            style=\"height: 40px\"\n                            class=\"border_qrcode ml-1\"\n                            :disabled=\"disabledMe\"\n                            @click=\"generateNumber\"\n                            >mdi-qrcode\n                          </v-icon>\n                        </div>\n                        <label class=\"label mb-0\">{{\n                          $t(\"price_level\")\n                        }}</label>\n                        <v-select\n                          class=\"mt-1\"\n                          v-model=\"saleOrder.priceLevel\"\n                          :items=\"priceLevel\"\n                          :rules=\"[\n                            (v) => !!v['id'] || 'Price level is required',\n                          ]\"\n                          @change=\"onPriceLevelChange\"\n                          item-value=\"id\"\n                          item-text=\"name\"\n                          return-object\n                          placeholder=\"Price Level\"\n                          outlined\n                        />\n                      </v-col>\n                      <v-col sm=\"4\" cols=\"12\">\n                        <div>\n                          <label class=\" mb-0\">{{ $t(\"currency\") }}</label>\n                          <p class=\"text-bold pt-4 pb-2\">{{ currencyCode }}</p>\n                        </div>\n                        <label class=\"label mb-0\">{{\n                          $t(\"sale_channel\")\n                        }}</label>\n                        <v-select class=\"mt-1\" outlined />\n                      </v-col>\n                    </v-row>\n                  </v-card>\n                  <v-row class=\"pt-1 px-3\" style=\"background-color: #fff\">\n                    <v-col sm=\"12\" cols=\"12\" class=\"pt-0 pb-1 px-0\">\n                      <kendo-datasource\n                        ref=\"itemLineDS\"\n                        :data=\"itemLines\"\n                        :change=\"dataSourceChanged\"\n                      />\n                      <kendo-grid\n                        id=\"gridItemLineSaleOrder\"\n                        class=\"grid-function\"\n                        :data-source-ref=\"'itemLineDS'\"\n                        :sortable=\"false\"\n                        :column-menu=\"true\"\n                        :editable=\"true\"\n                        :scrollable-virtual=\"true\"\n                      >\n                        <kendo-grid-column\n                          :command=\"{\n                            iconClass: 'k-icon k-i-trash',\n                            text: ' ',\n                            click: removeRow,\n                            className: 'btn-plus',\n                          }\"\n                          :title=\"''\"\n                          :width=\"63\"\n                          :headerAttributes=\"{\n                            style:\n                              'text-align: left; background-color: #EDF1F5',\n                          }\"\n                        />\n                        <kendo-grid-column\n                          :title=\"$t('no.')\"\n                          :width=\"53\"\n                          :column-menu=\"false\"\n                          :template=\"rowNumberTmpl\"\n                          :headerAttributes=\"{\n                            style: 'background-color: #EDF1F5;',\n                            class: 'text-products',\n                          }\"\n                          :attributes=\"{ style: 'text-align: products' }\"\n                        />\n                        <kendo-grid-column\n                          :field=\"'item'\"\n                          :title=\"$t('item')\"\n                          :template=\"itemTemplate\"\n                          :editor=\"ItemDropDownEditor\"\n                          :width=\"200\"\n                          :headerAttributes=\"{\n                            style: 'background-color: #EDF1F5',\n                          }\"\n                        />\n                        <kendo-grid-column\n                          :field=\"'description'\"\n                          :title=\"$t('description')\"\n                          :template=\"'<span>#=description#</span>'\"\n                          :width=\"200\"\n                          :headerAttributes=\"{\n                            style: 'background-color: #EDF1F5',\n                          }\"\n                        />\n                        <kendo-grid-column\n                          :field=\"'uom'\"\n                          :title=\"$t('uom')\"\n                          :width=\"100\"\n                          :template=\"UOMTemplate\"\n                          :editor=\"UOMDropDownEditor\"\n                          :headerAttributes=\"{\n                            style:\n                              'text-align: left; background-color: #EDF1F5',\n                          }\"\n                          :attributes=\"{ style: 'text-align: left' }\"\n                        />\n                        <kendo-grid-column\n                          :field=\"'qty'\"\n                          :title=\"$t('qty')\"\n                          :format=\"'{0:n}'\"\n                          :template=\"'<span>#=qty#</span>'\"\n                          :width=\"100\"\n                          :headerAttributes=\"{\n                            style:\n                              'text-align: left; background-color: #EDF1F5',\n                          }\"\n                          :attributes=\"{ style: 'text-align: left;' }\"\n                        />\n                        <kendo-grid-column\n                          :field=\"'price'\"\n                          :title=\"$t('price')\"\n                          :width=\"150\"\n                          :template=\"priceFormat\"\n                          :headerAttributes=\"{\n                            style:\n                              'text-align: left; background-color: #EDF1F5',\n                          }\"\n                          :attributes=\"{ style: 'text-align: left' }\"\n                        />\n                        <kendo-grid-column\n                          :field=\"'amount'\"\n                          :title=\"$t('amount')\"\n                          :width=\"150\"\n                          :editable=\"\n                            () => {\n                              return false;\n                            }\n                          \"\n                          :template=\"amountFormat\"\n                          :headerAttributes=\"{\n                            style:\n                              'text-align: left; background-color: #EDF1F5',\n                          }\"\n                          :attributes=\"{ style: 'text-align: left' }\"\n                        />\n                        <kendo-grid-column\n                          :field=\"'vatTax'\"\n                          :title=\"$t('vat')\"\n                          :width=\"200\"\n                          :template=\"vatTemplate\"\n                          :hidden=\"appType != 'npo' ? false : true\"\n                          :editor=\"VatTaxDropDownEditor\"\n                          :headerAttributes=\"{\n                            style:\n                              'text-align: left; background-color: #EDF1F5',\n                          }\"\n                          :attributes=\"{ style: 'text-align: left' }\"\n                        />\n                        <kendo-grid-column\n                          :field=\"'serviceDate'\"\n                          :title=\"$t('date_from')\"\n                          :width=\"160\"\n                          :hidden=\"!saleFormContent.serviceDate\"\n                          :template=\"'<span>#= kendo.toString(new Date(serviceDate), dateFormat)#</span>'\"\n                          :editor=\"ServiceDateEditor\"\n                          :headerAttributes=\"{\n                            style: 'background-color: #EDF1F5',\n                          }\"\n                        />\n                        <kendo-grid-column\n                          :field=\"'serviceDateTo'\"\n                          :title=\"$t('date_to')\"\n                          :width=\"160\"\n                          :hidden=\"!saleFormContent.serviceDateTo\"\n                          :template=\"'<span>#= kendo.toString(new Date(serviceDateTo), dateFormat)#</span>'\"\n                          :editor=\"ServiceDateToEditor\"\n                          :headerAttributes=\"{\n                            style: 'background-color: #EDF1F5',\n                          }\"\n                        />\n                        <kendo-grid-column\n                          :field=\"'modifier'\"\n                          :title=\"$t('modifier')\"\n                          :width=\"200\"\n                          :hidden=\"!saleFormContent.modifier\"\n                          :template=\"'<span>#=modifier.name?modifier.name:``#</span>'\"\n                          :editor=\"ModifierDropDownEditor\"\n                          :headerAttributes=\"{\n                            style:\n                              'text-align: left; background-color: #EDF1F5',\n                          }\"\n                          :attributes=\"{ style: 'text-align: left' }\"\n                        />\n                        <kendo-grid-column\n                          :field=\"'discountItem'\"\n                          :title=\"$t('discount_item')\"\n                          :width=\"200\"\n                          :hidden=\"!saleFormContent.discountItem\"\n                          :template=\"discountItemTemplate\"\n                          :editor=\"DiscountItemDropDownEditor\"\n                          :headerAttributes=\"{\n                            style:\n                              'text-align: left; background-color: #EDF1F5',\n                          }\"\n                          :attributes=\"{ style: 'text-align: left' }\"\n                        />\n                        <kendo-grid-column\n                          :field=\"'specificTax'\"\n                          :title=\"$t('specificTax')\"\n                          :width=\"200\"\n                          :hidden=\"!saleFormContent.specificTax\"\n                          :template=\"'<span>#=specificTax.defaultTax?specificTax.defaultTax:``#</span>'\"\n                          :editor=\"SpecificTaxDropDownEditor\"\n                          :headerAttributes=\"{\n                            style:\n                              'text-align: left; background-color: #EDF1F5',\n                          }\"\n                          :attributes=\"{ style: 'text-align: left' }\"\n                        />\n                        <kendo-grid-column\n                          :field=\"'otherTax'\"\n                          :title=\"$t('otherTax')\"\n                          :width=\"200\"\n                          :hidden=\"!saleFormContent.otherTax\"\n                          :template=\"'<span>#=otherTax.defaultTax?otherTax.defaultTax:``#</span>'\"\n                          :editor=\"OtherTaxDropDownEditor\"\n                          :headerAttributes=\"{\n                            style:\n                              'text-align: left; background-color: #EDF1F5',\n                          }\"\n                          :attributes=\"{ style: 'text-align: left' }\"\n                        />\n                        <kendo-grid-column\n                          :field=\"'publicLightingTax'\"\n                          :title=\"$t('pl_tax')\"\n                          :width=\"200\"\n                          :hidden=\"!saleFormContent.publicLightingTax\"\n                          :template=\"'<span>#=publicLightingTax.defaultTax?publicLightingTax.defaultTax:``#</span>'\"\n                          :editor=\"PublicLightingTaxDropDownEditor\"\n                          :headerAttributes=\"{\n                            style:\n                              'text-align: left; background-color: #EDF1F5',\n                          }\"\n                          :attributes=\"{ style: 'text-align: left' }\"\n                        />\n                        <kendo-grid-column\n                          :field=\"'saleUnit'\"\n                          :title=\"$t('sale_unit')\"\n                          :width=\"200\"\n                          :hidden=\"!saleFormContent.saleUnit\"\n                          :template=\"saleUnitTemplate\"\n                          :editor=\"SaleUnitDropDownEditor\"\n                          :headerAttributes=\"{\n                            style:\n                              'text-align: left; background-color: #EDF1F5',\n                          }\"\n                          :attributes=\"{ style: 'text-align: left' }\"\n                        />\n                        <kendo-grid-column\n                          :field=\"'employee'\"\n                          :title=\"$t('employee')\"\n                          :width=\"200\"\n                          :hidden=\"!saleFormContent.employee\"\n                          :template=\"empImpl\"\n                          :editor=\"EmployeeDropDownEditor\"\n                          :headerAttributes=\"{\n                            style:\n                              'text-align: left; background-color: #EDF1F5',\n                          }\"\n                          :attributes=\"{ style: 'text-align: left' }\"\n                        />\n                      </kendo-grid>\n                    </v-col>\n                    <v-col sm=\"12\" cols=\"12\" class=\"pt-0 pl-0\">\n                      <v-btn class=\"float-left btn_plus\" @click=\"addRow\">\n                        <v-icon size=\"\" class=\"ma-1\">mdi-plus</v-icon>\n                      </v-btn>\n                    </v-col>\n                    <v-col sm=\"12\" cols=\"12\" class=\"py-0\">\n                      <v-row>\n                        <v-row>\n                          <v-col class=\"pt-0\" sm=\"5\" cols=\"6\">\n                          </v-col>\n                          <v-col class=\"pt-0\" sm=\"7\" cols=\"12\">\n                            <v-simple-table>\n                              <template v-slot:default>\n                                <tbody>\n                                  <tr v-if=\"appType != 'npo'\">\n                                    <td class=\"text-left pr-0\">\n                                      {{ $t(\"subtotal\") }}\n                                    </td>\n                                    <td class=\"text-center\">:</td>\n                                    <td class=\"text-right\">\n                                      {{ numberFormat(saleOrder.subTotal) }}\n                                    </td>\n                                  </tr>\n                                  <tr v-if=\"appType != 'npo'\">\n                                    <td class=\"text-left pr-0\">\n                                      {{ $t(\"general_discount\") }}\n                                    </td>\n                                    <td class=\"text-center\">:</td>\n                                    <td class=\"text-right\">\n                                      ({{\n                                        numberFormat(saleOrder.discountTotal)\n                                      }})\n                                    </td>\n                                  </tr>\n                                  <tr style=\"background: #f8f8f9\">\n                                    <td class=\"text-left text-uppercase pr-0\">\n                                      {{ $t(\"total\") }}\n                                    </td>\n                                    <td class=\"text-center\">:</td>\n                                    <td\n                                      class=\"text-right primary--text text-bold\"\n                                      id=\"total\"\n                                    >\n                                      {{ numberFormat(saleOrder.total) }}\n                                    </td>\n                                  </tr>\n                                </tbody>\n                              </template>\n                            </v-simple-table>\n                          </v-col>\n                        </v-row>\n                      </v-row>\n                    </v-col>\n                  </v-row>\n                  <v-divider />\n                  <v-card outlined dense class=\"no_border function_footer\">\n                    <v-alert type=\"warning\" v-model=\"alert\" dismissible>\n                      <span v-html=\"errorMessage\" />\n                    </v-alert>\n                    <v-menu>\n                      <template v-slot:activator=\"{ on }\">\n                        <v-btn\n                          class=\"mr-2 float-left select_template\"\n                          v-on=\"on\"\n                        >\n                          {{ $t(\"select_template\") }}\n                          <v-icon size=\"\" class=\"ma-1\">expand_more</v-icon>\n                        </v-btn>\n                      </template>\n                      <v-list>\n                        <v-list-item\n                          v-for=\"(item, index) in formAR\"\n                          :key=\"index\"\n                        >\n                          <v-list-item-title>{{ item.name }}</v-list-item-title>\n                        </v-list-item>\n                      </v-list>\n                    </v-menu>\n                    <v-btn\n                      class=\"text-capitalize black--text float-left\"\n                      color=\"primary\"\n                      outlined\n                      @click=\"cancel\"\n                      >{{ $t(\"cancel\") }}\n                    </v-btn>\n                    <!--                    <v-menu>-->\n                    <!--                      <template v-slot:activator=\"{ on }\">-->\n                    <!--                        <v-btn class=\"ml-2 float-right text-capitalize  white&#45;&#45;text\"-->\n                    <!--                               color=\"primary\" v-on=\"on\">-->\n                    <!--                          {{ $t('save_option') }}-->\n                    <!--                          <v-icon size=\"\" class=\"ma-1\">expand_more</v-icon>-->\n                    <!--                        </v-btn>-->\n                    <!--                      </template>-->\n                    <!--                      <v-list rounded>-->\n                    <!--                        <v-list-item-group>-->\n                    <!--                          <v-list-item>-->\n                    <!--                            <v-list-item-content>-->\n                    <!--                              <v-list-item-title v-if=\"!isEdit\" @click=\"saveNew\">-->\n                    <!--                                {{ $t('save_new') }}-->\n                    <!--                              </v-list-item-title>-->\n                    <!--                            </v-list-item-content>-->\n                    <!--                          </v-list-item>-->\n                    <!--                          <v-list-item>-->\n                    <!--                            <v-list-item-content>-->\n                    <!--                              <v-list-item-title @click=\"saveClose\">{{-->\n                    <!--                                  $t('save_close')-->\n                    <!--                                }}-->\n                    <!--                              </v-list-item-title>-->\n                    <!--                            </v-list-item-content>-->\n                    <!--                          </v-list-item>-->\n\n                    <!--                        </v-list-item-group>-->\n                    <!--                      </v-list>-->\n                    <!--                    </v-menu>-->\n                    <v-btn\n                      @click=\"saveClose\"\n                      class=\"float-right text-capitalize white--text\"\n                      :disabled=\"btnDisabled\"\n                      color=\"primary\"\n                    >\n                      {{ $t(\"save_close\") }}\n                    </v-btn>\n                    <v-btn\n                      color=\"secondary\"\n                      style=\"margin-right: 10px !important\"\n                      :disabled=\"btnDisabled\"\n                      class=\"white--text float-right text-capitalize\"\n                      @click=\"saveNew\"\n                      :hidden=\"hiddenButton\"\n                      >{{ $t(\"save_new\") }}\n                    </v-btn>\n                  </v-card>\n                </v-form>\n              </v-col>\n            </v-row>\n          </v-card>\n        </v-col>\n      </v-row>\n      <LoadingMe\n        :isLoading=\"showLoading\"\n        :fullPage=\"false\"\n        :myLoading=\"true\"\n        type=\"loading\"\n        :alertMessage=\"loadingAlert\"\n        :color=\"loadingColorAlert\"\n        :alertText=\"loadingTextAlert\"\n      />\n      <v-dialog v-model=\"dialogCatalog\" max-width=\"850px\">\n        <v-card>\n          <div class=\"modal_header\">\n            <v-card-title>{{ $t(\"catalog\") }}</v-card-title>\n            <v-icon class=\"btn_close\" @click=\"dialogCatalog = false\"\n              >close\n            </v-icon>\n          </div>\n          <v-card-text class=\"modal_text_conent\">\n            <v-row>\n              <v-col sm=\"12\" cols=\"12\" class=\"pb-0\">\n                <v-simple-table>\n                  <kendo-datasource\n                    ref=\"catalogDatasource\"\n                    :data=\"catalogs\"\n                    :schema=\"gridSchema\"\n                  />\n                  <kendo-grid\n                    id=\"gridCatalog\"\n                    class=\"grid-function\"\n                    :data-source-ref=\"'catalogDatasource'\"\n                    :style=\"{ width: '100%' }\"\n                    :noRecords=\"true\"\n                    :pageable-numeric=\"false\"\n                    :pageable-previous-next=\"false\"\n                    :pageable-messages-display=\"'Showing {2} data items'\"\n                    :scrollable-virtual=\"true\"\n                  >\n                    <kendo-grid-column\n                      :field=\"'images'\"\n                      :title=\"$t('image')\"\n                      :width=\"50\"\n                      :template=\"loadImage\"\n                      :headerAttributes=\"{ style: 'background-color: #EDF1F5' }\"\n                    />\n                    <kendo-grid-column\n                      :field=\"'number'\"\n                      :title=\"$t('number')\"\n                      :width=\"70\"\n                      :template=\"'<span>#=number#</span>'\"\n                      :groupHeaderColumnTemplate=\"'#=value#'\"\n                      :headerAttributes=\"{ style: 'background-color: #EDF1F5' }\"\n                    />\n                    <kendo-grid-column\n                      :field=\"'name'\"\n                      :title=\"$t('name')\"\n                      :attributes=\"{ class: 'tb_name_td' }\"\n                      :width=\"100\"\n                      :template=\"'<span>#=name#</span>'\"\n                      :headerAttributes=\"{ style: 'background-color: #EDF1F5' }\"\n                    />\n                    <kendo-grid-column\n                      :field=\"'description'\"\n                      :title=\"$t('description')\"\n                      :width=\"100\"\n                      :template=\"'<span>#=description#</span>'\"\n                      :headerAttributes=\"{ style: 'background-color: #EDF1F5' }\"\n                    />\n                    <kendo-grid-column\n                      :field=\"'noOfProduct'\"\n                      :title=\"$t('products')\"\n                      :template=\"'<span>#=noOfProduct#</span>'\"\n                      :width=\"50\"\n                      :headerAttributes=\"{\n                        style: 'text-align: left; background-color: #EDF1F5',\n                      }\"\n                    />\n                    <kendo-grid-column\n                      :field=\"''\"\n                      :title=\"$t('action')\"\n                      :width=\"60\"\n                      :command=\"[{ text: $t('add'), click: addCatalog }]\"\n                      :headerAttributes=\"{\n                        style: 'text-align: left; background-color: #EDF1F5',\n                      }\"\n                    />\n                  </kendo-grid>\n                </v-simple-table>\n              </v-col>\n            </v-row>\n          </v-card-text>\n        </v-card>\n      </v-dialog>\n    </v-container>\n  </v-app>\n</template>\n<script>\nimport {i18n} from \"@/i18n\";\nimport DatePickerComponent from \"@/components/custom_templates/DatePickerComponent\";\nimport kendo from \"@progress/kendo-ui\";\nimport {DropDownList} from \"@progress/kendo-vue-dropdowns\";\nimport SaleFormContentModel from \"@/scripts/model/SaleFormContent\";\nimport ItemLineModel from \"@/scripts/invoice/model/ItemLine\";\nimport {uuid} from \"vue-uuid\";\nimport SaleOrderModel from \"@/scripts/model/Transaction\";\n\n/* Store */\nimport store from \"@/store\";\n\nconst institute = store.state.institute.institute;\n\nimport {ShowResource} from \"@/observable/store\";\nimport paymentTermHandler_ from \"@/scripts/paymentterm/handler/paymentTermHandler\";\nimport creditLimitHandler from \"@/scripts/creditLimit/handler/creditLimitHandler\";\nimport Helper from \"@/helper\";\nimport transactionHandler from \"@/scripts/transactionHandler\";\nimport {dataStore} from \"@/observable/store\";\n\n////handler\nconst saleOrderHandler = require(\"@/scripts/transactionHandler\");\nconst billingHandler = require(\"@/scripts/invoice/handler/billingHandler\");\nconst customerHandler = require(\"@/scripts/customerHandler\");\nconst projectHandler = require(\"@/scripts/projectHandler\");\nconst prefixHandler = require(\"@/scripts/prefixHandler\");\nconst paymentTermHandler = require(\"@/scripts/paymentTermHandler\");\nconst priceLevelHandler = require(\"@/scripts/priceLevelHandler\");\nconst saleFormContentHandler = require(\"@/scripts/saleFormContentHandler\");\nconst employeeHandler = require(\"@/scripts/employeeHandler\");\nconst itemModifierHandler = require(\"@/scripts/itemModifierHandler\");\nconst discountItemHandler = require(\"@/scripts/discountItemHandler\");\nconst uomPriceHandler = require(\"@/scripts/uomPriceHandler\");\nconst productVariantHandler = require(\"@/scripts/productVariantHandler\");\nconst otherChargeHandler = require(\"@/scripts/otherChargeHandler\");\nconst locationHandler = require(\"@/scripts/locationHandler\");\nconst settingsHandler = require(\"@/scripts/settingsHandler\");\nconst saleChannelHandler = require(\"@/scripts/saleChannelHandler\");\nconst saleUnitItemHandler = require(\"@/scripts/saleUnitItemHandler\");\nconst settingHandler = require(\"@/scripts/settingHandler\");\nconst catalogHandler = require(\"@/scripts/catalogHandler\");\nconst productHandler = require(\"@/scripts/productHandler\");\nconst currencyHandler = require(\"@/scripts/currency/handler/currencyHandler\");\nconst supplierHandler = require(\"@/scripts/supplierHandler\");\n\nconst saleFormContentModel = new SaleFormContentModel({});\nconst itemLineModel = new ItemLineModel({});\n//other\nconst $ = kendo.jQuery\nconst textField = \"numberName\";\nconst keyField = \"id\";\nconst defaultItem = {[textField]: \"Select Customer...\", [keyField]: null};\nconst defaultSupItem = {[textField]: \"Select Supplier...\", [keyField]: null};\nconst defaultEmpItem = {[textField]: \"Select Employee...\", [keyField]: null};\nconst emptyItem = {[textField]: \"loading ...\"};\nconst invoicePrefix = \"lin-\";\nconst DISCOUNT_TYPE = \"?type=Sale\";\nconst cookieJS = require(\"@/cookie.js\");\nconst cookie = cookieJS.getCookie();\nexport default {\n    name: \"SaleOrder\",\n    props: {\n        id: {\n            type: String,\n        },\n        initSaleOrder: {\n            type: SaleOrderModel,\n        },\n    },\n    components: {\n        LoadingMe: () => import(`@/components/Loading`),\n        \"app-datepicker\": DatePickerComponent,\n        dropdownlist: DropDownList,\n        // \"app-monthof-picker\": () => import(\"@/components/kendo_templates/MonthOfPicker\"),\n    },\n    data: () => ({\n        saleOrder: new SaleOrderModel(),\n        isEdit: false,\n        numSelect: [1],\n        dialogTax: false,\n        theDate: \"\",\n        //Catalog\n        dialogCatalog: false,\n        gridSchema: {\n            model: {\n                id: \"id\",\n            },\n        },\n        imgURL: \"https://s3-ap-southeast-1.amazonaws.com/images.banhji/\",\n        // LoadingMe\n        showLoading: false,\n        loadingAlert: false,\n        loadingColorAlert: \"\",\n        loadingTextAlert: \"\",\n        bill_date: \"\",\n        alert: false,\n        files: [],\n        errors: [],\n        // Form validation\n        valid: true,\n        templates: [\n            {title: \"Draft\"},\n            {title: \"Open\"},\n            {title: \"Partially Closed\"},\n            {title: \"Closed\"},\n        ],\n        saleOrderType: 1,\n        saleOrderTypes: [\n            {name: \"Standard Order\", id: 1},\n            {name: \"Open Order\", id: 2},\n            {name: \"Contract\", id: 3},\n            {name: \"Consignment Order\", id: 4},\n            // {name: 'Order required Purchase', id: 5},\n        ],\n        isRequredPurchase: false,\n        col_expand: 9,\n        col_hide: 3,\n        isHideBar: false,\n        filter: \"\",\n        textField: \"numberName\",\n        dataItemKey: \"id\",\n        defaultItem: defaultItem,\n        defaultSupItem: defaultSupItem,\n        defaultEmpItem: defaultEmpItem,\n        mOtherCharge: [],\n        //item\n        itemLines: [],\n        itemLine: itemLineModel,\n        dateFormat: itemLineModel.dateFormat,\n        //customer\n        cusBaseUrl: customerHandler.searchv1(),\n        customer: {},\n        customerList: [],\n        supplierList: [],\n        supplier: {},\n        supBaseUrl: supplierHandler.search(),\n        billingAddress: [],\n        deliveryAddress: [],\n        priceLevel: [],\n        //date\n        paymentTerms: [],\n        transactions: [],\n        employeeList: [],\n        employee: {},\n        empBaseUrl: employeeHandler.searchURL(),\n        saleChannelList: [],\n        locations: [],\n        customerProjects: [],\n        segments: [],\n        transactionType: {},\n        taxListTotal: {},\n        customerDiscountItem: [],\n        customerSaleUnit: [],\n        saleFormContent: saleFormContentModel,\n        transactionDate: new Date().toISOString().substr(0, 10),\n        monthOf: false,\n        deliveryDateTime: new Date(),\n        validityDate: new Date().toISOString().substr(0, 10),\n        specificDiscountItem: [],\n        otherChargeList: [],\n        saleUnitItemList: [],\n        otherTax: [],\n        specificTax: [],\n        publicLightingTax: [],\n        vatTax: [],\n        tax: [],\n        loggedUser: {\n            id: cookie.creator,\n            name: cookie.email,\n        },\n        leads: [],\n        catalogs: [],\n        txnList: [],\n        quotes: [],\n        txnLists: [],\n        isSaveNew: false,\n        isSaveClose: false,\n        isSavePrint: false,\n        isSaveDraft: false,\n        exchangeRate: {},\n        baseCurrencyCode: \"\",\n        currencyCode: \"\",\n        transactionRate: 1,\n        saveOption: \"\",\n        formAR: [\n            {id: 1, name: \"Default Form\"},\n            {id: 2, name: \"Form 80mm\"},\n        ],\n        isPriceLevelChanged: false,\n        refFrom: [], // can SO can be from Sale Quotes\n        btnDisabled: false\n    }),\n    methods: {\n        formatDateTime(value) {\n            return kendo.toString(new Date(value), this.dateFormat + ` hh:mm tt`);\n        },\n        amountFormat(value) {\n            return kendo.toString(value.amount, `n${this.saleFormContent.decimal}`);\n        },\n        priceFormat(value) {\n            return kendo.toString(value.price, `n${this.saleFormContent.decimal}`);\n        },\n        Help(key_search) {\n            ShowResource(key_search);\n        },\n        initialData() {\n            if (this.initSaleOrder) {\n                // Edit Mode\n                this.saleOrder = this.initSaleOrder;\n                this.saleOrder.creditLimit = 0;\n                this.saleOrder.currentBalance = 0;\n                // window.console.log(this.initSaleOrder, 'propData')\n                this.bindData();\n            } else {\n                // Brand New Mode\n                if (this.$route.params.id === undefined) {\n                    this.setDefaultData();\n                }\n            }\n        },\n        setDefaultData() {\n            // Brand New Mode\n            // window.console.log('default or clear')\n            this.isEdit = false;\n            this.saleOrder = new SaleOrderModel({});\n            //sale order type\n            if (this.$route.params.id !== undefined) {\n                this.saleOrder.saleOrderType = 1;\n                this.saleOrderType = 1;\n                if (this.appType === 'npo' || this.appType === 'Public Sectors'){\n                    this.saleOrder.saleOrderType = 3;\n                    this.saleOrderType = 3;\n                }\n            }\n            this.saleOrder.deliveryDateTime = new Date();\n            this.saleOrder.formTemplate = 1;\n            this.saleOrder.transactionDate = new Date().toISOString().substr(0, 10);\n            // Generate Number\n            this.itemLines = []\n            // let ds = this.$refs.itemLineDS.kendoWidget();\n            // ds.data([]);\n            // Add 2 default lines\n            this.removeEmptyLine()\n            setTimeout(() => {\n                this.addRow()\n                // this.addRow()\n            }, 500)\n            // Add 2 default lines\n            this.otherChargeList = [];\n            this.mOtherCharge = [];\n            this.employee = {};\n            this.taxListTotal = {};\n            this.quotes = [];\n            this.isSaveNew = false;\n            this.isSaveClose = false;\n            this.isSavePrint = false;\n            this.isSaveDraft = false;\n            this.creditLimitUsage(0, 1);\n            this.isRequredPurchase = false;\n            this.customer = {}\n        },\n        bindData() {\n            // window.console.log(this.saleOrder, 'bindData')\n            // Edit Mode\n            if (this.saleOrder) {\n                if (this.saleOrder.hasOwnProperty(\"customer\")) {\n                    this.isEdit = true;\n                    this.customer = this.saleOrder.customer;\n                    // let e = {value: this.saleOrder.customer}\n                    // this.onChange(e)\n                    this.billingAddress = this.saleOrder.customer.billingAddress;\n                    this.deliveryAddress = this.saleOrder.customer.deliveryAddress;\n                    // this.customerProjects = this.saleOrder.customer.\n                    this.taxListTotal = this.saleOrder.taxListTotal;\n                    this.itemLines = this.saleOrder.itemLines;\n                    this.mOtherCharge = this.saleOrder.otherCharge;\n                    this.loadProjectByCustomer();\n                    if (this.customer.hasOwnProperty(\"id\")) {\n                        this.loadCustomerBalance(this.customer.id);\n                    }\n                }\n            }\n        },\n        addSelect() {\n            let amount_num = this.numSelect.length;\n            let num = this.numSelect[amount_num - 1];\n            let new_num = num + 1;\n            let lenghtItem = this.specificDiscountItem.length;\n            if (new_num <= lenghtItem) {\n                this.numSelect.push(new_num);\n            }\n        },\n        removeSelect(index) {\n            this.numSelect.splice(index, 1);\n            // window.console.log(index, this.numSelect)\n            // this.selectDiscount.splice(index,1)\n            // window.console.log(\"remove\",this.selectDiscount)\n            // this.selectDiscount = this.selectDiscount.filter(item =>  item.id != val.id);\n        },\n        errorMessage() {\n        },\n        accountDropDownEditor() {\n        },\n        hide_smallsitebar() {\n            if (!this.isHideBar) {\n                // this.col_expand = 12\n                // this.col_hide = 0\n                this.isHideBar = true;\n            } else {\n                // this.col_expand = 9\n                // this.col_hide = 3\n                this.isHideBar = false;\n            }\n        },\n        //number\n        generateNumber() {\n            if (this.isEdit == false) {\n                let d = new Date().toISOString().substr(0, 10);\n                if (this.saleOrder.transactionDate) {\n                    // window.console.log(this.transactionDate)\n                    d = this.saleOrder.transactionDate;\n                }\n                let data = {\n                    abbr: this.saleOrder.transactionType.abbr,\n                    structure: this.saleOrder.transactionType.structure,\n                    transactionDate: d,\n                    type: \"Sale Order\",\n                };\n                billingHandler\n                    .lastNumber(data)\n                    .then((response) => {\n                        if (response.data.statusCode === 200) {\n                            const res = response.data.data;\n                            const lastNumber = this.zeroPad(\n                                parseInt(res.lastNumber),\n                                this.saleOrder.transactionType.format\n                            );\n                            const number =\n                                res.suffix +\n                                this.saleOrder.transactionType.numberSeparator +\n                                lastNumber;\n                            this.saleOrder.number = number;\n                        }\n                    })\n                    .catch((e) => {\n                        this.errors.push(e);\n                    });\n            }\n        },\n        zeroPad(num, places) {\n            return String(num).padStart(places, \"0\");\n        },\n        //customer\n        onChange(event) {\n            window.console.log(event);\n            const value = event.value;\n            if (value && value[textField] === emptyItem[textField]) {\n                return;\n            }\n            this.customer = value;\n            this.saleOrder.customer = value;\n            // this.invoice = value\n            // this.saleOrder.paymentTerm = value.hasOwnProperty(\"paymentTerm\")\n            //   ? value.paymentTerm\n            //   : {};\n            this.saleOrder.priceLevel = value.hasOwnProperty(\"priceLevel\")\n                ? value.priceLevel\n                : {};\n            const baseCurrency = value.hasOwnProperty(\"baseCurrency\")\n                ? value.baseCurrency\n                : {};\n            if (baseCurrency.hasOwnProperty(\"code\")) {\n                this.baseCurrencyCode = baseCurrency.code;\n            }\n            const priceLevel = value.hasOwnProperty(\"priceLevel\")\n                ? value.priceLevel\n                : {};\n            if (priceLevel.hasOwnProperty(\"currency\")) {\n                if (priceLevel.currency.hasOwnProperty(\"id\")) {\n                    this.loadTransactionRate();\n                }\n            }\n            this.billingAddress = value.hasOwnProperty(\"billingAddress\")\n                ? value.billingAddress\n                : [];\n            this.deliveryAddress = value.hasOwnProperty(\"deliveryAddress\")\n                ? value.deliveryAddress\n                : [];\n            if (this.billingAddress.length > 0) {\n                this.saleOrder.billingAddress = this.billingAddress[0];\n            }\n            if (this.deliveryAddress.length > 0) {\n                this.saleOrder.deliveryAddress = this.deliveryAddress[0];\n            }\n            this.onSaleOrderDateChanged();\n            this.loadProjectByCustomer();\n            // const creditLimit = value.hasOwnProperty(\"creditLimit\")\n            //   ? value.creditLimit\n            //   : 0;\n            // this.saleOrder.creditLimit = kendo.parseFloat(creditLimit);\n            this.loadCreditLimit();\n            this.loadCustomerBalance(this.customer.id);\n            // load quote\n            this.loadQuote();\n            this.loadPaymentTermList();\n        },\n        onFilterChange(event) {\n            const filter = event.filter.value;\n            this.requestData(0, filter, this.cusBaseUrl);\n            this.filter = filter;\n        },\n        async requestData(skip, filter, baseUrl) {\n            let url = baseUrl + `?filter=${filter}`;\n            if(this.appType === 'npo'){\n                url = baseUrl + `?filter=${filter}&is_donor=true`;\n            }\n            this.requestStarted = true;\n            fetch(url)\n                .then((response) => {\n                    return response.json();\n                })\n                .then(this.afterFetch);\n        },\n        afterFetch(json) {\n            this.customerList = json.data;\n        },\n        //supplier\n        onSupplierChange(event) {\n            window.console.log(event);\n            const value = event.value;\n            if (value && value[textField] === emptyItem[textField]) {\n                return;\n            }\n            this.supplier = value;\n            this.saleOrder.supplier = value;\n        },\n        onSupplierFilterChange(event) {\n            const supfilter = event.filter.value;\n            this.supplierRequestData(0, supfilter, this.supBaseUrl);\n        },\n        supplierRequestData(skip, filter, baseUrl) {\n            const url = baseUrl + `?filter=${filter}`;\n            this.requestStarted = true;\n            fetch(url)\n                .then((response) => {\n                    return response.json();\n                })\n                .then(this.supAfterFetch);\n        },\n        supAfterFetch(json) {\n            this.supplierList = json.data;\n        },\n        //employee\n        onEmployeeChange(event) {\n            const value = event.value;\n            if (value && value[textField] === emptyItem[textField]) {\n                return;\n            }\n            this.employee = value;\n            this.saleOrder.employee = value;\n        },\n        onEmployeeFilterChanged(event) {\n            const empfilter = event.filter.value;\n            this.employeeRequestData(0, empfilter, this.empBaseUrl);\n        },\n        employeeRequestData(skip, filter, baseUrl) {\n            const url = baseUrl + `?filter=${filter}`;\n            this.requestStarted = true;\n            fetch(url)\n                .then((response) => {\n                    return response.json();\n                })\n                .then(this.empAfterFetch);\n        },\n        empAfterFetch(json) {\n            this.employeeList = json.data;\n        },\n        removeRow(e) {\n            e.preventDefault();\n            const grid = kendo.jQuery(\"#gridItemLineSaleOrder\").data(\"kendoGrid\"),\n                dataSource = grid.dataSource,\n                dataItem = grid.dataItem($(e.currentTarget).closest(\"tr\"));\n\n            if (dataSource.total() > 1) {\n                dataSource.remove(dataItem);\n            }\n            this.autoCalculate()\n        },\n        //date\n        async onSaleOrderDateChanged() {\n            if (this.saleOrder.transactionDate) {\n                this.saleOrder.monthOf = new Date(this.saleOrder.transactionDate).toISOString().substr(0, 7)\n            }\n            await this.loadCreditLimit();\n            await this.loadCustomerBalance(this.customer.id);\n            await this.onPriceLevelChange();\n            await this.loadPaymentTermList();\n            if (this.customer) {\n                const paymentTerm = this.saleOrder.paymentTerm || {};\n                const netDue = paymentTerm.netDue || 0;\n                const someDate = new Date(this.saleOrder.transactionDate);\n                someDate.setDate(someDate.getDate() + parseInt(netDue)); //number  of days to add, e.x. 15 days\n                this.saleOrder.validityDate = someDate.toISOString().substr(0, 10);\n                window.console.log(\"dueDate\", this.saleOrder.validityDate);\n            }\n            if (this.$route.params.id === undefined) {\n                this.generateNumber();\n            }\n        },\n        onPaymentTermChanged() {\n            // this.onSaleOrderDateChanged();\n            if (this.customer) {\n                const paymentTerm = this.saleOrder.paymentTerm || {};\n                const netDue = paymentTerm.netDue || 0;\n                const someDate = new Date(this.saleOrder.transactionDate);\n                someDate.setDate(someDate.getDate() + parseInt(netDue)); //number  of days to add, e.x. 15 days\n                this.saleOrder.validityDate = someDate.toISOString().substr(0, 10);\n                window.console.log(\"dueDate\", this.saleOrder.validityDate);\n            }\n        },\n        //number\n        numberFormat(value) {\n            // window.console.log(this.saleFormContent.decimal,'nimol')\n            return kendo.toString(value, `n${this.saleFormContent.decimal}`);\n            // return value\n        },\n        //\n        async loadLead() {\n            new Promise((resolve) => {\n                setTimeout(() => {\n                    resolve(\"resolved\");\n                    const strFilter = \"?type=Sale Lead\";\n                    this.leads = [];\n                    billingHandler.list(strFilter).then((res) => {\n                        if (res) {\n                            if (res.data) {\n                                if (res.data.statusCode === 200) {\n                                    this.showLoading = false;\n                                    this.leads = res.data.data;\n                                }\n                            }\n                        }\n                        this.showLoading = false;\n                    });\n                }, 10);\n            });\n        },\n        async loadPaymentTerm() {\n            new Promise((resolve) => {\n                setTimeout(() => {\n                    resolve(\"resolved\");\n                    paymentTermHandler.getAll().then((res) => {\n                        this.showLoading = false;\n                        this.paymentTerms = res.data.data;\n                        if (this.paymentTerms.length > 0) {\n                            if (\n                                this.$route.params.id !== undefined ||\n                                this.$route.params.id != \"\"\n                            ) {\n                                if (this.saleOrder) {\n                                    this.saleOrder.paymentTerm = this.paymentTerms[0];\n                                }\n                            }\n                        }\n                    });\n                }, 10);\n            });\n        },\n        async loadPriceLevel() {\n            new Promise((resolve) => {\n                setTimeout(() => {\n                    resolve(\"resolved\");\n                    const strFilter = \"?nature=sale\";\n                    priceLevelHandler.get(strFilter).then((res) => {\n                        this.priceLevel = res;\n                        if (this.priceLevel.length > 0) {\n                            if (\n                                this.$route.params.id !== undefined ||\n                                this.$route.params.id != \"\"\n                            ) {\n                                if (this.saleOrder) {\n                                    this.saleOrder.priceLevel = this.priceLevel[0];\n                                }\n                                this.loadTransactionRate();\n                            }\n                        }\n                    });\n                }, 10);\n            });\n        },\n        removeDuplicate(array) {\n            const result = [];\n            const map = new Map();\n            for (const item of array) {\n                if (!map.has(item.id)) {\n                    map.set(item.id, true); // set any value to Map\n                    result.push(item);\n                }\n            }\n            return result;\n        },\n        autoCalculateDiscount(discountItem, subTotal) {\n            if (discountItem) {\n                window.console.log('discountItem', discountItem, subTotal)\n                const nature = discountItem.nature || '';\n                const amount = discountItem.amount || 0;\n                if (nature === \"Amount\") {\n                    return parseFloat(amount);\n                } else if (nature === \"Percentage\") {\n                    return subTotal * (parseFloat(amount) / 100);\n                } else {\n                    return 0\n                }\n            } else {\n                return 0\n            }\n        },\n        autoCalculateTax(tax, amount) {\n            if (tax) {\n                var formula = tax.formula;\n                var inAmt = kendo.parseFloat(amount);\n                var nAmt = kendo.parseFloat(amount);\n                var taxBase = kendo.parseFloat(tax.taxBase) / 100;\n                var rate = kendo.parseFloat(tax.rate) / 100;\n                var total = eval(formula);\n                window.console.log(inAmt, nAmt, taxBase, rate, formula, total);\n                // window.console.log(amount)\n                return total;\n            }\n            // return 0\n        },\n        autoCalculateTaxByType(tax) {\n            // return by a key\n            const groupAll = (list) =>\n                list.reduce((tax, item) => {\n                    const taxAmount = tax[item.name] || 0;\n                    return Object.assign({}, tax, {\n                        [item.name]: taxAmount + parseFloat(item.amount),\n                    });\n                }, {});\n            this.taxListTotal = groupAll(tax);\n            // window.console.log('nimol', groupAll(tax))\n            // this.\n        },\n        dataSourceChanged(e) {\n            if (e.field) {\n                let dataRow = e.items[0],\n                    buom = {},\n                    conversionRate = 1,\n                    wac = 0,\n                    qoh = 0,\n                    amount = 0,\n                    xAmount = 0;\n                switch (e.field) {\n                    case \"item\":\n                        // this.attribute_ = this.attributes.filter(m => m.type.id === dataRow.variant.id)\n                        dataRow.set(\"description\", dataRow.item.description);\n                        buom = dataRow.item.uom || {};\n                        dataRow.set(\"buom\", buom);\n                        // this.itemChange(dataRow)\n                        break;\n                    case \"uom\":\n                        if (this.isPriceLevelChanged === false) {\n                            try {\n                                try {\n                                    buom = dataRow.uom.buom || {};\n                                    qoh = dataRow.uom.qoh || 0;\n                                    conversionRate = dataRow.uom.conversionRate || 1;\n                                    wac = dataRow.uom.wac || 0;\n                                    dataRow.set(\"buom\", buom);\n                                    dataRow.set(\"wac\", wac);\n                                    dataRow.set(\"qoh\", qoh);\n                                    dataRow.set(\"conversionRate\", parseFloat(conversionRate));\n                                    if (dataRow.uom) {\n                                        amount =\n                                            parseFloat(dataRow.uom.price) * parseFloat(dataRow.qty);\n                                        xAmount = amount * parseFloat(this.saleOrder.txnRate);\n\n                                        dataRow.set(\"price\", parseFloat(dataRow.uom.price));\n                                        dataRow.set(\"amount\", amount);\n                                        dataRow.set(\"exchangeAmount\", xAmount);\n                                    } else {\n                                        amount =\n                                            parseFloat(dataRow.price) * parseFloat(dataRow.qty);\n                                        xAmount = amount * parseFloat(this.saleOrder.txnRate);\n\n                                        dataRow.set(\"price\", parseFloat(dataRow.price));\n                                        dataRow.set(\"amount\", amount);\n                                        dataRow.set(\"exchangeAmount\", xAmount);\n                                    }\n                                } catch (err) {\n                                    dataRow.set(\"buom\", {});\n                                    dataRow.set(\"conversionRate\", 1);\n                                    dataRow.set(\"price\", 0);\n                                    dataRow.set(\"qoh\", 0);\n                                    dataRow.set(\"wac\", 0);\n                                    dataRow.set(\"amount\", 0);\n                                    dataRow.set(\"exchangeAmount\", 0);\n                                }\n                            } catch {\n                                dataRow.set(\"price\", 0);\n                                dataRow.set(\"amount\", 0);\n                            }\n                        }\n                        break;\n                    case \"price\":\n                        try {\n                            amount = parseFloat(dataRow.price) * parseFloat(dataRow.qty);\n                            xAmount = amount * parseFloat(this.saleOrder.txnRate);\n\n                            dataRow.set(\"price\", parseFloat(dataRow.price));\n                            dataRow.set(\"amount\", amount);\n                            dataRow.set(\"exchangeAmount\", xAmount);\n                            // window.console.log('price',dataRow.price)\n                        } catch {\n                            dataRow.set(\"price\", 0);\n                            dataRow.set(\"amount\", 0);\n                            dataRow.set(\"exchangeAmount\", 0);\n                        }\n                        break;\n                    case \"qty\":\n                        try {\n                            amount = parseFloat(dataRow.price) * parseFloat(dataRow.qty);\n                            xAmount = amount * parseFloat(this.saleOrder.txnRate);\n\n                            dataRow.set(\"price\", parseFloat(dataRow.price));\n                            dataRow.set(\"amount\", amount);\n                            dataRow.set(\"exchangeAmount\", xAmount);\n                        } catch {\n                            dataRow.set(\"price\", 0);\n                            dataRow.set(\"amount\", 0);\n                            dataRow.set(\"exchangeAmount\", 0);\n                        }\n                        break;\n                    case \"otherTax\":\n                        // window.console.log(\"--\", dataRow)\n                        break;\n                    default:\n                        break;\n                }\n                if (e.field) {\n                    this.autoCalculate();\n                }\n            }\n        },\n        autoCalculate() {\n            let ds = this.$refs.itemLineDS.kendoWidget(),\n                subTotal = 0,\n                totalTax = 0,\n                discountTotal = 0,\n                spTax = 0,\n                pltax = 0,\n                otherTax = 0,\n                vatTax = 0,\n                discountInvoice = 0,\n                taxList = [],\n                discountItem = [],\n                saleUnit = [],\n                inclusiveTax = 0,\n                itemSubtotal = 0,\n                txnItmSubtotal = 0,\n                serviceSubtotal = 0,\n                itemDiscount = 0,\n                serviceDiscount = 0,\n                txnDiscount = 0;\n\n            const rows = ds.data().filter((m) => parseFloat(m.amount) > 0);\n            rows.forEach((value) => {\n                let modifierPrice = 0;\n                if (value.modifier) {\n                    modifierPrice = kendo.parseFloat(value.modifier.price);\n                }\n\n                // subTotal += (kendo.parseFloat(value.amount) + modifierPrice)\n                let discount = 0;\n                if (value.discountItem) {\n                    let subTo = kendo.parseFloat(value.price) * kendo.parseFloat(value.qty);\n                    discount = this.autoCalculateDiscount(value.discountItem, subTo);\n                    window.console.log('discount item', discount, '--', value.discountItem)\n                    value[\"discountAmount\"] = discount;\n                    value[\"discountExchangeAmount\"] =\n                        discount * kendo.parseFloat(this.saleOrder.txnRate);\n                    if (value.discountItem.hasOwnProperty(\"id\")) {\n                        discountItem.push(value.discountItem);\n                    }\n                    discountTotal += discount;\n                }\n                if (value.saleUnit) {\n                    if (value.saleUnit.hasOwnProperty(\"id\")) {\n                        saleUnit.push(value.saleUnit);\n                    }\n                }\n                if (value.specificTax) {\n                    spTax = this.autoCalculateTax(\n                        value.specificTax,\n                        kendo.parseFloat(value.amount) - kendo.parseFloat(discount)\n                    );\n                    // window.console.log('sp ', discount)\n                    spTax = kendo.parseFloat(spTax) ? kendo.parseFloat(spTax) : 0;\n                    value[\"specificTaxAmount\"] = spTax;\n                    value[\"specificTaxExchangeAmount\"] =\n                        spTax * kendo.parseFloat(this.saleOrder.txnRate);\n                    const tax = value.specificTax;\n                    const baseAmount = tax.baseAmount;\n                    if (baseAmount) {\n                        if (baseAmount.toLowerCase() === \"inclusive\") {\n                            inclusiveTax += spTax;\n                        }\n                    }\n                    if (value.specificTax.hasOwnProperty(\"taxType\")) {\n                        taxList.push({\n                            name: value.specificTax.taxType.name,\n                            amount: spTax,\n                            id: value.specificTax.taxType.id,\n                        });\n                    }\n                }\n                if (value.publicLightingTax) {\n                    pltax = this.autoCalculateTax(\n                        value.publicLightingTax,\n                        kendo.parseFloat(value.amount) - kendo.parseFloat(discount)\n                    );\n                    pltax = kendo.parseFloat(pltax) ? kendo.parseFloat(pltax) : 0;\n                    value[\"publicLightingTaxAmount\"] = pltax;\n                    value[\"publicLightingTaxExchangeAmount\"] =\n                        pltax * kendo.parseFloat(this.saleOrder.txnRate);\n                    const tax = value.publicLightingTax;\n                    const baseAmount = tax.baseAmount;\n                    if (baseAmount) {\n                        if (baseAmount.toLowerCase() === \"inclusive\") {\n                            inclusiveTax += pltax;\n                        }\n                    }\n                    if (value.publicLightingTax.hasOwnProperty(\"taxType\")) {\n                        taxList.push({\n                            name: value.publicLightingTax.taxType.name,\n                            amount: pltax,\n                            id: value.publicLightingTax.taxType.id,\n                        });\n                    }\n                }\n                if (value.otherTax) {\n                    otherTax = this.autoCalculateTax(\n                        value.otherTax,\n                        kendo.parseFloat(value.amount) - kendo.parseFloat(discount)\n                    );\n                    otherTax = kendo.parseFloat(otherTax)\n                        ? kendo.parseFloat(otherTax)\n                        : 0;\n                    value[\"otherTaxAmount\"] = otherTax;\n                    value[\"otherTaxExchangeAmount\"] =\n                        otherTax * kendo.parseFloat(this.saleOrder.txnRate);\n                    const tax = value.otherTax;\n                    const baseAmount = tax.baseAmount;\n                    if (baseAmount) {\n                        if (baseAmount.toLowerCase() === \"inclusive\") {\n                            inclusiveTax += otherTax;\n                        }\n                    }\n                    if (value.otherTax.hasOwnProperty(\"taxType\")) {\n                        taxList.push({\n                            name: value.otherTax.taxType.name,\n                            amount: otherTax,\n                            id: value.otherTax.taxType.id,\n                        });\n                    }\n                }\n\n                if (value.vatTax) {\n                    // window.console.log('Vat Tax', value.vatTax)\n                    let amt =\n                        kendo.parseFloat(spTax ? spTax : 0) +\n                        kendo.parseFloat(pltax ? pltax : 0) +\n                        kendo.parseFloat(otherTax ? otherTax : 0) +\n                        (kendo.parseFloat(value.amount ? value.amount : 0) -\n                            (discount ? discount : 0));\n                    vatTax = this.autoCalculateTax(value.vatTax, amt);\n                    vatTax = kendo.parseFloat(vatTax) ? kendo.parseFloat(vatTax) : 0;\n                    value[\"vatTaxAmount\"] = vatTax;\n                    value[\"vatTaxExchangeAmount\"] =\n                        vatTax * kendo.parseFloat(this.saleOrder.txnRate);\n                    const tax = value.vatTax;\n                    const baseAmount = tax.baseAmount;\n                    if (baseAmount) {\n                        if (baseAmount.toLowerCase() === \"inclusive\") {\n                            inclusiveTax += vatTax;\n                        }\n                    }\n                    if (value.vatTax.hasOwnProperty(\"taxType\")) {\n                        taxList.push({\n                            name: value.vatTax.taxType.name,\n                            amount: vatTax,\n                            id: value.vatTax.taxType.id,\n                        });\n                    }\n                }\n                totalTax +=\n                    kendo.parseFloat(spTax ? spTax : 0) +\n                    kendo.parseFloat(pltax ? pltax : 0) +\n                    kendo.parseFloat(otherTax ? otherTax : 0) +\n                    kendo.parseFloat(vatTax ? vatTax : 0);\n                subTotal +=\n                    kendo.parseFloat(value.amount) + modifierPrice - inclusiveTax;\n\n                const item = value.item;\n                const itmType = item.type || \"\";\n                if (itmType === \"Variant\") {\n                    itemSubtotal +=\n                        kendo.parseFloat(value.price) * kendo.parseFloat(value.qty);\n                    itemDiscount += kendo.parseFloat(discount);\n                } else if (itmType === \"Service\") {\n                    serviceSubtotal +=\n                        kendo.parseFloat(value.price) * kendo.parseFloat(value.qty);\n                    serviceDiscount += kendo.parseFloat(discount);\n                } else {\n                    txnItmSubtotal +=\n                        kendo.parseFloat(value.price) * kendo.parseFloat(value.qty);\n                    txnDiscount += kendo.parseFloat(discount);\n                }\n                //include Tax Amount\n                const amountNodiscount =\n                    kendo.parseFloat(value.price) * kendo.parseFloat(value.qty) -\n                    discount;\n                const includeTaxAmount =\n                    amountNodiscount + vatTax + pltax + spTax + otherTax;\n                value[\"includeTaxAmount\"] = includeTaxAmount;\n                value[\"includeTaxExchangeAmount\"] =\n                    includeTaxAmount * kendo.parseFloat(this.saleOrder.txnRate);\n            });\n\n            this.saleOrder.itemSubtotal = itemSubtotal;\n            this.saleOrder.exchangeItemSubtotal = itemSubtotal * kendo.parseFloat(this.saleOrder.txnRate);\n\n            this.saleOrder.serviceSubtotal = serviceSubtotal;\n            this.saleOrder.exchangeServiceSubtotal = serviceSubtotal * kendo.parseFloat(this.saleOrder.txnRate);\n            this.saleOrder.txnItmSubtotal = txnItmSubtotal;\n            this.saleOrder.exchangeTxnItmSubtotal = txnItmSubtotal * kendo.parseFloat(this.saleOrder.txnRate);\n\n            this.saleOrder.itemDiscount = itemDiscount;\n            this.saleOrder.exchangeItemDiscount = itemDiscount * kendo.parseFloat(this.saleOrder.txnRate);\n            this.saleOrder.serviceDiscount = serviceDiscount;\n            this.saleOrder.exchangeServiceDiscount = serviceDiscount * kendo.parseFloat(this.saleOrder.txnRate);\n            this.saleOrder.txnItmDiscount = txnDiscount;\n            this.saleOrder.exchangeTxnItmDiscount = txnDiscount * kendo.parseFloat(this.saleOrder.txnRate);\n\n            discountTotal = discountTotal ? discountTotal : 0;\n\n            // window.console.log(spTax, pltax, otherTax, vatTax)\n            let total =\n                kendo.parseFloat(subTotal) -\n                kendo.parseFloat(discountTotal) +\n                kendo.parseFloat(totalTax);\n            this.saleOrder.subTotal = subTotal;\n            this.saleOrder.totalTaxAmount = kendo.parseFloat(totalTax);\n            this.saleOrder.discountTotal = kendo.parseFloat(discountTotal);\n            if (this.saleOrder.specificDiscountItem) {\n                discountInvoice = this.autoCalculateDiscount(\n                    this.saleOrder.specificDiscountItem,\n                    kendo.parseFloat(subTotal)\n                );\n                discountInvoice = discountInvoice ? discountInvoice : 0;\n            }\n            // this.onOtherChargeChange()\n            this.saleOrder.total =\n                kendo.parseFloat(total) -\n                discountInvoice +\n                kendo.parseFloat(this.saleOrder.otherChargeAmount);\n            this.saleOrder.exchangeAmount =\n                kendo.parseFloat(this.saleOrder.total) *\n                kendo.parseFloat(this.saleOrder.txnRate);\n            this.autoCalculateTaxByType(taxList);\n            this.customerDiscountItem = this.removeDuplicate(discountItem);\n            this.customerSaleUnit = this.removeDuplicate(saleUnit);\n            // window.console.log('discount ', this.customerDiscountItem)\n        },\n        rowNumberTmpl(dataItem) {\n            let ds = this.$refs.itemLineDS.kendoWidget(),\n                index = ds.indexOf(dataItem);\n            return index + 1;\n        },\n        async loadSaleFormContent() {\n            new Promise((resolve) => {\n                setTimeout(() => {\n                    resolve(\"resolved\");\n                    saleFormContentHandler.list().then((res) => {\n                        if (res.data.statusCode === 200) {\n                            const data = res.data.data;\n                            if (data.length > 0) {\n                                this.saleFormContent = data[0];\n                                // window.console.log(data[0])\n                            }\n                        }\n                    });\n                }, 10);\n            });\n        },\n        vatTemplate(dataItem) {\n            const vat = dataItem.vatTax;\n            if (vat) {\n                return `<span>${vat.defaultTax ? vat.defaultTax : ``}</span>`;\n            } else {\n                return ``;\n            }\n        },\n        itemTemplate(dataItem) {\n            const item = dataItem.item;\n            if (item) {\n                return `<span>${item.name ? item.name : ``}</span>`;\n            } else {\n                return ``;\n            }\n        },\n        UOMTemplate(dataItem) {\n            const uom = dataItem.uom;\n            if (uom) {\n                return `<span>${uom.uom ? uom.uom.name : ``}</span>`;\n            } else {\n                return ``;\n            }\n        },\n        saleUnitTemplate(dataItem) {\n            const saleUnit = dataItem.saleUnit;\n            if (saleUnit) {\n                return `<span>${saleUnit.name ? saleUnit.name : ``}</span>`;\n            } else {\n                return ``;\n            }\n        },\n        discountItemTemplate(dataItem) {\n            const discountItem = dataItem.discountItem;\n            if (discountItem) {\n                return `<span>${discountItem.code ? discountItem.code : ``} - ${\n                    discountItem.name ? discountItem.name : ``\n                }</span>`;\n            } else {\n                return ``;\n            }\n        },\n        ServiceDateEditor(container, options) {\n            kendo\n                .jQuery('<input required name=\"' + options.field + '\"/>')\n                .appendTo(container)\n                .kendoDatePicker();\n\n            // let ds = this.$refs.itemLineDS.kendoWidget()\n            // window.console.log(ds.data())\n            // // const dateString = kendo.toString((new Date(options.model.items.serviceDate)), this.itemLine.dateFormat)\n            // // const dateString = kendo.toString(options.model.items.serviceDate)\n            // const $input = $(\"<input value=\" + options.model.serviceDate + \" />\").appendTo(container)\n            // $input.kendoDatePicker()\n            // // $input.appendTo(container)\n            // // options.model.items.serviceDate = dateString\n            // window.console.log($input)\n        },\n        ServiceDateToEditor(container, options) {\n            kendo\n                .jQuery('<input required name=\"' + options.field + '\"/>')\n                .appendTo(container)\n                .kendoDatePicker();\n        },\n        ItemDropDownEditor(container, options) {\n            kendo\n                .jQuery('<input name=\"' + options.field + '\"/>')\n                .appendTo(container)\n                .kendoDropDownList({\n                    autoBind: true,\n                    autoWidth: true,\n                    height: 400,\n                    filter: \"contains\",\n                    dataTextField: \"name\",\n                    dataValueField: \"id\",\n                    headerTemplate:\n                        '<div class=\"dropdown-header k-widget k-header\">' +\n                        \"<span>Items </span>\" +\n                        \"<span></span>\" +\n                        \"</div>\",\n                    template: \"<span>#=name#</span>\",\n                    optionLabel: \"--- Select ---\",\n                    dataSource: new kendo.data.DataSource({\n                        serverFiltering: true,\n                        transport: {\n                            read: {\n                                url: productVariantHandler.itemSearchURL('?plId=' + this.saleOrder.priceLevel.id),\n                            },\n                            dataType: \"json\",\n                        },\n                        schema: {\n                            model: {\n                                id: \"id\",\n                                fields: {\n                                    id: {type: \"string\"},\n                                    name: {type: \"string\"},\n                                    sku: {type: \"string\"},\n                                },\n                            },\n                            data: function (response) {\n                                return response.data;\n                            },\n                            total: function (response) {\n                                return response.data.count;\n                            },\n                        },\n                        // data: this.variants\n                    }),\n                });\n        },\n        UOMDropDownEditor(container, options) {\n            kendo\n                .jQuery('<input name=\"' + options.field + '\"/>')\n                .appendTo(container)\n                .kendoDropDownList({\n                    autoBind: true,\n                    autoWidth: true,\n                    height: 400,\n                    filter: \"startswith\",\n                    dataTextField: \"uom.name\",\n                    dataValueField: \"uom.id\",\n                    cascadeFrom: \"item\",\n                    template: \"<span>#=uom.name || `No Price Level`#</span>\",\n                    optionLabel: \"--- Select ---\",\n                    dataSource: new kendo.data.DataSource({\n                        serverFiltering: true,\n                        transport: {\n                            read: {\n                                // url: uomPriceHandler.getURL(options.model.item.id, this.saleOrder.priceLevel.id),\n                                url: uomPriceHandler.uomPriceByPriceLevelURL(\n                                    \"id=\" +\n                                    options.model.item.id +\n                                    \"&plId=\" +\n                                    this.saleOrder.priceLevel.id +\n                                    \"&date=\" +\n                                    this.saleOrder.transactionDate\n                                ),\n                            },\n                            dataType: \"json\",\n                        },\n                        schema: {\n                            model: {\n                                id: \"id\",\n                                fields: {\n                                    id: {type: \"string\"},\n                                    // name: {type: \"string\"},\n                                    // sku: {type: \"string\"},\n                                },\n                            },\n                            data: function (response) {\n                                return response.data;\n                            },\n                            total: function (response) {\n                                return response.data.count;\n                            },\n                        },\n                        // data: this.variants\n                    }),\n                });\n        },\n        DiscountItemDropDownEditor(container, options) {\n            kendo\n                .jQuery('<input name=\"' + options.field + '\"/>')\n                .appendTo(container)\n                .kendoDropDownList({\n                    autoBind: true,\n                    autoWidth: true,\n                    height: 400,\n                    filter: \"startswith\",\n                    dataTextField: \"name\",\n                    dataValueField: \"id\",\n                    cascadeFrom: \"item\",\n                    template: \"<span>#=code# - #=name#</span>\",\n                    optionLabel: \"--- Select ---\",\n                    dataSource: new kendo.data.DataSource({\n                        serverFiltering: true,\n                        transport: {\n                            read: {\n                                url: discountItemHandler.getURL(DISCOUNT_TYPE),\n                            },\n                            dataType: \"json\",\n                        },\n                        schema: {\n                            model: {\n                                id: \"id\",\n                                fields: {\n                                    id: {type: \"string\"},\n                                    // name: {type: \"string\"},\n                                    // sku: {type: \"string\"},\n                                },\n                            },\n                            data: function (response) {\n                                return response.data;\n                            },\n                            total: function (response) {\n                                return response.data.count;\n                            },\n                        },\n                    }),\n                });\n        },\n        SpecificTaxDropDownEditor(container, options) {\n            kendo\n                .jQuery('<input name=\"' + options.field + '\"/>')\n                .appendTo(container)\n                .kendoDropDownList({\n                    autoBind: true,\n                    autoWidth: true,\n                    height: 400,\n                    filter: \"startswith\",\n                    dataTextField: \"defaultTax\",\n                    dataValueField: \"id\",\n                    template: \"<span>#=defaultTax#</span>\",\n                    optionLabel: \"--- Select ---\",\n                    dataSource: new kendo.data.DataSource({\n                        data: this.specificTax.filter((m) => {\n                            if (options.model.hasOwnProperty(\"vatTax\")) {\n                                const vat = options.model.vatTax;\n                                if (vat) {\n                                    if (\n                                        options.model.vatTax !== null ||\n                                        options.model.vatTax !== \"null\"\n                                    ) {\n                                        if (options.model.vatTax.baseAmount) {\n                                            return (\n                                                m.baseAmount.toLowerCase() ===\n                                                options.model.vatTax.baseAmount.toLowerCase()\n                                            );\n                                        } else {\n                                            return m;\n                                        }\n                                    }\n                                } else {\n                                    return m;\n                                }\n                            }\n                        }),\n                    }),\n                });\n        },\n        PublicLightingTaxDropDownEditor(container, options) {\n            kendo\n                .jQuery('<input name=\"' + options.field + '\"/>')\n                .appendTo(container)\n                .kendoDropDownList({\n                    autoBind: true,\n                    autoWidth: true,\n                    height: 400,\n                    filter: \"startswith\",\n                    dataTextField: \"defaultTax\",\n                    dataValueField: \"id\",\n                    template: \"<span>#=defaultTax#</span>\",\n                    optionLabel: \"--- Select ---\",\n                    dataSource: new kendo.data.DataSource({\n                        data: this.publicLightingTax.filter((m) => {\n                            if (options.model.hasOwnProperty(\"vatTax\")) {\n                                const vat = options.model.vatTax;\n                                if (vat) {\n                                    if (\n                                        options.model.vatTax !== null &&\n                                        options.model.vatTax !== \"null\"\n                                    ) {\n                                        if (options.model.vatTax.baseAmount) {\n                                            return (\n                                                m.baseAmount.toLowerCase() ===\n                                                options.model.vatTax.baseAmount.toLowerCase()\n                                            );\n                                        } else {\n                                            return m;\n                                        }\n                                    }\n                                } else {\n                                    return m;\n                                }\n                            }\n                        }),\n                    }),\n                });\n        },\n        OtherTaxDropDownEditor(container, options) {\n            kendo\n                .jQuery('<input name=\"' + options.field + '\"/>')\n                .appendTo(container)\n                .kendoDropDownList({\n                    autoBind: true,\n                    autoWidth: true,\n                    height: 400,\n                    filter: \"startswith\",\n                    dataTextField: \"defaultTax\",\n                    dataValueField: \"id\",\n                    template: \"<span>#=defaultTax#</span>\",\n                    optionLabel: \"--- Select ---\",\n                    dataSource: new kendo.data.DataSource({\n                        data: this.otherTax.filter((m) => {\n                            if (options.model.hasOwnProperty(\"vatTax\")) {\n                                const vat = options.model.vatTax;\n                                if (vat) {\n                                    if (\n                                        options.model.vatTax !== null &&\n                                        options.model.vatTax !== \"null\"\n                                    ) {\n                                        if (options.model.vatTax.baseAmount) {\n                                            return (\n                                                m.baseAmount.toLowerCase() ===\n                                                options.model.vatTax.baseAmount.toLowerCase()\n                                            );\n                                        } else {\n                                            return m;\n                                        }\n                                    }\n                                } else {\n                                    return m;\n                                }\n                            }\n                        }),\n                    }),\n                });\n        },\n        VatTaxDropDownEditor(container, options) {\n            kendo\n                .jQuery('<input name=\"' + options.field + '\"/>')\n                .appendTo(container)\n                .kendoDropDownList({\n                    autoBind: true,\n                    autoWidth: true,\n                    height: 400,\n                    filter: \"startswith\",\n                    dataTextField: \"defaultTax\",\n                    dataValueField: \"id\",\n                    template: \"<span>#=defaultTax#</span>\",\n                    optionLabel: \"--Select--\",\n                    dataSource: new kendo.data.DataSource({\n                        data: this.vatTax,\n                    }),\n                });\n        },\n        SaleUnitDropDownEditor(container, options) {\n            kendo\n                .jQuery('<input name=\"' + options.field + '\"/>')\n                .appendTo(container)\n                .kendoDropDownList({\n                    autoBind: true,\n                    autoWidth: true,\n                    height: 400,\n                    filter: \"startswith\",\n                    dataTextField: \"name\",\n                    dataValueField: \"id\",\n                    template: \"<span>#=code# - #=name#</span>\",\n                    optionLabel: \"--- Select ---\",\n                    dataSource: new kendo.data.DataSource({\n                        data: this.saleUnitItemList,\n                    }),\n                });\n        },\n        ModifierDropDownEditor(container, options) {\n            const item = options.model.item || {}\n            const uom = item.uom || {}\n            const itemId = item.id || ''\n            const uomId = uom.id || ''\n            kendo\n                .jQuery('<input name=\"' + options.field + '\"/>')\n                .appendTo(container)\n                .kendoDropDownList({\n                    autoBind: true,\n                    autoWidth: true,\n                    height: 400,\n                    filter: \"contains\",\n                    dataTextField: \"name\",\n                    dataValueField: \"id\",\n                    headerTemplate:\n                        '<div class=\"dropdown-header k-widget k-header\">' +\n                        \"<span>Modifier </span>\" +\n                        \"<span></span>\" +\n                        \"</div>\",\n                    template: \"<span>#=name#</span>\",\n                    optionLabel: \"--- Select ---\",\n                    dataSource: new kendo.data.DataSource({\n                        serverFiltering: true,\n                        transport: {\n                            read: {\n                                url: itemModifierHandler.searchURL('?plId=' + this.saleOrder.priceLevel.id + '&id=' + itemId + '&uomId=' + uomId),\n                            },\n                            dataType: \"json\",\n                        },\n                        schema: {\n                            model: {\n                                id: \"id\",\n                                fields: {\n                                    id: {type: \"string\"},\n                                    name: {type: \"string\"},\n                                    price: {type: \"number\"},\n                                    uom: {type: \"string\"},\n                                },\n                            },\n                            data: function (response) {\n                                return response.data;\n                            },\n                            total: function (response) {\n                                return response.data.count;\n                            },\n                        },\n                    }),\n                });\n        },\n        EmployeeDropDownEditor(container, options) {\n            kendo\n                .jQuery('<input data-bind=\"value:' + options.field + '\"/>')\n                .appendTo(container)\n                .kendoMultiSelect({\n                    autoBind: true,\n                    autoWidth: true,\n                    height: 400,\n                    suggest: true,\n                    filter: \"contains\",\n                    dataTextField: \"name\",\n                    dataValueField: \"id\",\n                    headerTemplate:\n                        '<div class=\"dropdown-header k-widget k-header\">' +\n                        \"<span>Employee </span>\" +\n                        \"<span></span>\" +\n                        \"</div>\",\n                    template: \"<span>#=name#</span>\",\n                    optionLabel: \"--- Select ---\",\n                    dataSource: new kendo.data.DataSource({\n                        serverFiltering: true,\n                        transport: {\n                            read: {\n                                url: employeeHandler.searchURL(),\n                            },\n                            dataType: \"json\",\n                        },\n                        schema: {\n                            model: {\n                                id: \"id\",\n                                fields: {\n                                    id: {type: \"string\"},\n                                    name: {type: \"string\"},\n                                    firstName: {type: \"string\"},\n                                    lastName: {type: \"string\"},\n                                },\n                            },\n                            data: function (response) {\n                                return response.data;\n                            },\n                            total: function (response) {\n                                return response.data.count;\n                            },\n                        },\n                    }),\n                });\n        },\n        empImpl(dataItem) {\n            let empIds = [];\n            dataItem.employee.forEach((m) => {\n                empIds.push(m.firstName + \" - \" + m.lastName);\n            });\n            // window.console.log(empIds.join(', '))\n            return `<span>${empIds.join(\", \")}</span>`;\n        },\n        addRow() {\n            let ds = this.$refs.itemLineDS.kendoWidget(),\n                total = ds.total();\n            this.itemLine.id = invoicePrefix + uuid.v1();\n            ds.insert(total, this.itemLine);\n        },\n        onSpecificDiscountChanged() {\n            if (this.saleOrder.specificDiscountItem) {\n                const discountOrder = this.autoCalculateDiscount(\n                    this.saleOrder.specificDiscountItem,\n                    this.saleOrder.subTotal\n                );\n                this.saleOrder.specificDiscountTotal = kendo.toString(\n                    discountOrder ? discountOrder : 0,\n                    \"n\"\n                );\n                let total =\n                    kendo.parseFloat(this.saleOrder.subTotal) -\n                    (kendo.parseFloat(this.saleOrder.discountTotal) +\n                        kendo.parseFloat(this.saleOrder.totalTaxAmount)) -\n                    discountOrder;\n                this.saleOrder.total = kendo.toString(total, \"n\");\n            }\n        },\n        onOtherChargeChange() {\n            let otherCharge = 0;\n            this.mOtherCharge.forEach((m) => {\n                otherCharge += this.autoCalculateDiscount(m, this.saleOrder.subTotal);\n            });\n            this.saleOrder.otherChargeAmount = otherCharge;\n            this.autoCalculate();\n        },\n        async loadOtherCharge() {\n            new Promise((resolve) => {\n                setTimeout(() => {\n                    resolve(\"resolved\");\n                    otherChargeHandler.list().then((res) => {\n                        if (res.data.statusCode === 200) {\n                            this.otherChargeList = res.data.data;\n                        }\n                    });\n                }, 10);\n            });\n        },\n        onOtherAmount(value) {\n            return this.autoCalculateDiscount(value, this.saleOrder.subTotal);\n        },\n        async loadDiscountItem() {\n            new Promise((resolve) => {\n                setTimeout(() => {\n                    resolve(\"resolved\");\n                    discountItemHandler.list().then((res) => {\n                        if (res.data.statusCode === 200) {\n                            this.specificDiscountItem = res.data.data;\n                        }\n                    });\n                }, 10);\n            });\n        },\n        async loadSegment() {\n            this.segments = []\n            const roleType = dataStore.roleType || 0\n            if (roleType === 0) {\n                if (dataStore.roleData) {\n                    const roleData = dataStore.roleData || []\n                    const segment = roleData.filter(itm => itm.type === 'segment')\n                    const segmentDefault = segment.filter(m => m.isDefault === 1)\n                    this.segments = segment\n                    if (this.$route.params.id === undefined || this.$route.params.id === '') {\n                        if (segmentDefault.length > 0) {\n                            this.saleOrder.segment = segmentDefault[0];\n                        }\n                    }\n                }\n            } else if (roleType === 1) {\n                new Promise((resolve) => {\n                    setTimeout(() => {\n                        resolve(\"resolved\");\n                        this.segments = [];\n                        settingsHandler\n                            .getSeg()\n                            .then((res) => {\n                                this.showLoading = true;\n                                if (res.data.statusCode === 200) {\n                                    this.showLoading = false;\n                                    this.segments = res.data.data;\n                                } else {\n                                    this.showLoading = false\n                                }\n                            })\n                    }, 10);\n                });\n            }\n\n\n        },\n        async loadLocation() {\n            this.locations = []\n            const roleType = dataStore.roleType || 0\n            if (roleType === 0) {\n                if (dataStore.roleData) {\n                    const roleData = dataStore.roleData || []\n                    const location = roleData.filter(itm => itm.type === 'location')\n                    const locationDefault = location.filter(m => m.isDefault === 1)\n                    this.locations = location\n                    if (this.$route.params.id === undefined || this.$route.params.id === '') {\n                        if (locationDefault.length > 0) {\n                            this.saleOrder.location = locationDefault[0];\n                        }\n                    }\n                }\n            } else if (roleType === 1) {\n                new Promise((resolve) => {\n                    setTimeout(() => {\n                        resolve(\"resolved\");\n                        this.locations = [];\n                        locationHandler\n                            .list()\n                            .then((res) => {\n                                this.showLoading = true;\n                                if (res.data.statusCode === 200) {\n                                    this.showLoading = false;\n                                    this.locations = res.data.data;\n                                } else {\n                                    this.showLoading = false;\n                                }\n                            })\n                    }, 10);\n                });\n            }\n        },\n        async loadProjectByCustomer() {\n            this.customerProjects = []\n            const roleType = dataStore.roleType || 0\n            if (roleType === 0) {\n                if (dataStore.roleData) {\n                    const roleData = dataStore.roleData || []\n                    const project = roleData.filter(itm => itm.type === 'project')\n                    project.forEach(k => {\n                        const customers = k.customers || []\n                        const proCustomer = customers.filter(n => n.customer.id === this.customer.id)\n                        if (proCustomer.length > 0) {\n                            this.customerProjects.push(k)\n                        }\n                    })\n                    if (this.$route.params.id === undefined || this.$route.params.id === '') {\n                        const projectDefault = this.customerProjects.filter(m => m.isDefault === 1)\n                        if (projectDefault.length > 0) {\n                            this.saleOrder.project = projectDefault[0];\n                        }\n                    }\n                }\n            } else if (roleType === 1) {\n                new Promise((resolve) => {\n                    setTimeout(() => {\n                        resolve(\"resolved\");\n                        projectHandler\n                            .getByCustomer(this.customer.id)\n                            .then((res) => {\n                                this.showLoading = true;\n                                if (res.data.statusCode === 200) {\n                                    this.showLoading = false;\n                                    this.customerProjects = res.data.data;\n                                } else {\n                                    this.showLoading = false;\n                                }\n                            })\n                    }, 10);\n                });\n            }\n        },\n        async loadSaleChannel() {\n            new Promise((resolve) => {\n                setTimeout(() => {\n                    resolve(\"resolved\");\n                    this.showLoading = true;\n                    saleChannelHandler.get().then((res) => {\n                        if (res.data.statusCode === 200) {\n                            this.showLoading = false;\n                            this.saleChannelList = res.data.data;\n                            if (this.saleChannelList.length > 0) {\n                                if (\n                                    this.$route.params.id !== undefined ||\n                                    this.$route.params.id != \"\"\n                                ) {\n                                    this.saleOrder.saleChannel = this.saleChannelList[0];\n                                }\n                            }\n                        } else {\n                            this.showLoading = false;\n                        }\n                    });\n                }, 10);\n            });\n        },\n        async loadTax() {\n            new Promise((resolve) => {\n                setTimeout(() => {\n                    resolve(\"resolved\");\n                    settingHandler.get().then((res) => {\n                        this.tax = res;\n                        this.otherTax = this.tax.filter(\n                            (m) =>\n                                (m.taxType.typeId === 7 || m.taxType.typeId === 10) &&\n                                m.transactionType === \"Sale\"\n                        ); // valuable tax\n                        this.specificTax = this.tax.filter(\n                            (m) =>\n                                (m.taxType.typeId === 8 || m.taxType.typeId === 10) &&\n                                m.transactionType === \"Sale\"\n                        ); // valuable tax\n                        this.publicLightingTax = this.tax.filter(\n                            (m) =>\n                                (m.taxType.typeId === 9 || m.taxType.typeId === 10) &&\n                                m.transactionType === \"Sale\"\n                        ); // valuable tax\n                        this.vatTax = this.tax.filter(\n                            (m) =>\n                                (m.taxType.typeId === 1 ||\n                                    m.taxType.typeId === 8 ||\n                                    m.taxType.typeId === 10) &&\n                                m.transactionType === \"Sale\"\n                        ); // valuable tax\n                    });\n                }, 10);\n            });\n        },\n        async loadSaleUnitItems() {\n            new Promise((resolve) => {\n                setTimeout(() => {\n                    resolve(\"resolved\");\n                    saleUnitItemHandler.list().then((res) => {\n                        if (res.data.statusCode === 200)\n                            this.saleUnitItemList = res.data.data;\n                    });\n                }, 10);\n            });\n        },\n        async loadCustomerBalance(id) {\n            new Promise((resolve) => {\n                setTimeout(() => {\n                    resolve(\"resolved\");\n                    const strFilter = id + \"?type=bal\";\n                    billingHandler\n                        .balance(strFilter)\n                        .then((res) => {\n                            if (res.data.statusCode === 200) {\n                                const data = res.data.data;\n                                if (data.length > 0) {\n                                    this.saleOrder.currentBalance = data[0].balance;\n                                }\n                            }\n                        })\n                        .catch();\n                    {\n                        this.showLoading = false;\n                    }\n                }, 10);\n            });\n        },\n        creditLimitUsage(balance, creditLimit) {\n            let num = 0;\n            let per = (balance / creditLimit) * 100\n            if (isNaN(per)) {\n                // It isn't a number\n                num = 0\n            } else {\n                // It is a number\n                num = per;\n            }\n            return num + \" %\";\n        },\n        close(data) {\n            if (this.$route.params.id === undefined) {\n                this.$router.push({\n                    name: \"revenues\",\n                    params: {\n                        data: data,\n                    },\n                });\n            } else {\n                window.history.go(-1);\n            }\n            window.console.log(data, \"close\");\n            // localStorage.data.id = JSON.stringify(data)\n        },\n        //catalog\n        loadImage(dataItem) {\n            if (dataItem.hasOwnProperty(\"images\")) {\n                if (dataItem.images.hasOwnProperty(\"default\")) {\n                    const url = this.imgURL + dataItem.images.default.thumb;\n                    return (\n                        \"<img width='50' height='50' style= 'margin: auto;display: block;' src='\" +\n                        url +\n                        \"' />\"\n                    );\n                }\n            } else {\n                return \"\";\n            }\n        },\n        async loadCatalogs() {\n            new Promise((resolve) => {\n                setTimeout(() => {\n                    resolve(\"resolved\");\n                    this.showLoading = true;\n                    catalogHandler.get().then((res) => {\n                        this.showLoading = false;\n                        this.catalogs = res;\n                    });\n                }, 10);\n            });\n        },\n        addCatalog(e) {\n            e.preventDefault();\n            let grid = kendo.jQuery(\"#gridCatalog\").data(\"kendoGrid\");\n            let dataItem = grid.dataItem($(e.currentTarget).closest(\"tr\"));\n            // window.console.log(dataItem)\n            if (dataItem.variants.length > 0) {\n                dataItem.variants.forEach((m) => {\n                    if (m.hasOwnProperty(\"variant\")) {\n                        if (m.variant.hasOwnProperty(\"id\")) {\n                            this.loadSingleItem(m.variant.id, \"i\");\n                        }\n                    }\n                });\n                this.dialogCatalog = false;\n            }\n            if (dataItem.services.length > 0) {\n                dataItem.services.forEach((m) => {\n                    if (m.hasOwnProperty(\"service\")) {\n                        if (m.service.hasOwnProperty(\"id\")) {\n                            this.loadSingleItem(m.service.id, \"s\");\n                        }\n                    }\n                });\n                this.dialogCatalog = false;\n            }\n        },\n        async loadSingleItem(itemId, type) {\n            new Promise((resolve) => {\n                resolve(\"resolved\");\n                setTimeout(() => {\n                    this.showLoading = true;\n                    productHandler.getOne(itemId).then((res) => {\n                        this.showLoading = false;\n                        let data = res;\n                        window.console.log(data);\n                        let ds = this.$refs.itemLineDS.kendoWidget(),\n                            total = ds.total();\n                        this.itemLine.id = invoicePrefix + uuid.v1();\n                        this.itemLine.item = data;\n                        if (type == \"i\") {\n                            this.itemLine.description = data.variant.saleDescription;\n                        } else {\n                            this.itemLine.description = data.saleDescription;\n                        }\n                        ds.insert(total, this.itemLine);\n                    });\n                }, 500);\n            });\n        },\n        async loadPrefix() {\n            new Promise((resolve) => {\n                setTimeout(() => {\n                    resolve(\"resolved\");\n                    prefixHandler.get(\"sale order\").then((res) => {\n                        if (res.data.statusCode === 200) {\n                            this.showLoading = false;\n                            this.transactionType = res.data.data;\n                            if (this.transactionType.length > 0) {\n                                this.saleOrder.transactionType = this.transactionType[0];\n                                if (!this.initsaleOrder) {\n                                    this.generateNumber();\n                                }\n                            }\n                        }\n                    });\n                }, 10);\n            });\n        },\n        async loadViewsaleOrder() {\n            if (!this.initsaleOrder) {\n                this.isEdit = true\n                new Promise((resolve) => {\n                    setTimeout(() => {\n                        resolve(\"resolved\");\n                        this.showLoading = true;\n                        saleOrderHandler\n                            .view(this.$route.params.id)\n                            .then((res) => {\n                                if (res.data.statusCode === 200) {\n                                    this.showLoading = false;\n                                    this.saleOrder = res.data.data[0];\n                                    this.quotes = this.saleOrder.refFrom || []\n                                    this.bindData();\n                                }\n                            })\n                            .catch();\n                        {\n                            this.showLoading = false;\n                        }\n                    }, 10);\n                });\n            } else {\n                this.setDefaultData()\n            }\n        },\n        async loadQuote() {\n            if (this.saleOrder.customer) {\n                this.refFrom = []\n                this.showLoading = true;\n                this.quotes = [];\n                new Promise((resolve) => {\n                    setTimeout(() => {\n                        resolve(\"resolved\");\n                        let data = {\n                            method: \"by_customer\",\n                            customer: this.saleOrder.customer.id,\n                            segmentId: this.saleOrder.segment.id,\n                            locationId: this.saleOrder.location.id,\n                            priceLevelId: this.saleOrder.priceLevel.id,\n                            type: \"Sale Quote\",\n                        };\n                        saleOrderHandler.search(data).then((res) => {\n                            this.showLoading = false;\n                            this.quotes = res.data.data;\n                        });\n                    }, 10);\n                });\n            }\n        },\n        addQuote(data) {\n            //add item lines\n            let txnData = data.txnData || {}\n            const itemLines = data.itemLines || []\n            this.refFrom.push({\n                id: data.id || '',\n                reference: data.number || '',\n                customerId: txnData.customerId || '',\n            })\n            if (itemLines.length > 0) {\n                this.removeEmptyLine();\n                itemLines.forEach((m) => {\n                    m.txn_add_id = txnData.id;\n                    m.id = invoicePrefix + uuid.v1();\n                    let ds = this.$refs.itemLineDS.kendoWidget(),\n                        total = ds.total();\n                    ds.insert(total, m);\n                });\n                // this.addRow();\n            }\n            //add other chard\n            if (data.otherCharge.length > 0) {\n                data.otherCharge.forEach((m) => {\n                    m.txn_add_id = txnData.id;\n                    this.mOtherCharge.push(m);\n                });\n                this.autoCalculate();\n                this.onOtherChargeChange();\n            }\n            // add txnlist\n            this.txnLists.push(txnData);\n            if (txnData.lead.id !== undefined) {\n                this.txnLists.push(txnData.lead);\n            }\n            // window.console.log(this.txnLists);\n            //remove txn\n            const index = this.quotes.findIndex((item) => {\n                return data.id === item.id;\n            });\n            this.autoCalculate();\n            this.quotes.splice(index, 1);\n            // this.quotes[index].is_added = true\n            // window.console.log(this.quotes)\n            this.saleOrder.refFrom = this.removeDuplicate(this.refFrom)\n            window.console.log('ref', this.saleOrder.refFrom)\n        },\n        removeEmptyLine() {\n            const grid = kendo.jQuery(\"#gridItemLineSaleOrder\").data(\"kendoGrid\"),\n                dataSource = grid.dataSource;\n            dataSource.data().forEach((m) => {\n                if (m) {\n                    const item = m.item || {}\n                    if (item.id === undefined || item.id === '') {\n                        dataSource.remove(m);\n                    }\n                }\n            });\n        },\n        async loadTransactionRate() {\n            new Promise((resolve) => {\n                setTimeout(() => {\n                    resolve(\"resolved\");\n                    const date = new Date(this.saleOrder.transactionDate)\n                        .toISOString()\n                        .substr(0, 10);\n                    const priceLevel = this.saleOrder.priceLevel;\n                    let code = \"\";\n                    if (priceLevel.hasOwnProperty(\"currency\")) {\n                        if (priceLevel.currency.hasOwnProperty(\"code\")) {\n                            code = priceLevel.currency.code;\n                        }\n                    }\n                    if (code !== undefined || code !== \"\") {\n                        this.showLoading = true;\n                        currencyHandler\n                            .getLastExchangeRateByDate(date, code)\n                            .then((res) => {\n                                if (res.data.statusCode === 200) {\n                                    this.showLoading = false;\n                                    this.exchangeRate = res.data.data[0];\n                                    this.currencyCode = this.exchangeRate.code;\n                                    this.transactionRate = this.exchangeRate.rate;\n                                    this.saleOrder.txnRate = this.exchangeRate.rate;\n                                    this.saleOrder.exchangeRate = this.exchangeRate;\n                                    this.showLoading = false;\n                                }\n                            });\n                    }\n                }, 10);\n            });\n        },\n        clear() {\n            this.id = undefined;\n            this.saleOrder = {};\n            this.itemLines = [];\n            this.customer = ''\n            this.generateNumber();\n        },\n        saveClose() {\n            let id = \"\";\n            if (this.customer.hasOwnProperty(\"id\")) {\n                id = this.customer.id || \"\";\n            }\n            if (id === \"\") {\n                this.$snotify.error(\"customer is require\");\n                return;\n            }\n            let ds = this.$refs.itemLineDS.kendoWidget();\n            let d1 = ds.data().filter((m) => m.amount > 0);\n            let dataValidate = 0;\n            d1.forEach((value, index) => {\n                if (value.item.id == undefined || value.uom.id == undefined) {\n                    this.$snotify.error(\n                        \"Please check Item or Uom  on row \" + (index + 1)\n                    );\n                } else {\n                    dataValidate += 1;\n                }\n            });\n            if (d1.length == dataValidate) {\n                this.isSaveClose = true;\n                this.saveOption = \"saveClose\";\n                this.save();\n            }\n        },\n        savePrint() {\n            this.isSavePrint = true;\n            this.saveOption = \"savePrint\";\n            this.save();\n        },\n        saveNew() {\n            this.saveOption = \"saveNew\";\n            this.isSaveNew = true;\n            this.save();\n        },\n        cancel() {\n            this.$swal({\n                title: i18n.t(\"msg_title_warning\"),\n                text: i18n.t(\"msg_discard\"),\n                icon: \"warning\",\n                showCancelButton: true,\n                cancelButtonText: i18n.t(\"cancel\"),\n                confirmButtonColor: \"#4d4848\",\n                cancelButtonColor: \"#ED1A3A\",\n                confirmButtonText: i18n.t(\"discard\"),\n            }).then((resultCen) => {\n                window.console.log(resultCen);\n                if (resultCen.value) {\n                    this.$router.go(-1);\n                }\n            });\n        },\n        saveDraft() {\n            this.saveOption = \"saveDraft\";\n            this.isSaveDraft = true;\n            this.save();\n        },\n        async save() {\n            if (!this.$refs.form.validate()) {\n                this.$refs.form.validate();\n                return;\n            }\n            new Promise((resolve) => {\n                setTimeout(() => {\n                    resolve(\"resolved\");\n                    this.removeEmptyLine();\n                    let itemLineDS = this.$refs.itemLineDS.kendoWidget(),\n                        total = itemLineDS.total();\n                    let itmLines = itemLineDS.data().filter(m => m.amount > 0).map(m => {\n                        return new ItemLineModel(m);\n                    })\n\n                    if (total <= 0) {\n                        this.$snotify.error(\"Field Required!\");\n                        return;\n                    }\n                    if (!this.isRequredPurchase) {\n                        this.saleOrder.supplier = {};\n                    } else {\n                        //is for purchase\n                        this.saleOrderType = 5;\n                    }\n                    // window.console.log(itmLines, 'itmLines')\n                    // window.console.log(JSON.stringify(itmLines), 'itmLines')\n                    let data = {\n                        id: this.saleOrder.id ? this.saleOrder.id : \"\",\n                        type: \"Sale Order\",\n                        transactionType: this.saleOrder.transactionType,\n                        number: this.saleOrder.number,\n                        abbr: this.saleOrder.transactionType.abbr,\n                        transactionDate: this.saleOrder.transactionDate,\n                        transactionDateTZ: Helper.toISODate(this.saleOrder.transactionDate),\n                        validityDate: this.saleOrder.validityDate,\n                        monthOf: this.saleOrder.monthOf,\n                        customer: this.saleOrder.customer,\n                        paymentTerm: this.saleOrder.paymentTerm,\n                        discountPromotion: {},\n                        priceLevel: this.saleOrder.priceLevel,\n                        itemLines: itmLines,\n                        segment: this.saleOrder.segment,\n                        location: this.saleOrder.location,\n                        project: this.saleOrder.project,\n                        saleChannel: this.saleOrder.saleChannel,\n                        billingAddress: this.saleOrder.billingAddress,\n                        deliveryAddress: this.saleOrder.deliveryAddress,\n                        deliveryDateTime: this.saleOrder.deliveryDateTime,\n                        transactionNote: this.saleOrder.transactionNote,\n                        subTotal: this.saleOrder.subTotal,\n                        total: this.saleOrder.total,\n                        amount: this.saleOrder.amount,\n                        discountTotal: this.saleOrder.discountTotal,\n                        specificDiscountTotal: this.saleOrder.specificDiscountTotal,\n                        deliveryFee: this.saleOrder.deliveryFee,\n                        totalTaxAmount: this.saleOrder.totalTaxAmount,\n                        currentBalance: this.saleOrder.currentBalance,\n                        creditLimit: this.saleOrder.creditLimit,\n                        saveOption: this.saveOption,\n                        txnRate: this.saleOrder.txnRate,\n                        rate: 1,\n                        exchangeRate: this.saleOrder.exchangeRate,\n                        exchangeAmount: this.saleOrder.exchangeAmount,\n                        status: 1,\n                        approvedBy: this.saleOrder.approvedBy,\n                        formTemplate: {},\n                        specificDiscountItem: this.saleOrder.specificDiscountItem,\n                        otherCharge: this.mOtherCharge,\n                        otherChargeAmount: this.saleOrder.otherChargeAmount,\n                        publicLink: \"\",\n                        taxListTotal: this.taxListTotal,\n                        customerDiscountItem: this.customerDiscountItem,\n                        customerSaleUnit: this.customerSaleUnit,\n                        loggedUser: this.loggedUser,\n                        txnList: this.txnLists,\n                        saleOrderType: this.saleOrder.saleOrderType,\n                        employee: this.saleOrder.employee,\n                        supplier: this.saleOrder.supplier,\n                        itemSubtotal: this.saleOrder.itemSubtotal,\n                        exchangeItemSubtotal: this.saleOrder.exchangeItemSubtotal,\n                        serviceSubtotal: this.saleOrder.serviceSubtotal,\n                        exchangeServiceSubtotal: this.saleOrder.exchangeServiceSubtotal,\n                        txnItmSubtotal: this.saleOrder.txnItmSubtotal,\n                        exchangeTxnItmSubtotal: this.saleOrder.exchangeTxnItmSubtotal,\n                        itemDiscount: this.saleOrder.itemDiscount,\n                        exchangeItemDiscount: this.saleOrder.exchangeItemDiscount,\n                        serviceDiscount: this.saleOrder.serviceDiscount,\n                        exchangeServiceDiscount: this.saleOrder.exchangeServiceDiscount,\n                        txnItmDiscount: this.saleOrder.txnItmDiscount,\n                        exchangeTxnItmDiscount: this.saleOrder.exchangeTxnItmDiscount,\n                        lead: {},\n                        routeView: \"sale_order_view\",\n                        exspectedDate: \"\",\n                        usedDateAt: \"\",\n                        deletedAt: \"\",\n                        deleted: 0,\n                        refFrom: this.saleOrder.refFrom || [],\n                        refTo: this.saleOrder.refTo || [],\n                        createdAt: new Date().toISOString().substr(0, 10),\n                    };\n                    // window.console.log('data', data)\n                    // window.console.log('data', JSON.stringify(data))\n                    this.showLoading = true;\n                    this.btnDisabled = true\n                    saleOrderHandler\n                        .create(data)\n                        .then((response) => {\n                            this.showLoading = false;\n                            if (response.data.statusCode === 201) {\n                                this.btnDisabled = false\n                                if (this.isSaveNew == true) {\n                                    this.setDefaultData();\n                                } else {\n                                    this.close(response.data.data);\n                                }\n                                // this.$refs.form.reset();\n                                this.$snotify.success(\"Successfully\");\n                            } else {\n                                this.btnDisabled = false\n                                this.showLoading = false;\n                            }\n                        })\n                        .catch((e) => {\n                            this.$snotify.error(\"Something went wrong\");\n                            this.errors.push(e);\n                            window.console.log(e);\n                        });\n                }, 10);\n            });\n        },\n        async loadPaymentTermList() {\n            new Promise((resolve) => {\n                setTimeout(() => {\n                    resolve(\"resolved\");\n                    if (this.customer) {\n                        const strFilter =\n                            \"?id=\" +\n                            this.customer.id +\n                            \"&transactionDate=\" +\n                            this.saleOrder.transactionDate +\n                            \"&type=Customer\";\n                        this.saleOrder.paymentTerm = {};\n                        paymentTermHandler_.get(strFilter).then((res) => {\n                            if (res.data.statusCode === 200) {\n                                const terms = res.data.data;\n                                this.saleOrder.paymentTerm = terms.term;\n                            }\n                        });\n                    }\n                }, 10);\n            });\n        },\n        async loadCreditLimit() {\n            new Promise((resolve) => {\n                setTimeout(() => {\n                    resolve(\"resolved\");\n                    if (this.customer) {\n                        const strFilter =\n                            \"?id=\" +\n                            this.customer.id +\n                            \"&transactionDate=\" +\n                            this.saleOrder.transactionDate +\n                            \"&type=Customer\";\n                        this.saleOrder.creditLimit = 0;\n                        creditLimitHandler.get(strFilter).then((res) => {\n                            if (res.data.statusCode === 200) {\n                                // this.creditLimitItem = res.data.data\n                                const credit = res.data.data;\n                                this.saleOrder.creditLimit = kendo.parseFloat(\n                                    credit.amount || 0\n                                );\n                            }\n                        });\n                    }\n                }, 10);\n            });\n        },\n        async clearUOMItem() {\n            let ds = this.$refs.itemLineDS.kendoWidget();\n            ds.data().map((n) => {\n                n.set(\"uom\", {});\n            });\n            this.isPriceLevelChanged = false;\n        },\n        onPriceLevelChange() {\n            this.isPriceLevelChanged = true;\n            this.loadTransactionRate();\n            this.clearUOMItem();\n            this.loadQuote()\n        },\n        async loadSaleOrder(id) {\n            window.console.log(id, 'load id')\n            this.showLoading = true\n            transactionHandler.view(id).then((res) => {\n                this.showLoading = false\n                this.isEdit = true\n                this.itemLines = []\n                this.saleOrder = res.data.data[0]\n                this.bindData();\n            })\n        },\n        async loadEmployeeCenter() {\n            new Promise((resolve) => {\n                setTimeout(() => {\n                    resolve(\"resolved\");\n                    this.employees = [];\n                    employeeHandler\n                        .center(undefined)\n                        .then((res) => {\n                            this.showLoading = true;\n                            this.saleOrder.employee = {}\n                            this.employees = []\n                            if (res.data.statusCode === 200) {\n                                this.showLoading = false;\n                                this.employees = res.data.data;\n                                // if (this.employees.length > 0) {\n                                //     this.transaction.employee = this.employees[0];\n                                // }\n                            } else {\n                                this.showLoading = false;\n                            }\n                        })\n                        .catch();\n                    {\n                        this.showLoading = false;\n                    }\n                }, 10);\n            });\n        },\n        async loadSingleData() {\n            if (this.$route.name === 'Sale Order') {\n                if (this.initsaleOrder) {\n                    // Edit Mode\n                    this.itemLines = []\n                    this.saleOrder = this.initsaleOrder;\n                    this.bindData();\n                } else {\n                    // new\n                    if (this.$route.params.id != undefined) {\n                        this.loadSaleOrder(this.$route.params.id)\n                    } else {\n                        this.setDefaultData()\n                    }\n                }\n                prefixHandler.get(\"sale order\").then((res) => {\n                    if (res.data.statusCode === 200) {\n                        this.showLoading = false;\n                        this.transactionType = res.data.data;\n                        if (this.transactionType.length > 0) {\n                            if (\n                                this.$route.params.id !== undefined ||\n                                this.$route.params.id != \"\"\n                            ) {\n                                this.saleOrder.transactionType = this.transactionType[0];\n                                if (!this.initSaleOrder && this.$route.params.id === undefined) {\n                                    this.generateNumber();\n                                }\n                            }\n                        }\n                    }\n                });\n                await this.loadPaymentTerm();\n                await this.loadSaleFormContent();\n                await this.loadOtherCharge();\n                await this.loadPriceLevel();\n                await this.loadDiscountItem(0);\n                await this.loadSaleChannel();\n                await this.loadCatalogs();\n                await this.loadLead();\n                this.loadTax();\n                this.loadSaleUnitItems();\n                this.loadSegment();\n                this.loadLocation();\n                this.loadEmployeeCenter();\n            }\n        },\n    },\n    activated() {\n        if (this.$route.params.id) {\n            this.loadViewsaleOrder();\n        }\n    },\n    watch: {\n        initsaleOrder() {\n            this.initialData();\n        },\n        '$route': 'loadSingleData',\n    },\n    created() {\n        this.loadTax();\n        this.loadSaleUnitItems();\n        this.loadPrefix()\n        this.loadSegment();\n        this.loadLocation();\n        // localStorage.saleOrder = \"{name: 'abcssss'}\"\n    },\n    computed: {\n        appType() {\n            return dataStore.productType;\n        },\n        dateFormatted() {\n            return kendo.toString(new Date(), institute.dateFormat);\n        },\n        dateTimeFormatted() {\n            window.console.log(institute.dateFormat + \" HH:mm\", \"inst date\");\n            return kendo.toString(new Date(), institute.dateFormat + \" HH:mm\");\n        },\n        validCustomer() {\n            return this.customer.id !== undefined && this.customer.id !== null;\n        },\n        hiddenButton() {\n            if (this.$route.params.id) {\n                return true\n            } else {\n                return false\n            }\n        },\n        disabledMe() {\n            return !!this.$route.params.id;\n        },\n    },\n    mounted: async function () {\n        this.loadSingleData();\n        await this.requestData(0, this.filter, this.cusBaseUrl);\n        await this.supplierRequestData(0, this.filter, this.supBaseUrl);\n        await this.employeeRequestData(0, this.filter, this.empBaseUrl);\n    },\n};\n</script>\n\n<style scoped>\n.function_content .label {\n  margin-bottom: 10px;\n  display: inline-block;\n}\n.all_center {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n@media (min-width: 1264px) {\n  .container {\n    max-width: 1080px !important;\n  }\n}\n\n@media (max-width: 576px) {\n  .pt-6.col-sm-5.col-12 {\n    padding-top: 0 !important;\n  }\n\n  .code_text {\n    width: 100%;\n  }\n\n  .phone_no_pt {\n    padding-top: 0 !important;\n  }\n\n  .select_template,\n  .save_option {\n    margin-bottom: 10px;\n  }\n}\n</style>\n"]}]}