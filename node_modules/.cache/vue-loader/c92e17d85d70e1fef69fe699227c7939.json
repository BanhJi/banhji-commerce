{"remainingRequest":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/macos/Desktop/banhji-0.2/banhji-commerce/src/views/payroll/PayrollRun.vue?vue&type=style&index=0&id=1bfeba0a&scoped=true&lang=css&","dependencies":[{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/src/views/payroll/PayrollRun.vue","mtime":1638499443249},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/@vue/cli-service/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgouZnVuY3Rpb25fY29udGVudCB7CiAgICBwYWRkaW5nOiAwIDI1cHggMjVweDsKICAgIGJvcmRlci1ib3R0b206IDA7CiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmICFpbXBvcnRhbnQ7Cn0KCkBtZWRpYSAobWluLXdpZHRoOiAxMjY0cHgpIHsKICAgIC5jb250YWluZXIgewogICAgICAgIC8qIG1heC13aWR0aDogMTE4NXB4OyAqLwogICAgICAgIG1heC13aWR0aDogMTA4MHB4ICFpbXBvcnRhbnQ7CiAgICB9Cn0KLmdyYXlCZ3sKICAgIGJhY2tncm91bmQtY29sb3I6ICNmM2Y4ZmY7Cn0KQG1lZGlhIChtYXgtd2lkdGg6IDU3NnB4KSB7CiAgICAuLm1iLTYgewogICAgICAgIG1hcmdpbi1ib3R0b206IDAgIWltcG9ydGFudDsKICAgIH0KfQoKLmJvcmRlcl9ncmV5ewogICAgIGJvcmRlcjogMXB4IHNvbGlkICNkNmQ3ZDg7Cn0KLmF0dGFjaG1lbnRfdGFibGV7CiAgICB3aWR0aDoxMDAlOwp9CgoubXlfY2hlY2tib3ggaW5wdXRbdHlwZT1jaGVja2JveF0gKyBsYWJlbCB7CiAgICBkaXNwbGF5OiBncmlkOwogICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAyMCUgODAlOwogICAgbWFyZ2luOiAwLjJlbSAwcHg7CiAgICBjdXJzb3I6IHBvaW50ZXI7CiAgICBsaW5lLWhlaWdodDogMTZweDsKICAgIHBhZGRpbmc6IDAuMmVtOwp9Cg=="},{"version":3,"sources":["PayrollRun.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4RA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"PayrollRun.vue","sourceRoot":"src/views/payroll","sourcesContent":["<template>\n    <v-app>\n        <v-container>\n            <v-row>\n                <v-col cols=\"12\" sm=\"12\">\n                    <v-card\n                        outlined\n                        dense\n                        class=\"pa-4 no_border rounded-sm\"\n                        color=\"white\">\n                        <v-form ref=\"form\" v-model=\"valid\" lazy-validation>\n                            <v-card outlined dense class=\"no_border\">\n                                <h2 class=\"mb-0\">{{$t('payroll_run')}}</h2>\n                                <v-icon\n                                    @click=\"close()\"\n\t\t\t\t\t\t\t\t\tstyle=\"cursor: pointer; color: #333; font-size: 40px;\"\n\t\t\t\t\t\t\t\t\tclass=\"float-right\"\n                                >close\n                                </v-icon>\n                            </v-card>\n                            <v-row>\n                                <v-col sm=\"12\" cols=\"12\">\n                                    <div class=\"function_content\">\n                                        <v-form ref=\"form\" v-model=\"valid\" lazy-validation>\n                                            <v-row>\n                                                <v-col sm=\"2\" class=\"align-center justify-center d-flex \">\n                                                    <div>\n                                                        <v-card @click=\"ClickSteps(1)\" width=\"44\" height=\"44\" outlined dense :color=\"activeColor1\" class=\"pointer no_border align-center justify-center d-flex rounded-circle \">\n                                                            <h3 class=\"mt-2 white--text\" style=\"font-size: 24px\">1</h3>\n                                                        </v-card>\n                                                        <p class=\"text-uppercase mt-2\">{{$t('input')}}</p>\n                                                    </div>\n                                                </v-col>\n                                                 <v-col sm=\"2\" class=\"align-center justify-center d-flex \">\n                                                    <div>\n                                                        <v-card @click=\"ClickSteps(2)\" width=\"44\" height=\"44\" outlined dense :color=\"activeColor2\" class=\"pointer ml-8 no_border align-center justify-center d-flex rounded-circle \">\n                                                            <h3 class=\"mt-2 white--text\" style=\"font-size: 24px\">2</h3>\n                                                        </v-card>\n                                                        <p class=\"text-uppercase text-center mt-2\">{{$t('adjustments')}}</p>\n                                                    </div>\n                                                </v-col>\n                                                 <v-col sm=\"2\" class=\"align-center justify-center d-flex \">\n                                                    <div>\n                                                        <v-card @click=\"ClickSteps(3)\" width=\"44\" height=\"44\" outlined dense :color=\"activeColor3\" class=\"pointer ml-1 no_border align-center justify-center d-flex rounded-circle \">\n                                                            <h3 class=\"mt-2 white--text\" style=\"font-size: 24px\">3</h3>\n                                                        </v-card>\n                                                        <p class=\"text-uppercase mt-2\">{{$t('review')}}</p>\n                                                    </div>\n                                                </v-col>\n                                                 <v-col sm=\"2\" class=\"align-center justify-center d-flex \">\n                                                    <div>\n                                                        <v-card @click=\"ClickSteps(4)\" width=\"44\" height=\"44\" outlined dense :color=\"activeColor4\" class=\"pointer ml-2 no_border align-center justify-center d-flex rounded-circle \">\n                                                            <h3 class=\"mt-2 white--text\" style=\"font-size: 24px\">4</h3>\n                                                        </v-card>\n                                                        <p class=\"text-uppercase mt-2\">{{$t('finalize')}}</p>\n                                                    </div>\n                                                </v-col>\n                                            </v-row> \n                                            <v-divider/>\n                                            <!-- Body function to input -->\n                                            <div v-show=\"steps==1\">\n                                                 <Input ref=\"modal\" @headline=\"refresh\" :propInput=\"loadPayrolls\"/>\n                                            </div>\n                                            <!-- Steps 2 Adjustemnt -->\n                                            <div v-show=\"steps==2\">\n                                                <Adjustment ref=\"adjust\" @headline=\"refresh\" :propAdjustment=\"loadPayrolls\"/>\n                                            </div>\n                                            <!-- Steps there -->\n                                            <div v-show=\"steps==3\">\n                                                <Review ref=\"review\" @headline=\"refresh\" :propReview=\"loadPayrolls\"/>\n                                            </div>\n                                            <!-- Steps four -->\n                                            <div v-show=\"steps==4\">\n                                                <Finalize ref=\"finalize\" @headline=\"refresh\" :propFinalize=\"loadPayrolls\"/>\n                                            </div>\n                                        </v-form>\n                                    </div>\n                                </v-col>\n                            </v-row>\n                            <div class=\"function_footer\">\n\t\t\t\t\t\t\t\t<!-- Warning Message -->\n                                <v-btn @click=\"close\" class=\"float-left  btn_cancel\">{{$t('cancel')}}</v-btn>\n                                <v-btn class=\"float-right btn_save_close\" @click=\"saveSpets()\" >{{$t(save_next)}}</v-btn>\n                                <!-- <v-btn class=\"float-right mx-3 white--text\" color=\"primary\">{{$t('save_draft')}}</v-btn> -->\n                            </div>\n                        </v-form>\n                    </v-card>\n                </v-col>\n            </v-row>\n            <LoadingMe\n                    :isLoading=\"showLoading\"\n                    :fullPage=\"true\"\n                    :myLoading=\"true\"\n                />\n        </v-container>\n    </v-app>\n</template>\n\n<script>\n    import {i18n} from '@/i18n';\n    import LoadingMe from '@/components/Loading'\n    import Input from '@/views/payroll/payroll_run/Input'\n    import Adjustment from '@/views/payroll/payroll_run/Adjustment'\n    import Review from '@/views/payroll/payroll_run/Review'\n    import Finalize from '@/views/payroll/payroll_run/Finalize'\n\tconst payrollHandler = require(\"@/scripts/payrollHandler\")\n    export default {\n        name: \"AddProduct\",\n        components:{\n            'LoadingMe': LoadingMe,\n            Input,\n            Adjustment,\n            Review,\n            Finalize\n\t\t},\n        data: () => ({\n            templates:[],\n            showLoading:false,\n            valid: '',\n            bill_date: \"\",\n            journal_date: '',\n            steps: 1,\n            reachTopStep: 0,\n            check: false,\n            save_next: 'save_next',\n            activeColor1: \"primary\",\n            activeColor2: \"third\",\n            activeColor3: \"third\",\n            activeColor4: \"third\",\n            isFinal : false,\n            // greyText\n            check1: false,\n            check2: false,\n            check3: false,\n            payroll_id: '',\n            payrollList: {},\n            loadPayrolls: [],\n        }),\n        methods:{\n            refresh(data){\n                if(data === 201){\n                    this.loadPayrollList()\n                }\n            },\n            saveSpets(){\n                if(this.steps === 1){\n                    this.$refs.modal.saveNext()\n                }else if(this.steps === 2){\n                    this.$refs.adjust.saveAdjust()\n                }else if(this.steps === 3){\n                    this.$refs.review.saveReview()\n                }else if(this.steps === 4){\n                    this.$refs.finalize.saveFinalize()\n                }\n            },\n            nextStpes(){\n                if(this.payrollList.step > 0){\n                    this.steps = this.payrollList.step\n                }\n                this.steps = this.steps\n                this.reachTopStep = this.steps\n                this.stepsCondition(this.steps)\n            },\n            ClickSteps(step){\n                if(this.steps == step){\n                    return\n                }\n                if(step > this.reachTopStep){\n                    return\n                }\n                if(step != 4){\n                    this.save_next =  \"confirm_next\"\n                }else{\n                    this.save_next = \"confirm_close\"\n                }\n                this.steps = step\n                this.stepsCondition(this.steps)\n            },\n            stepsCondition(val){\n                switch(val){\n                    case 1: \n                        this.activeColor1= \"primary\"\n                        this.activeColor2= \"third\"\n                        this.activeColor3= \"third\"\n                        this.activeColor4= \"third\"\n                        break\n                    case 2: \n                        this.activeColor1= \"third\"\n                        this.activeColor2= \"primary\"\n                        this.activeColor3= \"third\"\n                        this.activeColor4= \"third\"\n                        break\n                    case 3: \n                        this.activeColor1= \"third\"\n                        this.activeColor2= \"third\"\n                        this.activeColor3= \"primary\"\n                        this.activeColor4= \"third\"\n                        break\n                    default: \n                        this.activeColor1= \"third\"\n                        this.activeColor2= \"third\"\n                        this.activeColor3= \"third\"\n                        this.activeColor4= \"primary\"\n                        this.isFinal = true\n                        this.save_next = \"confirm_close\"\n                  }\n            },\n            loadPayrollList(){\n                new Promise(resolve => {\n                    setTimeout(() => {\n                        resolve('resolved');\n                        payrollHandler.getPayroll(this.$route.params.id).then(res => {\n                            this.showLoading = true;\n                            if(res.data.statusCode === 200){\n                                const result = res.data.data\n                                if(result.length > 0){\n                                    this.loadPayrollItem(result[0]) \n                                }\n                                this.showLoading = false;\n                            }\n                        })\n                    }, 300);\n                })\n            },\n            loadPayrollItem(result){\n                new Promise(resolve => {\n                    setTimeout(() => {\n                        resolve('resolved')\n                        this.employee = []\n                        payrollHandler.getPayrollItem(result.id).then(res => {\n                            this.showLoading = true\n                            window.console.log(12121, res)\n                            if (res.data.statusCode === 200) {\n                                let resutl_item = res.data.data\n                                if(resutl_item.length > 0){\n                                    this.loadPayrolls = resutl_item\n                                }\n                                this.payrollList = result  \n                                this.nextStpes()\n                                this.showLoading = false\n                            }\n                        }).catch()\n                        {\n                            this.showLoading = false\n                        }\n                    }, 300)\n                })\n            },\n            close(){\n                this.$swal({\n                    title: i18n.t('msg_title_warning'),\n                    text: i18n.t('msg_discard'),\n                    icon: \"warning\",\n                    showCancelButton: true,\n                    cancelButtonText: i18n.t('cancel'),\n                    confirmButtonColor: \"#4d4848\",\n                    cancelButtonColor: \"#ED1A3A\",\n                    confirmButtonText: i18n.t('discard'),\n                }).then((result) => {\n                    if (result.value) {\n                        if(this.steps === 1){\n                            this.$refs.modal.goBack()\n                        }else if(this.steps === 2){\n                            this.$refs.adjust.goBack()\n                        }else if(this.steps === 3){\n                            this.$refs.review.goBack()\n                        }else if(this.steps === 4){\n                            this.$refs.finalize.goBack()\n                        }\n                    }\n                });\n            }\n        },\n        mounted(){\n            this.loadPayrollList()\n        },\n        watch: {\n            '$route': 'loadPayrollList'\n        }\n    }\n\n</script>\n\n<style scoped>\n    .function_content {\n        padding: 0 25px 25px;\n        border-bottom: 0;\n        background-color: #fff !important;\n    }\n\n    @media (min-width: 1264px) {\n        .container {\n            /* max-width: 1185px; */\n            max-width: 1080px !important;\n        }\n    }\n    .grayBg{\n        background-color: #f3f8ff;\n    }\n    @media (max-width: 576px) {\n        ..mb-6 {\n            margin-bottom: 0 !important;\n        }\n    }\n \n    .border_grey{\n         border: 1px solid #d6d7d8;\n    }\n    .attachment_table{\n        width:100%;\n    }\n    \n    .my_checkbox input[type=checkbox] + label {\n        display: grid;\n        grid-template-columns: 20% 80%;\n        margin: 0.2em 0px;\n        cursor: pointer;\n        line-height: 16px;\n        padding: 0.2em;\n    }\n</style>"]}]}