{"remainingRequest":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/src/views/customers/Invoice.vue?vue&type=style&index=0&id=806cf1ae&scoped=true&lang=css&","dependencies":[{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/src/views/customers/Invoice.vue","mtime":1638499443189},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/@vue/cli-service/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgouay1kcm9wZG93biB7CiAgICB3aWR0aDogMTAwJTsKICAgIG1hcmdpbi10b3A6IDNweDsKfQoKLmZ1bmN0aW9uX3dyYXBwZXIgewogICAgYm94LXNoYWRvdzogbm9uZSAhaW1wb3J0YW50Owp9Cgoudi1hcHBsaWNhdGlvbi0taXMtbHRyIC52LXRleHQtZmllbGQgLnYtaW5wdXRfX2FwcGVuZC1pbm5lciB7CiAgICBtYXJnaW4tdG9wOiAwICFpbXBvcnRhbnQ7Cn0KCi52LWlucHV0X19zbG90IHsKICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmYgIWltcG9ydGFudDsKfQoKLmZ1bmN0aW9uX2NvbnRlbnQgLmxhYmVsIHsKICAgIG1hcmdpbi1ib3R0b206IDEwcHg7CiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7Cn0KCi5ib3JkZXJfcmFkaXVzMTAgewogICAgYm9yZGVyLXJhZGl1czogMTBweCAhaW1wb3J0YW50OwogICAgYmFja2dyb3VuZC1jb2xvcjogI2YyZjJmMjsKfQoKLnBhLTMudi1jYXJkIGg0IHsKICAgIGZvbnQtc2l6ZTogMThweDsKICAgIGNvbG9yOiAjMzMzOwp9CgoucGEtMy52LWNhcmQgcCB7CiAgICBmb250LXNpemU6IDEycHg7CiAgICBjb2xvcjogI2I1YjViNTsKfQoKLmF0dGFjaG1lbnRfZmlsZSB7CiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZWZlZGVkOwogICAgYm9yZGVyLXJhZGl1czogMCAhaW1wb3J0YW50Owp9CgouYXR0YWNobWVudF90YWJsZS52LWRhdGEtdGFibGUgdGFibGUgewogICAgYm9yZGVyOiB0aGluIHNvbGlkIHJnYmEoMCwgMCwgMCwgMC4xMik7Cn0KCi5hdHRhY2htZW50X3RhYmxlIHRhYmxlIHRyIHRoIHsKICAgIGJvcmRlci1sZWZ0OiB0aGluIHNvbGlkIHJnYmEoMCwgMCwgMCwgMC4xMik7CiAgICBoZWlnaHQ6IDM1cHg7CiAgICBib3JkZXItcmlnaHQ6IHRoaW4gc29saWQgcmdiYSgwLCAwLCAwLCAwLjEyKTsKfQoKLmJsb2NrX2RlYml0LAouYmxvY2tfY3JlZGl0IHsKICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjZmZmOwp9CgouYmxvY2tfZGViaXQgcC5udW1iZXIsCi5ibG9ja19jcmVkaXQgcC5udW1iZXIgewogICAgZm9udC1zaXplOiAyNXB4OwogICAgY29sb3I6ICM3ZjdmN2Y7Cn0KCi5ibG9ja19kZWJpdCBoNSwKLmJsb2NrX2NyZWRpdCBoNSwKLmJsb2NrX2RpZmZlcmVuY2UgaDUgewogICAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTsKICAgIGNvbG9yOiAjN2Y3ZjdmOwogICAgZm9udC1zaXplOiAxNXB4OwogICAgZm9udC13ZWlnaHQ6IG5vcm1hbDsKfQoKLmJsb2NrX2RpZmZlcmVuY2UgaDUgewogICAgZm9udC1zaXplOiAxOHB4Owp9CgouYmxvY2tfZGlmZmVyZW5jZSBoNSBzcGFuIHsKICAgIGZvbnQtc2l6ZTogMTVweDsKfQoKLmN1c3RvbV9ncmlkIHRhYmxlIHRoOmxhc3QtY2hpbGQgewogICAgdGV4dC1hbGlnbjogcmlnaHQgIWltcG9ydGFudDsKfQoKLmNvbG9yX2dyZWVuIHsKICAgIGNvbG9yOiAjYzgwMDAwOwp9CgpAbWVkaWEgKG1pbi13aWR0aDogMTI2NHB4KSB7CiAgICAuY29udGFpbmVyIHsKICAgICAgICBtYXgtd2lkdGg6IDEyNTBweDsKICAgIH0KfQoKQG1lZGlhIChtYXgtd2lkdGg6IDU3NnB4KSB7CiAgICAucHQtNi5jb2wtc20tNS5jb2wtMTIgewogICAgICAgIHBhZGRpbmctdG9wOiAwICFpbXBvcnRhbnQ7CiAgICB9CgogICAgLmNvZGVfdGV4dCB7CiAgICAgICAgd2lkdGg6IDEwMCU7CiAgICB9CgogICAgLnBob25lX25vX3B0IHsKICAgICAgICBwYWRkaW5nLXRvcDogMCAhaW1wb3J0YW50OwogICAgfQoKICAgIC5zZWxlY3RfdGVtcGxhdGUsCiAgICAuc2F2ZV9vcHRpb24gewogICAgICAgIG1hcmdpbi1ib3R0b206IDEwcHg7CiAgICB9Cn0KCi5oaWRlX3NtYWxsX2Jhcl9jbGFzcyB7CiAgICBtYXgtd2lkdGg6IDA7CiAgICB0cmFuc2l0aW9uOiAwLjVzIGVhc2UtaW47CiAgICBmbGV4OiAwIDAgMDsKfQoKLmhpZGVfYmlnX2Jhcl9jbGFzcyB7CiAgICBtYXgtd2lkdGg6IDEwMCU7CiAgICB0cmFuc2l0aW9uOiAwLjVzIGVhc2UtaW47CiAgICBmbGV4OiAwIDAgMTAwJTsKfQoKLmluZm9fYWRkIHsKICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmZmZmY7Cn0KCi5zbWFsbF9zaWRlYmFyIHsKICAgIGhlaWdodDogOTglOwogICAgcG9zaXRpb246IHJlbGF0aXZlOwogICAgcGFkZGluZzogMTJweDsKICAgIGJhY2tncm91bmQtY29sb3I6ICNlZGYxZjU7Cn0KCi5teV9jYXJkIGgzIHsKICAgIGRpc3BsYXk6IGJsb2NrICFpbXBvcnRhbnQ7Cn0KCi5pY29uQXJyb3cgewogICAgcmlnaHQ6IC0zNXB4OwogICAgcG9zaXRpb246IGFic29sdXRlOwogICAgYm90dG9tOiAtMTBweDsKfQoKLmljb25BcnJvd0hpZGUgewogICAgcG9zaXRpb246IGFic29sdXRlOwogICAgcmlnaHQ6IC03cHg7CiAgICBib3R0b206IC0xMHB4Owp9CgouY29sb3JfZ3JleSB7CiAgICBjb2xvcjogIzgwODA4MDsKfQoKLmNhcmRfZ3JlZW4gewogICAgbWluLWhlaWdodDogNzBweDsKICAgIGJhY2tncm91bmQtY29sb3I6ICNjODAwMDAgIWltcG9ydGFudDsKICAgIGNvbG9yOiAjZmZmZmZmOwp9CgoubGJfYm9sZCB7CiAgICBmb250LXNpemU6IDEycHg7Cn0KCi5kZXRpYWxfc21hbGxzaWRlX3AgewogICAgcG9zaXRpb246IGFic29sdXRlOwogICAgYm90dG9tOiAxMHB4Owp9CgouY2FyZF9iYWNrZ3JvdW5kIHsKICAgIGJhY2tncm91bmQtY29sb3I6ICNlZGYxZjU7CiAgICBtaW4taGVpZ2h0OiAxMjBweDsKfQoKLmRlcG9zaXRlX2lucHV0IHsKICAgIHdpZHRoOiAxMDBweDsKfQoKLmJ0bl9zYXZlX2RyYWZ0IHsKICAgIGNvbG9yOiAjZmZmZmZmOwogICAgYmFja2dyb3VuZC1jb2xvcjogIzAwYjBmMCAhaW1wb3J0YW50OwogICAgdGV4dC10cmFuc2Zvcm06IGNhcGl0YWxpemU7Cn0KCi5zYXZlX29wdGlvbiB7CiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMjAzODY0ICFpbXBvcnRhbnQ7Cn0KCi5idG5fYWRkX3NtYWxsIHsKICAgIGhlaWdodDogMjdweCAhaW1wb3J0YW50OwogICAgbWluLXdpZHRoOiAyNXB4ICFpbXBvcnRhbnQ7CiAgICBmb250LXNpemU6IDEwcHg7CiAgICBwYWRkaW5nOiAwIDIycHggIWltcG9ydGFudDsKICAgIGJhY2tncm91bmQtY29sb3I6ICNjODAwMDAgIWltcG9ydGFudDsKICAgIGNvbG9yOiAjZmZmZmZmOwogICAgYm9yZGVyLXJhZGl1czogMCAhaW1wb3J0YW50Owp9CgoubGlzdF9zaXRlX2ludiB7CiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjQ0MzM2OwogICAgY29sb3I6ICNmZmZmZmY7CiAgICBmb250LXNpemU6IDEycHg7Cn0KCi5saXN0X3NpdGVfZXhwIHsKICAgIGJhY2tncm91bmQtY29sb3I6ICNjNWUwYjQ7CiAgICBjb2xvcjogIzAwMDAwMDsKICAgIGZvbnQtc2l6ZTogMTJweDsKICAgIGxpbmUtaGVpZ2h0OiAxNnB4OwogICAgbWluLWhlaWdodDogNDBweDsKfQoKLmNoZWNrYm94X2ludiB7CiAgICBwYWRkaW5nOiAycHg7CiAgICBtYXJnaW4tdG9wOiAzcHg7CiAgICBtYXJnaW4tcmlnaHQ6IDJweDsKfQoKLmV4cF9zZWxlY3QgewogICAgZm9udC1zaXplOiAxMnB4ICFpbXBvcnRhbnQ7Cn0KCi50aGVtZS0tbGlnaHQudi1kYXRhLXRhYmxlCj4gLnYtZGF0YS10YWJsZV9fd3JhcHBlcgo+IHRhYmxlCj4gdGJvZHkKPiB0cjpob3Zlcjpub3QoLnYtZGF0YS10YWJsZV9fZXhwYW5kZWRfX2NvbnRlbnQpOm5vdCgudi1kYXRhLXRhYmxlX19lbXB0eS13cmFwcGVyKSB7CiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudCAhaW1wb3J0YW50Owp9CgouYl9hZGQgewogICAgaGVpZ2h0OiAzMHB4ICFpbXBvcnRhbnQ7Cn0K"},{"version":3,"sources":["Invoice.vue"],"names":[],"mappingssfile":"Invoice.vue","sourceRoot":"src/views/customers","sourcesContent":["<template>\n    <v-app class=\"zoom-in\">\n        <v-container>\n            <v-row>\n                <v-col sm=\"12\" cols=\"12\">\n                    <v-card\n                        outlined\n                        dense\n                        class=\"pa-4 no_border rounded-sm\"\n                        color=\"white\">\n                        <v-row>\n                            <v-col\n                                class=\"bigSide pr-2 py-0\"\n                                sm=\"8\"\n                                cols=\"12\"\n                                style=\"transition: .3s ease-in;\"\n                                :class=\"{ hide_big_bar_class: isHideBar }\">\n                                <v-form ref=\"form\" v-model=\"valid\" lazy-validation>\n                                    <v-card outlined dense class=\"no_border\">\n                                        <h2 class=\"mb-0\">{{ $t(\"invoice\") }}</h2>\n                                        <v-icon\n                                            v-if=\"isHideBar\"\n                                            @click=\"cancel()\"\n                                            style=\"cursor: pointer; color: #333; font-size: 40px;\"\n                                            class=\"float-right\">close\n                                        </v-icon>\n                                        <span style=\"transition: .3s ease-in; z-index:10;\"\n                                              :class=\"{ iconArrow: !isHideBar, iconArrowHide: isHideBar}\">\n                                            <v-icon\n                                                size=\"22\"\n                                                class=\"arr_icon\"\n                                                @click=\"hideSmallSidebar\"\n                                                v-if=\"isHideBar\">mdi-chevron-left-circle\n                                            </v-icon>\n                                            <v-icon\n                                                size=\"22\"\n                                                class=\"arr_icon\"\n                                                @click=\"hideSmallSidebar\"\n                                                v-if=\"!isHideBar\">mdi-chevron-right-circle\n                                            </v-icon>\n                                        </span>\n                                    </v-card>\n                                    <v-card outlined dense class=\"px-4 no_border\" color=\"grayBg\">\n                                        <v-row>\n                                            <v-col sm=\"4\" cols=\"12\" class=\"pb-0 pt-4\">\n                                                <label class=\"label  mb-0\">{{ $t(\"customer\") }}</label>\n                                                <v-col\n                                                    sm=\"12\"\n                                                    cols=\"12\"\n                                                    class=\"kendo_dropdown_custom px-0 pb-3 pt-0\">\n                                                    <dropdownlist\n                                                        :data-items=\"customerList\"\n                                                        @change=\"onChange\"\n                                                        :value=\"customer\"\n                                                        :data-item-key=\"dataItemKey\"\n                                                        :text-field=\"textField\"\n                                                        :default-item=\"defaultItem\"\n                                                        :filterable=\"true\"\n                                                        :required=\"true\"\n                                                        :disabled=\"disabledMe\"\n                                                        :valid=\"validCustomer\"\n                                                        @filterchange=\"onFilterChange\">\n                                                    </dropdownlist>\n                                                </v-col>\n                                                <label class=\"label mb-0\">{{ $t(\"invoice_type\") }}</label>\n                                                <v-select\n                                                    class=\"mt-1\"\n                                                    :items=\"invoiceTypes\"\n                                                    item-value=\"id\"\n                                                    item-text=\"name\"\n                                                    :disabled=\"disabledMe\"\n                                                    v-model=\"invoice.transactionType\"\n                                                    @change=\"onInvoiceTypeChanged\"\n                                                    :rules=\"[(v) => !!v || 'Transaction Currency is required']\"\n                                                    return-object\n                                                    outlined/>\n                                                <label class=\"label  mb-0\">{{ $t(\"date\") }}</label>\n                                                <app-datepicker\n                                                    :initialDate=\"invoice.transactionDate\"\n                                                    :disabled=\"disabledMe\"\n                                                    @onChanged=\"onInvoiceDateChanged\"\n                                                    @emitDate=\"invoice.transactionDate = $event\"/>\n                                                <label class=\"label mb-0\">{{ $t(\"number\") }}</label>\n                                                <v-row class=\"mt-1 mr-0\">\n                                                    <v-col sm=\"3\" cols=\"3\" class=\"py-0 pr-0\">\n                                                        <div class=\"code_text text-bold\">\n                                                            {{ invoice.transactionType.abbr }}\n                                                        </div>\n                                                    </v-col>\n                                                    <v-col sm=\"7\" cols=\"7\" class=\"py-0 pl-0 pr-1\">\n                                                        <v-text-field\n                                                            class=\" custom-border \"\n                                                            v-model=\"invoice.number\"\n                                                            outlined\n                                                            disabled\n                                                            :rules=\"[(v) => !!v || 'Number is required']\"\n                                                            required/>\n                                                    </v-col>\n                                                    <v-col sm=\"2\" cols=\"2\" class=\"py-0 px-0\">\n                                                        <v-icon\n                                                            color=\"black\"\n                                                            size=\"30\"\n                                                            class=\"border_qrcode\"\n                                                            :disabled=\"disabledMe\"\n                                                            @click=\"generateNumber\">mdi-qrcode\n                                                        </v-icon>\n                                                    </v-col>\n                                                </v-row>\n                                            </v-col>\n                                            <v-col sm=\"8\" cols=\"12\" class=\"pt-4 pb-0\">\n                                                <v-row>\n                                                    <v-col sm=\"6\" cols=\"12\" class=\" pt-0\">\n                                                        <p class=\"mb-1 d-block\">\n                                                            {{ $t(\"current_balance\") }}\n                                                        </p>\n                                                        <h3 class=\"color_green float-right\">\n                                                            {{\n                                                                numberFormat(invoice.currentBalance)\n                                                            }}{{ baseCurrencyCode }}\n                                                        </h3>\n                                                    </v-col>\n                                                    <v-col sm=\"6\" cols=\"12\" class=\"pl-0 pt-0\">\n                                                        <p class=\"mb-1 d-block\">\n                                                            {{ $t(\"credit_limit_allowed\") }}\n                                                        </p>\n                                                        <h3 class=\"color_green float-left\">\n                                                            {{\n                                                                creditLimitUsage(invoice.currentBalance, invoice.creditLimit)\n                                                            }}\n                                                        </h3>\n                                                        <h3 class=\"color_green float-right\">\n                                                            {{ numberFormat(invoice.creditLimit) }}{{\n                                                                baseCurrencyCode\n                                                            }}\n                                                        </h3>\n                                                    </v-col>\n                                                </v-row>\n                                                <v-row class=\"mr-0 mt-1\">\n                                                    <v-col class=\"pb-0 pt-3\" sm=\"6\" cols=\"12\">\n                                                        <label class=\"label mb-0\">{{ $t(\"term\") }}</label>\n                                                        <v-select\n                                                            class=\"mt-1\"\n                                                            v-model=\"invoice.paymentTerm\"\n                                                            :items=\"paymentTerms\"\n                                                            @change=\"onPaymentTermChanged\"\n                                                            placeholder=\"Term\"\n                                                            :rules=\"[(v) => !!v['id'] || $t('is required!')]\"\n                                                            item-text=\"name\"\n                                                            item-value=\"id\"\n                                                            return-object\n                                                            outlined/>\n                                                        <label\n                                                            class=\"label mb-0\">{{ $t(\"accounts_receivable\") }}</label>\n                                                        <v-select\n                                                            class=\"mt-1\"\n                                                            v-model=\"invoice.receivableAcc\"\n                                                            :items=\"receivableAcc\"\n                                                            item-value=\"id\"\n                                                            :item-text=\"(item) => `${item.number} - ${item.name}`\"\n                                                            return-object\n                                                            placeholder=\"Account Receivable\"\n                                                            tage=\"Account Receivable\"\n                                                            outlined/>\n                                                        <div v-if=\"saleFormContent.lateFee\" id=\"hide\">\n                                                            <label class=\"label mb-0\">{{ $t(\"late_fee\") }}</label>\n                                                            <v-select\n                                                                class=\"mt-1\"\n                                                                v-model=\"invoice.lateFee\"\n                                                                :items=\"lateFeeList\"\n                                                                item-value=\"id\"\n                                                                :item-text=\"(item) => `${item.code} - ${item.name}`\"\n                                                                return-object\n                                                                placeholder=\"Late Fee\"\n                                                                tage=\"Late Fee\"\n                                                                clearable\n                                                                outlined/>\n                                                        </div>\n                                                        <!--                                                        <label class=\"label mb-0\">{{ $t('discount_promotion') }}</label>-->\n                                                    </v-col>\n                                                    <v-col class=\"pb-0 pt-3 pr-0\" sm=\"6\" cols=\"12\">\n                                                        <label class=\"label  mb-0\">{{ $t(\"due_date\") }}</label>\n                                                        <app-datepicker\n                                                            :initialDate=\"invoice.dueDate\"\n                                                            @emitDate=\"dueDate = $event\"/>\n                                                        <!--                                                        <label class=\"label mb-0\">{{ $t('invoice_currency') }}</label>-->\n                                                        <!--                                                        <v-select class=\"mt-1\"-->\n                                                        <!--                                                                  v-model=\"invoice.currency\"-->\n                                                        <!--                                                                  :items=\"currencies\"-->\n                                                        <!--                                                                  placeholder=\"currency\"-->\n                                                        <!--                                                                  item-value=\"id\"-->\n                                                        <!--                                                                  :item-text=\"item =>`${item.code} - ${item.name}`\"-->\n                                                        <!--                                                                  return-object-->\n                                                        <!--                                                                  outlined-->\n                                                        <!--                                                                  clearable-->\n                                                        <!--                                                        />-->\n                                                        <label class=\"label mb-0\">{{ $t(\"price_level\") }}</label>\n                                                        <v-select\n                                                            class=\"mt-1\"\n                                                            v-model=\"invoice.priceLevel\"\n                                                            :items=\"priceLevel\"\n                                                            item-value=\"id\"\n                                                            @change=\"onPriceLevelChange\"\n                                                            :disabled=\"disabledMe\"\n                                                            item-text=\"name\"\n                                                            return-object\n                                                            placeholder=\"Price Level\"\n                                                            tage=\"Default Price Level\"\n                                                            outlined\n                                                            :rules=\"[(v) => !!v['id'] || $t('is_required')]\"/>\n                                                        <v-col\n                                                            sm=\"12\"\n                                                            col=\"12\"\n                                                            class=\"d-flex justify-space-between pt-0\">\n                                                            <div>\n                                                                <p class=\"label mb-0\">{{ $t(\"currency\") }}</p>\n                                                                <p class=\"label mb-0 mt-4\">{{ currencyCode }}</p>\n                                                            </div>\n                                                            <div>\n                                                                <p class=\"label mb-0\">{{ $t(\"rate\") }}</p>\n                                                                <p class=\"label mb-0 mt-4\">{{ transactionRate }}</p>\n                                                            </div>\n                                                        </v-col>\n                                                    </v-col>\n                                                </v-row>\n                                            </v-col>\n                                        </v-row>\n                                    </v-card>\n\n                                    <v-row style=\"background-color: #fff;\">\n                                        <v-col sm=\"12\" cols=\"12\" class=\"pt-4 pb-0 px-4\">\n                                            <kendo-datasource\n                                                ref=\"itemLineDS\"\n                                                :data=\"itemLines\"\n                                                :change=\"dataSourceChanged\"/>\n                                            <kendo-grid\n                                                id=\"gridItemLine\"\n                                                class=\"grid-function\"\n                                                :data-source-ref=\"'itemLineDS'\"\n                                                :sortable=\"false\"\n                                                :column-menu=\"true\"\n                                                :editable=\"true\"\n                                                v-on:databound=\"dataBound\"\n                                                :scrollable-virtual=\"true\">\n                                                <kendo-grid-column\n                                                    :command=\"{iconClass: 'k-icon k-i-trash', text: ' ', click: removeRow, className: 'btn-plus isEditable'}\"\n                                                    :title=\"''\"\n                                                    :width=\"63\"\n                                                    :headerAttributes=\"{style:'text-align: left; background-color: #EDF1F5'}\"/>\n                                                <kendo-grid-column\n                                                    :title=\"$t('no.')\"\n                                                    :width=\"53\"\n                                                    :column-menu=\"false\"\n                                                    :template=\"rowNumberTmpl\"\n                                                    :headerAttributes=\"{style: 'background-color: #EDF1F5;', class: 'text-products'}\"\n                                                    :attributes=\"{style: 'text-align: products'}\"/>\n                                                <kendo-grid-column\n                                                    :field=\"'item'\"\n                                                    :title=\"$t('item')\"\n                                                    :template=\"itemTemplate\"\n                                                    :editor=\"ItemDropDownEditor\"\n                                                    :attributes=\"{class:'tb_name_td isEditable'}\"\n                                                    :width=\"200\"\n                                                    :headerAttributes=\"{style: 'background-color: #EDF1F5'}\"/>\n                                                <kendo-grid-column\n                                                    :field=\"'description'\"\n                                                    :title=\"$t('description')\"\n                                                    :template=\"'<span>#=description#</span>'\"\n                                                    :width=\"200\"\n                                                    :headerAttributes=\"{style: 'background-color: #EDF1F5'}\"/>\n                                                <kendo-grid-column\n                                                    :field=\"'uom'\"\n                                                    :title=\"$t('uom')\"\n                                                    :width=\"100\"\n                                                    :template=\"UOMTemplate\"\n                                                    :editor=\"UOMDropDownEditor\"\n                                                    :headerAttributes=\"{style:'text-align: left; background-color: #EDF1F5'}\"\n                                                    :attributes=\"{style: 'text-align: left'}\"/>\n                                                <kendo-grid-column\n                                                    :field=\"'qoh'\"\n                                                    :title=\"$t('on_hand')\"\n                                                    :template=\"qohTemplate\"\n                                                    :width=\"170\"\n                                                    :editable=\"() => {return false}\"\n                                                    :headerAttributes=\"{style:'text-align: left; background-color: #EDF1F5',}\"\n                                                    :attributes=\"{ style: 'text-align: right; ' }\"/>\n                                                <kendo-grid-column\n                                                    :field=\"'qty'\"\n                                                    :title=\"$t('qty')\"\n                                                    :format=\"'{0:n}'\"\n                                                    :editor=\"numberEditor\"\n                                                    :template=\"'<span>#=qty || 0#</span>'\"\n                                                    :width=\"120\"\n                                                    :headerAttributes=\"{style: 'text-align: left; background-color: #EDF1F5',}\"\n                                                    :attributes=\"{ style: 'text-align: right; ' }\"/>\n                                                <kendo-grid-column\n                                                    :field=\"'price'\"\n                                                    :title=\"$t('price')\"\n                                                    :width=\"200\"\n                                                    :template=\"'<span>#=kendo.toString(price || 0, decimalFormat)#</span>'\"\n                                                    :editor=\"numberEditor\"\n                                                    :headerAttributes=\"{style:'text-align: left; background-color: #EDF1F5',}\"\n                                                    :attributes=\"{style: 'text-align: right'}\"/>\n                                                <kendo-grid-column\n                                                    :field=\"'amount'\"\n                                                    :title=\"$t('amount')\"\n                                                    :width=\"200\"\n                                                    :editable=\"() => {return false;}\"\n                                                    :template=\"'<span>#=kendo.toString(amount || 0, decimalFormat)#</span>'\"\n                                                    :editor=\"numberEditor\"\n                                                    :headerAttributes=\"{style:'text-align: left; background-color: #EDF1F5'}\"\n                                                    :attributes=\"{style: 'text-align: right'}\"/>\n                                                <kendo-grid-column\n                                                    :field=\"'vatTax'\"\n                                                    :title=\"$t('vat')\"\n                                                    :width=\"200\"\n                                                    :template=\"vatTemplate\"\n                                                    :editor=\"VatTaxDropDownEditor\"\n                                                    :headerAttributes=\"{style:'text-align: left; background-color: #EDF1F5',}\"\n                                                    :attributes=\"{ style: 'text-align: left' }\"/>\n                                                <kendo-grid-column\n                                                    :field=\"'serviceDate'\"\n                                                    :title=\"$t('date_from')\"\n                                                    :width=\"200\"\n                                                    :hidden=\"!saleFormContent.serviceDate\"\n                                                    :template=\"'<span>#= kendo.toString(new Date(serviceDate), dateFormat)#</span>'\"\n                                                    :editor=\"ServiceDateEditor\"\n                                                    :headerAttributes=\"{style: 'background-color: #EDF1F5'}\"/>\n                                                <kendo-grid-column\n                                                    :field=\"'serviceDateTo'\"\n                                                    :title=\"$t('date_to')\"\n                                                    :width=\"200\"\n                                                    :hidden=\"!saleFormContent.serviceDateTo\"\n                                                    :template=\"'<span>#= kendo.toString(new Date(serviceDateTo), dateFormat)#</span>'\"\n                                                    :editor=\"ServiceDateToEditor\"\n                                                    :headerAttributes=\"{style: 'background-color: #EDF1F5'}\"/>\n                                                <kendo-grid-column\n                                                    :field=\"'modifier'\"\n                                                    :title=\"$t('modifier')\"\n                                                    :width=\"200\"\n                                                    :hidden=\"!saleFormContent.modifier\"\n                                                    :template=\"modifierTemplate\"\n                                                    :editor=\"ModifierDropDownEditor\"\n                                                    :headerAttributes=\"{style:'text-align: left; background-color: #EDF1F5'}\"\n                                                    :attributes=\"{ style: 'text-align: left' }\"/>\n                                                <kendo-grid-column\n                                                    :field=\"'discountItem'\"\n                                                    :title=\"$t('discount_item')\"\n                                                    :width=\"200\"\n                                                    :hidden=\"!saleFormContent.discountItem\"\n                                                    :template=\"discountItemTemplate\"\n                                                    :editor=\"DiscountItemDropDownEditor\"\n                                                    :headerAttributes=\"{style:'text-align: left; background-color: #EDF1F5'}\"\n                                                    :attributes=\"{style: 'text-align: left'}\"/>\n                                                <kendo-grid-column\n                                                    :field=\"'specificTax'\"\n                                                    :title=\"$t('specific_tax')\"\n                                                    :width=\"200\"\n                                                    :hidden=\"!saleFormContent.specificTax\"\n                                                    :template=\"'<span>#=specificTax.defaultTax?specificTax.defaultTax:``#</span>'\"\n                                                    :editor=\"SpecificTaxDropDownEditor\"\n                                                    :headerAttributes=\"{style:'text-align: left; background-color: #EDF1F5'}\"\n                                                    :attributes=\"{ style: 'text-align: left' }\"/>\n                                                <kendo-grid-column\n                                                    :field=\"'otherTax'\"\n                                                    :title=\"$t('other_tax')\"\n                                                    :width=\"200\"\n                                                    :hidden=\"!saleFormContent.otherTax\"\n                                                    :template=\"'<span>#=otherTax.defaultTax?otherTax.defaultTax:``#</span>'\"\n                                                    :editor=\"OtherTaxDropDownEditor\"\n                                                    :headerAttributes=\"{style:'text-align: left; background-color: #EDF1F5'}\"\n                                                    :attributes=\"{ style: 'text-align: left' }\"/>\n                                                <kendo-grid-column\n                                                    :field=\"'publicLightingTax'\"\n                                                    :title=\"$t('pl_tax')\"\n                                                    :width=\"200\"\n                                                    :hidden=\"!saleFormContent.publicLightingTax\"\n                                                    :template=\"'<span>#=publicLightingTax.defaultTax?publicLightingTax.defaultTax:``#</span>'\"\n                                                    :editor=\"PublicLightingTaxDropDownEditor\"\n                                                    :headerAttributes=\"{style:'text-align: left; background-color: #EDF1F5'}\"\n                                                    :attributes=\"{ style: 'text-align: left' }\"/>\n                                                <kendo-grid-column\n                                                    :field=\"'saleUnit'\"\n                                                    :title=\"$t('sale_unit')\"\n                                                    :width=\"200\"\n                                                    :hidden=\"!saleFormContent.saleUnit\"\n                                                    :template=\"saleUnitTemplate\"\n                                                    :editor=\"SaleUnitDropDownEditor\"\n                                                    :headerAttributes=\"{style:'text-align: left; background-color: #EDF1F5'}\"\n                                                    :attributes=\"{ style: 'text-align: left' }\"/>\n                                                <kendo-grid-column\n                                                    :field=\"'employee'\"\n                                                    :title=\"$t('employee')\"\n                                                    :width=\"200\"\n                                                    :hidden=\"!saleFormContent.employee\"\n                                                    :template=\"empImpl\"\n                                                    :editor=\"EmployeeDropDownEditor\"\n                                                    :headerAttributes=\"{style:'text-align: left; background-color: #EDF1F5'}\"\n                                                    :attributes=\"{ style: 'text-align: left' }\"/>\n                                            </kendo-grid>\n                                        </v-col>\n                                        <v-col sm=\"12\" cols=\"12\" class=\"pt-2\">\n                                            <v-btn\n                                                color=\"primary\"\n                                                class=\"float-left btn_plus mr-2\"\n                                                @click=\"addRow\">\n                                                <v-icon size=\"\" class=\"ma-1\">mdi-plus</v-icon>\n                                            </v-btn>\n                                        </v-col>\n                                        <v-col sm=\"12\" cols=\"12\" class=\"py-0\">\n                                            <v-row>\n                                                <v-col class=\"pt-0\" sm=\"5\" cols=\"6\">\n                                                    <v-card class=\"no-boxshadow rounded-4 pa-3\" color=\"grayBg\">\n                                                        <v-row>\n                                                            <v-col class=\"py-0 pa-4\" sm=\"12\" cols=\"12\">\n                                                                <label\n                                                                    class=\"label mb-0\">{{\n                                                                        $t(\"billing_address\")\n                                                                    }}</label>\n                                                                <v-select\n                                                                    class=\"mt-1\"\n                                                                    v-model=\"invoice.billingAddress\"\n                                                                    :items=\"billingAddress\"\n                                                                    item-value=\"id\"\n                                                                    item-text=\"name\"\n                                                                    tage=\"Billing Address\"\n                                                                    placeholder=\"address\"\n                                                                    outlined/>\n                                                                <label\n                                                                    class=\"label mb-0\">{{\n                                                                        $t(\"pickup_delivery_address\")\n                                                                    }}</label>\n                                                                <v-select\n                                                                    class=\"mt-1\"\n                                                                    v-model=\"invoice.deliveryAddress\"\n                                                                    :items=\"deliveryAddress\"\n                                                                    item-value=\"id\"\n                                                                    item-text=\"name\"\n                                                                    tage=\"Pickup/ Delivery Address\"\n                                                                    placeholder=\"address\"\n                                                                    outlined/>\n                                                                <label\n                                                                    class=\"label  mb-0\">{{\n                                                                        $t(\"pickup_delivery_date_time\")\n                                                                    }}</label>\n                                                                <app-datepicker\n                                                                    :initialDate=\"invoice.deliveryDateTime\"\n                                                                    @emitDate=\"deliveryDateTime = $event\"/>\n                                                                <label>{{ $t(\"message_on_invoice\") }}</label>\n                                                                <v-textarea\n                                                                    class=\"mt-1\"\n                                                                    v-model=\"invoice.transactionNote\"\n                                                                    outlined\n                                                                    no-resize\n                                                                    height=\"70px\"\n                                                                    tage=\"Message on Invoice\"\n                                                                    placeholder=\"This will appear on the invoice\"/>\n                                                                <label>{{ $t(\"message_on_journal\") }}</label>\n                                                                <v-textarea\n                                                                    class=\"mt-1\"\n                                                                    v-model=\"invoice.journalNote\"\n                                                                    outlined\n                                                                    no-resize\n                                                                    height=\"70px\"\n                                                                    tage=\"Message on Order\"\n                                                                    placeholder=\"This will appear on the journal\"/>\n                                                            </v-col>\n                                                        </v-row>\n                                                    </v-card>\n                                                </v-col>\n                                                <v-col class=\"pt-0\" sm=\"7\" cols=\"6\">\n                                                    <v-simple-table>\n                                                        <template v-slot:default>\n                                                            <tbody>\n                                                            <tr>\n                                                                <td class=\"text-left pr-0\">{{ $t(\"subtotal\") }}</td>\n                                                                <td class=\"text-center\">:</td>\n                                                                <td class=\"text-right\">{{\n                                                                        numberFormat(invoice.subTotal)\n                                                                    }}\n                                                                </td>\n                                                            </tr>\n                                                            <tr>\n                                                                <td class=\"text-left pr-0\">{{\n                                                                        $t(\"general_discount\")\n                                                                    }}\n                                                                </td>\n                                                                <td class=\"text-center\">:</td>\n                                                                <td class=\"text-right\">\n                                                                    ({{ numberFormat(invoice.discountTotal) }})\n                                                                </td>\n                                                            </tr>\n                                                            <tr>\n                                                                <td class=\"text-left pr-0\">{{ $t(\"total_tax\") }}\n                                                                    <v-btn\n                                                                        @click=\"dialogTax = true\"\n                                                                        color=\"grayBg\"\n                                                                        outlined\n                                                                        class=\"black--text rounded-4 text-bold  float-right text-uppercase\"\n                                                                        style=\"height: 30px !important;\">{{ $t(\"tax\") }}\n                                                                    </v-btn>\n                                                                </td>\n                                                                <td class=\"text-center\">:</td>\n                                                                <td class=\"text-right\">\n                                                                    {{ numberFormat(invoice.totalTaxAmount) }}\n                                                                </td>\n                                                            </tr>\n                                                            <tr>\n                                                                <td class=\"text-left pr-0\" width=\"240px\">\n                                                                    <v-select\n                                                                        class=\"mt-3\"\n                                                                        v-model=\"invoice.specificDiscountItem\"\n                                                                        :items=\"specificDiscountItem\"\n                                                                        item-text=\"name\"\n                                                                        @change=\"onSpecificDiscountChanged\"\n                                                                        item-value=\"id\"\n                                                                        return-object\n                                                                        clearable\n                                                                        outlined/>\n                                                                </td>\n                                                                <td class=\"text-center\">:</td>\n                                                                <td class=\"text-right\">\n                                                                    ({{\n                                                                        numberFormat(invoice.specificDiscountTotal ? invoice.specificDiscountTotal : 0)\n                                                                    }})\n                                                                </td>\n                                                            </tr>\n                                                            <!--                                                            <tr>-->\n                                                            <!--                                                                <td class=\"text-left\">{{ $t('delivery') }}</td>-->\n                                                            <!--                                                                <td class=\"text-center\">:</td>-->\n                                                            <!--                                                                <td class=\"text-right\">{{ invoice.deliveryFee }}</td>-->\n                                                            <!--                                                            </tr>-->\n\n                                                            <tr v-for=\"(num, index) in numSelect\"\n                                                                :key=\"index\"\n                                                                class=\"hide_form_alert\">\n                                                                <td class=\"text-left text-uppercase pr-0\">\n                                                                    <v-btn\n                                                                        v-if=\"num == 1\"\n                                                                        @click=\"addSelect\"\n                                                                        class=\"float-left mt-2 mr-1 pa-1\"\n                                                                        small>\n                                                                        <v-icon\n                                                                            color=\"primary\"\n                                                                            size=\"16\"\n                                                                            class=\"ma-1\">mdi-plus\n                                                                        </v-icon>\n                                                                    </v-btn>\n                                                                    <v-btn v-if=\"num > 1\"\n                                                                           @click=\"removeSelect(index)\"\n                                                                           class=\"float-left mt-2 mr-1 pa-1\"\n                                                                           small>\n                                                                        <v-icon\n                                                                            color=\"primary\"\n                                                                            size=\"16\"\n                                                                            class=\"ma-1\">fa-trash\n                                                                        </v-icon>\n                                                                    </v-btn>\n                                                                    <v-select\n                                                                        class=\"my-2 capitalize\"\n                                                                        v-model=\"mOtherCharge[index]\"\n                                                                        :items=\"otherChargeList\"\n                                                                        item-text=\"name\"\n                                                                        @change=\"onOtherChargeChange\"\n                                                                        item-value=\"id\"\n                                                                        return-object\n                                                                        clearable\n                                                                        outlined/>\n                                                                </td>\n                                                                <td class=\"text-center\">:</td>\n                                                                <td class=\"text-right color_green text-bold\">\n                                                                    {{\n                                                                        numberFormat(onOtherAmount(mOtherCharge[index]))\n                                                                    }}\n                                                                </td>\n                                                            </tr>\n                                                            <tr style=\"background: #F8F8F9\">\n                                                                <td class=\"text-left text-uppercase pr-0\">{{\n                                                                        $t(\"total\")\n                                                                    }}\n                                                                </td>\n                                                                <td class=\"text-center\">:</td>\n                                                                <td class=\"text-right color_green text-bold\" id=\"total\">\n                                                                    {{ numberFormat(invoice.total) }}\n                                                                </td>\n                                                            </tr>\n                                                            <tr>\n                                                                <td class=\"text-left pr-0\">{{ $t(\"deposit\") }}\n                                                                    <span\n                                                                        class=\"float-right color_green\">{{\n                                                                            numberFormat(invoice.depositAmount)\n                                                                        }}</span>\n                                                                </td>\n                                                                <td class=\"text-center\">:</td>\n                                                                <td class=\"text-right hide_form_alert\">\n                                                                    <v-text-field\n                                                                        type=\"number\"\n                                                                        :min=0\n                                                                        :max=\"invoice.depositAmount\"\n                                                                        class=\" text-right float-right deposite_input\"\n                                                                        v-model=\"depositDeduction\"\n                                                                        @change=\"onDepositDeductionChange\"\n                                                                        :disabled=\"disabledDeposit\"\n                                                                        tage=\"Deposit\"\n                                                                        width=\"80\"\n                                                                        outlined/>\n                                                                </td>\n                                                            </tr>\n                                                            <tr>\n                                                                <td class=\"text-left\">{{ $t(\"amount_due\") }}</td>\n                                                                <td class=\"text-center\">:</td>\n                                                                <td class=\"text-right color_green text-bold\">\n                                                                    {{ numberFormat(invoice.remainingAmount) }}\n                                                                </td>\n                                                            </tr>\n                                                            <tr hidden>\n                                                                <td class=\"text-left\">{{ $t(\"dr\") }}</td>\n                                                                <td class=\"text-center\">:</td>\n                                                                <td class=\"text-right color_green text-bold\">\n                                                                    {{ numberFormat(invoice.dr) }}\n                                                                </td>\n                                                            </tr>\n                                                            <tr hidden>\n                                                                <td class=\"text-left\">{{ $t(\"cr\") }}</td>\n                                                                <td class=\"text-center\">:</td>\n                                                                <td class=\"text-right color_green text-bold\">\n                                                                    {{ numberFormat(invoice.cr) }}\n                                                                </td>\n                                                            </tr>\n                                                            </tbody>\n                                                        </template>\n                                                    </v-simple-table>\n                                                </v-col>\n                                            </v-row>\n                                        </v-col>\n                                    </v-row>\n                                    <v-divider/>\n                                    <v-card outlined dense class=\"no_border function_footer\">\n                                        <v-alert type=\"warning\" v-model=\"alert\" dismissible>\n                                            <span v-html=\"errorMessage\"/>\n                                        </v-alert>\n                                        <v-menu>\n                                            <template v-slot:activator=\"{ on }\">\n                                                <v-btn class=\"mr-2 float-left select_template\" v-on=\"on\">\n                                                    {{\n                                                        template >= 0 ? templatesForm[template].name : $t(\"select_template\")\n                                                    }}\n                                                    <v-icon size=\"\" class=\"ma-1\">expand_more</v-icon>\n                                                </v-btn>\n                                            </template>\n                                            <v-list>\n                                                <v-list-item-group>\n                                                    <v-list-item\n                                                        v-for=\"(item, index) in templatesForm\"\n                                                        @click=\"ChoseTemplate(index)\"\n                                                        :key=\"index\">\n                                                        <v-list-item-content>\n                                                            <v-list-item-title>\n                                                                {{ item.name }}\n                                                            </v-list-item-title>\n                                                        </v-list-item-content>\n                                                    </v-list-item>\n                                                </v-list-item-group>\n                                            </v-list>\n                                        </v-menu>\n                                        <v-btn\n                                            outlined\n                                            class=\"text-capitalize  black--text float-left\"\n                                            color=\"primary\"\n                                            @click=\"cancel\">{{ $t(\"cancel\") }}\n                                        </v-btn>\n                                        <!--                    <v-menu>-->\n                                        <!--                      <template v-slot:activator=\"{ on }\">-->\n                                        <!--                        <v-btn-->\n                                        <!--                            class=\"ml-2 float-right text-capitalize  white&#45;&#45;text\"-->\n                                        <!--                            color=\"secondary\"-->\n                                        <!--                            v-on=\"on\"-->\n                                        <!--                        >-->\n                                        <!--                          {{ $t(\"save_option\") }}-->\n                                        <!--                          <v-icon size=\"\" class=\"ma-1\">expand_more</v-icon>-->\n                                        <!--                        </v-btn>-->\n                                        <!--                      </template>-->\n                                        <!--                      <v-list rounded>-->\n                                        <!--                        <v-list-item-group>-->\n                                        <!--                          <v-list-item>-->\n                                        <!--                            <v-list-item-content>-->\n                                        <!--                              <v-list-item-title-->\n                                        <!--                                  v-if=\"!isEdit\"-->\n                                        <!--                                  @click=\"saveNew\"-->\n                                        <!--                              >-->\n                                        <!--                                {{ $t(\"save_new\") }}-->\n                                        <!--                              </v-list-item-title>-->\n                                        <!--                            </v-list-item-content>-->\n                                        <!--                          </v-list-item>-->\n                                        <!--                          <v-list-item>-->\n                                        <!--                            <v-list-item-content>-->\n                                        <!--                              <v-list-item-title @click=\"onSaveClose(false, 1)\">-->\n                                        <!--                                {{ $t(\"save_print\") }}-->\n                                        <!--                              </v-list-item-title>-->\n                                        <!--                            </v-list-item-content>-->\n                                        <!--                          </v-list-item>-->\n                                        <!--                          &lt;!&ndash; <v-list-item>-->\n                                        <!--                            <v-list-item-content>-->\n                                        <!--                              <v-list-item-title>{{-->\n                                        <!--                                  $t('save_draft')-->\n                                        <!--                                }}-->\n                                        <!--                              </v-list-item-title>-->\n                                        <!--                            </v-list-item-content>-->\n                                        <!--                          </v-list-item> &ndash;&gt;-->\n                                        <!--                          <v-list-item>-->\n                                        <!--                            <v-list-item-content>-->\n                                        <!--                              <v-list-item-title @click=\"onSaveClose(true, 0)\"-->\n                                        <!--                              >{{ $t(\"save_send_close\") }}-->\n                                        <!--                              </v-list-item-title>-->\n                                        <!--                            </v-list-item-content>-->\n                                        <!--                          </v-list-item>-->\n                                        <!--                        </v-list-item-group>-->\n                                        <!--                      </v-list>-->\n                                        <!--                    </v-menu>-->\n                                        <v-btn\n                                            class=\"float-right text-capitalize  white--text\"\n                                            @click=\"onSaveClose('close', false, 0)\"\n                                            color=\"primary\">{{ $t(\"save_close\") }}\n                                        </v-btn>\n                                        <v-btn color=\"secondary\"\n                                               style=\"margin-right: 10px !important\"\n                                               class=\"white--text float-right text-capitalize\"\n                                               @click=\"onSaveClose('new', false, 0)\" :hidden=\"hiddenButton\">\n                                            {{ $t(\"save_new\") }}\n                                        </v-btn>\n                                    </v-card>\n                                </v-form>\n                            </v-col>\n                            <v-col\n                                class=\"smallSide pl-2 pt-0\"\n                                sm=\"4\"\n                                style=\"transition: .3s ease-in;\"\n                                :class=\"{ hide_small_bar_class: isHideBar }\">\n                                <div class=\"d-flex justify-end\">\n                                    <h3\n                                        style=\"color: #b3b5bc; font-size:20px;\"\n                                        v-if=\"!isHideBar\"\n                                        class=\"text-uppercase\">\n                                        <span class=\"pointer\" @click=\"Help('invoice')\">{{ $t(\"help\") }}</span>\n                                        <v-icon\n                                            @click=\"cancel()\"\n                                            style=\"cursor: pointer; color: #333; font-size: 40px;\"\n                                            class=\"\">close\n                                        </v-icon>\n                                    </h3>\n                                </div>\n                                <div\n                                    v-if=\"!isHideBar\"\n                                    class=\"small_sidebar rounded-4 mt-1 px-4 pt-4 grayBg\">\n                                    <v-card outlined dense class=\"pa-3 no_border my_card rounded-4 white--text\"\n                                            color=\"primary\" height=\"60px\">\n                                        <h3 class=\"text-left font_13 flex-1 text-uppercase\">{{ $t('amount_due') }}</h3>\n                                        <h3 class=\"text-right flex-1 font_20 niradei_heavy\">\n                                            {{ numberFormat(invoice.amountDue) }}</h3>\n                                    </v-card>\n                                    <v-row>\n                                        <v-col sm=\"12\" cols=\"12\" class=\"pt-3\">\n                                            <label class=\"label mb-0\">{{ $t(\"segment\") }}</label>\n                                            <v-select\n                                                class=\"mt-1\"\n                                                v-model=\"invoice.segment\"\n                                                :items=\"segments\"\n                                                item-value=\"id\"\n                                                @change=\"loadSaleOrder\"\n                                                :disabled=\"disabledMe\"\n                                                :item-text=\"(item) => `${item.code} - ${item.name}`\"\n                                                :rules=\"[(v) => !!v['id'] || $t('is required!')]\"\n                                                return-object\n                                                tage=\"sub Of\"\n                                                placeholder=\"Sub Of\"\n                                                outlined=\"\"/>\n                                            <label class=\"label mb-0\">{{ $t(\"location\") }}</label>\n                                            <v-select\n                                                class=\"mt-1\"\n                                                v-model=\"invoice.location\"\n                                                :items=\"locations\"\n                                                @change=\"loadSaleOrder\"\n                                                :disabled=\"disabledMe\"\n                                                item-value=\"id\"\n                                                :item-text=\"(item) => `${item.code} - ${item.name}`\"\n                                                :rules=\"[(v) => !!v['id'] || $t('is required!')]\"\n                                                return-object\n                                                tage=\"Location\"\n                                                placeholder=\"bu/location\"\n                                                outlined=\"\"/>\n                                            <label class=\"label font_14\">{{ $t(\"project\") }}</label>\n                                            <v-select\n                                                class=\" mt-1\"\n                                                v-model=\"invoice.project\"\n                                                :items=\"customerProjects\"\n                                                :item-text=\"(item) => `${item.code} - ${item.name}`\"\n                                                item-value=\"id\"\n                                                tage=\"Customer Project\"\n                                                clearable\n                                                placeholder=\"project\"\n                                                outlined/>\n                                            <label class=\"label font_14\">{{ $t(\"sale_channel\") }}</label>\n                                            <v-select\n                                                class=\" mt-1\"\n                                                v-model=\"invoice.saleChannel\"\n                                                :items=\"saleChannelList\"\n                                                item-value=\"id\"\n                                                item-text=\"name\"\n                                                return-object\n                                                tage=\"Sale Channel\"\n                                                placeholder=\"Channel\"\n                                                outlined/>\n                                            <label class=\"label font_14\">{{ $t(\"employee\") }}</label>\n                                            <v-col\n                                                sm=\"12\"\n                                                cols=\"12\"\n                                                class=\"kendo_dropdown_custom pl-0 pr-0 pb-3 pt-0\">\n                                                <dropdownlist\n                                                    :data-items=\"employees\"\n                                                    @change=\"onEmployeeChanged\"\n                                                    :value=\"mEmployee\"\n                                                    :data-item-key=\"'id'\"\n                                                    :text-field=\"'name'\"\n                                                    :default-item=\"defaultItem\"\n                                                    :filterable=\"true\"\n                                                    @filterchange=\"onEmployeeFilterChanged\">\n                                                </dropdownlist>\n                                            </v-col>\n                                            <label class=\"label\">{{ $t(\"for_month_of\") }}</label>\n                                            <app-datepicker\n                                                :initialDate=\"invoice.monthOf\"\n                                                @emitDate=\"monthOf = $event\"/>\n                                        </v-col>\n                                    </v-row>\n                                    <v-divider class=\"mb-3\"/>\n                                    <v-row>\n                                        <v-col sm=\"12\" cols=\"12\" class=\"pt-1\">\n                                            <label class=\"label text-bold text-uppercase font_14\">{{\n                                                    $t(\"tnc_to_be_added\")\n                                                }}</label>\n                                            <LoadingMe :isLoading=\"showLoadingTxn\" :fullPage=\"false\" :myLoading=\"true\"\n                                                       type=\"loading\"/>\n                                            <v-row v-for=\"item in saleOrders\" v-bind:key=\"item.id\">\n                                                <v-col sm=\"10\" cols=\"10\" class=\"py-0 pr-0\">\n                                                    <v-card\n                                                        outlined\n                                                        color=\"third\"\n                                                        class=\"px-3 py-1 white--text no-boxshadow no_border justify-left d-flex\"\n                                                        style=\" height: 38px\">\n                                                        <p class=\"mb-0\" style=\"width: 100%\">\n                                                            <span\n                                                                class=\"pl-3 py-1 float-left\">{{\n                                                                    item.referenceNo || item.reference\n                                                                }}</span>\n                                                        </p>\n                                                    </v-card>\n                                                </v-col>\n                                                <v-col sm=\"2\" cols=\"2\" class=\"py-0  pl-1\">\n                                                    <v-btn\n                                                        class=\"text-white text-bold float-right text-uppercase\"\n                                                        outlined\n                                                        icon\n                                                        color=\"primary\"\n                                                        style=\"height: 30px\"\n                                                        :disabled=\"disabledMe\"\n                                                        @click=\"addSaleOrder(item)\">\n                                                        <v-icon>mdi-plus</v-icon>\n                                                    </v-btn>\n                                                </v-col>\n                                            </v-row>\n\n                                            <!-- <v-row>\n                        <label class=\"text-bold ml-9\" style=\"font-size: 12px;\">1.\n                          {{ $t('sale_order') }}</label>\n                        <v-col sm=\"9\" cols=\"9\" class=\"py-0 pr-0\">\n                          <v-card outlined\n                                  class=\"px-5 py-1 text-white no-boxshadow no_border justify-left d-flex\"\n                                  height=\"30px\"\n                                  color=\"third\"\n                          >\n                            <input type=\"checkbox\" class=\"checkbox_inv float-left\"/>\n                            <p class=\"mb-0 white--text\" style=\"width: 100%\">\n                              <span class=\"pl-3 float-left\">No. 00224</span>\n                              <span class=\"float-right\">2,500.00</span>\n                            </p>\n                          </v-card>\n                        </v-col>\n                        <v-col sm=\"3\" cols=\"3\" class=\"py-0  pl-1\">\n                          <v-btn\n                              class=\"text-white b_add text-bold rounded-0 float-right text-uppercase\"\n                              height=\"30px\"\n                              color=\"primary\"\n                          >\n                            {{ $t('add') }}\n                          </v-btn>\n                        </v-col>\n                      </v-row>\n                      <v-row>\n                        <label class=\"text-bold ml-9\" style=\"font-size: 12px;\">2.\n                          {{ $t('delayed_invoice') }}</label>\n                        <v-col sm=\"9\" cols=\"9\" class=\"py-0 pr-0\">\n                          <v-card outlined\n                                  class=\"px-5 py-1 text-white no-boxshadow no_border justify-left d-flex\"\n                                  height=\"30px\"\n                                  color=\"third\">\n                            <input type=\"checkbox\" class=\"checkbox_inv float-left\"/>\n                            <p class=\"mb-0 white--text\" style=\"width: 100%\">\n                              <span class=\"pl-3 float-left\">No. 00224</span>\n                              <span class=\"float-right\">2,500.00</span>\n                            </p>\n                          </v-card>\n                        </v-col>\n                        <v-col sm=\"3\" cols=\"3\" class=\"py-0  pl-1\">\n                          <v-btn\n                              class=\"text-white b_add text-bold rounded-0 float-right text-uppercase\"\n                              height=\"30px\"\n                              color=\"primary\">\n                            {{ $t('add') }}\n                          </v-btn>\n                        </v-col>\n                      </v-row>\n                      <v-row>\n                        <label class=\"text-bold ml-9\" style=\"font-size: 12px;\">3.\n                          {{ $t('delayed_credit') }}</label>\n                        <v-col sm=\"9\" cols=\"9\" class=\"py-0 pr-0\">\n                          <v-card outlined\n                                  class=\"px-5 py-1 text-white no-boxshadow no_border justify-left d-flex\"\n                                  height=\"30px\"\n                                  color=\"third\">\n                            <input type=\"checkbox\" class=\"checkbox_inv float-left\"/>\n                            <p class=\"mb-0 white--text\" style=\"width: 100%\">\n                              <span class=\"pl-3 float-left\">No. 00224</span>\n                              <span class=\"float-right\">2,500.00</span>\n                            </p>\n                          </v-card>\n                        </v-col>\n                        <v-col sm=\"3\" cols=\"3\" class=\"py-0  pl-1\">\n                          <v-btn\n                              class=\"text-white b_add text-bold rounded-0 float-right text-uppercase\"\n                              height=\"30px\"\n                              color=\"primary\">\n                            {{ $t('add') }}\n                          </v-btn>\n                        </v-col>\n                      </v-row>\n                      <v-row>\n                        <label class=\"text-bold ml-9\" style=\"font-size: 12px;\">4.\n                          {{ $t('quotation') }}</label>\n                        <v-col sm=\"9\" cols=\"9\" class=\"py-0 pr-0\">\n                          <v-card outlined\n                                  class=\"px-5 py-1 text-white no-boxshadow no_border justify-left d-flex\"\n                                  height=\"30px\"\n                                  color=\"third\">\n                            <input type=\"checkbox\" class=\"checkbox_inv float-left\"/>\n                            <p class=\"mb-0 white--text\" style=\"width: 100%\">\n                              <span class=\"pl-3 float-left\">No. 00224</span>\n                              <span class=\"float-right\">2,500.00</span>\n                            </p>\n                          </v-card>\n                        </v-col>\n                        <v-col sm=\"3\" cols=\"3\" class=\"py-0  pl-1\">\n                          <v-btn\n                              class=\"text-white b_add text-bold rounded-0 float-right text-uppercase\"\n                              height=\"30px\"\n                              color=\"primary\">\n                            {{ $t('add') }}\n                          </v-btn>\n                        </v-col>\n                      </v-row>\n                      <v-row>\n                        <label class=\"text-bold ml-9\" style=\"font-size: 12px;\">5.\n                          {{ $t('delivery_note') }}</label>\n                        <v-col sm=\"9\" cols=\"9\" class=\"py-0 pr-0\">\n                          <v-card outlined\n                                  class=\"px-5 py-1 text-white no-boxshadow no_border justify-left d-flex\"\n                                  height=\"30px\"\n                                  color=\"third\">\n                            <input type=\"checkbox\" class=\"checkbox_inv float-left\"/>\n                            <p class=\"mb-0 white--text\" style=\"width: 100%\">\n                              <span class=\"pl-3 float-left\">No. 00224</span>\n                              <span class=\"float-right\">2,500.00</span>\n                            </p>\n                          </v-card>\n                        </v-col>\n                        <v-col sm=\"3\" cols=\"3\" class=\"py-0  pl-1\">\n                          <v-btn\n                              class=\"text-white text-bold b_add rounded-0 float-right text-uppercase\"\n                              height=\"30px\"\n                              color=\"primary\">\n                            {{ $t('add') }}\n                          </v-btn>\n                        </v-col>\n                      </v-row>\n                      <v-row>\n                        <label class=\"text-bold ml-9\" style=\"font-size: 12px;\">6.\n                          {{ $t('billable_expense') }}</label>\n                        <v-col sm=\"9\" cols=\"9\" class=\"py-0 pr-0\">\n                          <v-card outlined\n                                  class=\"px-5 py-1 text-white no-boxshadow no_border justify-left d-flex\"\n                                  height=\"30px\"\n                                  color=\"third\">\n                            <input type=\"checkbox\" class=\"checkbox_inv float-left\"/>\n                            <p class=\"mb-0 white--text\" style=\"width: 100%\">\n                              <span class=\"pl-3 float-left\">No. 00224</span>\n                              <span class=\"float-right\">2,500.00</span>\n                            </p>\n                          </v-card>\n                        </v-col>\n                        <v-col sm=\"3\" cols=\"3\" class=\"py-0  pl-1\">\n                          <v-btn\n                              class=\"text-white b_add text-bold rounded-0 float-right text-uppercase\"\n                              height=\"30px\"\n                              color=\"primary\">\n                            {{ $t('add') }}\n                          </v-btn>\n                        </v-col>\n                      </v-row> -->\n                                            <v-row>\n                                                <v-col sm=\"12\" cols=\"12\" class=\"pb-0\">\n                                                    <label class=\"label mt-2 text-uppercase\">{{\n                                                            $t(\"payment_options\")\n                                                        }}</label>\n                                                </v-col>\n                                                <v-col sm=\"12\" cols=\"12\">\n                                                    <v-row>\n                                                        <v-col sm=\"12\" cols=\"12\" class=\"py-0\">\n                                                            <label class=\"label\">{{ $t('cash_payment') }}</label>\n                                                            <v-select\n                                                                class=\"mt-1\"\n                                                                outlined\n                                                                return-object\n                                                                id=\"\"\n                                                                :items=\"cashPayment\"\n                                                                item-text=\"name\"\n                                                                tage=\"PaymentOption\"\n                                                                item-value=\"id\"\n                                                                v-model=\"invoice.cashPayment\"/>\n                                                            <label class=\"label\">{{ $t('bill_payment') }}</label>\n                                                            <v-select\n                                                                class=\"mt-1\"\n                                                                outlined\n                                                                return-object\n                                                                id=\"\"\n                                                                clearable\n                                                                :items=\"billPayment\"\n                                                                item-text=\"name\"\n                                                                tage=\"PaymentOption\"\n                                                                item-value=\"id\"\n                                                                v-model=\"invoice.billPayment\"/>\n                                                            <label class=\"label\">{{ $t('qr_payment') }}</label>\n                                                            <v-select\n                                                                class=\"mt-1\"\n                                                                outlined\n                                                                return-object\n                                                                id=\"\"\n                                                                :items=\"qrPayment\"\n                                                                item-text=\"name\"\n                                                                tage=\"PaymentOption\"\n                                                                item-value=\"id\"\n                                                                clearable\n                                                                v-model=\"invoice.qrPayment\"/>\n                                                            <label class=\"label\">{{ $t('bank_transfer') }}</label>\n                                                            <v-select\n                                                                class=\"mt-1\"\n                                                                outlined\n                                                                return-object\n                                                                clearable\n                                                                id=\"\"\n                                                                :items=\"bankTransfer\"\n                                                                item-text=\"name\"\n                                                                tage=\"PaymentOption\"\n                                                                item-value=\"id\"\n                                                                v-model=\"invoice.bankTransfer\"/>\n                                                        </v-col>\n                                                    </v-row>\n                                                </v-col>\n                                            </v-row>\n                                        </v-col>\n                                    </v-row>\n                                    <!--                                    <v-divider class=\"mb-5\"/>-->\n                                    <!--                                    <label class=\"label\">{{ $t('delivery_options') }} (<span-->\n                                    <!--                                        style=\"color:#1bb5f1\">{{ $t('get_setup') }}</span>)</label>-->\n                                    <!--                                    <v-row>-->\n                                    <!--                                        <v-col sm=\"6\" cols=\"12\" class=\"pb-0\">-->\n                                    <!--                                            <label class=\"label font_14\">{{ $t('project') }}</label>-->\n                                    <!--                                            <v-text-field class=\"mt-1\"-->\n                                    <!--                                                          palceholder=\"joonak\"-->\n                                    <!--                                                          tage=\"Project\"-->\n                                    <!--                                                          outlined-->\n                                    <!--                                            />-->\n                                    <!--                                            <label class=\"label font_14\">{{ $t('from') }}</label>-->\n                                    <!--                                            <v-text-field class=\" my-2\"-->\n                                    <!--                                                          palceholder=\"joonak\"-->\n                                    <!--                                                          tage=\"From\"-->\n                                    <!--                                                          outlined-->\n                                    <!--                                            />-->\n                                    <!--                                        </v-col>-->\n                                    <!--                                        <v-col sm=\"6\" cols=\"12\" class=\"pb-0\">-->\n                                    <!--                                            <label class=\"label font_14\">{{ $t('delivery_date_time') }}</label>-->\n                                    <!--                                            <app-datepicker :initialDate=\"journal_date\"-->\n                                    <!--                                                            @emitDate=\"journal_date = $event\"/>-->\n                                    <!--                                            <label class=\"label font_14\">{{ $t('to') }}</label>-->\n                                    <!--                                            <v-text-field class=\" my-2\"-->\n                                    <!--                                                          palceholder=\"to\"-->\n                                    <!--                                                          outlined-->\n                                    <!--                                            />-->\n                                    <!--                                        </v-col>-->\n                                    <!--                                    </v-row>-->\n                                    <!--                                    <v-row>-->\n                                    <!--                                        <v-col sm=\"4\" cols=\"9\" class=\"py-0 pr-0 pl-4\">-->\n                                    <!--                                            <p class=\"color_grey font_10 mb-0\">QUOTED FEE</p>-->\n                                    <!--                                            <p class=\"color_green  mb-0\">1,000.00 </p>-->\n                                    <!--                                        </v-col>-->\n                                    <!--                                        <v-col sm=\"2\" cols=\"3\" class=\"py-0 mt-1 pl-0\">-->\n                                    <!--                                            <v-btn class=\"text-white text-bold rounded-0 float-right text-uppercase\"-->\n                                    <!--                                                   style=\"height: 30px !important; background-color: rgb(0, 176, 80) !important\">-->\n                                    <!--                                                {{ $t('add') }}-->\n                                    <!--                                            </v-btn>-->\n                                    <!--                                        </v-col>-->\n                                    <!--                                    </v-row>-->\n\n                                    <!-- <p class=\"mb-0 detial_smallside_p font_14\">{{$t('sale_order_funct_desc')}}</p> -->\n                                </div>\n                            </v-col>\n                        </v-row>\n                    </v-card>\n                </v-col>\n            </v-row>\n            <LoadingMe :isLoading=\"showLoading\" :fullPage=\"false\" :myLoading=\"true\"/>\n            <v-dialog v-model=\"dialogTax\" max-width=\"450px\">\n                <v-card>\n                    <div class=\"modal_header\">\n                        <v-card-title>{{ $t(\"tax_list\") }}</v-card-title>\n                        <v-icon class=\"btn_close\" @click=\"dialogTax = false\">close</v-icon>\n                    </div>\n                    <v-card-text class=\"modal_text_content\">\n                        <v-row>\n                            <v-col sm=\"12\" cols=\"12\" class=\"py-0\">\n                                <v-simple-table>\n                                    <template v-slot:default>\n                                        <tbody>\n                                        <tr\n                                            v-for=\"(value, name) in taxListTotal\"\n                                            v-bind:key=\"name\">\n                                            <td class=\"text-left\" width=\"180px\">{{ name }}</td>\n                                            <td class=\"text-center\">:</td>\n                                            <td class=\"text-right\">{{ numberFormat(value) }}</td>\n                                        </tr>\n                                        <tr>\n                                            <td class=\"text-left\" width=\"180px\">{{ $t(\"total\") }}</td>\n                                            <td class=\"text-center\">:</td>\n                                            <td class=\"text-right\">{{ numberFormat(invoice.totalTaxAmount) }}</td>\n                                        </tr>\n                                        </tbody>\n                                    </template>\n                                </v-simple-table>\n                            </v-col>\n                        </v-row>\n                    </v-card-text>\n                    <v-divider/>\n                </v-card>\n            </v-dialog>\n            <!--      <v-dialog v-model=\"dialogCatalog\" max-width=\"850px\">-->\n            <!--        <template v-slot:activator=\"{ on }\">-->\n            <!--        </template>-->\n            <!--        <v-card>-->\n            <!--          <v-card-title>{{ $t('catalog') }}</v-card-title>-->\n            <!--          <v-icon class=\"btn_close\" @click=\"dialogCatalog = false\">close</v-icon>-->\n            <!--          <v-divider/>-->\n            <!--          <v-card-text style=\"height: 240px; background-color: #EDF1F5; color: #333;\">-->\n            <!--            <v-row>-->\n            <!--              <v-col sm=\"12\" cols=\"12\" class=\"pb-0\">-->\n            <!--                <v-simple-table>-->\n            <!--                  <kendo-datasource ref=\"catalogDatasource\"-->\n            <!--                                    :data=\"catalogs\"-->\n            <!--                                    :schema=\"gridSchema\"/>-->\n            <!--                  <kendo-grid id=\"gridCatalog\"-->\n            <!--                              class=\"grid-function\"-->\n            <!--                              :data-source-ref=\"'catalogDatasource'\"-->\n            <!--                              :style=\"{width: '100%'}\"-->\n            <!--                              :noRecords=\"true\"-->\n            <!--                              :pageable-numeric=\"false\"-->\n            <!--                              :pageable-previous-next=\"false\"-->\n            <!--                              :pageable-messages-display=\"'Showing {2} data items'\"-->\n            <!--                              :scrollable-virtual=\"true\">-->\n            <!--                    <kendo-grid-column-->\n            <!--                        :field=\"'images'\"-->\n            <!--                        :title=\"$t('image')\"-->\n            <!--                        :width=\"50\"-->\n            <!--                        :template=\"loadImage\"-->\n            <!--                        :headerAttributes=\"{ style: 'background-color: #EDF1F5' }\"/>-->\n            <!--                    <kendo-grid-column-->\n            <!--                        :field=\"'number'\"-->\n            <!--                        :title=\"$t('number')\"-->\n            <!--                        :width=\"70\"-->\n            <!--                        :template=\"'<span>#=number#</span>'\"-->\n            <!--                        :groupHeaderColumnTemplate=\"'#=value#'\"-->\n            <!--                        :headerAttributes=\"{ style: 'background-color: #EDF1F5' }\"/>-->\n            <!--                    <kendo-grid-column-->\n            <!--                        :field=\"'name'\"-->\n            <!--                        :title=\"$t('name')\"-->\n            <!--                        :attributes=\"{class:'tb_name_td'}\"-->\n            <!--                        :width=\"100\"-->\n            <!--                        :template=\"'<span>#=name#</span>'\"-->\n            <!--                        :headerAttributes=\"{ style: 'background-color: #EDF1F5' }\"/>-->\n            <!--                    <kendo-grid-column-->\n            <!--                        :field=\"'description'\"-->\n            <!--                        :title=\"$t('description')\"-->\n            <!--                        :width=\"100\"-->\n            <!--                        :template=\"'<span>#=description#</span>'\"-->\n            <!--                        :headerAttributes=\"{ style: 'background-color: #EDF1F5' }\"/>-->\n            <!--                    <kendo-grid-column-->\n            <!--                        :field=\"'noOfProduct'\"-->\n            <!--                        :title=\"$t('products')\"-->\n            <!--                        :template=\"'<span>#=noOfProduct#</span>'\"-->\n            <!--                        :width=\"50\"-->\n            <!--                        :headerAttributes=\"{style: 'text-align: left; background-color: #EDF1F5'}\"/>-->\n            <!--                    <kendo-grid-column-->\n            <!--                        :field=\"''\"-->\n            <!--                        :title=\"$t('action')\"-->\n            <!--                        :width=\"60\"-->\n            <!--                        :command=\"[{ text: $t('add'), click: addCatalog }]\"-->\n            <!--                        :headerAttributes=\"{style: 'text-align: left; background-color: #EDF1F5'}\"/>-->\n            <!--                  </kendo-grid>-->\n            <!--                </v-simple-table>-->\n            <!--              </v-col>-->\n            <!--            </v-row>-->\n            <!--          </v-card-text>-->\n            <!--          <v-divider/>-->\n\n            <!--        </v-card>-->\n            <!--      </v-dialog>-->\n        </v-container>\n    </v-app>\n</template>\n\n<script>\n// import kendo from \"@progress/kendo-ui\"\nimport {i18n} from \"@/i18n\";\nimport DatePickerComponent from \"@/components/custom_templates/DatePickerComponent\";\nimport InvoiceModel from \"@/scripts/invoice/model/Invoice\";\nimport ItemLineModel from \"@/scripts/invoice/model/ItemLine\";\nimport {uuid} from \"vue-uuid\";\nimport paymentTermHandler_ from \"@/scripts/paymentterm/handler/paymentTermHandler\";\nimport {DropDownList} from \"@progress/kendo-vue-dropdowns\";\nimport kendo from \"@progress/kendo-ui\";\nimport SaleFormContentModel from \"@/scripts/model/SaleFormContent\";\n// import kendo from \"@progress/kendo-ui\";\nimport {dataStore, ShowResource} from \"@/observable/store\";\nimport {getPrint} from \"@/form/invoices.js\";\nimport creditLimitHandler from \"@/scripts/creditLimit/handler/creditLimitHandler\";\nimport PaymentOptionModel from \"@/scripts/model/PaymentOption\";\nimport {PAYMENT_OPINION_TYPE} from \"@/scripts/default_setup/Setting\";\n\nconst customerHandler = require(\"@/scripts/customerHandler\");\n\nconst projectHandler = require(\"@/scripts/projectHandler\");\nconst priceLevelHandler = require(\"@/scripts/priceLevelHandler\");\nconst currencyHandler = require(\"@/scripts/currency/handler/currencyHandler\");\nconst saleOrderHandler = require(\"@/scripts/transactionHandler\");\n\nconst settingsHandler = require(\"@/scripts/settingsHandler\");\nconst saleChannelHandler = require(\"@/scripts/saleChannelHandler\");\nconst employeeHandler = require(\"@/scripts/employeeHandler\");\nconst locationHandler = require(\"@/scripts/locationHandler\");\n// const paymentTermHandler = require(\"@/scripts/paymentTermHandler\")\n\nconst paymentTermHandler = require(\"@/scripts/settingsHandler\");\nconst accountHandler = require(\"@/scripts/handler/accounting/account\");\nconst productVariantHandler = require(\"@/scripts/productVariantHandler\");\nconst uomPriceHandler = require(\"@/scripts/uomPriceHandler\");\nconst uomConversionHandler = require(\"@/scripts/uomConversionHandler\");\nconst discountItemHandler = require(\"@/scripts/discountItemHandler\");\nconst settingHandler = require(\"@/scripts/settingHandler\");\nconst itemModifierHandler = require(\"@/scripts/itemModifierHandler\");\nconst saleUnitItemHandler = require(\"@/scripts/saleUnitItemHandler\");\nconst otherChargeHandler = require(\"@/scripts/otherChargeHandler\");\nconst saleFormContentHandler = require(\"@/scripts/saleFormContentHandler\");\nconst prefixHandler = require(\"@/scripts/prefixHandler\");\nconst billingHandler = require(\"@/scripts/invoice/handler/billingHandler\");\nconst lateFeeHandler = require(\"@/scripts/lateFeeHandler\");\nconst paymentOptionHandler = require(\"@/scripts/paymentOptionHandler\");\nconst catalogHandler = require(\"@/scripts/catalogHandler\");\n\nconst invoiceModel = new InvoiceModel({});\nconst itemLineModel = new ItemLineModel({});\nconst saleFormContentModel = new SaleFormContentModel({});\nconst $ = require(\"jquery\");\n\nconst textField = \"numberName\";\nconst keyField = \"id\";\nconst defaultItem = {[textField]: \"Select customer...\", [keyField]: null};\nconst emptyItem = {[textField]: \"loading ...\"};\nconst pageSize = 10;\nconst itemLinePrefix = \"lin-\";\nconst loadingData = [];\nwhile (loadingData.length < pageSize) {\n    loadingData.push({...emptyItem});\n}\nconst OPTION_TYPE = \"Customer\";\nconst strFilter = \"?optionType=\" + OPTION_TYPE;\nconst DISCOUNT_TYPE = \"?type=Sale\";\nconst cookieJS = require(\"@/cookie.js\");\nconst cookie = cookieJS.getCookie();\nexport default {\n    name: \"CustomerInvoice\",\n    props: [\"id\", \"transactionDate\"],\n    components: {\n        LoadingMe: () => import(`@/components/Loading`),\n        \"app-datepicker\": DatePickerComponent,\n        dropdownlist: DropDownList,\n    },\n    data: () => ({\n        isEdit: false,\n        mOtherCharge: [],\n        mOtherChargeAmount: [],\n        numSelect: [1],\n        dialogTax: false,\n        customerList: [],\n        showLoading: false,\n        showLoadingTxn: false,\n        alert: false,\n        files: [],\n        // Form validation\n        valid: true,\n        itemLines: [],\n        invoiceDate: new Date().toISOString().substr(0, 10),\n        template: -1,\n        templatesForm: [],\n        isHideBar: false,\n        gridSchema: {\n            model: {\n                id: \"id\",\n            },\n        },\n        customer: {},\n        defaultItem: defaultItem,\n        invoice: invoiceModel,\n        transactionType: [\"Invoice\", \"Commercial Invoice\", \"Tax Invoice\"],\n        cusBaseUrl: customerHandler.search(),\n        empBaseUrl: employeeHandler.search(),\n        init: {method: \"GET\", accept: \"application/json\", headers: []},\n        pendingRequest: undefined,\n        requestStarted: false,\n        skip: 0,\n        tempSkip: null,\n        total: 0,\n        filter: \"\",\n        referenceNo: \"\",\n        filter_: \"\",\n        textField: \"numberName\",\n        dataItemKey: \"id\",\n        segments: [],\n        saleChannelList: [],\n        employees: [],\n        mEmployee: {},\n        customerProjects: [],\n        billingAddress: [],\n        deliveryAddress: [],\n        deliveryDateTime: new Date().toISOString().substr(0, 10),\n        priceLevel: [],\n        locations: [],\n        paymentTerms: [],\n        receivableAcc: [],\n        currencies: [],\n        itemLine: itemLineModel,\n        uoms: [],\n        otherTax: [],\n        vatTax: [],\n        specificTax: [],\n        publicLightingTax: [],\n        saleUnitItemList: [],\n        specificDiscountItem: [],\n        otherChargeList: [],\n        depositBalance: 0,\n        schemaDefinition: {\n            model: {\n                id: \"id\",\n            },\n        },\n        saleFormContent: saleFormContentModel,\n        taxListTotal: {},\n        invoiceTypes: [],\n        customerDiscountItem: [],\n        customerSaleUnit: [],\n        customerSaleUnitLine: [],\n        lateFeeList: [],\n        loggedUser: {\n            id: cookie.creator,\n            name: cookie.email,\n        },\n        paymentOptionWBMobile: [],\n        paymentOptionOnline: [],\n        paymentOptionKHQR: [],\n        paymentOptionBankTransfer: [],\n        exchangeRate: {},\n        baseCurrencyCode: \"\",\n        currencyCode: \"\",\n        transactionRate: 1,\n        jRaw: [],\n        catalogs: [],\n        dialogCatalog: false,\n        saleOrders: [],\n        isPriceLevelChanged: false,\n        cashPayment: [],\n        billPayment: [],\n        qrPayment: [],\n        bankTransfer: [],\n        refFrom: [],\n        taxListDetail: [],\n        tax: [],\n        isAdded: false,\n        btnDisabled: false,\n        depositDeduction: 0,\n    }),\n    methods: {\n        dataBound: function (e) {\n            const grid = kendo.jQuery(\"#gridItemLine\").data(\"kendoGrid\");\n            const items = e.sender.items();\n            if (grid) {\n                items.each(function () {\n                    let dataItem = grid.dataItem(this);\n                    $(\"tr[data-uid='\" + dataItem.uid + \"']\").find('.isEditable')\n                        .each(function () {\n                            if (dataItem.isEditable === false) {\n                                $(this).addClass(\"k-state-disabled\");\n                            }\n                        });\n                });\n            }\n        },\n        autoCalculateTaxDetail() {\n            let ids = []\n            this.taxListDetail.forEach(n => {\n                ids.push(n.id || '')\n            })\n            const unique = [...new Set(ids)]\n            let result = []\n            unique.forEach(m => {\n                let amount = 0, row = {}, discount = 0, xDiscount = 0, xAmount = 0, taxAmount = 0, xTaxAmount = 0\n                let taxDetail = [], isVat = 0\n                const found = this.taxListDetail.filter(n => n.id === m)\n                // window.console.log('taxListDetailids', found)\n                found.forEach(k => {\n                    row = k\n                    if (k.isVat === 1) {\n                        isVat = 1\n                        const detail_ = k.detail || {}\n                        taxDetail.push(detail_)\n\n                    }\n                    taxAmount += k.taxAmount_ || 0\n                    xTaxAmount += (k.taxAmount_ || 0) * (k.txnRate || 1)\n                    amount += (k.amount || 0)\n                    xAmount += (k.amount || 0) * (k.txnRate || 1)\n                    discount += (k.discount || 0)\n                    xDiscount += (k.discount || 0) * (k.txnRate || 1)\n                })\n                let spTaxAmt = 0, spXTaxAmt = 0, plTaxAmt = 0, plXTaxAmt = 0, otTaxAmt = 0, otXTaxAmt = 0,\n                    spTaxName = '', plTaxName = '', otTaxName = '',\n                    spTaxNameLocale = '', plTaxNameLocale = '', otTaxNameLocale = '',\n                    spAccId = '', plAccId = '', otAccId = '',\n                    spRate = '', plRate = '', otRate = ''\n                taxDetail.forEach(n => {\n                    const spTax = n.specificTax || {}\n                    const plTax = n.publicLightingTax || {}\n                    const otherTax = n.otherTax || {}\n                    if (Object.keys(spTax).length > 0) {\n                        spTaxAmt += (spTax.taxAmount_ || 0)\n                        spXTaxAmt += ((spTax.taxAmount_ || 0) * (spTax.taxRate || 1))\n                        spTaxName = spTax.defaultTax || ''\n                        spTaxNameLocale = spTax.defaultTaxLocale || ''\n                        spAccId = spTax.account ? spTax.account.id : ''\n                        spRate = spTax.rate || 1\n                    }\n                    if (Object.keys(plTax).length > 0) {\n                        plTaxAmt += (plTax.taxAmount_ || 0)\n                        plXTaxAmt += ((plTax.taxAmount_ || 0) * (plTax.taxRate || 1))\n                        plTaxName = plTax.defaultTax || ''\n                        plTaxNameLocale = plTax.defaultTaxLocale || ''\n                        plAccId = plTax.account ? plTax.account.id : ''\n                        plRate = plTax.rate || 1\n                    }\n                    if (Object.keys(otherTax).length > 0) {\n                        otTaxAmt += (otherTax.taxAmount_ || 0)\n                        otXTaxAmt += ((otherTax.taxAmount_ || 0) * (plTax.taxRate || 1))\n                        otTaxName = otherTax.defaultTax || ''\n                        otTaxNameLocale = otherTax.defaultTaxLocale || ''\n                        otAccId = otherTax.account ? otherTax.account.id : ''\n                        otRate = otherTax.rate || 1\n                    }\n                })\n                if (isVat === 1) {\n                    row.detail = {\n                        specificTax: {\n                            name: spTaxName,\n                            nameLocale: spTaxNameLocale,\n                            amount: spTaxAmt,\n                            exchangeAmount: spXTaxAmt,\n                            accountId: spAccId,\n                            rate: spRate,\n                        },\n                        publicLightingTax: {\n                            name: plTaxName,\n                            nameLocale: plTaxNameLocale,\n                            amount: plTaxAmt,\n                            exchangeAmount: plXTaxAmt,\n                            accountId: plAccId,\n                            rate: plRate,\n                        },\n                        otherTax: {\n                            name: otTaxName,\n                            nameLocale: otTaxNameLocale,\n                            amount: otTaxAmt,\n                            exchangeAmount: otXTaxAmt,\n                            accountId: otAccId,\n                            rate: otRate,\n                        }\n                    }\n                } else {\n                    row.detail = {}\n                }\n\n                row['amount'] = amount\n                row['exchangeAmount'] = xAmount\n                row['taxAmount'] = taxAmount\n                row['exchangeTaxAmount'] = xTaxAmount\n                row['discount'] = discount\n                row['exchangeDiscount'] = xDiscount\n                row['currency'] = this.invoice.exchangeRate || {}\n                result.push(row)\n                taxDetail = []\n            })\n            this.invoice.saleTaxDetail = result\n            window.console.log('saleTaxDetail', result)\n        },\n        ChoseTemplate(i) {\n            window.console.log(i);\n            this.template = i;\n        },\n        shrinkDiscountItem(discountItem, discountLine) {\n            let uniqueDiscountItems = [];\n            const unique = this.removeDuplicate(discountItem);\n            unique.forEach((m) => {\n                const found = discountLine.filter((n) => n.id === m.id);\n                let amount = 0,\n                    exchangeAmount = 0;\n                found.map((o) => {\n                    amount += o.amount;\n                });\n                found.map((o) => {\n                    exchangeAmount += o.exchangeAmount;\n                });\n                uniqueDiscountItems.push({\n                    id: m.id,\n                    name: m.name,\n                    amount: amount,\n                    exchangeAmount: exchangeAmount,\n                });\n            });\n            this.customerDiscountItem = uniqueDiscountItems;\n            window.console.log(uniqueDiscountItems, \"uniqueDiscountItems\");\n        },\n        addSaleOrder(item) {\n            if (item) {\n                const itemLine = item.itemLines || [];\n                this.refFrom.push({\n                    id: item.id || '',\n                    reference: item.referenceNo || ''\n                })\n                let ds = this.$refs.itemLineDS.kendoWidget(),\n                    total = ds.total();\n                itemLine.forEach((o) => {\n                    this.itemLine = new ItemLineModel(o);\n                    this.itemLine.id = itemLinePrefix + uuid.v1();\n                    this.itemLine.decimalFormat = \"n\" + this.saleFormContent.decimal;\n                    this.itemLine.isEditable = true\n                    this.itemLine.sourceTransaction = {\n                        id: item.id,\n                        referenceNo: item.referenceNo,\n                    };\n                    this.itemLine.sourceTransactionRef = item.referenceNo;\n                    ds.insert(total, this.itemLine);\n                    // window.console.log(this.itemLine, 'itemLine')\n                });\n                this.itemLine = new ItemLineModel({});\n                this.autoCalculate();\n                const index = this.saleOrders.findIndex((itm) => {\n                    return item.id === itm.id;\n                });\n                this.saleOrders.splice(index, 1);\n                this.invoice.refFrom = this.removeDuplicate(this.refFrom)\n            }\n            // window.console.log(item, '--')\n        },\n        loadImage(dataItem) {\n            if (dataItem.hasOwnProperty(\"images\")) {\n                if (dataItem.images.hasOwnProperty(\"default\")) {\n                    const url = this.imgURL + dataItem.images.default.thumb;\n                    return (\n                        \"<img width='50' height='50' style= 'margin: auto;display: block;' src='\" +\n                        url +\n                        \"' />\"\n                    );\n                }\n            } else {\n                return \"\";\n            }\n        },\n        async loadCatalogs() {\n            new Promise((resolve) => {\n                setTimeout(() => {\n                    resolve(\"resolved\");\n                    this.showLoading = true;\n                    catalogHandler.get().then((res) => {\n                        this.showLoading = false;\n                        this.catalogs = res;\n                    });\n                }, 10);\n            });\n        },\n        addCatalog(e) {\n            e.preventDefault();\n            let grid = kendo.jQuery(\"#gridCatalog\").data(\"kendoGrid\");\n            let dataItem = grid.dataItem($(e.currentTarget).closest(\"tr\"));\n            // window.console.log(dataItem)\n            if (dataItem.variants.length > 0) {\n                dataItem.variants.forEach((m) => {\n                    if (m.hasOwnProperty(\"variant\")) {\n                        if (m.variant.hasOwnProperty(\"id\")) {\n                            this.loadSingleItem(m.variant.id, \"i\");\n                        }\n                    }\n                });\n                this.dialogCatalog = false;\n            }\n            if (dataItem.services.length > 0) {\n                dataItem.services.forEach((m) => {\n                    if (m.hasOwnProperty(\"service\")) {\n                        if (m.service.hasOwnProperty(\"id\")) {\n                            this.loadSingleItem(m.service.id, \"s\");\n                        }\n                    }\n                });\n                this.dialogCatalog = false;\n            }\n        },\n        qohTemplate(dataItem) {\n            const buom = dataItem.buom || {};\n            const qoh = dataItem.qoh || 0;\n            if (buom.hasOwnProperty(\"name\")) {\n                return kendo.toString(qoh, `n${this.saleFormContent.decimal}`) + ` ` + buom.name;\n            }\n            return ``;\n        },\n        Help(key) {\n            ShowResource(key);\n        },\n        numberEditor(container, options) {\n            kendo\n                .jQuery('<input data-bind=\"value:' + options.field + '\"/>')\n                .appendTo(container)\n                .kendoNumericTextBox({\n                    decimals: 30,\n                    min: 0.00001,\n                    format: `${this.saleFormContent.decimal}`,\n                });\n        },\n        async loadPaymentOption() {\n            new Promise((resolve) => {\n                setTimeout(() => {\n                    resolve(\"resolved\");\n                    paymentOptionHandler\n                        .list(strFilter)\n                        .then((res) => {\n                            this.showLoading = true;\n                            if (res.data.statusCode === 200) {\n                                this.showLoading = false;\n                                const data = res.data.data || []\n                                this.cashPayment = data.filter(m => m.type === PAYMENT_OPINION_TYPE.CASH_PAYMENT)\n                                this.billPayment = data.filter(m => m.type === PAYMENT_OPINION_TYPE.BILL_PAYMENT)\n                                this.qrPayment = data.filter(m => m.type === PAYMENT_OPINION_TYPE.QR_PAYMENT)\n                                this.bankTransfer = data.filter(m => m.type === PAYMENT_OPINION_TYPE.BANK_TRANSFER)\n                            }\n                        })\n                        .catch();\n                    {\n                        this.showLoading = false;\n                    }\n                }, 10);\n            });\n        },\n        vatTemplate(dataItem) {\n            const vat = dataItem.vatTax;\n            if (vat) {\n                return `<span>${vat.defaultTax ? vat.defaultTax : ``}</span>`;\n            } else {\n                return ``;\n            }\n        },\n        modifierTemplate(dataItem) {\n            const modifier = dataItem.modifier;\n            if (modifier) {\n                return `<span>${modifier.name ? modifier.name : ``}</span>`;\n            } else {\n                return ``;\n            }\n        },\n        itemTemplate(dataItem) {\n            const item = dataItem.item;\n            if (item) {\n                return `<span>${item.name ? item.name : ``}</span>`;\n            } else {\n                return ``;\n            }\n        },\n        UOMTemplate(dataItem) {\n            const uom = dataItem.uom;\n            if (uom) {\n                return `<span>${uom.uom ? uom.uom.name : ``}</span>`;\n            } else {\n                return ``;\n            }\n        },\n        saleUnitTemplate(dataItem) {\n            const saleUnit = dataItem.saleUnit;\n            if (saleUnit) {\n                return `<span>${saleUnit.name ? saleUnit.name : ``}</span>`;\n            } else {\n                return ``;\n            }\n        },\n        discountItemTemplate(dataItem) {\n            const discountItem = dataItem.discountItem;\n            if (discountItem) {\n                return `<span>${discountItem.code ? discountItem.code : ``} - ${\n                    discountItem.name ? discountItem.name : ``\n                }</span>`;\n            } else {\n                return ``;\n            }\n        },\n        addSelect() {\n            let amount_num = this.numSelect.length;\n            let num = this.numSelect[amount_num - 1];\n            let new_num = num + 1;\n            let lenghtItem = this.specificDiscountItem.length;\n            if (new_num <= lenghtItem) {\n                this.numSelect.push(new_num);\n            }\n        },\n        removeSelect(index) {\n            this.numSelect.splice(index, 1);\n            // window.console.log(index, this.numSelect)\n            // this.selectDiscount.splice(index,1)\n            // window.console.log(\"remove\",this.selectDiscount)\n            // this.selectDiscount = this.selectDiscount.filter(item =>  item.id != val.id);\n        },\n        onOtherChargeChange() {\n            let otherCharge = 0,\n                amount = 0;\n            this.invoice.otherChargeLine = [];\n            this.mOtherCharge.forEach((m) => {\n                amount = this.autoCalculateDiscount(m, this.invoice.subTotal);\n                otherCharge += amount;\n                this.invoice.otherChargeLine.push({\n                    id: m.id,\n                    name: m.name,\n                    amount: amount,\n                    exchangeAmount: amount * (this.invoice.txnRate || 1),\n                });\n            });\n            this.invoice.otherChargeAmount = otherCharge;\n            this.autoCalculate();\n        },\n        onOtherAmount(value) {\n            return this.autoCalculateDiscount(value, this.invoice.subTotal);\n        },\n        onSpecificDiscountChanged() {\n            this.invoice.specificDiscountTotal = 0;\n            if (this.invoice.specificDiscountItem) {\n                // window.console.log('-changed', this.invoice.specificDiscountItem)\n                const discountInvoice = this.autoCalculateDiscount(\n                    this.invoice.specificDiscountItem,\n                    this.invoice.subTotal\n                );\n                this.invoice.specificDiscountTotal = kendo.parseFloat(\n                    discountInvoice ? discountInvoice : 0\n                );\n                let total =\n                    kendo.parseFloat(this.invoice.subTotal) -\n                    (kendo.parseFloat(this.invoice.discountTotal) +\n                        kendo.parseFloat(this.invoice.totalTaxAmount)) -\n                    discountInvoice;\n                this.invoice.total = total;\n            }\n            this.autoCalculate();\n        },\n        empImpl(dataItem) {\n            let empIds = [];\n            dataItem.employee.forEach((m) => {\n                empIds.push(m.firstName + \" - \" + m.lastName);\n            });\n            // window.console.log(empIds.join(', '))\n            return `<span>${empIds.join(\", \")}</span>`;\n        },\n        async loadSaleFormContent() {\n            new Promise((resolve) => {\n                setTimeout(() => {\n                    resolve(\"resolved\");\n                    saleFormContentHandler.list().then((res) => {\n                        if (res.data.statusCode === 200) {\n                            const data = res.data.data;\n                            if (data.length > 0) {\n                                this.saleFormContent = data[0];\n                                this.initData();\n                            }\n                        }\n                    });\n                }, 10);\n            });\n        },\n        async loadSaleUnitItems() {\n            new Promise((resolve) => {\n                setTimeout(() => {\n                    resolve(\"resolved\");\n                    saleUnitItemHandler.list().then((res) => {\n                        if (res.data.statusCode === 200)\n                            this.saleUnitItemList = res.data.data;\n                    });\n                }, 10);\n            });\n        },\n        uomTmp(dataItem) {\n            window.console.log(dataItem);\n            return dataItem;\n        },\n        loadItemUOM(itemId, priceLevelId) {\n            window.console.log(\"p\", itemId, priceLevelId);\n        },\n        async loadUOMPrice(itemId, priceLevelId) {\n            new Promise((resolve) => {\n                setTimeout(() => {\n                    resolve(\"resolved\");\n                    uomPriceHandler.get(itemId).then((res) => {\n                        const prices = res.filter((m) => m.priceLevel.id === priceLevelId);\n                        window.console.log(\"price\", prices, itemId, priceLevelId);\n                    });\n                }, 10);\n            });\n        },\n        async loadUOMList(itemId) {\n            new Promise((resolve) => {\n                setTimeout(() => {\n                    resolve(\"resolved\");\n                    uomConversionHandler.get(itemId).then((res) => {\n                        this.uoms = res;\n                        window.console.log(\"all UOm\", res);\n                    });\n                }, 10);\n            });\n        },\n        onInvoiceTypeChanged() {\n            if (this.$route.params.id === null || this.$route.params.id === \"\") {\n                this.generateNumber();\n            }\n            this.templateHandle();\n        },\n        templateHandle() {\n            let temp = [];\n            if (this.invoice.transactionType.name == \"Commercial Invoice\") {\n                temp.push({\n                    id: 0,\n                    type: \"Commercial Invoice\",\n                    name: \"Template One\",\n                });\n            } else if (this.invoice.transactionType.name == \"General Invoice\") {\n                temp.push({\n                    id: 0,\n                    type: \"General Invoice\",\n                    name: \"Template One\",\n                });\n            } else if (this.invoice.transactionType.name == \"Tax Invoice\") {\n                temp.push({\n                    id: 0,\n                    type: \"Tax Invoice\",\n                    name: \"Template One\",\n                });\n                temp.push({\n                    id: 1,\n                    type: \"Tax Invoice2\",\n                    name: \"Template Two\",\n                });\n            }\n            this.templatesForm = temp;\n            this.template = 0;\n        },\n        autoCalculateTaxByType(tax) {\n            // return by a key\n            const groupAll = (list) =>\n                list.reduce((tax, item) => {\n                    const taxAmount = tax[item.name] || 0;\n                    return Object.assign({}, tax, {\n                        [item.name]: taxAmount + parseFloat(item.amount),\n                    });\n                }, {});\n            this.taxListTotal = groupAll(tax);\n            // window.console.log('nimol', groupAll(tax))\n        },\n        onDepositDeductionChange() {\n            if (\n                this.depositDeduction === \"\" ||\n                this.depositDeduction === undefined\n            ) {\n                this.depositDeduction = 0;\n            }\n            this.invoice.depositDeduction = 0\n            // window.console.log('this.depositDeduction', this.depositDeduction)\n            // window.console.log('this.invoice.depositDeduction', this.invoice.depositDeduction)\n            const amount = parseFloat(this.invoice.total) - parseFloat(this.invoice.depositDeduction)\n            const xChangeAmount = amount * (this.invoice.txnRate || 1)\n            const deduction = parseFloat(this.depositDeduction) || 0;\n            const depA = parseFloat(this.invoice.depositAmount) || 0\n            const xAmount = parseFloat(xChangeAmount) || 0\n            let deduct = deduction\n            if (deduction > xAmount) {\n                deduct = xAmount\n                if (deduct > depA) {\n                    deduct = depA\n                }\n                window.console.log('1', deduct)\n            } else {\n                if (deduct > depA) {\n                    deduct = depA\n                }\n                window.console.log('2', deduct)\n            }\n            this.depositDeduction = parseFloat(deduct)\n            this.invoice.depositDeduction = parseFloat(deduct);\n            // window.console.log('this.invoice.depositDeduction', deduct)\n            // if (deduction > this.invoice.depositAmount) {\n            //     this.invoice.depositDeduction = this.invoice.depositAmount;\n            // }\n            // if (deduction > parseFloat(this.invoice.exchangeAmount)) {\n            //     this.invoice.depositDeduction = this.invoice.exchangeAmount;\n            // }\n            // window.console.log('this.invoice', this.invoice)\n            this.autoCalculate();\n        },\n        autoCalculate() {\n            let ds = this.$refs.itemLineDS.kendoWidget(),\n                subTotal = 0,\n                totalTax = 0,\n                discountTotal = 0,\n                spTax = 0,\n                pltax = 0,\n                otherTax = 0,\n                vatTax = 0,\n                discountInvoice = 0,\n                taxList = [],\n                taxListDetail = [],\n                discountItem = [],\n                saleUnit = [],\n                inclusiveTax = 0,\n                discountLine = [],\n                saleUnitLine = [],\n                itemSubtotal = 0,\n                txnItmSubtotal = 0,\n                serviceSubtotal = 0,\n                itemDiscount = 0,\n                serviceDiscount = 0,\n                txnDiscount = 0;\n            let nature = \"\";\n            this.jRaw = [];\n            const rows = ds.data().filter((m) => parseFloat(m.amount) > 0);\n            rows.forEach((value) => {\n                let modifierPrice = 0;\n                let vatSpTax = {}, vatPLTax = {}, vatOtherTax = {}\n                if (value.modifier) {\n                    modifierPrice = kendo.parseFloat(value.modifier.price);\n                }\n\n                // subTotal += (kendo.parseFloat(value.amount) + modifierPrice)\n                let discount = 0;\n                if (value.discountItem) {\n                    const disItemField = value.discountItem;\n                    let subTo =\n                        kendo.parseFloat(value.price) * kendo.parseFloat(value.qty);\n                    discount = this.autoCalculateDiscount(value.discountItem, subTo);\n                    value[\"discountAmount\"] = discount;\n                    value[\"discountExchangeAmount\"] =\n                        discount * kendo.parseFloat(this.invoice.txnRate);\n                    // window.console.log('value', JSON.stringify(value))\n                    if (value.discountItem.hasOwnProperty(\"id\")) {\n                        discountItem.push(value.discountItem);\n                        discountLine.push({\n                            id: value.discountItem.id,\n                            name: value.discountItem.name,\n                            amount: discount,\n                            exchangeAmount: discount * parseFloat(this.invoice.txnRate),\n                        });\n                    }\n                    discountTotal += discount ? discount : 0;\n                    if (discount > 0) {\n                        nature = \"dr\";\n                    } else {\n                        nature = \"cr\";\n                    }\n                    if (disItemField.account) {\n                        if (disItemField.account.hasOwnProperty(\"id\")) {\n                            this.jRaw.push({\n                                id: disItemField.account.id + \"-\" + nature,\n                                // line: new ItemLineModel(value),\n                                description: \"Discount\",\n                                account: disItemField.account,\n                                accountId: disItemField.account.id,\n                                amount: discount,\n                                exchangeAmount:\n                                    discount * kendo.parseFloat(this.invoice.txnRate),\n                                type: nature,\n                                typeAs: \"discount\",\n                            });\n                        }\n                    }\n                }\n                if (value.saleUnit) {\n                    if (value.saleUnit.hasOwnProperty(\"id\")) {\n                        saleUnit.push(value.saleUnit);\n                        const item_ = value.item || {};\n                        const amount_ =\n                            kendo.parseFloat(value.price) * kendo.parseFloat(value.qty) || 0;\n                        const itemObj = {\n                            id: item_.id || \"\",\n                            name: item_.name || \"\",\n                            amount: amount_ - (discount || 0),\n                        };\n                        saleUnitLine.push({\n                            lineId: value.id || \"\",\n                            id: value.saleUnit.id,\n                            name: value.saleUnit.name,\n                            item: itemObj,\n                            amount: itemObj.amount,\n                            exchangeAmount: itemObj.amount * (this.invoice.txnRate || 1),\n                            discount: discount || 0,\n                            exchangeDiscount: (discount || 0) * (this.invoice.txnRate || 1),\n                        });\n                    }\n                }\n                if (value.specificTax) {\n                    spTax = this.autoCalculateTax(\n                        value.specificTax,\n                        kendo.parseFloat(value.amount) - kendo.parseFloat(discount)\n                    );\n                    spTax = kendo.parseFloat(spTax) ? kendo.parseFloat(spTax) : 0;\n                    value[\"specificTaxAmount\"] = spTax;\n                    value[\"specificTaxExchangeAmount\"] =\n                        spTax * kendo.parseFloat(this.invoice.txnRate);\n                    const tax = value.specificTax;\n                    const baseAmount = tax.baseAmount;\n                    if (baseAmount) {\n                        if (baseAmount.toLowerCase() === \"inclusive\") {\n                            inclusiveTax += spTax;\n                        }\n                    }\n                    // window.console.log(value.specificTax)\n                    if (value.specificTax.hasOwnProperty(\"taxType\")) {\n                        taxList.push({\n                            name: value.specificTax.taxType.name,\n                            amount: spTax,\n                            id: value.specificTax.taxType.id,\n                        });\n                        const spTax_ = value.specificTax || {}\n                        // spTax_['taxAmount'] = spTax\n                        spTax_['taxAmount_'] = spTax\n                        spTax_['amount'] = value.amount || 0\n                        spTax_['discount'] = discount || 0\n                        spTax_['txnRate'] = this.invoice.txnRate || 1\n                        // delete tax_['account']\n                        taxListDetail.push(spTax_);\n                        vatSpTax = spTax_\n                    }\n                    if (spTax * -1 > 0) {\n                        nature = \"dr\";\n                    } else {\n                        nature = \"cr\";\n                    }\n                    const specificTaxField = value.specificTax;\n                    if (specificTaxField.account) {\n                        if (specificTaxField.account.hasOwnProperty(\"id\")) {\n                            this.jRaw.push({\n                                id: specificTaxField.account.id + \"-\" + nature,\n                                // line: new ItemLineModel(value),\n                                description: \"Tax\",\n                                account: specificTaxField.account,\n                                accountId: specificTaxField.account.id,\n                                amount: spTax * -1,\n                                exchangeAmount:\n                                    spTax * -1 * kendo.parseFloat(this.invoice.txnRate),\n                                type: nature,\n                                typeAs: \"tax\",\n                            });\n                        }\n                    }\n                }\n                if (value.publicLightingTax) {\n                    pltax = this.autoCalculateTax(\n                        value.publicLightingTax,\n                        kendo.parseFloat(value.amount) - kendo.parseFloat(discount)\n                    );\n                    pltax = kendo.parseFloat(pltax) ? kendo.parseFloat(pltax) : 0;\n                    value[\"publicLightingTaxAmount\"] = pltax;\n                    value[\"publicLightingTaxExchangeAmount\"] =\n                        pltax * kendo.parseFloat(this.invoice.txnRate);\n                    const tax = value.publicLightingTax;\n                    const baseAmount = tax.baseAmount;\n                    if (baseAmount) {\n                        if (baseAmount.toLowerCase() === \"inclusive\") {\n                            inclusiveTax += pltax;\n                        }\n                    }\n                    if (value.publicLightingTax.hasOwnProperty(\"taxType\")) {\n                        taxList.push({\n                            name: value.publicLightingTax.taxType.name,\n                            amount: pltax,\n                            id: value.publicLightingTax.taxType.id,\n                        });\n                        const plTax_ = value.publicLightingTax || {}\n                        // plTax_['taxAmount'] = pltax\n                        plTax_['taxAmount_'] = pltax\n                        plTax_['amount'] = value.amount || 0\n                        plTax_['discount'] = discount || 0\n                        plTax_['txnRate'] = this.invoice.txnRate || 1\n                        // delete tax_['account']\n                        taxListDetail.push(plTax_);\n                        vatPLTax = plTax_\n                    }\n                    if (pltax * -1 > 0) {\n                        nature = \"dr\";\n                    } else {\n                        nature = \"cr\";\n                    }\n                    const PLTaxField = value.publicLightingTax;\n                    if (PLTaxField.account) {\n                        if (PLTaxField.account.hasOwnProperty(\"id\")) {\n                            this.jRaw.push({\n                                id: PLTaxField.account.id + \"-\" + nature,\n                                // line: new ItemLineModel(value),\n                                description: \"Tax\",\n                                account: PLTaxField.account,\n                                accountId: PLTaxField.account.id,\n                                amount: pltax * -1,\n                                exchangeAmount:\n                                    pltax * kendo.parseFloat(this.invoice.txnRate) * -1,\n                                type: nature,\n                                typeAs: \"tax\",\n                            });\n                        }\n                    }\n                }\n                if (value.otherTax) {\n                    otherTax = this.autoCalculateTax(\n                        value.otherTax,\n                        kendo.parseFloat(value.amount) - kendo.parseFloat(discount)\n                    );\n                    otherTax = kendo.parseFloat(otherTax)\n                        ? kendo.parseFloat(otherTax)\n                        : 0;\n                    value[\"otherTaxAmount\"] = otherTax;\n                    value[\"otherTaxExchangeAmount\"] =\n                        otherTax * kendo.parseFloat(this.invoice.txnRate);\n                    const tax = value.otherTax;\n                    const baseAmount = tax.baseAmount;\n                    if (baseAmount) {\n                        if (baseAmount.toLowerCase() === \"inclusive\") {\n                            inclusiveTax += otherTax;\n                        }\n                    }\n                    if (value.otherTax.hasOwnProperty(\"taxType\")) {\n                        taxList.push({\n                            name: value.otherTax.taxType.name,\n                            amount: otherTax,\n                            id: value.otherTax.taxType.id,\n                        });\n                        const tax__ = value.otherTax || {}\n                        // tax__['taxAmount'] = otherTax\n                        tax__['taxAmount_'] = otherTax\n                        tax__['amount'] = value.amount || 0\n                        tax__['discount'] = discount || 0\n                        tax__['txnRate'] = this.invoice.txnRate || 1\n                        // delete tax_['account']\n                        taxListDetail.push(tax__);\n                        vatOtherTax = tax__\n                    }\n                    if (otherTax * -1 > 0) {\n                        nature = \"dr\";\n                    } else {\n                        nature = \"cr\";\n                    }\n                    const otherTaxField = value.otherTax;\n                    if (otherTaxField.account) {\n                        if (otherTaxField.account.hasOwnProperty(\"id\")) {\n                            this.jRaw.push({\n                                id: otherTaxField.account.id + \"-\" + nature,\n                                // line: new ItemLineModel(value),\n                                description: \"Tax\",\n                                account: otherTaxField.account,\n                                accountId: otherTaxField.account.id,\n                                amount: otherTax * -1,\n                                exchangeAmount:\n                                    otherTax * kendo.parseFloat(this.invoice.txnRate) * -1,\n                                type: nature,\n                                typeAs: \"tax\",\n                            });\n                        }\n                    }\n                }\n\n                if (value.vatTax) {\n                    // window.console.log('Vat Tax', value.vatTax)\n                    let amt =\n                        kendo.parseFloat(spTax ? spTax : 0) +\n                        kendo.parseFloat(pltax ? pltax : 0) +\n                        kendo.parseFloat(otherTax ? otherTax : 0) +\n                        (kendo.parseFloat(value.amount ? value.amount : 0) -\n                            (discount ? discount : 0));\n                    vatTax = this.autoCalculateTax(value.vatTax, amt);\n                    vatTax = kendo.parseFloat(vatTax) ? kendo.parseFloat(vatTax) : 0;\n                    value[\"vatTaxAmount\"] = vatTax;\n                    value[\"vatTaxExchangeAmount\"] =\n                        vatTax * kendo.parseFloat(this.invoice.txnRate);\n                    const tax = value.vatTax;\n                    const baseAmount = tax.baseAmount;\n                    if (baseAmount) {\n                        if (baseAmount.toLowerCase() === \"inclusive\") {\n                            inclusiveTax += vatTax;\n                        }\n                    }\n                    if (value.vatTax.hasOwnProperty(\"taxType\")) {\n                        taxList.push({\n                            name: value.vatTax.taxType.name,\n                            amount: vatTax,\n                            id: value.vatTax.taxType.id,\n                        });\n                        const vatTax_ = value.vatTax || {}\n                        // vatTax_['taxAmount'] = vatTax\n                        vatTax_['taxAmount_'] = vatTax\n                        vatTax_['amount'] = value.amount || 0\n                        vatTax_['discount'] = discount || 0\n                        vatTax_['txnRate'] = this.invoice.txnRate || 1\n                        vatTax_['isVat'] = 1\n                        vatTax_.detail = {\n                            specificTax: vatSpTax,\n                            publicLightingTax: vatPLTax,\n                            otherTax: vatOtherTax,\n                        }\n                        // delete tax_['account']\n                        taxListDetail.push(vatTax_);\n\n                    }\n\n                    if (vatTax * -1 > 0) {\n                        nature = \"dr\";\n                    } else {\n                        nature = \"cr\";\n                    }\n                    const vatTaxField = value.vatTax;\n                    if (vatTaxField.account) {\n                        if (vatTaxField.account.hasOwnProperty(\"id\")) {\n                            this.jRaw.push({\n                                id: vatTaxField.account.id + \"-\" + nature,\n                                // line: new ItemLineModel(value),\n                                description: \"Tax\",\n                                account: vatTaxField.account,\n                                accountId: vatTaxField.account.id,\n                                amount: vatTax * -1,\n                                exchangeAmount:\n                                    vatTax * kendo.parseFloat(this.invoice.txnRate) * -1,\n                                type: nature,\n                                typeAs: \"tax\",\n                            });\n                        }\n                    }\n                }\n                vatSpTax = {}, vatPLTax = {} , vatOtherTax = {}\n                totalTax +=\n                    kendo.parseFloat(spTax ? spTax : 0) +\n                    kendo.parseFloat(pltax ? pltax : 0) +\n                    kendo.parseFloat(otherTax ? otherTax : 0) +\n                    kendo.parseFloat(vatTax ? vatTax : 0);\n                subTotal +=\n                    kendo.parseFloat(value.amount) + modifierPrice - inclusiveTax;\n                const amt =\n                    kendo.parseFloat(value.amount) + modifierPrice - inclusiveTax;\n                const xAmount =\n                    kendo.parseFloat(amt) * kendo.parseFloat(this.invoice.txnRate) * -1;\n                const item = value.item;\n                const itmType = item.type || \"\";\n                if (itmType === \"Variant\") {\n                    itemSubtotal +=\n                        kendo.parseFloat(value.price) * kendo.parseFloat(value.qty);\n                    itemDiscount += kendo.parseFloat(discount);\n                } else if (itmType === \"Service\") {\n                    serviceSubtotal +=\n                        kendo.parseFloat(value.price) * kendo.parseFloat(value.qty);\n                    itemDiscount += kendo.parseFloat(discount);\n                } else {\n                    txnItmSubtotal +=\n                        kendo.parseFloat(value.price) * kendo.parseFloat(value.qty);\n                    itemDiscount += kendo.parseFloat(discount);\n                }\n\n                const conversionRate = value.conversionRate || 1;\n                const bQty = parseFloat(value.qty * conversionRate);\n                const wac = parseFloat(value.wac) || 0;\n                const itemAmount = parseFloat(bQty) * wac;\n                // const itemxAmount = itemAmount\n                if (amt * -1 > 0) {\n                    nature = \"dr\";\n                } else {\n                    nature = \"cr\";\n                }\n                if (item) {\n                    if (item.type === \"Service\") {\n                        if (value.isPlan) {\n                            if (item.hasOwnProperty(\"deferredIncomeAcc\")) {\n                                if (item.deferredIncomeAcc.hasOwnProperty(\"id\")) {\n                                    let deferredInAcc = item.deferredIncomeAcc;\n                                    this.jRaw.push({\n                                        id: deferredInAcc.id + \"-\" + nature,\n                                        // line: new ItemLineModel(value),\n                                        description: this.invoice.journalNote,\n                                        account: deferredInAcc,\n                                        accountId: deferredInAcc.id,\n                                        amount: amt * -1,\n                                        exchangeAmount: xAmount,\n                                        type: nature,\n                                        typeAs: \"item\",\n                                    });\n                                }\n                            }\n                        } else {\n                            let incomeAcc = item.incomeAcc;\n                            if (item.hasOwnProperty(\"incomeAcc\")) {\n                                if (item.incomeAcc.hasOwnProperty(\"id\")) {\n                                    this.jRaw.push({\n                                        id: incomeAcc.id + \"-\" + nature,\n                                        // line: new ItemLineModel(value),\n                                        description: this.invoice.journalNote,\n                                        account: incomeAcc,\n                                        accountId: incomeAcc.id,\n                                        amount: amt * -1,\n                                        exchangeAmount: xAmount,\n                                        type: nature,\n                                        typeAs: \"item\",\n                                    });\n                                }\n                            }\n                        }\n                    } else if (item.type === \"Variant\") {\n                        if (item.hasOwnProperty(\"incomeAcc\")) {\n                            if (item.incomeAcc.hasOwnProperty(\"id\")) {\n                                let incomeAcc = item.incomeAcc;\n                                this.jRaw.push({\n                                    id: incomeAcc.id + \"-\" + nature,\n                                    // line: new ItemLineModel(value),\n                                    description: this.invoice.journalNote,\n                                    account: item.incomeAcc,\n                                    accountId: item.incomeAcc.id,\n                                    amount: amt * -1,\n                                    exchangeAmount: xAmount,\n                                    type: nature,\n                                    typeAs: \"item\",\n                                });\n                            }\n                        }\n                        if (item.hasOwnProperty(\"inventoryAcc\")) {\n                            if (item.inventoryAcc.hasOwnProperty(\"id\")) {\n                                let inventoryAcc = item.inventoryAcc;\n                                this.jRaw.push({\n                                    id: inventoryAcc.id + \"-\" + \"cr\",\n                                    // line: new ItemLineModel(value),\n                                    description: this.invoice.journalNote,\n                                    account: item.inventoryAcc,\n                                    accountId: item.inventoryAcc.id,\n                                    amount: 0, // qty*avg_cost ,\n                                    exchangeAmount: itemAmount * -1, //xAmount,\n                                    type: \"cr\",\n                                    typeAs: \"item\",\n                                });\n                            }\n                        }\n                        if (item.hasOwnProperty(\"costOfGoodsSoldAcc\")) {\n                            if (item.costOfGoodsSoldAcc.hasOwnProperty(\"id\")) {\n                                let costOfGoodsSoldAcc = item.costOfGoodsSoldAcc;\n                                this.jRaw.push({\n                                    id: costOfGoodsSoldAcc.id + \"-\" + \"dr\",\n                                    // line: new ItemLineModel(value),\n                                    description: this.invoice.journalNote,\n                                    account: item.costOfGoodsSoldAcc,\n                                    accountId: item.costOfGoodsSoldAcc.id,\n                                    amount: 0, // qty*avg_cost ,\n                                    exchangeAmount: itemAmount, //xAmount,\n                                    type: \"dr\",\n                                    typeAs: \"item\",\n                                });\n                            }\n                        }\n                    } else if (item.type === \"Fixed Asset\") {\n                        if (item.hasOwnProperty(\"assetAcc\")) {\n                            if (item.assetAcc.hasOwnProperty(\"id\")) {\n                                let assetAcc = item.assetAcc;\n                                this.jRaw.push({\n                                    id: assetAcc.id + \"-\" + nature,\n                                    // line: new ItemLineModel(value),\n                                    description: this.invoice.journalNote,\n                                    account: item.assetAcc,\n                                    accountId: item.assetAcc.id,\n                                    amount: amt * -1,\n                                    exchangeAmount: xAmount,\n                                    type: nature,\n                                    typeAs: \"item\",\n                                });\n                            }\n                        }\n                    } else if (item.type === \"Transaction Item\") {\n                        if (item.hasOwnProperty(\"account\")) {\n                            if (item.account.hasOwnProperty(\"id\")) {\n                                this.jRaw.push({\n                                    id: item.account.id + \"-\" + nature,\n                                    // line: new ItemLineModel(value),\n                                    description: this.invoice.journalNote,\n                                    account: item.account,\n                                    accountId: item.account.id,\n                                    amount: amt * -1,\n                                    exchangeAmount: xAmount,\n                                    type: nature,\n                                    typeAs: \"item\",\n                                });\n                            }\n                        }\n                    }\n                }\n                //include Tax Amount\n                const amountNodiscount =\n                    kendo.parseFloat(value.price) * kendo.parseFloat(value.qty) -\n                    discount;\n                const includeTaxAmount =\n                    amountNodiscount + vatTax + pltax + spTax + otherTax;\n                value[\"includeTaxAmount\"] = includeTaxAmount;\n                value[\"includeTaxExchangeAmount\"] = includeTaxAmount * kendo.parseFloat(this.invoice.txnRate);\n                window.console.log(\"value\", value);\n            });\n            this.invoice.itemSubtotal = itemSubtotal;\n            this.invoice.exchangeItemSubtotal =\n                itemSubtotal * kendo.parseFloat(this.invoice.txnRate);\n            this.invoice.serviceSubtotal = serviceSubtotal;\n            this.invoice.exchangeServiceSubtotal =\n                serviceSubtotal * kendo.parseFloat(this.invoice.txnRate);\n            this.invoice.txnItmSubtotal = txnItmSubtotal;\n            this.invoice.exchangeTxnItmSubtotal =\n                txnItmSubtotal * kendo.parseFloat(this.invoice.txnRate);\n            this.invoice.itemDiscount = itemDiscount;\n            this.invoice.exchangeItemDiscount =\n                itemDiscount * kendo.parseFloat(this.invoice.txnRate);\n            this.invoice.serviceDiscount = serviceDiscount;\n            this.invoice.exchangeServiceDiscount =\n                serviceDiscount * kendo.parseFloat(this.invoice.txnRate);\n            this.invoice.txnItmDiscount = txnDiscount;\n            this.invoice.exchangeTxnItmDiscount =\n                txnDiscount * kendo.parseFloat(this.invoice.txnRate);\n            // window.console.log(spTax, pltax, otherTax, vatTax)\n            let total =\n                kendo.parseFloat(subTotal) -\n                kendo.parseFloat(discountTotal) +\n                kendo.parseFloat(totalTax);\n            this.invoice.subTotal = subTotal;\n            this.invoice.exchangeSubTotal =\n                subTotal * parseFloat(this.invoice.txnRate);\n            // $(\"#subtotal\").text(kendo.parseFloat(subTotal))\n            this.invoice.totalTaxAmount = kendo.parseFloat(totalTax);\n            this.invoice.discountTotal = kendo.parseFloat(discountTotal);\n            if (this.invoice.specificDiscountItem) {\n                discountInvoice = this.autoCalculateDiscount(\n                    this.invoice.specificDiscountItem,\n                    kendo.parseFloat(subTotal)\n                );\n                discountInvoice = discountInvoice ? discountInvoice : 0;\n            }\n            // this.onOtherChargeChange()\n            this.invoice.total =\n                kendo.parseFloat(total) -\n                discountInvoice +\n                kendo.parseFloat(this.invoice.otherChargeAmount);\n            this.invoice.remainingAmount =\n                kendo.parseFloat(this.invoice.total) -\n                kendo.parseFloat(this.invoice.depositDeduction);\n            this.invoice.amountDue =\n                kendo.parseFloat(this.invoice.total) -\n                kendo.parseFloat(this.invoice.depositDeduction);\n            this.invoice.exchangeAmount =\n                kendo.parseFloat(this.invoice.amountDue) *\n                kendo.parseFloat(this.invoice.txnRate);\n            // window.console.log('Exchange Amount', this.invoice.exchangeAmount)\n            this.autoCalculateTaxByType(taxList);\n            if (this.invoice.specificDiscountItem) {\n                const specificDiscount = this.invoice.specificDiscountItem || {};\n                if (specificDiscount.id) {\n                    discountItem.push(specificDiscount);\n                    discountLine.push({\n                        id: specificDiscount.id,\n                        name: specificDiscount.name,\n                        amount: this.invoice.specificDiscountTotal,\n                        exchangeAmount:\n                            this.invoice.specificDiscountTotal * this.invoice.txnRate,\n                    });\n                }\n            }\n            const uniqueDiscountItem = this.removeDuplicate(discountItem);\n            this.shrinkDiscountItem(uniqueDiscountItem, discountLine);\n            this.customerSaleUnit = this.removeDuplicate(saleUnit);\n            this.customerSaleUnitLine = saleUnitLine; //this.removeDuplicate(saleUnit)\n            this.taxListDetail = taxListDetail\n            // window.console.log('taxListDetail--', taxListDetail)\n            // todo: raw Journal\n            const receivableAcc = this.invoice.receivableAcc || {};\n            if (this.invoice.amountDue > 0) {\n                nature = \"dr\";\n            } else {\n                nature = \"cr\";\n            }\n            if (receivableAcc) {\n                if (receivableAcc.hasOwnProperty(\"id\")) {\n                    this.jRaw.push({\n                        id: receivableAcc.id + \"-\" + nature,\n                        // line: new ItemLineModel({}),\n                        description: this.invoice.journalNote,\n                        account: receivableAcc,\n                        accountId: receivableAcc.id,\n                        exchangeAmount: this.invoice.exchangeAmount,\n                        amount: this.invoice.amountDue,\n                        type: nature,\n                        typeAs: \"ar\",\n                    });\n                }\n            }\n            const specificDisc = this.invoice.specificDiscountItem;\n            if (this.invoice.specificDiscountTotal > 0) {\n                nature = \"dr\";\n            } else {\n                nature = \"cr\";\n            }\n            if (specificDisc) {\n                if (specificDisc.hasOwnProperty(\"account\")) {\n                    if (specificDisc.account) {\n                        if (specificDisc.hasOwnProperty(\"id\")) {\n                            this.jRaw.push({\n                                id: specificDisc.account.id + \"-\" + nature,\n                                // line: new ItemLineModel({}),\n                                description: \"Discount\",\n                                account: specificDisc.account || {},\n                                accountId: specificDisc.account.id,\n                                exchangeAmount:\n                                    kendo.parseFloat(this.invoice.specificDiscountTotal) *\n                                    kendo.parseFloat(this.invoice.txnRate),\n                                amount: this.invoice.specificDiscountTotal,\n                                type: nature,\n                                typeAs: \"discount\",\n                            });\n                        }\n                    }\n                }\n            }\n\n            if (this.invoice.depositDeduction > 0) {\n                nature = \"dr\";\n            } else {\n                nature = \"cr\";\n            }\n            this.invoice.exchangeDepositDeduction =\n                (this.invoice.txnRate || 0) * this.invoice.depositDeduction;\n            if (this.invoice.depositDeduction) {\n                if (this.invoice.depositDeduction > 0) {\n                    const saleDepositAcc = this.customer.saleDepositAcc || {};\n                    if (saleDepositAcc) {\n                        if (saleDepositAcc.hasOwnProperty(\"id\")) {\n                            this.jRaw.push({\n                                id: saleDepositAcc.id + \"-\" + nature,\n                                description: \"Deposit\",\n                                // line: new ItemLineModel({}),\n                                account: saleDepositAcc,\n                                accountId: saleDepositAcc.id,\n                                exchangeAmount: this.invoice.exchangeDepositDeduction,\n                                amount: this.invoice.depositDeduction,\n                                type: nature,\n                                typeAs: \"deposit\",\n                            });\n                        }\n                    }\n                }\n            }\n            if (this.mOtherCharge.length > 0) {\n                let otherCharge = 0;\n                this.mOtherCharge.forEach((m) => {\n                    otherCharge = this.autoCalculateDiscount(m, this.invoice.subTotal);\n                    if (otherCharge * -1 > 0) {\n                        nature = \"dr\";\n                    } else {\n                        nature = \"cr\";\n                    }\n                    if (m) {\n                        if (m.hasOwnProperty(\"account\")) {\n                            if (m.account.hasOwnProperty(\"id\")) {\n                                const account = m.account;\n                                if (account) {\n                                    if (account.hasOwnProperty(\"id\")) {\n                                        this.jRaw.push({\n                                            id: account.id + \"-\" + nature,\n                                            // line: new ItemLineModel({}),\n                                            description: \"Other Charge\",\n                                            account: account,\n                                            accountId: account.id,\n                                            exchangeAmount:\n                                                otherCharge *\n                                                kendo.parseFloat(this.invoice.txnRate) *\n                                                -1,\n                                            amount: otherCharge * -1,\n                                            type: nature,\n                                            typeAs: \"otherCharge\",\n                                        });\n                                    }\n                                }\n                            }\n                        }\n                    }\n                });\n                // this.invoice.otherChargeAmount = otherCharge\n\n                window.console.log(this.mOtherCharge);\n            }\n            this.autoCalculateTaxDetail();\n            // todo: end raw Journal\n            // window.console.log(JSON.stringify(this.accounts), 'accounts')\n            this.shrinkData(this.jRaw);\n            // const unique = this.removeDuplicate(this.accounts)\n            // window.console.log(unique, 'unique')\n        },\n        shrinkData(obj) {\n            const uniques = this.removeDuplicate(\n                obj\n            ); /*[...new Set(accountId.map(i => {\n                return {\n                    id_: i.id_,\n                    id: i.id,\n                    type: i.type\n                }\n            }))]*/\n            uniques.forEach((n) => {\n                const found = obj.filter((m) => m.id === n.id);\n                let amount = 0,\n                    xAmount = 0;\n                found.forEach((z) => {\n                    amount += parseFloat(z.amount || 0);\n                    xAmount += parseFloat(z.exchangeAmount || 0);\n                });\n                n.amount = parseFloat(amount); //this.numberFormat(amount)\n                n.exchangeAmount = parseFloat(xAmount); //parseFloat(parseFloat(amount * parseFloat(this.invoice.txnRate))) //this.numberFormat(amount * parseFloat(this.invoice.txnRate)) //.toFixed(this.saleFormContent.decimal)\n            });\n            this.jRaw = uniques;\n            let dr = 0,\n                cr = 0;\n            this.jRaw.forEach((j) => {\n                switch (j.type) {\n                    case \"cr\":\n                        cr += parseFloat(j.amount);\n                        break;\n                    case \"dr\":\n                        dr += parseFloat(j.amount);\n                        break;\n                    default:\n                        break;\n                }\n            });\n            this.invoice.dr = dr;\n            this.invoice.cr = cr;\n            window.console.log(\"dr=\", dr, \"cr=\", cr, \"dr+cr = \", dr + cr);\n            window.console.log(JSON.stringify(uniques), \"uniques\");\n        },\n        rawForJournal() {\n            //todo: DR side account receivable\n            let itemLineDS = this.$refs.itemLineDS.kendoWidget();\n            const dataRow = itemLineDS.data();\n            this.jRaw = [];\n            // window.console.log(dataRow, 'dataRow')\n            dataRow.forEach((o) => {\n                const item = o.item;\n                const discountItem = o.discountItem;\n                const vatTax = o.vatTax;\n                const specificTax = o.specificTax;\n                const PLTax = o.publicLightingTax;\n                const otherTax = o.otherTax;\n                if (item) {\n                    if (item.type === \"Service\") {\n                        let incomeAcc = item.incomeAcc;\n                        if (item.hasOwnProperty(\"incomeAcc\")) {\n                            this.jRaw.push({\n                                item: item,\n                                line: o,\n                                account: incomeAcc,\n                                accountId: incomeAcc.id,\n                                type: \"cr\",\n                                typeAs: \"item\",\n                            });\n                        }\n                        if (item.hasOwnProperty(\"deferredIncomeAcc\")) {\n                            let deferredInAcc = item.deferredIncomeAcc;\n                            this.jRaw.push({\n                                item: item,\n                                line: o,\n                                account: deferredInAcc,\n                                accountId: deferredInAcc.id,\n                                type: \"cr\",\n                                typeAs: \"item\",\n                            });\n                        }\n                    } else if (item.type === \"Variant\") {\n                        this.jRaw.push({\n                            item: item,\n                            line: o,\n                            account: item.incomeAcc,\n                            accountId: item.incomeAcc.id,\n                            type: \"cr\",\n                            typeAs: \"item\",\n                        });\n                        this.jRaw.push({\n                            item: item,\n                            line: o,\n                            account: item.inventoryAcc,\n                            accountId: item.inventoryAcc.id,\n                            type: \"cr\",\n                            typeAs: \"item\",\n                        });\n                        this.jRaw.push({\n                            item: item,\n                            line: o,\n                            account: item.costOfGoodsSoldAcc,\n                            accountId: item.costOfGoodsSoldAcc.id,\n                            type: \"dr\",\n                            typeAs: \"item\",\n                        });\n                    } else if (item.type === \"Fixed Asset\") {\n                        this.jRaw.push({\n                            item: item,\n                            line: o,\n                            account: item.assetAcc,\n                            accountId: item.assetAcc.id,\n                            type: \"cr\",\n                            typeAs: \"item\",\n                        });\n                    } else if (item.type === \"Transaction Item\") {\n                        this.jRaw.push({\n                            item: item,\n                            line: o,\n                            account: item.account,\n                            accountId: item.account.id,\n                            type: \"cr\",\n                            typeAs: \"item\",\n                        });\n                    } else if (item.type === \"Fixed Asset\") {\n                        this.jRaw.push({\n                            item: item,\n                            line: o,\n                            account: item.account,\n                            accountId: item.account.id,\n                            type: \"cr\",\n                            typeAs: \"item\",\n                        });\n                    }\n                }\n                if (discountItem.account) {\n                    this.jRaw.push({\n                        item: item,\n                        line: o,\n                        account: discountItem.account,\n                        accountId: discountItem.account.id,\n                        type: \"dr\",\n                        typeAs: \"discount\",\n                    });\n                }\n                if (vatTax.account) {\n                    this.jRaw.push({\n                        item: item,\n                        line: o,\n                        account: vatTax.account,\n                        accountId: vatTax.account.id,\n                        type: \"cr\",\n                        typeAs: \"tax\",\n                    });\n                }\n                if (specificTax.account) {\n                    this.jRaw.push({\n                        item: item,\n                        line: o,\n                        account: specificTax.account,\n                        accountId: specificTax.account.id,\n                        type: \"cr\",\n                        typeAs: \"tax\",\n                    });\n                }\n                if (PLTax.account) {\n                    this.jRaw.push({\n                        item: item,\n                        line: o,\n                        account: PLTax.account,\n                        accountId: PLTax.account.id,\n                        type: \"cr\",\n                        typeAs: \"tax\",\n                    });\n                }\n                if (otherTax.account) {\n                    this.jRaw.push({\n                        item: item,\n                        line: o,\n                        account: otherTax.account,\n                        accountId: otherTax.account.id,\n                        type: \"cr\",\n                        typeAs: \"tax\",\n                    });\n                }\n            });\n            const receivableAcc = this.invoice.receivableAcc || {};\n            if (receivableAcc) {\n                this.jRaw.push({\n                    item: {},\n                    line: new ItemLineModel({}),\n                    account: receivableAcc,\n                    accountId: receivableAcc.id,\n                    type: \"dr\",\n                });\n            }\n            const specificDisc = this.invoice.specificDiscountItem;\n            if (specificDisc.hasOwnProperty(\"account\")) {\n                if (specificDisc.account.hasOwnProperty(\"id\")) {\n                    this.jRaw.push({\n                        item: {},\n                        line: new ItemLineModel({}),\n                        account: specificDisc.account || {},\n                        accountId: specificDisc.account.id,\n                        type: \"dr\",\n                    });\n                }\n            }\n            const saleDepositAcc = this.customer.saleDepositAcc || {};\n            if (saleDepositAcc.hasOwnProperty(\"account\")) {\n                if (saleDepositAcc.account.hasOwnProperty(\"id\")) {\n                    this.jRaw.push({\n                        item: {},\n                        line: new ItemLineModel({}),\n                        account: saleDepositAcc.account,\n                        accountId: saleDepositAcc.account.id,\n                        type: \"dr\",\n                    });\n                }\n            }\n\n            window.console.log(saleDepositAcc);\n            if (this.mOtherCharge.length > 0) {\n                window.console.log(this.mOtherCharge);\n            }\n            window.console.log(JSON.stringify(this.jRaw), \"accounts\");\n            // todo: calculate Amount\n        },\n        removeDuplicate(array) {\n            const result = [];\n            const map = new Map();\n            for (const item of array) {\n                if (!map.has(item.id)) {\n                    map.set(item.id, true); // set any value to Map\n                    result.push(item);\n                }\n            }\n            return result;\n        },\n        numberFormat(value) {\n            // window.console.log(this.saleFormContent.decimal,'nimol')\n            return kendo.toString(value, `n${this.saleFormContent.decimal}`);\n        },\n        autoCalculateDiscount(discountItem, subTotal) {\n            if (discountItem) {\n                const nature = discountItem.nature || ''\n                const amount = discountItem.amount || 0\n                if (nature === 'Amount') {\n                    return parseFloat(amount)\n                } else if (nature === 'Percentage') {\n                    return (subTotal * (parseFloat(amount) / 100))\n                } else {\n                    return 0\n                }\n            } else {\n                return 0\n            }\n        },\n        autoCalculateTax(tax, amount) {\n            if (tax) {\n                var formula = tax.formula;\n                var inAmt = kendo.parseFloat(amount);\n                var nAmt = kendo.parseFloat(amount);\n                var taxBase = kendo.parseFloat(tax.taxBase) / 100;\n                var rate = kendo.parseFloat(tax.rate) / 100;\n                var total = eval(formula);\n                window.console.log(inAmt, nAmt, taxBase, rate, formula, total);\n                return total;\n            }\n            // return 0\n        },\n        async dataSourceChanged(e) {\n            if (e.field) {\n                let dataRow = e.items[0],\n                    buom = {},\n                    conversionRate = 1,\n                    wac = 0,\n                    qoh = 0,\n                    amount = 0,\n                    xAmount = 0;\n                switch (e.field) {\n                    case \"item\":\n                        // this.attribute_ = this.attributes.filter(m => m.type.id === dataRow.variant.id)\n                        dataRow.set(\"description\", dataRow.item.description);\n                        buom = dataRow.item.uom || {};\n                        dataRow.set(\"buom\", buom);\n                        // dataRow.set('uom', buom)\n                        // window.console.log(dataRow.item,'row')\n                        // await this.inventoryBalance(dataRow, dataRow.item.id)\n                        break;\n                    case \"price\":\n                        try {\n                            amount = parseFloat(dataRow.price) * parseFloat(dataRow.qty);\n                            xAmount = amount * parseFloat(this.invoice.txnRate);\n\n                            dataRow.set(\"price\", parseFloat(dataRow.price));\n                            dataRow.set(\"amount\", amount);\n                            dataRow.set(\"exchangeAmount\", xAmount);\n                            // window.console.log('price',dataRow.price)\n                        } catch {\n                            dataRow.set(\"price\", 0);\n                            dataRow.set(\"amount\", 0);\n                            dataRow.set(\"exchangeAmount\", 0);\n                        }\n                        break;\n                    case \"uom\":\n                        if (this.isPriceLevelChanged === false) {\n                            try {\n                                buom = dataRow.uom.buom || {};\n                                qoh = dataRow.uom.qoh || 0;\n                                conversionRate = dataRow.uom.conversionRate || 1;\n                                wac = dataRow.uom.wac || 0;\n                                dataRow.set(\"buom\", buom);\n                                dataRow.set(\"wac\", wac);\n                                dataRow.set(\"qoh\", qoh);\n                                dataRow.set(\"conversionRate\", parseFloat(conversionRate));\n                                if (dataRow.uom) {\n                                    amount =\n                                        parseFloat(dataRow.uom.price) * parseFloat(dataRow.qty);\n                                    xAmount = amount * parseFloat(this.invoice.txnRate);\n\n                                    dataRow.set(\"price\", parseFloat(dataRow.uom.price));\n                                    dataRow.set(\"amount\", amount);\n                                    dataRow.set(\"exchangeAmount\", xAmount);\n                                } else {\n                                    amount = parseFloat(dataRow.price) * parseFloat(dataRow.qty);\n                                    xAmount = amount * parseFloat(this.invoice.txnRate);\n\n                                    dataRow.set(\"price\", parseFloat(dataRow.price));\n                                    dataRow.set(\"amount\", amount);\n                                    dataRow.set(\"exchangeAmount\", xAmount);\n                                }\n                            } catch (err) {\n                                window.console.log(\"error\", err);\n                                dataRow.set(\"buom\", {});\n                                dataRow.set(\"conversionRate\", 1);\n                                dataRow.set(\"price\", 0);\n                                dataRow.set(\"qoh\", 0);\n                                dataRow.set(\"wac\", 0);\n                                dataRow.set(\"amount\", 0);\n                                dataRow.set(\"exchangeAmount\", 0);\n                            }\n                        }\n                        break;\n                    case \"qty\":\n                        try {\n                            amount = parseFloat(dataRow.price) * parseFloat(dataRow.qty);\n                            xAmount = amount * parseFloat(this.invoice.txnRate);\n\n                            dataRow.set(\"price\", parseFloat(dataRow.price));\n                            dataRow.set(\"amount\", amount);\n                            dataRow.set(\"exchangeAmount\", xAmount);\n                        } catch {\n                            dataRow.set(\"price\", 0);\n                            dataRow.set(\"amount\", 0);\n                            dataRow.set(\"exchangeAmount\", 0);\n                        }\n                        break;\n                    case \"otherTax\":\n                        // window.console.log(\"--\", dataRow)\n                        break;\n                    default:\n                        break;\n                }\n                if (e.field) {\n                    this.autoCalculate();\n                    // this.rawForJournal()\n                }\n            }\n        },\n        async inventoryBalance(dataRow, itemId) {\n            new Promise((resolve) => {\n                setTimeout(() => {\n                    resolve(\"resolved\");\n                    this.showLoading = true;\n                    const startDate = this.invoice.transactionDate;\n                    let strFilter = \"?asOf=\" + startDate + \"&id=\" + itemId;\n                    billingHandler.inventoryBalance(strFilter).then((res) => {\n                        if (res.data.statusCode === 200) {\n                            const balance = res.data.data;\n                            if (balance.length > 0) {\n                                dataRow.set(\"cost\", balance[0].wac);\n                                dataRow.set(\"qoh\", balance[0].qoh);\n                                dataRow.set(\n                                    \"amount\",\n                                    parseFloat(balance[0].wac) * parseFloat(dataRow.qty)\n                                );\n                                // dataRow.set('uom', balance[0].buom)\n                            } else {\n                                dataRow.set(\"cost\", 0);\n                            }\n                            window.console.log(\"balance\", res.data.data);\n                        }\n                        this.showLoading = false;\n                    });\n                }, 10);\n            });\n        },\n        ServiceDateEditor(container, options) {\n            kendo\n                .jQuery('<input required name=\"' + options.field + '\"/>')\n                .appendTo(container)\n                .kendoDatePicker();\n\n            // let ds = this.$refs.itemLineDS.kendoWidget()\n            // window.console.log(ds.data())\n            // // const dateString = kendo.toString((new Date(options.model.items.serviceDate)), this.itemLine.dateFormat)\n            // // const dateString = kendo.toString(options.model.items.serviceDate)\n            // const $input = $(\"<input value=\" + options.model.serviceDate + \" />\").appendTo(container)\n            // $input.kendoDatePicker()\n            // // $input.appendTo(container)\n            // // options.model.items.serviceDate = dateString\n            // window.console.log($input)\n        },\n        ServiceDateToEditor(container, options) {\n            kendo\n                .jQuery('<input required name=\"' + options.field + '\"/>')\n                .appendTo(container)\n                .kendoDatePicker();\n        },\n        ItemDropDownEditor(container, options) {\n            kendo\n                .jQuery('<input name=\"' + options.field + '\"/>')\n                .appendTo(container)\n                .kendoDropDownList({\n                    autoBind: true,\n                    autoWidth: true,\n                    height: 400,\n                    filter: \"contains\",\n                    dataTextField: \"name\",\n                    dataValueField: \"id\",\n                    headerTemplate:\n                        '<div class=\"dropdown-header k-widget k-header\">' +\n                        \"<span>Items </span>\" +\n                        \"<span></span>\" +\n                        \"</div>\",\n                    template: \"<span>#=name#</span>\",\n                    optionLabel: \"--- Select ---\",\n                    dataSource: new kendo.data.DataSource({\n                        serverFiltering: true,\n                        transport: {\n                            read: {\n                                url: productVariantHandler.itemSearchURL('?plId=' + this.invoice.priceLevel.id),\n                            },\n                            dataType: \"json\",\n                        },\n                        schema: {\n                            model: {\n                                id: \"id\",\n                                fields: {\n                                    id: {type: \"string\"},\n                                    name: {type: \"string\"},\n                                    sku: {type: \"string\"},\n                                },\n                            },\n                            data: function (response) {\n                                return response.data;\n                            },\n                            total: function (response) {\n                                return response.data.count;\n                            },\n                        },\n                        // data: this.variants\n                    }),\n                });\n        },\n        UOMDropDownEditor(container, options) {\n            kendo\n                .jQuery('<input name=\"' + options.field + '\"/>')\n                .appendTo(container)\n                .kendoDropDownList({\n                    autoBind: true,\n                    autoWidth: true,\n                    height: 400,\n                    filter: \"startswith\",\n                    dataTextField: \"uom.name\",\n                    dataValueField: \"uom.id\",\n                    cascadeFrom: \"item\",\n                    template: \"<span>#=uom.name || `No Price Level`#</span>\",\n                    optionLabel: \"--- Select ---\",\n                    dataSource: new kendo.data.DataSource({\n                        serverFiltering: true,\n                        transport: {\n                            read: {url: uomPriceHandler.uomPriceByPriceLevelURL(\"id=\" + options.model.item.id + \"&plId=\" + this.invoice.priceLevel.id + \"&date=\" + this.invoice.transactionDate),},\n                            dataType: \"json\",\n                        },\n                        schema: {\n                            model: {\n                                id: \"id\",\n                                fields: {\n                                    id: {type: \"string\"},\n                                    // name: {type: \"string\"},\n                                    // sku: {type: \"string\"},\n                                },\n                            },\n                            data: function (response) {\n                                return response.data;\n                            },\n                            total: function (response) {\n                                return response.data.count;\n                            },\n                        },\n                        // data: this.variants\n                    }),\n                });\n        },\n        DiscountItemDropDownEditor(container, options) {\n            kendo\n                .jQuery('<input name=\"' + options.field + '\"/>')\n                .appendTo(container)\n                .kendoDropDownList({\n                    autoBind: true,\n                    autoWidth: true,\n                    height: 400,\n                    filter: \"startswith\",\n                    dataTextField: \"name\",\n                    dataValueField: \"id\",\n                    cascadeFrom: \"item\",\n                    template: \"<span>#=code# - #=name#</span>\",\n                    optionLabel: \"--- Select ---\",\n                    dataSource: new kendo.data.DataSource({\n                        serverFiltering: true,\n                        transport: {\n                            read: {\n                                url: discountItemHandler.getURL(DISCOUNT_TYPE),\n                            },\n                            dataType: \"json\",\n                        },\n                        schema: {\n                            model: {\n                                id: \"id\",\n                                fields: {\n                                    id: {type: \"string\"},\n                                    // name: {type: \"string\"},\n                                    // sku: {type: \"string\"},\n                                },\n                            },\n                            data: function (response) {\n                                return response.data;\n                            },\n                            total: function (response) {\n                                return response.data.count;\n                            },\n                        },\n                    }),\n                });\n        },\n        SpecificTaxDropDownEditor(container, options) {\n            kendo\n                .jQuery('<input name=\"' + options.field + '\"/>')\n                .appendTo(container)\n                .kendoDropDownList({\n                    autoBind: true,\n                    autoWidth: true,\n                    height: 400,\n                    filter: \"startswith\",\n                    dataTextField: \"defaultTax\",\n                    dataValueField: \"id\",\n                    template: \"<span>#=defaultTax#</span>\",\n                    optionLabel: \"--- Select ---\",\n                    dataSource: new kendo.data.DataSource({\n                        data: this.specificTax.filter((m) => {\n                            if (options.model.hasOwnProperty(\"vatTax\")) {\n                                const vat = options.model.vatTax;\n                                if (vat) {\n                                    if (\n                                        options.model.vatTax !== null ||\n                                        options.model.vatTax !== \"null\"\n                                    ) {\n                                        if (options.model.vatTax.baseAmount) {\n                                            return (\n                                                m.baseAmount.toLowerCase() ===\n                                                options.model.vatTax.baseAmount.toLowerCase()\n                                            );\n                                        } else {\n                                            return m;\n                                        }\n                                    }\n                                } else {\n                                    return m;\n                                }\n                            }\n                        }),\n                    }),\n                });\n        },\n        PublicLightingTaxDropDownEditor(container, options) {\n            kendo\n                .jQuery('<input name=\"' + options.field + '\"/>')\n                .appendTo(container)\n                .kendoDropDownList({\n                    autoBind: true,\n                    autoWidth: true,\n                    height: 400,\n                    filter: \"startswith\",\n                    dataTextField: \"defaultTax\",\n                    dataValueField: \"id\",\n                    template: \"<span>#=defaultTax#</span>\",\n                    optionLabel: \"--- Select ---\",\n                    dataSource: new kendo.data.DataSource({\n                        data: this.publicLightingTax.filter((m) => {\n                            if (options.model.hasOwnProperty(\"vatTax\")) {\n                                const vat = options.model.vatTax;\n                                if (vat) {\n                                    if (\n                                        options.model.vatTax !== null &&\n                                        options.model.vatTax !== \"null\"\n                                    ) {\n                                        if (options.model.vatTax.baseAmount) {\n                                            return (\n                                                m.baseAmount.toLowerCase() ===\n                                                options.model.vatTax.baseAmount.toLowerCase()\n                                            );\n                                        } else {\n                                            return m;\n                                        }\n                                    }\n                                } else {\n                                    return m;\n                                }\n                            }\n                        }),\n                    }),\n                });\n        },\n        OtherTaxDropDownEditor(container, options) {\n            kendo\n                .jQuery('<input name=\"' + options.field + '\"/>')\n                .appendTo(container)\n                .kendoDropDownList({\n                    autoBind: true,\n                    autoWidth: true,\n                    height: 400,\n                    filter: \"startswith\",\n                    dataTextField: \"defaultTax\",\n                    dataValueField: \"id\",\n                    template: \"<span>#=defaultTax#</span>\",\n                    optionLabel: \"--- Select ---\",\n                    dataSource: new kendo.data.DataSource({\n                        data: this.otherTax.filter((m) => {\n                            if (options.model.hasOwnProperty(\"vatTax\")) {\n                                const vat = options.model.vatTax;\n                                if (vat) {\n                                    if (\n                                        options.model.vatTax !== null &&\n                                        options.model.vatTax !== \"null\"\n                                    ) {\n                                        if (options.model.vatTax.baseAmount) {\n                                            return (\n                                                m.baseAmount.toLowerCase() ===\n                                                options.model.vatTax.baseAmount.toLowerCase()\n                                            );\n                                        } else {\n                                            return m;\n                                        }\n                                    }\n                                } else {\n                                    return m;\n                                }\n                            }\n                        }),\n                    }),\n                });\n        },\n        VatTaxDropDownEditor(container, options) {\n            kendo\n                .jQuery('<input name=\"' + options.field + '\"/>')\n                .appendTo(container)\n                .kendoDropDownList({\n                    autoBind: true,\n                    autoWidth: true,\n                    height: 400,\n                    filter: \"startswith\",\n                    dataTextField: \"defaultTax\",\n                    dataValueField: \"id\",\n                    template: \"<span>#=defaultTax#</span>\",\n                    optionLabel: \"--Select--\",\n                    dataSource: new kendo.data.DataSource({\n                        data: this.vatTax,\n                    }),\n                });\n        },\n        SaleUnitDropDownEditor(container, options) {\n            kendo\n                .jQuery('<input name=\"' + options.field + '\"/>')\n                .appendTo(container)\n                .kendoDropDownList({\n                    autoBind: true,\n                    autoWidth: true,\n                    height: 400,\n                    filter: \"startswith\",\n                    dataTextField: \"name\",\n                    dataValueField: \"id\",\n                    template: \"<span>#=code# - #=name#</span>\",\n                    optionLabel: \"--- Select ---\",\n                    dataSource: new kendo.data.DataSource({\n                        data: this.saleUnitItemList,\n                    }),\n                });\n        },\n        ModifierDropDownEditor(container, options) {\n            kendo\n                .jQuery('<input name=\"' + options.field + '\"/>')\n                .appendTo(container)\n                .kendoDropDownList({\n                    autoBind: true,\n                    autoWidth: true,\n                    height: 400,\n                    filter: \"contains\",\n                    dataTextField: \"name\",\n                    dataValueField: \"id\",\n                    headerTemplate:\n                        '<div class=\"dropdown-header k-widget k-header\">' +\n                        \"<span>Modifier </span>\" +\n                        \"<span></span>\" +\n                        \"</div>\",\n                    template: \"<span>#=name#</span>\",\n                    optionLabel: \"--- Select ---\",\n                    dataSource: new kendo.data.DataSource({\n                        serverFiltering: true,\n                        transport: {\n                            read: {\n                                url: itemModifierHandler.searchURL(options.model.item.id),\n                            },\n                            dataType: \"json\",\n                        },\n                        schema: {\n                            model: {\n                                id: \"id\",\n                                fields: {\n                                    id: {type: \"string\"},\n                                    name: {type: \"string\"},\n                                    price: {type: \"number\"},\n                                    uom: {type: \"string\"},\n                                },\n                            },\n                            data: function (response) {\n                                return response.data;\n                            },\n                            total: function (response) {\n                                return response.data.count;\n                            },\n                        },\n                    }),\n                });\n        },\n        EmployeeDropDownEditor(container, options) {\n            kendo\n                .jQuery('<input data-bind=\"value:' + options.field + '\"/>')\n                .appendTo(container)\n                .kendoMultiSelect({\n                    autoBind: true,\n                    autoWidth: true,\n                    height: 400,\n                    suggest: true,\n                    filter: \"contains\",\n                    dataTextField: \"name\",\n                    dataValueField: \"id\",\n                    headerTemplate:\n                        '<div class=\"dropdown-header k-widget k-header\">' +\n                        \"<span>Employee </span>\" +\n                        \"<span></span>\" +\n                        \"</div>\",\n                    template: \"<span>#=name#</span>\",\n                    optionLabel: \"--- Select ---\",\n                    dataSource: new kendo.data.DataSource({\n                        serverFiltering: true,\n                        transport: {\n                            read: {\n                                url: employeeHandler.searchURL(),\n                            },\n                            dataType: \"json\",\n                        },\n                        schema: {\n                            model: {\n                                id: \"id\",\n                                fields: {\n                                    id: {type: \"string\"},\n                                    name: {type: \"string\"},\n                                    firstName: {type: \"string\"},\n                                    lastName: {type: \"string\"},\n                                },\n                            },\n                            data: function (response) {\n                                return response.data;\n                            },\n                            total: function (response) {\n                                return response.data.count;\n                            },\n                        },\n                    }),\n                });\n        },\n        rowNumberTmpl(dataItem) {\n            let ds = this.$refs.itemLineDS.kendoWidget(),\n                index = ds.indexOf(dataItem);\n            return index + 1;\n        },\n        addRow() {\n            let ds = this.$refs.itemLineDS.kendoWidget(),\n                total = ds.total();\n            this.itemLine.id = itemLinePrefix + uuid.v1();\n            this.itemLine.decimalFormat = \"n\" + this.saleFormContent.decimal;\n            this.itemLine.isEditable = true;\n            if (total < 36) {\n                ds.insert(total, this.itemLine);\n            }\n            // this.itemLines.push(this.itemLine)\n            // window.console.log('item Line', this.itemLine)\n        },\n        onPaymentTermChanged() {\n            // this.onInvoiceDateChanged();\n            // window.console.log('term', this.invoice.transactionDate, '-', this.invoice.transactionDate, '---', this.invoice.paymentTerm)\n            if (this.customer) {\n                const paymentTerm = this.invoice.paymentTerm || {}\n                if (paymentTerm) {\n                    const netDue = paymentTerm.netDue || 0\n                    const someDate = new Date(this.invoice.transactionDate);\n                    someDate.setDate(someDate.getDate() + parseInt(netDue)); //number  of days to add, e.x. 15 days\n                    this.invoice.dueDate = someDate.toISOString().substr(0, 10);\n                }\n            }\n        },\n        async onInvoiceDateChanged() {\n            await this.loadPaymentTermList();\n            await this.loadCreditLimit();\n            await this.loadCustomerBalance(this.customer.id);\n            await this.onPriceLevelChange();\n\n            if (this.customer) {\n                const paymentTerm = this.invoice.paymentTerm || {}\n                if (paymentTerm) {\n                    const netDue = paymentTerm.netDue || 0;\n                    const someDate = new Date(this.invoice.transactionDate);\n                    someDate.setDate(someDate.getDate() + parseInt(netDue)); //number  of days to add, e.x. 15 days\n                    this.invoice.dueDate = someDate.toISOString().substr(0, 10);\n                    // window.console.log('im', someDate, netDue)\n                }\n                // this.loadCustomerBalance(this.customer.id);\n            }\n            if (this.$route.params.id === undefined) {\n                await this.generateNumber();\n            }\n        },\n        async loadPrefix() {\n            new Promise((resolve) => {\n                setTimeout(() => {\n                    resolve(\"resolved\");\n                    prefixHandler.get(\"invoice\").then((res) => {\n                        if (res.data.statusCode === 200) {\n                            this.showLoading = false;\n                            this.invoiceTypes = res.data.data;\n                            if (this.invoiceTypes.length > 0) {\n                                this.invoice.transactionType = this.invoiceTypes[0];\n                                if (this.$route.params.id === undefined) {\n                                    this.generateNumber();\n                                }\n                                this.templateHandle();\n                            }\n                        }\n                    });\n                }, 10);\n            });\n        },\n        async loadPriceLevel() {\n            new Promise((resolve) => {\n                setTimeout(() => {\n                    resolve(\"resolved\");\n                    const strFilter = '?nature=sale'\n                    priceLevelHandler.get(strFilter).then((res) => {\n                        this.priceLevel = res;\n                        // if (this.priceLevel.length > 0) {\n                        //     this.invoice.priceLevel = this.priceLevel[0];\n                        // }\n                    });\n                }, 10);\n            });\n        },\n        async loadDiscountItem() {\n            new Promise((resolve) => {\n                setTimeout(() => {\n                    resolve(\"resolved\");\n                    discountItemHandler.list(DISCOUNT_TYPE).then((res) => {\n                        if (res.data.statusCode === 200) {\n                            this.specificDiscountItem = res.data.data;\n                        }\n                    });\n                }, 10);\n            });\n        },\n        async loadOtherCharge() {\n            new Promise((resolve) => {\n                setTimeout(() => {\n                    resolve(\"resolved\");\n                    otherChargeHandler.list().then((res) => {\n                        if (res.data.statusCode === 200) {\n                            this.otherChargeList = res.data.data;\n                        }\n                    });\n                }, 10);\n            });\n        },\n        async loadAccount() {\n            new Promise((resolve) => {\n                setTimeout(() => {\n                    resolve(\"resolved\");\n                    accountHandler.getAll().then((res) => {\n                        this.showLoading = false;\n                        //Receivable Account\n                        this.receivableAcc = res.data\n                            .filter((m) => m.account_type.number === 7)\n                            .map((itm) => {\n                                return {\n                                    id: itm.uuid,\n                                    uuid: itm.uuid,\n                                    name: itm.name,\n                                    local_name: itm.local_name,\n                                    number: itm.number,\n                                    is_taxable: itm.is_taxable,\n                                    banhjiAccCode: itm.banhjiAccCode,\n                                    group_code: itm.group_code,\n                                    parent_account: itm.parent_account,\n                                    type_code: itm.type_code,\n                                    account_type: itm.account_type,\n                                };\n                            });\n                        // if (this.receivableAcc.length > 0) {\n                        //     this.invoice.receivableAcc = this.receivableAcc[0];\n                        // }\n                    });\n                }, 10);\n            });\n        },\n        async loadPaymentTerm() {\n            new Promise((resolve) => {\n                setTimeout(() => {\n                    resolve(\"resolved\");\n                    const strFilter = \"?type=pmt-customer\";\n                    paymentTermHandler.getPaymentTerm(strFilter).then((res) => {\n                        if (res.data.statusCode === 200) {\n                            this.showLoading = false;\n                            this.paymentTerms = res.data.data;\n                            // if (this.paymentTerms.length > 0) {\n                            //     this.invoice.paymentTerm = this.paymentTerms[0];\n                            // }\n                        }\n                    });\n                }, 10);\n            });\n        },\n        async loadLocation() {\n            this.locations = []\n            const roleType = dataStore.roleType || 0\n            if (roleType === 0) {\n                if (dataStore.roleData) {\n                    const roleData = dataStore.roleData || []\n                    const location = roleData.filter(itm => itm.type === 'location')\n                    const locationDefault = location.filter(m => m.isDefault === 1)\n                    this.locations = location\n                    if (this.$route.params.id === undefined || this.$route.params.id === '') {\n                        if (locationDefault.length > 0) {\n                            this.invoice.location = locationDefault[0];\n                        }\n                    }\n                }\n            } else if (roleType === 1) {\n                new Promise((resolve) => {\n                    setTimeout(() => {\n                        resolve(\"resolved\");\n                        this.locations = [];\n                        locationHandler\n                            .list()\n                            .then((res) => {\n                                if (res.data.statusCode === 200) {\n                                    this.showLoading = false;\n                                    this.locations = res.data.data;\n                                }\n                            })\n                    }, 10);\n                });\n            }\n\n\n        },\n        async loadProjectByCustomer() {\n            this.customerProjects = []\n            const roleType = dataStore.roleType || 0\n            if (roleType === 0) {\n                if (dataStore.roleData) {\n                    const roleData = dataStore.roleData || []\n                    const project = roleData.filter(itm => itm.type === 'project')\n                    project.forEach(k => {\n                        const customers = k.customers || []\n                        const proCustomer = customers.filter(n => n.customer.id === this.customer.id)\n                        if (proCustomer.length > 0) {\n                            this.customerProjects.push(k)\n                        }\n                    })\n                    if (this.$route.params.id === undefined || this.$route.params.id === '') {\n                        const projectDefault = this.customerProjects.filter(m => m.isDefault === 1)\n                        if (projectDefault.length > 0) {\n                            this.invoice.project = projectDefault[0];\n                        }\n                    }\n                }\n            } else if (roleType === 1) {\n                new Promise((resolve) => {\n                    setTimeout(() => {\n                        resolve(\"resolved\");\n                        projectHandler\n                            .getByCustomer(this.customer.id)\n                            .then((res) => {\n                                this.showLoading = true;\n                                if (res.data.statusCode === 200) {\n                                    this.showLoading = false;\n                                    this.customerProjects = res.data.data;\n                                }else{\n                                    this.showLoading = false;\n                                }\n                            })\n                            .catch();\n                        {\n                            this.showLoading = false;\n                        }\n                    }, 10);\n                });\n            }\n\n\n        },\n        async loadCustomerBalance(id) {\n            new Promise((resolve) => {\n                setTimeout(() => {\n                    resolve(\"resolved\");\n                    const strFilter = id + \"?type=bal\";\n                    this.invoice.currentBalance = 0;\n                    billingHandler\n                        .balance(strFilter)\n                        .then((res) => {\n                            if (res.data.statusCode === 200) {\n                                const data = res.data.data;\n                                if (data.length > 0) {\n                                    this.invoice.currentBalance = data[0].balance;\n                                }\n                            }\n                        })\n                        .catch();\n                    {\n                        this.showLoading = false;\n                    }\n                }, 10);\n            });\n        },\n        async loadCustomerDepositBalance(id) {\n            new Promise((resolve) => {\n                setTimeout(() => {\n                    resolve(\"resolved\");\n                    const strFilter = id + \"?type=dep\";\n                    billingHandler\n                        .balance(strFilter)\n                        .then((res) => {\n                            this.invoice.depositAmount = 0;\n                            if (res.data.statusCode === 200) {\n                                const data = res.data.data;\n                                if (data.length > 0) {\n                                    const amountDeposit = data[0].balance;\n                                    this.invoice.depositAmount =\n                                        amountDeposit / this.invoice.txnRate;\n                                }\n                            }\n                        })\n                        .catch();\n                    {\n                        this.showLoading = false;\n                    }\n                }, 10);\n            });\n        },\n        creditLimitUsage(balance, creditLimit) {\n            if (creditLimit > 0) {\n                return (\n                    kendo.toString(\n                        (balance / creditLimit) * 100,\n                        `n${this.saleFormContent.decimal}`\n                    ) + \" %\"\n                );\n            } else {\n                return kendo.toString(0, `n${this.saleFormContent.decimal}`) + \" %\";\n            }\n\n            // const allowed = kendo.toString((balance / creditLimit) * 100, `n${this.saleFormContent.decimal}`)\n            // return (isNaN(allowed) ? 0 : allowed) + ' %'\n        },\n        async loadEmployeeCenter() {\n            new Promise((resolve) => {\n                setTimeout(() => {\n                    resolve(\"resolved\");\n                    this.employees = [];\n                    employeeHandler\n                        .center(undefined)\n                        .then((res) => {\n                            this.showLoading = true;\n                            if (res.data.statusCode === 200) {\n                                this.showLoading = false;\n                                this.employees = res.data.data;\n                                if (this.employees.length > 0) {\n                                    this.invoice.employee = this.employees[0];\n                                }\n                            }\n                        })\n                        .catch();\n                    {\n                        this.showLoading = false;\n                    }\n                }, 10);\n            });\n        },\n        async loadSegment() {\n            window.console.log('dataStore.roleData', dataStore)\n            const roleType = dataStore.roleType || 0\n            if (roleType === 0) {\n                if (dataStore.roleData) {\n                    const roleData = dataStore.roleData || []\n                    const segment = roleData.filter(itm => itm.type === 'segment')\n                    const segmentDefault = segment.filter(m => m.isDefault === 1)\n                    this.segments = segment\n                    if (this.$route.params.id === undefined || this.$route.params.id === '') {\n                        if (segmentDefault.length > 0) {\n                            this.invoice.segment = segmentDefault[0];\n                        }\n                    }\n                }\n            } else if (roleType === 1) {\n                new Promise((resolve) => {\n                    setTimeout(() => {\n                        resolve(\"resolved\");\n                        this.segments = [];\n                        settingsHandler\n                            .getSeg()\n                            .then((res) => {\n                                if (res.data.statusCode === 200) {\n                                    this.showLoading = false;\n                                    this.segments = res.data.data;\n                                }\n                            })\n                    }, 10);\n                });\n            }\n\n\n        },\n        async loadSaleOrder() {\n            new Promise((resolve) => {\n                setTimeout(() => {\n                    resolve(\"resolved\");\n                    let segmentId = \"\",\n                        locationId,\n                        priceLevelId = \"\",\n                        customerId = \"\",\n                        txnDate = \"\";\n                    if (this.invoice.segment) {\n                        segmentId = this.invoice.segment.id;\n                    }\n                    if (this.invoice.location) {\n                        locationId = this.invoice.location.id;\n                    }\n                    if (this.invoice.customer) {\n                        customerId = this.invoice.customer.id;\n                    }\n                    if (this.invoice.priceLevel) {\n                        priceLevelId = this.invoice.priceLevel.id;\n                    }\n                    if (this.invoice.transactionDate) {\n                        txnDate = this.invoice.transactionDate;\n                    }\n                    let strFilter = \"\";\n                    if (\n                        segmentId !== \"\" &&\n                        customerId !== \"\" &&\n                        locationId !== \"\" &&\n                        priceLevelId !== \"\" &&\n                        txnDate !== \"\"\n                    ) {\n                        strFilter =\n                            \"?id=\" +\n                            customerId +\n                            \"&segId=\" +\n                            segmentId +\n                            \"&locId=\" +\n                            locationId +\n                            \"&plId=\" +\n                            priceLevelId +\n                            \"&date=\" +\n                            txnDate;\n                    }\n                    if (strFilter !== \"\") {\n                        this.invoice.refFrom = []\n                        this.showLoadingTxn = true\n                        saleOrderHandler\n                            .transactionFilter(strFilter)\n                            .then((res) => {\n                                if (res.data.statusCode === 200) {\n                                    this.showLoadingTxn = false\n                                    this.saleOrders = res.data.data;\n                                } else {\n                                    this.showLoadingTxn = false\n                                }\n                            })\n                    }\n                }, 10);\n            });\n        },\n        async loadSaleChannel() {\n            new Promise((resolve) => {\n                setTimeout(() => {\n                    resolve(\"resolved\");\n                    this.showLoading = true;\n                    saleChannelHandler.get().then((res) => {\n                        if (res.data.statusCode === 200) {\n                            this.showLoading = false;\n                            this.saleChannelList = res.data.data;\n                            if (this.saleChannelList.length > 0) {\n                                this.invoice.saleChannel = this.saleChannelList[0];\n                            }\n                        } else {\n                            this.showLoading = false;\n                        }\n                    });\n                }, 10);\n            });\n        },\n        async loadTax() {\n            new Promise((resolve) => {\n                setTimeout(() => {\n                    resolve(\"resolved\");\n                    settingHandler.get().then((res) => {\n                        this.tax = res;\n                        this.otherTax = this.tax.filter(\n                            (m) =>\n                                (m.taxType.typeId === 7 || m.taxType.typeId === 10) &&\n                                m.transactionType === \"Sale\"\n                        ); // valuable tax\n                        this.specificTax = this.tax.filter(\n                            (m) =>\n                                (m.taxType.typeId === 8 || m.taxType.typeId === 10) &&\n                                m.transactionType === \"Sale\"\n                        ); // valuable tax\n                        this.publicLightingTax = this.tax.filter(\n                            (m) =>\n                                (m.taxType.typeId === 9 || m.taxType.typeId === 10) &&\n                                m.transactionType === \"Sale\"\n                        ); // valuable tax\n                        this.vatTax = this.tax.filter(\n                            (m) =>\n                                (m.taxType.typeId === 1 ||\n                                    m.taxType.typeId === 10) &&\n                                m.transactionType === \"Sale\"\n                        ); // valuable tax\n                        // window.console.log('tax', JSON.stringify(this.vatTax))\n                    });\n                }, 10);\n            });\n        },\n        async onSaveClose(saveNew, saveSend, isPrint) {\n            if (!this.$refs.form.validate()) {\n                // this.$refs.form.validate()\n                this.$snotify.error(\n                    \"Field is required, please check field each of tabs!\"\n                );\n                return;\n            }\n            let id = \"\";\n            if (this.customer.hasOwnProperty(\"id\")) {\n                id = this.customer.id || \"\";\n            }\n            if (id === \"\") {\n                this.$snotify.error(\"customer is require\");\n                return;\n            }\n            let ds = this.$refs.itemLineDS.kendoWidget();\n            let d1 = ds.data().filter(n => n.amount > 0);\n            let dataValidate = 0;\n            d1.forEach((value, index) => {\n                if (\n                    value.item.id == undefined ||\n                    value.uom.uom.id == undefined ||\n                    value.item.id == \"\" ||\n                    value.uom.uom.id == \"\"\n                ) {\n                    this.$snotify.error(\n                        \"Please check Item or Uom  on row \" + (index + 1)\n                    );\n                } else {\n                    dataValidate += 1;\n                }\n            });\n            if (d1.length == dataValidate) {\n                new Promise((resolve) => {\n                    setTimeout(() => {\n                        resolve(\"resolved\");\n                        let isAutoGenerate = 1;\n                        if (this.$route.params.id) {\n                            const tranDate = new Date(this.invoice.transactionDate);\n                            const tranDateInvoice = new Date(this.invoice.transactionDate);\n                            const tranDateM = tranDate.getFullYear() + tranDate.getMonth();\n                            const tranDateInvoiceM =\n                                tranDateInvoice.getFullYear() + tranDateInvoice.getMonth();\n                            if (tranDateM === tranDateInvoiceM) {\n                                isAutoGenerate = 0;\n                            }\n                        }\n                        this.autoCalculate();\n                        // this.autoCalculateTaxDetail();\n                        let itemLineDS = this.$refs.itemLineDS.kendoWidget();\n                        const dataRow = itemLineDS\n                            .data()\n                            .filter((o) => o.amount > 0)\n                            .map((n) => {\n                                return new ItemLineModel(n);\n                            });\n                        //todo: check Source\n                        const sourceRef = dataRow.map((o) => {\n                            return o.sourceTransaction;\n                        });\n                        const sourceTxn = this.removeDuplicate(sourceRef);\n\n                        if (dataRow.length > 0) {\n                            let data = {\n                                id: this.invoice.id ? this.invoice.id : \"\",\n                                uuid: this.invoice.uuid ? this.invoice.uuid : \"\",\n                                journal_uuid: this.invoice.journal_uuid\n                                    ? this.invoice.journal_uuid\n                                    : \"\",\n                                type: \"Invoice\",\n                                number: this.invoice.number,\n                                abbr: this.invoice.transactionType.abbr,\n                                transactionDate: this.invoice.transactionDate,\n                                dueDate: this.invoice.dueDate,\n                                monthOf: this.invoice.monthOf,\n                                customer: this.invoice.customer,\n                                transactionType: this.invoice.transactionType,\n                                paymentTerm: this.invoice.paymentTerm,\n                                approvedTerm: this.invoice.approvedTerm,\n                                discountPromotion: {},\n                                receivableAcc: this.invoice.receivableAcc,\n                                currency: this.invoice.currency,\n                                txnRate: this.invoice.txnRate,\n                                taxExchangeRate: this.invoice.taxExchangeRate,\n                                rate: 1,\n                                exchangeRate: this.invoice.exchangeRate,\n                                exchangeAmount: this.invoice.exchangeAmount,\n                                priceLevel: this.invoice.priceLevel,\n                                itemLines: dataRow,\n                                segment: this.invoice.segment,\n                                location: this.invoice.location,\n                                project: this.invoice.project,\n                                saleChannel: this.invoice.saleChannel,\n                                employee: this.invoice.employee,\n                                billingAddress: this.invoice.billingAddress,\n                                deliveryAddress: this.invoice.deliveryAddress,\n                                deliveryDateTime: this.invoice.deliveryDateTime,\n                                transactionNote: this.invoice.transactionNote,\n                                journalNote: this.invoice.journalNote,\n                                subTotal: this.invoice.subTotal,\n                                exchangeSubTotal: this.invoice.exchangeSubTotal,\n                                total: this.invoice.total,\n                                exchangeTotal:\n                                    parseFloat(this.invoice.total) *\n                                    parseFloat(this.invoice.txnRate),\n                                discountTotal: this.invoice.discountTotal,\n                                specificDiscountTotal: this.invoice.specificDiscountTotal,\n                                deliveryFee: this.invoice.deliveryFee,\n                                totalTaxAmount: this.invoice.totalTaxAmount,\n                                depositAmount: this.invoice.depositAmount,\n                                depositDeduction: this.invoice.depositDeduction,\n                                remainingAmount: this.invoice.remainingAmount,\n                                amountDue: this.invoice.amountDue,\n                                currentBalance: this.invoice.currentBalance,\n                                balance: this.invoice.balance,\n                                creditLimit: this.invoice.creditLimit,\n                                saveOption: this.invoice.saveOption,\n                                status: 1,\n                                approvedBy: this.invoice.approvedBy,\n                                formTemplate: this.templatesForm[this.template],\n                                specificDiscountItem: this.invoice.specificDiscountItem,\n                                otherCharge: this.mOtherCharge,\n                                otherChargeLine: this.invoice.otherChargeLine,\n                                otherChargeAmount: this.invoice.otherChargeAmount,\n                                lateFee: this.invoice.lateFee,\n                                // paymentOptionWBMobile: this.invoice.paymentOptionWBMobile,\n                                // paymentOptionOnline: this.invoice.paymentOptionOnline,\n                                // paymentOptionKHQR: this.invoice.paymentOptionKHQR,\n                                publicLink: this.invoice.publicLink,\n                                paymentCode: this.invoice.paymentCode,\n                                taxListTotal: this.taxListTotal,\n                                customerDiscountItem: this.customerDiscountItem,\n                                customerSaleUnit: this.customerSaleUnit,\n                                customerSaleUnitLine: this.customerSaleUnitLine,\n                                paymentScheme: this.invoice.paymentScheme,\n                                createdAt: this.invoice.createdAt,\n                                loggedUser: this.loggedUser,\n                                saveSend: saveSend,\n                                isAutoGenerate: isAutoGenerate,\n                                jRaw: this.jRaw,\n                                sourceTransaction: sourceTxn,\n                                itemSubtotal: this.invoice.itemSubtotal,\n                                exchangeItemSubtotal: this.invoice.exchangeItemSubtotal,\n                                serviceSubtotal: this.invoice.serviceSubtotal,\n                                exchangeServiceSubtotal: this.invoice.exchangeServiceSubtotal,\n                                txnItmSubtotal: this.invoice.txnItmSubtotal,\n                                exchangeTxnItmSubtotal: this.invoice.exchangeTxnItmSubtotal,\n                                itemDiscount: this.invoice.itemDiscount,\n                                exchangeItemDiscount: this.invoice.exchangeItemDiscount,\n                                serviceDiscount: this.invoice.serviceDiscount,\n                                exchangeServiceDiscount: this.invoice.exchangeServiceDiscount,\n                                txnItmDiscount: this.invoice.txnItmDiscount,\n                                exchangeTxnItmDiscount: this.invoice.exchangeTxnItmDiscount,\n                                cashPayment: new PaymentOptionModel(this.invoice.cashPayment),\n                                qrPayment: new PaymentOptionModel(this.invoice.qrPayment),\n                                bankTransfer: new PaymentOptionModel(this.invoice.bankTransfer),\n                                billPayment: new PaymentOptionModel(this.invoice.billPayment),\n                                refFrom: this.invoice.refFrom || [],\n                                refTo: this.invoice.refTo || [],\n                                saleTaxDetail: this.invoice.saleTaxDetail || [],\n                                actionType: this.$route.params.id\n                                    ? this.$route.query.type\n                                    : \"new\",\n                            };\n                            if (this.$route.query.type === \"recurring\") {\n                                data.id = \"\";\n                            }\n                            this.showLoading = true;\n                            this.btnDisabled = true;\n                            // window.console.log(1, data);\n                            billingHandler\n                                .create(data)\n                                .then((response) => {\n                                    if (response.data.statusCode === 201) {\n                                        // this.close(response.data.data)\n                                        // this.$refs.form.reset()\n                                        this.showLoading = false;\n                                        this.btnDisabled = false;\n                                        this.$snotify.success(\"Successfully\");\n\n                                        if (isPrint == 1) {\n                                            getPrint(response.data.data);\n                                        } else if (saveNew == \"new\") {\n                                            this.setDefaultData()\n                                        } else {\n                                            // this.clear()\n                                            this.close(response.data.data);\n                                        }\n                                    }\n                                })\n                                .catch((e) => {\n                                    this.showLoading = false;\n                                    this.btnDisabled = false;\n                                    this.$snotify.error(\"Something went wrong\");\n                                    this.errors.push(e);\n                                });\n                        }\n                    }, 10);\n                });\n            }\n        },\n        close(data) {\n            if (this.$route.params.id === undefined) {\n                this.$router.push({\n                    name: \"Customers\",\n                    params: {\n                        data: data,\n                    },\n                });\n            } else {\n                window.history.go(-1);\n                // this.$router.push({\n                //     path: \"invoice_view\",\n                //     name: \"Invoice View\",\n                //     params: {\n                //         data: data,\n                //     }\n                // })\n            }\n            // window.console.log(data, 'data')\n        },\n        saveNew() {\n        },\n        removeRow(e) {\n            e.preventDefault();\n            const grid = kendo.jQuery(\"#gridItemLine\").data(\"kendoGrid\"),\n                dataSource = grid.dataSource,\n                dataItem = grid.dataItem($(e.currentTarget).closest(\"tr\"));\n\n            if (dataSource.total() > 1) {\n                dataSource.remove(dataItem);\n                this.autoCalculate();\n            }\n        },\n        generateNumber() {\n            if (this.$route.params.id) {\n                const tranDate = new Date(this.invoice.transactionDate);\n                const tranDateInvoice = new Date(this.invoice.transactionDate);\n                const tranDateM = tranDate.getFullYear() + tranDate.getMonth();\n                const tranDateInvoiceM =\n                    tranDateInvoice.getFullYear() + tranDateInvoice.getMonth();\n                if (tranDateM === tranDateInvoiceM) {\n                    this.invoice.referenceNo = this.referenceNo;\n                    return;\n                }\n            }\n\n            if (this.invoice.transactionDate !== \"\" && this.invoiceTypes.length > 0) {\n                let data = {\n                    abbr: this.invoice.transactionType.abbr,\n                    structure: this.invoice.transactionType.structure,\n                    transactionDate: this.invoice.transactionDate,\n                    sequcencing: this.invoice.transactionType.sequcencing,\n                    type: \"Invoice\",\n                    entity: 1,\n                };\n                billingHandler\n                    .lastNumber(data)\n                    .then((response) => {\n                        if (response.data.statusCode === 200) {\n                            const res = response.data.data;\n                            const lastNumber = this.zeroPad(\n                                parseInt(res.lastNumber),\n                                this.invoice.transactionType.format\n                            );\n                            const number =\n                                res.suffix +\n                                this.invoice.transactionType.numberSeparator +\n                                lastNumber;\n                            this.invoice.number = number;\n                        }\n                    })\n                    .catch((e) => {\n                        this.errors.push(e);\n                    });\n            }\n        },\n        zeroPad(num, places) {\n            return String(num).padStart(places, \"0\");\n        },\n        suffix(transactionDate) {\n            return kendo.toString(new Date(transactionDate), `yymm`);\n        },\n        errorMessage() {\n        },\n        accountDropDownEditor() {\n        },\n        cancel() {\n            this.$swal({\n                title: i18n.t(\"msg_title_warning\"),\n                text: i18n.t(\"msg_discard\"),\n                icon: \"warning\",\n                showCancelButton: true,\n                cancelButtonText: i18n.t(\"cancel\"),\n                confirmButtonColor: \"#4d4848\",\n                cancelButtonColor: \"#ED1A3A\",\n                confirmButtonText: i18n.t(\"discard\"),\n            }).then((result) => {\n                if (result.value) {\n                    this.clear();\n                    this.$router.go(-1);\n                }\n            });\n        },\n        hideSmallSidebar() {\n            this.isHideBar = !this.isHideBar;\n        },\n        requestData(skip, filter, baseUrl) {\n            const url = baseUrl + `?filter=${filter}`;\n            this.requestStarted = true;\n            fetch(url)\n                .then((response) => {\n                    return response.json();\n                })\n                .then(this.afterFetch);\n        },\n        requestData_(skip, filter, baseUrl) {\n            const url = baseUrl + `/${filter}`;\n            this.requestStarted = true;\n            fetch(url)\n                .then((response) => {\n                    return response.json();\n                })\n                .then(this.afterFetch_);\n        },\n        onChange(event) {\n            const value = event.value;\n            if (value && value[textField] === emptyItem[textField]) {\n                return;\n            }\n            const id = value.id || ''\n            if (id !== '') {\n                window.console.log('value', value)\n                this.customer = value;\n                this.invoice.customer = value;\n                this.invoice.billPayment = this.customer.billPayment\n                this.invoice.qrPayment = this.customer.qrPayment\n                this.invoice.cashPayment = this.customer.cashPayment\n                this.invoice.bankTransfer = this.customer.bankTransfer\n                // window.console.log(this.invoice.customer, 'Changed')\n                // this.invoice = value\n                this.invoice.receivableAcc = value.receivableAcc || {}\n                // this.invoice.paymentTerm = value.hasOwnProperty(\"paymentTerm\")\n                //     ? value.paymentTerm\n                //     : {};\n                this.invoice.priceLevel = value.priceLevel || {}\n                const baseCurrency = value.baseCurrency || {}\n                if (baseCurrency.hasOwnProperty(\"code\")) {\n                    this.baseCurrencyCode = \" \" + baseCurrency.code;\n                }\n                const priceLevel = value.priceLevel || {}\n                const currency = priceLevel.currency || {}\n                const code = currency.code || ''\n                window.console.log('priceLevel: ' + JSON.stringify(priceLevel))\n                if (code !== '') {\n                    this.loadTransactionRate();\n                }\n                this.billingAddress = value.billingAddress || []\n                this.deliveryAddress = value.deliveryAddress || []\n                if (this.billingAddress.length > 0) {\n                    this.invoice.billingAddress = this.billingAddress[0];\n                }\n                if (this.deliveryAddress.length > 0) {\n                    this.invoice.deliveryAddress = this.deliveryAddress[0];\n                }\n                this.onInvoiceDateChanged();\n                this.loadProjectByCustomer();\n            }\n            // this.loadCustomerBalance(this.customer.id);\n            // this.loadCreditLimit();\n            // this.loadPaymentTermList();\n            // window.console.log(value, 'value')\n        },\n        onEmployeeChanged(event) {\n            const value = event.value;\n            if (value && value[textField] === emptyItem[textField]) {\n                return;\n            }\n            this.mEmployee = value;\n            this.invoice.employee = value;\n        },\n        afterFetch(json) {\n            this.customerList = json.data;\n        },\n        afterFetch_(json) {\n            this.employees = json.data;\n        },\n        onFilterChange(event) {\n            const filter = event.filter.value;\n            this.requestData(0, filter, this.cusBaseUrl);\n            this.filter = filter;\n        },\n        onEmployeeFilterChanged(event) {\n            const filter = event.filter.value;\n            this.requestData_(0, filter, this.empBaseUrl);\n            this.filter_ = filter;\n        },\n        async initData() {\n            if (this.$route.params.id !== undefined) {\n                await this.loadViewInvoice();\n            } else {\n                this.setDefaultData()\n            }\n        },\n        async loadLateFee() {\n            new Promise((resolve) => {\n                setTimeout(() => {\n                    resolve(\"resolved\");\n                    const priceLevel = this.invoice.priceLevel || {}\n                    const currency = priceLevel.currency || {}\n                    const code = currency.code || ''\n                    const strFilter = '?code=' + code\n                    lateFeeHandler.list(strFilter).then((res) => {\n                        if (res.data.statusCode === 200) {\n                            this.showLoading = false;\n                            this.lateFeeList = res.data.data;\n                        } else {\n                            this.showLoading = false;\n                        }\n\n                    });\n                }, 10);\n            });\n        },\n        async loadViewInvoice() {\n            this.btnDisabled = false\n            if (this.$route.params.id) {\n                new Promise((resolve) => {\n                    setTimeout(() => {\n                        resolve(\"resolved\");\n                        this.showLoading = true;\n                        billingHandler\n                            .view(this.$route.params.id)\n                            .then((res) => {\n                                if (res.data.statusCode === 200) {\n                                    this.showLoading = false;\n                                    this.invoice = res.data.data[0];\n                                    this.referenceNo = this.invoice.referenceNo;\n                                    this.invoice.transactionDate = new Date(this.invoice.transactionDate);\n                                    this.customer = this.invoice.customer;\n                                    this.mEmployee = this.invoice.employee;\n                                    this.taxListTotal = this.invoice.taxListTotal;\n                                    this.itemLines = this.invoice.itemLines;\n                                    this.mOtherCharge = this.invoice.otherCharge;\n                                    this.depositDeduction = this.invoice.depositDeduction;\n\n                                    // const xRate = this.invoice.exchangeRate\n                                    // this.currencyCode = xRate.code;\n                                    // window.console.log('currencyCode', xRate)\n                                    this.templateHandle();\n                                    this.template = this.invoice.formTemplate.id;\n                                    this.jRaw = this.invoice.jRaw || [];\n                                    for (let i = 0; i < this.mOtherCharge.length - 1; i++) {\n                                        this.addSelect();\n                                    }\n                                    this.loadProjectByCustomer();\n                                    if (this.customer.hasOwnProperty(\"id\")) {\n                                        this.loadCustomerBalance(this.customer.id);\n                                    }\n                                    this.saleOrders = this.invoice.refFrom || []\n                                    if (this.$route.query.type === \"recurring\") {\n                                        if (this.$route.params.hasOwnProperty(\"transactionDate\")) {\n                                            window.console.log(\"type\", this.$route.params);\n                                            this.invoice.transactionDate = new Date(\n                                                this.$route.params.transactionDate\n                                            );\n                                            this.invoice.transactionDate = new Date(\n                                                this.$route.params.transactionDate\n                                            );\n                                            this.onInvoiceDateChanged();\n                                            this.generateNumber();\n                                        }\n                                    }\n                                }\n                            })\n                            .catch();\n                        {\n                            this.showLoading = false;\n                        }\n                    }, 10);\n                });\n            }\n        },\n        clear() {\n            const term = this.invoice.paymentTerm || {}\n            const priceL = this.invoice.priceLevel || {}\n            this.id = undefined;\n            this.itemLines = []\n            this.invoice = new InvoiceModel();\n            this.invoice.paymentTerm = term\n            this.invoice.priceLevel = priceL\n            this.customer = ''\n            this.employee = ''\n            this.saleOrders = []\n            this.invoice.transactionType = this.invoiceTypes[0];\n            this.generateNumber();\n        },\n        async loadTransactionRate() {\n            new Promise((resolve) => {\n                setTimeout(() => {\n                    resolve(\"resolved\");\n                    const date = new Date(this.invoice.transactionDate).toISOString().substr(0, 10);\n                    const priceLevel = this.invoice.priceLevel || {};\n                    const currency = priceLevel.currency || {}\n                    const code = currency.code || ''\n                    if (code) {\n                        this.showLoading = true;\n                        currencyHandler\n                            .getLastExchangeRateByDate(date, code)\n                            .then((res) => {\n                                if (res.data.statusCode === 200) {\n                                    this.showLoading = false;\n                                    this.exchangeRate = res.data.data[0];\n                                    this.currencyCode = this.exchangeRate.code;\n                                    this.transactionRate = this.exchangeRate.rate;\n                                    this.invoice.txnRate = this.exchangeRate.rate;\n                                    this.invoice.exchangeRate = this.exchangeRate;\n                                    this.showLoading = false;\n                                    this.loadCustomerDepositBalance(this.customer.id);\n                                }\n                            });\n                    }\n                    this.loadSaleOrder();\n                    this.loadTransactionTaxRate();\n                }, 10);\n            });\n        },\n        async loadTransactionTaxRate() {\n            new Promise((resolve) => {\n                setTimeout(() => {\n                    resolve(\"resolved\");\n                    const date = new Date(this.invoice.transactionDate).toISOString().substr(0, 10);\n                    let code = \"KHR\";\n                    if (code !== undefined || code !== \"\") {\n                        currencyHandler\n                            .getLastExchangeRateByDate(date, code)\n                            .then((res) => {\n                                if (res.data.statusCode === 200) {\n                                    this.invoice.taxExchangeRate = res.data.data[0];\n                                }\n                            });\n                    }\n                }, 10);\n            });\n        },\n        async loadCreditLimit() {\n            new Promise((resolve) => {\n                setTimeout(() => {\n                    resolve(\"resolved\");\n                    if (this.customer) {\n                        const strFilter = '?id=' + this.customer.id + '&transactionDate=' + this.invoice.transactionDate + '&type=Customer'\n                        this.invoice.creditLimit = 0\n                        creditLimitHandler.get(strFilter).then((res) => {\n                            if (res.data.statusCode === 200) {\n                                // this.creditLimitItem = res.data.data\n                                const credit = res.data.data\n                                this.invoice.creditLimit = kendo.parseFloat(credit.amount || 0);\n                            }\n                        });\n                    }\n                }, 10);\n            });\n        },\n        async loadPaymentTermList() {\n            new Promise((resolve) => {\n                setTimeout(() => {\n                    resolve(\"resolved\");\n                    if (this.customer) {\n                        const strFilter = '?id=' + this.customer.id + '&transactionDate=' + this.invoice.transactionDate + '&type=Customer'\n                        this.invoice.paymentTerm = {}\n                        paymentTermHandler_.get(strFilter).then((res) => {\n                            if (res.data.statusCode === 200) {\n                                const terms = res.data.data\n                                this.invoice.paymentTerm = terms.term\n                                this.invoice.approvedTerm = terms.term\n                                this.onPaymentTermChanged()\n                            }\n                        });\n                    }\n                }, 10);\n            });\n        },\n        onPriceLevelChange() {\n            this.isPriceLevelChanged = true\n            this.loadTransactionRate()\n            this.clearUOMItem()\n            this.loadLateFee()\n        },\n        async clearUOMItem() {\n            let ds = this.$refs.itemLineDS.kendoWidget()\n            ds.data().map(n => {\n                n.set('uom', {})\n            })\n            this.isPriceLevelChanged = false\n        },\n        setDefaultData() {\n            let ds = this.$refs.itemLineDS.kendoWidget();\n            ds.data([]);\n            const term = this.invoice.paymentTerm || {}\n            const priceL = this.invoice.priceLevel || {}\n            this.id = undefined;\n            this.invoice = new InvoiceModel();\n            this.invoice.paymentTerm = term\n            this.invoice.priceLevel = priceL\n            this.customer = {}\n            this.mEmployee = {}\n            this.saleOrders = []\n            this.invoice.transactionType = this.invoiceTypes[0];\n            this.generateNumber();\n            this.loadSegment();\n            this.loadLocation();\n            this.addRow()\n            this.addRow()\n        }\n    },\n    computed: {\n        disabledSLP() {\n            if (this.$route.params.id) {\n                const refF = this.invoice.refFrom || []\n                if (refF.length > 0) {\n                    return !!refF.length > 0\n                }\n            }\n            return false\n        },\n        disabledMe() {\n            return !!this.$route.params.id;\n        },\n        disabledDeposit() {\n            if (this.$route.params.id) {\n                return this.depositDeduction > 0;\n            } else {\n                return false\n            }\n        },\n        validCustomer: function () {\n            return this.customer.id !== undefined && this.customer.id !== null;\n        },\n        hiddenButton() {\n            if (this.$route.params.id) {\n                return true\n            } else {\n                return false\n            }\n        },\n        // depositDeduction: {\n        //     get(value) {\n        //         return value\n        //     }, set(value) {\n        //         this.$emit('depositDeduction', value)\n        //     }\n        // }\n    },\n    watch: {\n        // id() {\n        //     if (this.$route.params.id === undefined) {\n        //         this.setDefaultData();\n        //     } else {\n        //         this.showLoading = true;\n        //         this.loadViewInvoice();\n        //     }\n        // },\n        '$route': 'loadSaleFormContent'\n    },\n    created() {\n        this.loadPriceLevel();\n        this.loadTax();\n        this.loadSaleUnitItems();\n        this.loadPrefix();\n        // this.loadLateFee();\n        this.loadSegment();\n        this.loadLocation();\n        this.loadPaymentOption();\n    },\n    mounted: async function () {\n        await this.loadSaleFormContent();\n        this.requestData(0, this.filter, this.cusBaseUrl);\n        await this.loadDiscountItem();\n        await this.loadSaleChannel();\n        await this.loadEmployeeCenter();\n        await this.loadPaymentTerm();\n        await this.loadAccount();\n        // await this.loadCurrency()\n        await this.loadOtherCharge();\n        // await this.loadCatalogs()\n        // await this.initData()\n        await this.loadViewInvoice()\n    },\n};\n</script>\n\n<style scoped>\n.k-dropdown {\n    width: 100%;\n    margin-top: 3px;\n}\n\n.function_wrapper {\n    box-shadow: none !important;\n}\n\n.v-application--is-ltr .v-text-field .v-input__append-inner {\n    margin-top: 0 !important;\n}\n\n.v-input__slot {\n    background-color: #fff !important;\n}\n\n.function_content .label {\n    margin-bottom: 10px;\n    display: inline-block;\n}\n\n.border_radius10 {\n    border-radius: 10px !important;\n    background-color: #f2f2f2;\n}\n\n.pa-3.v-card h4 {\n    font-size: 18px;\n    color: #333;\n}\n\n.pa-3.v-card p {\n    font-size: 12px;\n    color: #b5b5b5;\n}\n\n.attachment_file {\n    background-color: #efeded;\n    border-radius: 0 !important;\n}\n\n.attachment_table.v-data-table table {\n    border: thin solid rgba(0, 0, 0, 0.12);\n}\n\n.attachment_table table tr th {\n    border-left: thin solid rgba(0, 0, 0, 0.12);\n    height: 35px;\n    border-right: thin solid rgba(0, 0, 0, 0.12);\n}\n\n.block_debit,\n.block_credit {\n    border-bottom: 1px solid #fff;\n}\n\n.block_debit p.number,\n.block_credit p.number {\n    font-size: 25px;\n    color: #7f7f7f;\n}\n\n.block_debit h5,\n.block_credit h5,\n.block_difference h5 {\n    text-transform: uppercase;\n    color: #7f7f7f;\n    font-size: 15px;\n    font-weight: normal;\n}\n\n.block_difference h5 {\n    font-size: 18px;\n}\n\n.block_difference h5 span {\n    font-size: 15px;\n}\n\n.custom_grid table th:last-child {\n    text-align: right !important;\n}\n\n.color_green {\n    color: #c80000;\n}\n\n@media (min-width: 1264px) {\n    .container {\n        max-width: 1250px;\n    }\n}\n\n@media (max-width: 576px) {\n    .pt-6.col-sm-5.col-12 {\n        padding-top: 0 !important;\n    }\n\n    .code_text {\n        width: 100%;\n    }\n\n    .phone_no_pt {\n        padding-top: 0 !important;\n    }\n\n    .select_template,\n    .save_option {\n        margin-bottom: 10px;\n    }\n}\n\n.hide_small_bar_class {\n    max-width: 0;\n    transition: 0.5s ease-in;\n    flex: 0 0 0;\n}\n\n.hide_big_bar_class {\n    max-width: 100%;\n    transition: 0.5s ease-in;\n    flex: 0 0 100%;\n}\n\n.info_add {\n    background-color: #ffffff;\n}\n\n.small_sidebar {\n    height: 98%;\n    position: relative;\n    padding: 12px;\n    background-color: #edf1f5;\n}\n\n.my_card h3 {\n    display: block !important;\n}\n\n.iconArrow {\n    right: -35px;\n    position: absolute;\n    bottom: -10px;\n}\n\n.iconArrowHide {\n    position: absolute;\n    right: -7px;\n    bottom: -10px;\n}\n\n.color_grey {\n    color: #808080;\n}\n\n.card_green {\n    min-height: 70px;\n    background-color: #c80000 !important;\n    color: #ffffff;\n}\n\n.lb_bold {\n    font-size: 12px;\n}\n\n.detial_smallside_p {\n    position: absolute;\n    bottom: 10px;\n}\n\n.card_background {\n    background-color: #edf1f5;\n    min-height: 120px;\n}\n\n.deposite_input {\n    width: 100px;\n}\n\n.btn_save_draft {\n    color: #ffffff;\n    background-color: #00b0f0 !important;\n    text-transform: capitalize;\n}\n\n.save_option {\n    background-color: #203864 !important;\n}\n\n.btn_add_small {\n    height: 27px !important;\n    min-width: 25px !important;\n    font-size: 10px;\n    padding: 0 22px !important;\n    background-color: #c80000 !important;\n    color: #ffffff;\n    border-radius: 0 !important;\n}\n\n.list_site_inv {\n    background-color: #f44336;\n    color: #ffffff;\n    font-size: 12px;\n}\n\n.list_site_exp {\n    background-color: #c5e0b4;\n    color: #000000;\n    font-size: 12px;\n    line-height: 16px;\n    min-height: 40px;\n}\n\n.checkbox_inv {\n    padding: 2px;\n    margin-top: 3px;\n    margin-right: 2px;\n}\n\n.exp_select {\n    font-size: 12px !important;\n}\n\n.theme--light.v-data-table\n> .v-data-table__wrapper\n> table\n> tbody\n> tr:hover:not(.v-data-table__expanded__content):not(.v-data-table__empty-wrapper) {\n    background-color: transparent !important;\n}\n\n.b_add {\n    height: 30px !important;\n}\n</style>\n"]}]}