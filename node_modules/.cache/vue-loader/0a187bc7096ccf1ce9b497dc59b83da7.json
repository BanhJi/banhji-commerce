{"remainingRequest":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/macos/Desktop/banhji-0.2/banhji-commerce/src/views/budgeting/budgets/BudgetPerformance.vue?vue&type=style&index=0&id=7826824e&scoped=true&lang=css&","dependencies":[{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/src/views/budgeting/budgets/BudgetPerformance.vue","mtime":1642478961301},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/@vue/cli-service/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoudGhlbWUtLWxpZ2h0LnYtZGF0YS10YWJsZSB7CiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudCAhaW1wb3J0YW50Owp9Cgoudi1kYXRhLXRhYmxlID4gLnYtZGF0YS10YWJsZV9fd3JhcHBlciA+IHRhYmxlID4gdGJvZHkgPiB0ciA+IHRkIHsKICAgIGhlaWdodDogMzJweCAhaW1wb3J0YW50OwogICAgYm9yZGVyLWJvdHRvbTogdGhpbiBzb2xpZCByZ2JhKDAsIDAsIDAsIDAuMTIpICFpbXBvcnRhbnQ7CiAgICBib3JkZXItcmlnaHQ6IHRoaW4gc29saWQgcmdiYSgwLCAwLCAwLCAwLjEyKSAhaW1wb3J0YW50Owp9Ci52LWRhdGEtdGFibGUuc2ltcGxlMV90YWJsZS50aGVtZS0tbGlnaHQsCi52LWRhdGEtdGFibGUgPiAudi1kYXRhLXRhYmxlX193cmFwcGVyID4gdGFibGUgPiB0Ym9keSA+IHRyOmZpcnN0LWNoaWxkID4gdGQgewogICAgYm9yZGVyLXRvcDogdGhpbiBzb2xpZCByZ2JhKDAsIDAsIDAsIDAuMTIpICFpbXBvcnRhbnQ7Cn0KLnYtZGF0YS10YWJsZS5zaW1wbGVfdGFibGUudGhlbWUtLWxpZ2h0ewogICAgYm9yZGVyLWxlZnQ6IHRoaW4gc29saWQgcmdiYSgwLCAwLCAwLCAwLjEyKSAhaW1wb3J0YW50OwogICAgYm9yZGVyLXJpZ2h0OiB0aGluIHNvbGlkIHJnYmEoMCwgMCwgMCwgMC4xMikgIWltcG9ydGFudDsKfQoKLnRoZW1lLS1saWdodC52LWRhdGEtdGFibGUuc2ltcGxlMV90YWJsZSA+IC52LWRhdGEtdGFibGVfX3dyYXBwZXIgPiB0YWJsZSA+IHRoZWFkID4gdHI6bGFzdC1jaGlsZCA+IHRoOmxhc3QtY2hpbGR7CiAgICBib3JkZXItcmlnaHQ6IG5vbmUgIWltcG9ydGFudDsKfQoKLnRoZW1lLS1saWdodC52LWRhdGEtdGFibGUgPiAudi1kYXRhLXRhYmxlX193cmFwcGVyID4gdGFibGUgPiB0Ym9keSA+IHRyOmhvdmVyOm5vdCgudi1kYXRhLXRhYmxlX19leHBhbmRlZF9fY29udGVudCk6bm90KC52LWRhdGEtdGFibGVfX2VtcHR5LXdyYXBwZXIpIHsKICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50ICFpbXBvcnRhbnQ7Cn0KCi5ib3JkZXItYm90dG9tIHsKICAgIGJvcmRlci1ib3R0b206IHRoaW4gc29saWQgcmdiYSgwLCAwLCAwLCAwLjEyKSAhaW1wb3J0YW50Owp9CgouZm9udC1zbWFsbCB7CiAgICBmb250LXNpemU6IDEycHg7CiAgICBsaW5lLWhlaWdodDogMTVweDsKfQoKLmZvbnQtMjYgewogICAgZm9udC1zaXplOiAyNnB4ICFpbXBvcnRhbnQ7Cn0KLnYtZGF0YS10YWJsZS5zaW1wbGVfdGFibGUudGhlbWUtLWxpZ2h0ewogICAgYm9yZGVyLXRvcDogdGhpbiBzb2xpZCByZ2JhKDAsIDAsIDAsIDAuMTIpICFpbXBvcnRhbnQ7Cn0KLnRoZW1lLS1saWdodC52LWRhdGEtdGFibGUgPiAudi1kYXRhLXRhYmxlX193cmFwcGVyID4gdGFibGUgPiB0aGVhZCA+IHRyOmxhc3QtY2hpbGQgPiB0aHsKICAgIGJvcmRlci1ib3R0b206IG5vbmUgIWltcG9ydGFudDsKICAgIGJvcmRlci1yaWdodDogdGhpbiBzb2xpZCByZ2JhKDAsIDAsIDAsIDAuMTIpICFpbXBvcnRhbnQ7Cn0KLnRoZW1lLS1saWdodC52LWRhdGEtdGFibGUgPiAudi1kYXRhLXRhYmxlX193cmFwcGVyID4gdGFibGUgPiB0aGVhZCA+IHRyID4gdGh7CiAgICBib3JkZXItYm90dG9tOiB0aGluIHNvbGlkIHJnYmEoMCwgMCwgMCwgMC4xMikgIWltcG9ydGFudDsKICAgIGJvcmRlci1yaWdodDogdGhpbiBzb2xpZCByZ2JhKDAsIDAsIDAsIDAuMTIpICFpbXBvcnRhbnQ7Cn0KLnRoZW1lLS1saWdodC52LWRhdGEtdGFibGUgPiAudi1kYXRhLXRhYmxlX193cmFwcGVyID4gdGFibGUgPiB0Ym9keSA+IHRyOm5vdCg6bGFzdC1jaGlsZCkgPiB0ZDpsYXN0LWNoaWxkLAoudGhlbWUtLWxpZ2h0LnYtZGF0YS10YWJsZSA+IC52LWRhdGEtdGFibGVfX3dyYXBwZXIgPiB0YWJsZSA+IHRib2R5ID4gdHI6bm90KDpsYXN0LWNoaWxkKSA+IHRoOmxhc3QtY2hpbGQsCi50aGVtZS0tbGlnaHQudi1kYXRhLXRhYmxlID4gLnYtZGF0YS10YWJsZV9fd3JhcHBlciA+IHRhYmxlID4gdGJvZHkgPiB0ciA+IHRkOmxhc3QtY2hpbGR7CiAgICBib3JkZXItcmlnaHQ6IG5vbmUgIWltcG9ydGFudDsKfQoKCi52LWRhdGEtdGFibGUudGFibGVfbGlzdCA+IC52LWRhdGEtdGFibGVfX3dyYXBwZXIgPiB0YWJsZSA+IHRib2R5ID4gdHIgPiB0ZCB7CiAgICBoZWlnaHQ6IDMycHggIWltcG9ydGFudDsKICAgIGJvcmRlci1ib3R0b206IHRoaW4gc29saWQgcmdiYSgwLCAwLCAwLCAwLjEyKSAhaW1wb3J0YW50OwogICAgYm9yZGVyLXJpZ2h0OiBub25lICFpbXBvcnRhbnQ7Cn0KLnYtZGF0YS10YWJsZS50YWJsZV9saXN0LnRoZW1lLS1saWdodCA+IC52LWRhdGEtdGFibGVfX3dyYXBwZXIgPiB0YWJsZSA+IHRib2R5ID4gdHI6Zmlyc3QtY2hpbGQgPiB0ZHsKICAgIGJvcmRlci10b3A6IG5vbmUgIWltcG9ydGFudDsKfQoKQG1lZGlhIChtYXgtd2lkdGg6IDU3NnB4KSB7Cgp9Cg=="},{"version":3,"sources":["BudgetPerformance.vue"],"names":[],"mappingsxBA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA","file":"BudgetPerformance.vue","sourceRoot":"src/views/budgeting/budgets","sourcesContent":["<template>\n    <v-card color=\"white\" class=\"pl-2 no_border\" elevation=\"0\">\n        <!-- Title -->\n        <v-row>\n            <v-col sm=\"5\" cols=\"12\" class=\"py-0\">\n                <h3 class=\"text-left mb-1 font_20 line_24\">{{$t('budget_performance_report')}}</h3>\n                <p class=\"mb-0\">{{$t('a_detail_breakdown_of_budget_by_months')}}</p>\n            </v-col>\n             <v-col sm=\"7\" cols=\"12\" class=\"pb-1\">\n                <app-reporting-language \n                    :initLanguage=\"reportingLanguage\" \n                    @emitLanguage=\"reportingLanguage = $event\" \n                    @onChanged=\"onReportingLanguageChanges\" />\n            </v-col>\n        </v-row>\n\n        <!-- Search -->\n        <v-row class=\"mt-0\">\n            <v-col sm=\"4\" cols=\"12\" class=\"py-0 pt-0\">\n                <app-fiscal-date-dropdownlist\n                    :initFiscalDate=\"fiscalDate\"\n                    @emitFiscalDate=\"fiscalDate = $event\"\n                    @onChanged=\"onFiscalDateChanges\"\n                />\n            </v-col>\n            <v-col sm=\"3\" cols=\"12\" class=\"py-0 pt-0\">\n                <app-month-of-picker \n                    :initMonthOf=\"monthOf\" \n                    @emitMonthOf=\"monthOf = $event\"\n                    @onChanged=\"onMonthOfChanges\"\n                    :initMin=\"fiscalDate.start_date\"\n                    :initMax=\"fiscalDate.end_date\" />\n            </v-col>\n            <v-col sm=\"3\" cols=\"12\" class=\"py-0 pt-0\">\n                <v-select class=\"mt-1\"\n                    :disabled=\"monthOf === ''\"\n                    placeholder=\"Select Budget\"\n                    v-model=\"budget\"\n                    :loading=\"loadingBudget\"\n                    :items=\"budgetList\"\n                    item-text=\"name\"\n                    item-value=\"uuid\"\n                    return-object\n                    clearable\n                    outlined />\n            </v-col>\n            <v-col sm=\"2\" cols=\"12\" class=\"py-1\">\n                <v-btn\n                    class=\"white--text\"\n                    color=\"primary\"\n                    @click=\"search\"\n                >\n                    <i class=\"b-search\" style=\"font-size: 18px; color:#fff !important;\"/>\n                </v-btn>\n            </v-col>\n           \n        </v-row>\n\n        <!-- Summary -->\n        <v-row>\n            <v-col class=\"pt-0\" sm=\"6\" cols=\"12\">\n                <template>\n                    <v-simple-table class=\"table_list nomal_table\">\n                        <template>\n                            <tbody>\n                            <tr>\n                                <td style=\"width: 45%;font-weight: 900\">{{$t('budget_name')}}:</td>\n                                <td class=\"\">{{ budget.name }}</td>\n                            </tr>\n                            <tr>\n                                <td style=\"font-weight: 900\">{{ $t(\"segment\") }}:</td>\n                                <td class=\"\" v-if=\"budget.segment\">{{ budget.segment.name }}</td>\n                            </tr>\n                            <tr>\n                                <td style=\"font-weight: 900\">{{ $t(\"fiscal_year\") }}:</td>\n                                <td class=\"\" v-if=\"budget.fiscal_year\">{{ Helper.formatFiscalDate(budget.fiscal_year.start_date) }}</td>\n                            </tr>\n                            <tr>\n                                <td style=\"font-weight: 900\">{{$t('used_for_consolidation')}}</td>\n                                <td class=\"\">{{ budget.use_consolidation === 1 ? 'Yes' : 'No' }}</td>\n                            </tr>\n                            </tbody>\n                        </template>\n                    </v-simple-table>\n                </template>\n            </v-col>\n            <v-col class=\"pt-0\" sm=\"6\" cols=\"12\">\n                <template>\n                    <v-simple-table class=\"table_list nomal_table\">\n                        <template>\n                            <tbody>\n                               <tr>\n\t\t\t\t\t\t\t\t\t\t\t<td style=\"font-weight: 900\">{{ $t(\"created_by\") }}:</td>\n\t\t\t\t\t\t\t\t\t\t\t<td v-if=\"budget.created_by.email\">\n\t\t\t\t\t\t\t\t\t\t\t\t{{budget.created_by.email}}\n\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t\t\t<td style=\"font-weight: 900\">{{ $t(\"created_at\") }}:</td>\n\t\t\t\t\t\t\t\t\t\t\t<td v-if=\"budget.created_date\">\n\t\t\t\t\t\t\t\t\t\t\t\t{{ formatDateTime(budget.created_date) }}\n\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t\t\t<td style=\"font-weight: 900\">{{ $t(\"last_edited_at\") }}:</td>\n                                            <td v-if=\"budget.modified_date\">\n\t\t\t\t\t\t\t\t\t\t\t{{ formatDateTime(budget.modified_date) }}</td>\n\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t\t\t<td style=\"font-weight: 900\">{{ $t(\"last_edited_by\") }}:</td>\n\t\t\t\t\t\t\t\t\t\t\t<td class=\"\" v-if=\"budget.modified_by.email\">{{budget.modified_by.email}}</td>\n\t\t\t\t\t\t\t\t\t\t</tr>\n                            </tbody>\n                        </template>\n                    </v-simple-table>\n                </template>\n            </v-col>\n        </v-row>\n        \n        <!-- Table -->\n        <v-row>\n            <v-col sm=\"12\" cols=\"12\" class=\"pt-1\">\n                <template>\n                    <treelistdatasource \n                        ref=\"statementDS\"\n                        :data=\"statementList\"\n                        :sort=\"sortDefinition\"\n                        :schema-model=\"model\" />\n\n                    <treelist \n                        ref=\"statementTreeList\"\n                        data-source-ref=\"statementDS\"\n                        :resizable=\"true\"\n                        :columns=\"columns\"\n                        :dataBound=\"onDataBound\" />\n\n                    <LoadingMe\n                        type=\"loading\"\n                        :isLoading=\"showLoading\"\n                        :myLoading=\"true\"\n                        :fullPage=\"false\" />\n                </template>\n            </v-col>\n        </v-row>\n    </v-card>\n</template>\n\n<script>\n    import kendo from '@progress/kendo-ui';\n    import {i18n} from '@/i18n';\n    import Helper from \"@/helper.js\";\n    /* Models */\n    import AccountModel from \"@/scripts/model/Account\";\n    import FiscalDateModel from \"@/scripts/model/FiscalDate\";\n    import BudgetModel from \"@/scripts/model/Budget\";\n    import BudgetPerformanceModel from \"@/scripts/model/BudgetPerformance\";\n    import SegmentModel from \"@/scripts/model/Segment\";\n    \n    /* TreeList */\n    import { TreeList } from '@progress/kendo-treelist-vue-wrapper';\n    import { TreeListDataSource } from '@progress/kendo-datasource-vue-wrapper';\n    \n    /* Vuex */\n    import { mapState } from 'vuex';\n\n    const incomeStatementHandler = require(\"@/scripts/handler/accounting/incomeStatementHandler\");\n    const OrderNumberPL = require(\"@/scripts/default_setup/OrderNumberPL.js\");\n    const NumberInWord = require(\"@/scripts/default_setup/NumberInWord.js\");\n    const AccountTypeCode = require(\"@/scripts/default_setup/AccountTypeCode.js\");\n\n    export default {\n        components:{\n            \"LoadingMe\": () => import('@/components/Loading'),\n            \"app-fiscal-date-dropdownlist\": () => import('@/components/kendo_templates/FiscalDateDropDownList'),\n            \"app-month-of-picker\": () => import('@/components/kendo_templates/MonthOfPicker'),\n            'app-reporting-language': () => import('@/components/kendo_templates/ReportingLanguageDropDownList'),\n            'treelist': TreeList,\n            'treelistdatasource': TreeListDataSource,\n        },\n        data: () => ({\n            monthOf : '',\n            budget : new BudgetModel(),\n            budgetList : [],\n            statements : [],\n            statementList : [],\n            fiscalDate: new FiscalDateModel(),\n            Helper : Helper,\n            /* Kendo */\n            columns : [],\n            sortDefinition : [\n                { field: \"order\", dir: \"asc\" },\n                { field: \"number\", dir: \"asc\" },\n            ],\n\t\t\tmodel: {\n                id: \"uuid\",\n                expanded: true\n            },\n            // Reporting Language\n\t\t\treportingLanguage: 'english',\n\t\t\tfieldName : 'name',\n            // LoadingMe\n            showLoading: false,\n            loadingBudget: false,\n        }),\n        methods:{\n            formatDateTime(value) {\n                return kendo.toString(new Date(value), `dd-MMM-yyyy h:mm tt`);\n            },\n            onFiscalDateChanges(){\n                this.monthOf = '';\n                this.budget = new BudgetModel();\n\n                if(this.fiscalDate !== null){\n                    /* Load Budget */\n                    this.loadBudget();\n\n                }\n            },\n            onMonthOfChanges () {\n                if(this.statementList.length > 0){\n                    /* Bind Data */\n                    this.bindData();\n                }\n            },\n            async loadBudget(){\n                this.loadingBudget = true;\n                let budgets = await this.$store.dispatch('budgets/getList'),\n                    segments = await this.$store.dispatch('segments/getList');\n\n                let budgetList = [];\n                budgets.forEach(value => {\n                    if(value.fiscal_year.uuid === this.fiscalDate.uuid \n                        && value.segment_uuid !== '' \n                        && value.budget_type === 'standard'){\n                        let budget = new BudgetModel(value);\n                        budget.segment = new SegmentModel(segments.find(i => i.id === value.segment_uuid));\n                        budgetList.push(budget);\n                    }\n                });\n                this.budgetList = budgetList;\n                this.loadingBudget = false;\n            },\n            /* Search */\n            search () {\n                if(this.budget.uuid !== ''){\n                    let sdate = kendo.toString(new Date(this.fiscalDate.start_date), 'yyyy-MM-dd') + 'T00:00:00.000Z',\n                        edate = kendo.toString(new Date(this.fiscalDate.end_date), 'yyyy-MM-dd') + 'T23:59:59.999Z';\n                    \n                    // Empty statementDS\n                    let ds = this.$refs.statementDS.kendoWidget();\n                    ds.data([]);\n                        \n                    // Query Income Statement\n                    this.showLoading = true;\n                    incomeStatementHandler.getIncomeStatement({\n                        params : {\n                            start_date \t\t: sdate,\n                            end_date \t\t: edate,\n                            group_by \t\t: \"12\",\n                            segment_uuid    : this.budget.segment_uuid,\n                        }\n                    })\n                    .then(res => {\n                        if(res){\n                            this.statements = res.data;\n                            this.bindData();\n                        }else{\n                            this.$snotify.error(i18n.t(\"error_something_wrong\"));\n                        }\n                    })\n                    .finally(()=>{\n                        // this.showLoading = false;\n                    });\n                }else{\n                    /* Alert Warning */\n                    this.$snotify.warning(i18n.t(\"please_select_budget\"));\n                }\n\t\t\t},\n            async bindData () {\n                let g = {}, childIds = [];\n\n                // Load Account List\n                await this.$store.dispatch('accounting/getAccounts');\n                \n                /* Generate Months */\n                let fiscalMonths = Helper.generateFiscalMonths(this.fiscalDate.start_date, this.fiscalDate.end_date, \"12\", \"yyyy-MM\");\n                let monthOfIndex = fiscalMonths.indexOf(this.monthOf);\n                \n                /* Gathering from budget lines */\n                this.budget.lines.forEach(value => {\n                    /* Get Account Information */\n                    let account = this.accounts.find(item => item.uuid === value.account_uuid);\n                    if(account){\n                        /* Order */\n                        let order = account.type_code;\n                        if(account.type_code === AccountTypeCode.OTHER_REVENUE){\n                            order = OrderNumberPL[account.type_code];\n                        }\n\n                        /* GROUPING */\n                        /* Top Level Account Type */\n                        if(!g[account.type_code]){\n                            g[account.type_code] = new BudgetPerformanceModel({\n                                uuid : account.type_code,\n                                number : account.type_code,\n                                name : account.account_type.name,\n                                local_name : account.account_type.local_name,\n                                order : order,\n                            });\n                        }\n                        \n                        /* Parent Level */\n                        let thisAccountParentId = \"\";\n                        if(account.hasOwnProperty(\"parent_account\")){\n                            let currentParentAccount = new AccountModel(account.parent_account), counter = 0;\n                            while (currentParentAccount.number !== \"\") {\n                                /* Get account by uuid or banhji_account_number */\n                                let accountParent = new AccountModel();\n                                if(currentParentAccount.uuid !== \"\"){/* Get by uuid */\n                                    accountParent = new AccountModel(this.accounts.find((item) => item.uuid === currentParentAccount.uuid));\n                                }else{/* Get by banhji_account_number because default data has no uuid */\n                                    if(currentParentAccount.banhji_account_number !== \"\"){\n                                        accountParent = new AccountModel(this.accounts.find((item) => item.banhji_account_number === currentParentAccount.banhji_account_number));\n                                    }\n                                }\n\n                                /* Set This Account Parent Id */\n                                if(counter === 0){\n                                    thisAccountParentId = accountParent.uuid;\n                                }\n\n                                /* Find Next Parent */\n                                let nextParent = new AccountModel();\n                                if(accountParent.hasOwnProperty(\"parent_account\")){\n                                    let parentOfAccountParent = new AccountModel(accountParent.parent_account);\n                                    if(parentOfAccountParent.number !== \"\"){\n                                        if(parentOfAccountParent.uuid !== \"\"){/* Get by uuid */\n                                            nextParent = this.accounts.find((item) => item.uuid === parentOfAccountParent.uuid);\n                                        }else{/* Get by banhji_account_number because default data has no uuid */\n                                            if(parentOfAccountParent.banhji_account_number !== \"\"){\n                                                nextParent = this.accounts.find((item) => item.banhji_account_number === parentOfAccountParent.banhji_account_number);\n                                            }\n                                        }\n                                    }\n                                }\n\n                                /* Set Parent Id */\n                                let parentId = accountParent.type_code;\n                                if(nextParent.number !== \"\"){\n                                    parentId = nextParent.uuid;\n\n                                    /* Set next parent account */\n                                    Object.assign(currentParentAccount, nextParent);\n                                }else{\n                                    /* Set loop to end */\n                                    currentParentAccount.number = \"\";\n                                }\n\n                                /* Add Parent Level */\n                                g[accountParent.uuid] = new BudgetPerformanceModel({\n                                    uuid : accountParent.uuid,\n                                    number : accountParent.number,\n                                    name : accountParent.name,\n                                    local_name : accountParent.local_name,\n                                    parentId : parentId,\n                                    account : accountParent,\n                                    order : order,\n                                });\n\n                                /* Increase Counter By 1 */\n                                counter++;\n                            }/* End While Loop */\n                        }\n\n                        /* Child Level */\n                        if(!g[account.uuid]){\n                            g[account.uuid] = new BudgetPerformanceModel({\n                                uuid : account.uuid,\n                                number : account.number,\n                                name : account.name,\n                                local_name : account.local_name,\n                                account : account,\n                                order : order,\n                            });\n                        }\n\n                        /* Set Parent Id Or Self Parent */\n                        let acctKey = account.uuid;\n                        if(thisAccountParentId !== \"\"){/* Child Level */\n                            g[account.uuid].parentId = thisAccountParentId;\n                        }else{/* Child As Parent */\n                            g[account.uuid].parentId = account.type_code; /* Self As Parent */\n\n                            if(value.amount !== 0){\n                                acctKey = account.number;\n\n                                /* Self As Child With Balance */\n                                if(!g[account.number]){\n                                    g[account.number] = new BudgetPerformanceModel({\n                                        uuid : account.number,\n                                        number : account.number,\n                                        name : account.name,\n                                        local_name : account.local_name,\n                                        parentId : account.uuid,\n                                        account : account,\n                                        order : order,\n                                    });\n                                }\n                            }\n                        }\n\n                        /* Child Id */\n                        childIds.push(acctKey);\n\n                        /* Reverse Nature */\n                        let nature = 1; /* Default Naure is Dr = 1 */\n                        if(account.account_type.nature.toLowerCase() === \"cr\"){\n                            nature = -1;\n                        }\n\n                        /* BUDGET */\n                        /* Budget Whole */\n                        g[acctKey].budget_whole = value.amount * nature;\n                        \n                        value.monthly_amount.forEach(mline => {\n                            /* Budget Month */\n                            if(mline.month_of === this.monthOf){\n                                g[acctKey].budget_month = mline.amount * nature;\n                            }\n\n                            /* Budget YTD */\n                            if (kendo.toString(new Date(mline.month_of),\"yyyy-MM-dd\") <= kendo.toString(new Date(this.monthOf),\"yyyy-MM-dd\")) {\n                                g[acctKey].budget_ytd += mline.amount * nature;\n                            }\n                        });\n\n                        /* ACTUAL */\n                        let actual = this.statements.find((item) => item.accountUUID === value.account_uuid);\n                        if(actual){\n                            /* Actual Month */\n                            let propertyMonth = NumberInWord[monthOfIndex];// ['zero','one','two',...]\n                            g[acctKey].actual_month = actual[propertyMonth];// actual['zero']\n                            for (let i = 0; i < 12; i++) {\n                                let property = NumberInWord[i];\n\n                                /* Actual YTD */\n                                if(i <= monthOfIndex){\n                                    g[acctKey].actual_ytd += actual[property];\n                                }\n\n                                /* Actual Whole */\n                                g[acctKey].actual_whole += actual[property];\n                            }\n                        }\n                    }\n                });\n\n                /* Budget Estimations */\n                this.budget.budget_estimations.forEach(value => {\n                    if(value.account_type_number >= 100 && value.account_type_number <= 105){\n                        g[value.account_type_number] = new BudgetPerformanceModel({\n                            uuid: value.account_type_number,\n                            name: value.name,\n                            local_name: value.local_name,\n                            order: OrderNumberPL[value.account_type_number],\n                        });\n                    }\n                });\n\n                /* Parse Object Array */\n                let entries = Object.values(g);\n                \n                /* Parent aggregate sum */\n                for (let i = 0; i < entries.length; i++) {\n                    let entry = entries[i];\n                    \n                    if(~childIds.indexOf(entry.uuid)){\n                        let parentId = entry.parentId;\n                        while(parentId !== null){\n                            if(parentId){\n                                let parent = entries.find((item) => item.uuid === parentId);\n                                if(parent){\n                                    /* Budget */\n                                    parent.budget_month += entry.budget_month;\n                                    parent.budget_ytd += entry.budget_ytd;\n                                    parent.budget_whole += entry.budget_whole;\n\n                                    /* Actual */\n                                    parent.actual_month += entry.actual_month;\n                                    parent.actual_ytd += entry.actual_ytd;\n                                    parent.actual_whole += entry.actual_whole;\n\n                                    /* Set new parent id */\n                                    parentId = parent.parentId;\n                                }else{\n                                    /* Set loop to end */\n                                    parentId = null;\n                                }\n                            }else{\n                                /* Set loop to end */\n                                parentId = null;\n                            }\n                        }\n                    }\n                }\n\n                /* Other Groups */\n                /* Gross Profit */\n                let revenue = this.getEntry(entries, AccountTypeCode.REVENUE),\n                    costOfSale = this.getEntry(entries, AccountTypeCode.COGS),\n                    grossProfit = entries.find((i)=>i.uuid === AccountTypeCode.GROSS_PROFIT);\n\n                /* EBITDA */\n                let salaryBenefit = this.getEntry(entries, AccountTypeCode.SALARY_BENEFIT),\n                    saleMarketing = this.getEntry(entries, AccountTypeCode.SALE_MARKETING),\n                    researchProductDevelopment = this.getEntry(entries, AccountTypeCode.RESEARCH_PRODUCT_DEVELOPMENT),\n                    legalProfessionalFee = this.getEntry(entries, AccountTypeCode.LEGAL_PROFESSIONAL_FEE),\n                    generalAdminExpenses = this.getEntry(entries, AccountTypeCode.GENERAL_ADMIN_EXPENSE),\n                    operatingExpenses = entries.find((i)=>i.uuid === AccountTypeCode.OPERATING_EXPENSE),\n                    otherRevenue = this.getEntry(entries, AccountTypeCode.OTHER_REVENUE),\n                    operatingIncomeEBITDA = entries.find((i)=>i.uuid === AccountTypeCode.OPERATING_INCOME_EBITDA);\n\n                /* EBIT */\n                let depreciation = this.getEntry(entries, AccountTypeCode.DEPRECIATION),\n                    otherExpenses = this.getEntry(entries, AccountTypeCode.OTHER_EXPENSE),\n                    earningBeforeInterestAndTaxEBIT = entries.find((i)=>i.uuid === AccountTypeCode.EARNING_BEFORE_INTEREST_AND_TAX_EBIT);\n\n                /* Profit Before Tax */\n                let financingCost = this.getEntry(entries, AccountTypeCode.FINANCING_COST),\n                    profitBeforeTax = entries.find((i)=>i.uuid === AccountTypeCode.PROFIT_BEFORE_TAX);\n\n                /* Profit For The Period */\n                let taxRelatedExpenses = this.getEntry(entries, AccountTypeCode.TAX),\n                    profitForThePeriod = entries.find((i)=>i.uuid === AccountTypeCode.PROFIT_FOR_THE_PERIOD);\n\n                /* BUDGET */\n                /* Budget Month */\n                grossProfit.budget_month = revenue.budget_month - costOfSale.budget_month;\n                operatingExpenses.budget_month = salaryBenefit.budget_month + saleMarketing.budget_month + researchProductDevelopment.budget_month + legalProfessionalFee.budget_month + generalAdminExpenses.budget_month;\n                operatingIncomeEBITDA.budget_month = (grossProfit.budget_month + otherRevenue.budget_month) - operatingExpenses.budget_month;\n                earningBeforeInterestAndTaxEBIT.budget_month = operatingIncomeEBITDA.budget_month - depreciation.budget_month - otherExpenses.budget_month;\n                profitBeforeTax.budget_month = earningBeforeInterestAndTaxEBIT.budget_month - financingCost.budget_month;\n                profitForThePeriod.budget_month = profitBeforeTax.budget_month - taxRelatedExpenses.budget_month;\n\n                /* Budget YTD */\n                grossProfit.budget_ytd = revenue.budget_ytd - costOfSale.budget_ytd;\n                operatingExpenses.budget_ytd = salaryBenefit.budget_ytd + saleMarketing.budget_ytd + researchProductDevelopment.budget_ytd + legalProfessionalFee.budget_ytd + generalAdminExpenses.budget_ytd;\n                operatingIncomeEBITDA.budget_ytd = (grossProfit.budget_ytd + otherRevenue.budget_ytd) - operatingExpenses.budget_ytd;\n                earningBeforeInterestAndTaxEBIT.budget_ytd = operatingIncomeEBITDA.budget_ytd - depreciation.budget_ytd - otherExpenses.budget_ytd;\n                profitBeforeTax.budget_ytd = earningBeforeInterestAndTaxEBIT.budget_ytd - financingCost.budget_ytd;\n                profitForThePeriod.budget_ytd = profitBeforeTax.budget_ytd - taxRelatedExpenses.budget_ytd;\n\n                /* Budget Whole */\n                grossProfit.budget_whole = revenue.budget_whole - costOfSale.budget_whole;\n                operatingExpenses.budget_whole = salaryBenefit.budget_whole + saleMarketing.budget_whole + researchProductDevelopment.budget_whole + legalProfessionalFee.budget_whole + generalAdminExpenses.budget_whole;\n                operatingIncomeEBITDA.budget_whole = (grossProfit.budget_whole + otherRevenue.budget_whole) - operatingExpenses.budget_whole;\n                earningBeforeInterestAndTaxEBIT.budget_whole = operatingIncomeEBITDA.budget_whole - depreciation.budget_whole - otherExpenses.budget_whole;\n                profitBeforeTax.budget_whole = earningBeforeInterestAndTaxEBIT.budget_whole - financingCost.budget_whole;\n                profitForThePeriod.budget_whole = profitBeforeTax.budget_whole - taxRelatedExpenses.budget_whole;\n\n                /* ACTUAL */\n                /* Actual Month */\n                grossProfit.actual_month = revenue.actual_month - costOfSale.actual_month;\n                operatingExpenses.actual_month = salaryBenefit.actual_month + saleMarketing.actual_month + researchProductDevelopment.actual_month + legalProfessionalFee.actual_month + generalAdminExpenses.actual_month;\n                operatingIncomeEBITDA.actual_month = (grossProfit.actual_month + otherRevenue.actual_month) - operatingExpenses.actual_month;\n                earningBeforeInterestAndTaxEBIT.actual_month = operatingIncomeEBITDA.actual_month - depreciation.actual_month - otherExpenses.actual_month;\n                profitBeforeTax.actual_month = earningBeforeInterestAndTaxEBIT.actual_month - financingCost.actual_month;\n                profitForThePeriod.actual_month = profitBeforeTax.actual_month - taxRelatedExpenses.actual_month;\n\n                /* Actual YTD */\n                grossProfit.actual_ytd = revenue.actual_ytd - costOfSale.actual_ytd;\n                operatingExpenses.actual_ytd = salaryBenefit.actual_ytd + saleMarketing.actual_ytd + researchProductDevelopment.actual_ytd + legalProfessionalFee.actual_ytd + generalAdminExpenses.actual_ytd;\n                operatingIncomeEBITDA.actual_ytd = (grossProfit.actual_ytd + otherRevenue.actual_ytd) - operatingExpenses.actual_ytd;\n                earningBeforeInterestAndTaxEBIT.actual_ytd = operatingIncomeEBITDA.actual_ytd - depreciation.actual_ytd - otherExpenses.actual_ytd;\n                profitBeforeTax.actual_ytd = earningBeforeInterestAndTaxEBIT.actual_ytd - financingCost.actual_ytd;\n                profitForThePeriod.actual_ytd = profitBeforeTax.actual_ytd - taxRelatedExpenses.actual_ytd;\n\n                /* Actual Whole */\n                grossProfit.actual_whole = revenue.actual_whole - costOfSale.actual_whole;\n                operatingExpenses.actual_whole = salaryBenefit.actual_whole + saleMarketing.actual_whole + researchProductDevelopment.actual_whole + legalProfessionalFee.actual_whole + generalAdminExpenses.actual_whole;\n                operatingIncomeEBITDA.actual_whole = (grossProfit.actual_whole + otherRevenue.actual_whole) - operatingExpenses.actual_whole;\n                earningBeforeInterestAndTaxEBIT.actual_whole = operatingIncomeEBITDA.actual_whole - depreciation.actual_whole - otherExpenses.actual_whole;\n                profitBeforeTax.actual_whole = earningBeforeInterestAndTaxEBIT.actual_whole - financingCost.actual_whole;\n                profitForThePeriod.actual_whole = profitBeforeTax.actual_whole - taxRelatedExpenses.actual_whole;\n\n                /* Find Percentage = Actual / Budget */\n                entries.forEach(value => {\n                    value.month_percentage = this.findPercentage(value.actual_month, value.budget_month);\n                    value.ytd_percentage = this.findPercentage(value.actual_ytd, value.budget_ytd);\n                    value.whole_percentage = this.findPercentage(value.actual_whole, value.budget_whole);\n                });\n\n                /* BIND STATMENT */\n                this.statementList = entries;\n                this.generateColumn();\n\n                this.showLoading = false;\n\t\t\t},\n            getEntry(entries, id){\n                return new BudgetPerformanceModel(entries.find(i=>i.uuid === id));\n            },\n            findPercentage (value1, value2) {\n                let result = 0;\n                if(value2 !== 0){\n                    result = value1 / value2;\n                }\n\n                return result;\n            },\n            /* On databound */\n            onDataBound (e) {\n                var headers = e.sender.thead.children();\n                for (var i = 0; i < headers.length; i++) {\n                    var th = kendo.jQuery(headers[i]);\n                    th.css(\"font-weight\", \"bold\");\n                    th.css(\"text-align\", \"center\");\n                }\n\n                var rows = e.sender.tbody.children();\n                for (var j = 0; j < rows.length; j++) {\n                    var row = kendo.jQuery(rows[j]);\n                    var dataItem = e.sender.dataItem(row);\n                    \n                    /* Amount align right */\n                    row.css(\"text-align\", \"right\");\n\n                    /* Parent in bold */\n                    if(dataItem.get(\"hasChildren\") || dataItem.uuid >= 100){\n                        row.css(\"font-weight\", \"bold\");\n                    }\n                }\n            },\n            // Generate Columns\n\t\t\tgenerateColumn () {\n                let headerAttributes = {\n                        \"class\": \"table-header-cell\",\n                        style: \"text-align: center; font-size: 14px\"\n                    },\n                    subHeaderAttributes = {\n                        \"class\": \"table-header-cell\",\n                        style: \"text-align: right; font-size: 14px\"\n                    },\n                    attributes = {\n                        \"class\": \"table-cell\",\n                        style: \"text-align: right; font-size: 14px\"\n                    };\n\n                /* Columns */\n\t\t\t\tlet columns = [\n\t\t\t\t\t{ \n\t\t\t\t\t\tfield: this.fieldName, \n\t\t\t\t\t\ttitle: i18n.t('account'),\n                        template: this.nameTmpl,\n\t\t\t\t\t\tlocked: true,\n\t\t\t\t\t\twidth:300\n\t\t\t\t\t},\n                    /* Selected Month */\n                    { \n\t\t\t\t\t\ttitle: kendo.toString(new Date(this.monthOf), 'MMMM yyyy'),\n                        headerAttributes : headerAttributes,\n                        columns: [\n                            { \n                                field: \"budget_month\",\n                                title: i18n.t('budget'),\n                                format: \"{0:n}\",\n                                width:150,\n                                headerAttributes: subHeaderAttributes,\n                                attributes: attributes,\n                            },\n                            { \n                                field: \"actual_month\",\n                                title: i18n.t('actual'),\n                                format: \"{0:n}\",\n                                width:150,\n                                headerAttributes: subHeaderAttributes,\n                                attributes: attributes,\n                            },\n                            { \n                                field: \"month_percentage\",\n                                title: \"%\",\n                                format: \"{0:p}\",\n                                width:150,\n                                headerAttributes: subHeaderAttributes,\n                                attributes: attributes,\n                            }\n                        ]\n\t\t\t\t\t},\n                    /* YTD(up to selected month) */\n                    { \n\t\t\t\t\t\ttitle: i18n.t('ytd_up_to_selected_month'),\n                        headerAttributes : headerAttributes,\n                        columns: [\n                            { \n                                field: \"budget_ytd\",\n                                title: i18n.t('budget'),\n                                format: \"{0:n}\",\n                                width:150,\n                                headerAttributes: subHeaderAttributes,\n                                attributes: attributes,\n                            },\n                            { \n                                field: \"actual_ytd\",\n                                title: i18n.t('actual'),\n                                format: \"{0:n}\",\n                                width:150,\n                                headerAttributes: subHeaderAttributes,\n                                attributes: attributes,\n                            },\n                            { \n                                field: \"ytd_percentage\",\n                                title: \"%\",\n                                format: \"{0:p}\",\n                                width:150,\n                                headerAttributes: subHeaderAttributes,\n                                attributes: attributes,\n                            }\n                        ]\n\t\t\t\t\t},\n                    /* Whole Year */\n                    { \n\t\t\t\t\t\ttitle: i18n.t('whole_year'),\n                        headerAttributes : headerAttributes,\n                        columns: [\n                            { \n                                field: \"budget_whole\",\n                                title: i18n.t('budget'),\n                                format: \"{0:n}\",\n                                width:150,\n                                headerAttributes: subHeaderAttributes,\n                                attributes: attributes,\n                            },\n                            { \n                                field: \"actual_whole\",\n                                title: i18n.t('actual'),\n                                format: \"{0:n}\",\n                                width:150,\n                                headerAttributes: subHeaderAttributes,\n                                attributes: attributes,\n                            },\n                            { \n                                field: \"whole_percentage\",\n                                title: \"%\",\n                                format: \"{0:p}\",\n                                width:150,\n                                headerAttributes: subHeaderAttributes,\n                                attributes: attributes,\n                            }\n                        ]\n\t\t\t\t\t},\n                ]\n\n                /* Set Columns */\n                this.columns = columns;\n\t\t\t},\n\t\t\t// On Reporint Language Changes\n\t\t\tonReportingLanguageChanges () {\n                this.fieldName = \"name\";\n                if(this.reportingLanguage === \"local\"){\n                    this.fieldName = \"local_name\";\n                }\n\n                // Generate column with new language\n                this.generateColumn();\n\t\t\t},\n            /* Templates */\n            nameTmpl(dataItem){\n                /* Name in language */\n                let name = dataItem.name;\n                if(this.reportingLanguage === \"local\"){\n                    name = dataItem.local_name;\n                }\n\n                /* Define result */\n                let result = `<span>${dataItem.number} - ${name}</span>`;\n\n                /* Top Level */\n                if(dataItem.parentId === null){\n                    result = `<span style='font-weight: bolder;'>${name}</span>`;\n                }\n\n                /* Parent Level */\n                if(dataItem.hasChildren && dataItem.number.length > 3){\n                    result = `<span style='font-weight: bolder;'>${dataItem.number} - ${name}</span>`;\n                }\n\n                return result;\n            },\n        },\n        computed: mapState({\n            accounts: state => state.accounting.accounts\n        }),\n        mounted () {\n\t\t},\n    };\n</script>\n\n<style scoped>\n    .theme--light.v-data-table {\n        background-color: transparent !important;\n    }\n\n    .v-data-table > .v-data-table__wrapper > table > tbody > tr > td {\n        height: 32px !important;\n        border-bottom: thin solid rgba(0, 0, 0, 0.12) !important;\n        border-right: thin solid rgba(0, 0, 0, 0.12) !important;\n    }\n    .v-data-table.simple1_table.theme--light,\n    .v-data-table > .v-data-table__wrapper > table > tbody > tr:first-child > td {\n        border-top: thin solid rgba(0, 0, 0, 0.12) !important;\n    }\n    .v-data-table.simple_table.theme--light{\n        border-left: thin solid rgba(0, 0, 0, 0.12) !important;\n        border-right: thin solid rgba(0, 0, 0, 0.12) !important;\n    }\n\n    .theme--light.v-data-table.simple1_table > .v-data-table__wrapper > table > thead > tr:last-child > th:last-child{\n        border-right: none !important;\n    }\n\n    .theme--light.v-data-table > .v-data-table__wrapper > table > tbody > tr:hover:not(.v-data-table__expanded__content):not(.v-data-table__empty-wrapper) {\n        background-color: transparent !important;\n    }\n\n    .border-bottom {\n        border-bottom: thin solid rgba(0, 0, 0, 0.12) !important;\n    }\n\n    .font-small {\n        font-size: 12px;\n        line-height: 15px;\n    }\n\n    .font-26 {\n        font-size: 26px !important;\n    }\n    .v-data-table.simple_table.theme--light{\n        border-top: thin solid rgba(0, 0, 0, 0.12) !important;\n    }\n    .theme--light.v-data-table > .v-data-table__wrapper > table > thead > tr:last-child > th{\n        border-bottom: none !important;\n        border-right: thin solid rgba(0, 0, 0, 0.12) !important;\n    }\n    .theme--light.v-data-table > .v-data-table__wrapper > table > thead > tr > th{\n        border-bottom: thin solid rgba(0, 0, 0, 0.12) !important;\n        border-right: thin solid rgba(0, 0, 0, 0.12) !important;\n    }\n    .theme--light.v-data-table > .v-data-table__wrapper > table > tbody > tr:not(:last-child) > td:last-child,\n    .theme--light.v-data-table > .v-data-table__wrapper > table > tbody > tr:not(:last-child) > th:last-child,\n    .theme--light.v-data-table > .v-data-table__wrapper > table > tbody > tr > td:last-child{\n        border-right: none !important;\n    }\n\n\n    .v-data-table.table_list > .v-data-table__wrapper > table > tbody > tr > td {\n        height: 32px !important;\n        border-bottom: thin solid rgba(0, 0, 0, 0.12) !important;\n        border-right: none !important;\n    }\n    .v-data-table.table_list.theme--light > .v-data-table__wrapper > table > tbody > tr:first-child > td{\n        border-top: none !important;\n    }\n\n    @media (max-width: 576px) {\n\n    }\n</style>"]}]}