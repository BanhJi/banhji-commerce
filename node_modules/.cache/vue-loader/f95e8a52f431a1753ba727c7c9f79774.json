{"remainingRequest":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/macos/Desktop/banhji-0.2/banhji-commerce/src/views/accounting/reports/budget_financial/BudgetSegment.vue?vue&type=style&index=0&id=34df3324&scoped=true&lang=css&","dependencies":[{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/src/views/accounting/reports/budget_financial/BudgetSegment.vue","mtime":1639468046390},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/@vue/cli-service/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLnRoZW1lLS1saWdodC52LWRhdGEtdGFibGUgewogIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50ICFpbXBvcnRhbnQ7Cn0KCi52LWRhdGEtdGFibGUgPiAudi1kYXRhLXRhYmxlX193cmFwcGVyID4gdGFibGUgPiB0Ym9keSA+IHRyID4gdGQgewogIGhlaWdodDogMzJweCAhaW1wb3J0YW50OwogIGJvcmRlci1ib3R0b206IHRoaW4gc29saWQgcmdiYSgwLCAwLCAwLCAwLjEyKSAhaW1wb3J0YW50OwogIGJvcmRlci1yaWdodDogdGhpbiBzb2xpZCByZ2JhKDAsIDAsIDAsIDAuMTIpICFpbXBvcnRhbnQ7Cn0KLnYtZGF0YS10YWJsZS5zaW1wbGUxX3RhYmxlLnRoZW1lLS1saWdodCwKLnYtZGF0YS10YWJsZSA+IC52LWRhdGEtdGFibGVfX3dyYXBwZXIgPiB0YWJsZSA+IHRib2R5ID4gdHI6Zmlyc3QtY2hpbGQgPiB0ZCB7CiAgYm9yZGVyLXRvcDogdGhpbiBzb2xpZCByZ2JhKDAsIDAsIDAsIDAuMTIpICFpbXBvcnRhbnQ7Cn0KLnYtZGF0YS10YWJsZS5zaW1wbGVfdGFibGUudGhlbWUtLWxpZ2h0IHsKICBib3JkZXItbGVmdDogdGhpbiBzb2xpZCByZ2JhKDAsIDAsIDAsIDAuMTIpICFpbXBvcnRhbnQ7CiAgYm9yZGVyLXJpZ2h0OiB0aGluIHNvbGlkIHJnYmEoMCwgMCwgMCwgMC4xMikgIWltcG9ydGFudDsKfQoKLnRoZW1lLS1saWdodC52LWRhdGEtdGFibGUuc2ltcGxlMV90YWJsZQogID4gLnYtZGF0YS10YWJsZV9fd3JhcHBlcgogID4gdGFibGUKICA+IHRoZWFkCiAgPiB0cjpsYXN0LWNoaWxkCiAgPiB0aDpsYXN0LWNoaWxkIHsKICBib3JkZXItcmlnaHQ6IG5vbmUgIWltcG9ydGFudDsKfQoKLnRoZW1lLS1saWdodC52LWRhdGEtdGFibGUKICA+IC52LWRhdGEtdGFibGVfX3dyYXBwZXIKICA+IHRhYmxlCiAgPiB0Ym9keQogID4gdHI6aG92ZXI6bm90KC52LWRhdGEtdGFibGVfX2V4cGFuZGVkX19jb250ZW50KTpub3QoLnYtZGF0YS10YWJsZV9fZW1wdHktd3JhcHBlcikgewogIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50ICFpbXBvcnRhbnQ7Cn0KCi5ib3JkZXItYm90dG9tIHsKICBib3JkZXItYm90dG9tOiB0aGluIHNvbGlkIHJnYmEoMCwgMCwgMCwgMC4xMikgIWltcG9ydGFudDsKfQoKLmZvbnQtc21hbGwgewogIGZvbnQtc2l6ZTogMTJweDsKICBsaW5lLWhlaWdodDogMTVweDsKfQoKLmZvbnQtMjYgewogIGZvbnQtc2l6ZTogMjZweCAhaW1wb3J0YW50Owp9Ci52LWRhdGEtdGFibGUuc2ltcGxlX3RhYmxlLnRoZW1lLS1saWdodCB7CiAgYm9yZGVyLXRvcDogdGhpbiBzb2xpZCByZ2JhKDAsIDAsIDAsIDAuMTIpICFpbXBvcnRhbnQ7Cn0KLnRoZW1lLS1saWdodC52LWRhdGEtdGFibGUKICA+IC52LWRhdGEtdGFibGVfX3dyYXBwZXIKICA+IHRhYmxlCiAgPiB0aGVhZAogID4gdHI6bGFzdC1jaGlsZAogID4gdGggewogIGJvcmRlci1ib3R0b206IG5vbmUgIWltcG9ydGFudDsKICBib3JkZXItcmlnaHQ6IHRoaW4gc29saWQgcmdiYSgwLCAwLCAwLCAwLjEyKSAhaW1wb3J0YW50Owp9Ci50aGVtZS0tbGlnaHQudi1kYXRhLXRhYmxlID4gLnYtZGF0YS10YWJsZV9fd3JhcHBlciA+IHRhYmxlID4gdGhlYWQgPiB0ciA+IHRoIHsKICBib3JkZXItYm90dG9tOiB0aGluIHNvbGlkIHJnYmEoMCwgMCwgMCwgMC4xMikgIWltcG9ydGFudDsKICBib3JkZXItcmlnaHQ6IHRoaW4gc29saWQgcmdiYSgwLCAwLCAwLCAwLjEyKSAhaW1wb3J0YW50Owp9Ci50aGVtZS0tbGlnaHQudi1kYXRhLXRhYmxlCiAgPiAudi1kYXRhLXRhYmxlX193cmFwcGVyCiAgPiB0YWJsZQogID4gdGJvZHkKICA+IHRyOm5vdCg6bGFzdC1jaGlsZCkKICA+IHRkOmxhc3QtY2hpbGQsCi50aGVtZS0tbGlnaHQudi1kYXRhLXRhYmxlCiAgPiAudi1kYXRhLXRhYmxlX193cmFwcGVyCiAgPiB0YWJsZQogID4gdGJvZHkKICA+IHRyOm5vdCg6bGFzdC1jaGlsZCkKICA+IHRoOmxhc3QtY2hpbGQsCi50aGVtZS0tbGlnaHQudi1kYXRhLXRhYmxlCiAgPiAudi1kYXRhLXRhYmxlX193cmFwcGVyCiAgPiB0YWJsZQogID4gdGJvZHkKICA+IHRyCiAgPiB0ZDpsYXN0LWNoaWxkIHsKICBib3JkZXItcmlnaHQ6IG5vbmUgIWltcG9ydGFudDsKfQoKLnYtZGF0YS10YWJsZS50YWJsZV9saXN0ID4gLnYtZGF0YS10YWJsZV9fd3JhcHBlciA+IHRhYmxlID4gdGJvZHkgPiB0ciA+IHRkIHsKICBoZWlnaHQ6IDMycHggIWltcG9ydGFudDsKICBib3JkZXItYm90dG9tOiB0aGluIHNvbGlkIHJnYmEoMCwgMCwgMCwgMC4xMikgIWltcG9ydGFudDsKICBib3JkZXItcmlnaHQ6IG5vbmUgIWltcG9ydGFudDsKfQoudi1kYXRhLXRhYmxlLnRhYmxlX2xpc3QudGhlbWUtLWxpZ2h0CiAgPiAudi1kYXRhLXRhYmxlX193cmFwcGVyCiAgPiB0YWJsZQogID4gdGJvZHkKICA+IHRyOmZpcnN0LWNoaWxkCiAgPiB0ZCB7CiAgYm9yZGVyLXRvcDogbm9uZSAhaW1wb3J0YW50Owp9CgpAbWVkaWEgKG1heC13aWR0aDogNTc2cHgpIHsKfQo="},{"version":3,"sources":["BudgetSegment.vue"],"names":[],"mappingswBA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA","file":"BudgetSegment.vue","sourceRoot":"src/views/accounting/reports/budget_financial","sourcesContent":["<template>\n  <v-row>\n\t\t<v-col sm=\"12\" cols=\"12\" :class=\" appType != 'npo' &&  appType != 'Public Sectors' ? 'grayBg px-6' : '' \" >\n\t\t\t<v-card color=\"white\" :class=\" appType != 'npo' &&  appType != 'Public Sectors' ? 'pa-3 no_border' : '' \"  elevation=\"0\">\n        <!-- Search -->\n        <v-row class=\"mt-0\">\n          <v-col sm=\"3\" cols=\"12\" class=\"py-0 pt-6\">\n            <app-fiscal-date-dropdownlist\n              :initFiscalDate=\"fiscalDate\"\n              @emitFiscalDate=\"fiscalDate = $event\"\n              @onChanged=\"onFiscalDateChanges\"\n            />\n          </v-col>\n          <v-col sm=\"3\" cols=\"12\" class=\"py-0 pt-6\">\n            <app-month-of-picker\n              :initMonthOf=\"monthOf\"\n              @emitMonthOf=\"monthOf = $event\"\n              @onChanged=\"onMonthOfChanges\"\n              :initMin=\"minMonth\"\n              :initMax=\"maxMonth\"\n            />\n          </v-col>\n          <v-col sm=\"3\" cols=\"12\" class=\"py-0 pt-6\">\n            <v-select\n              class=\"mt-1\"\n              :disabled=\"monthOf === ''\"\n              placeholder=\"Select Budget\"\n              @change=\"onChangeBudget\"\n              v-model=\"budget\"\n              :items=\"budgetList\"\n              item-text=\"name\"\n              item-value=\"uuid\"\n              return-object\n              clearable\n              outlined\n            />\n          </v-col>\n          <v-col sm=\"3\" cols=\"12\" class=\"py-0\">\n            <!-- Reporting Language -->\n            <label class=\"mb-1\">{{ $t(\"language\") }}:</label>\n            <app-reporting-language\n              :initLanguage=\"reportingLanguage\"\n              @emitLanguage=\"reportingLanguage = $event\"\n            />\n          </v-col>\n        </v-row>\n\n        <!-- Summary -->\n        <v-row>\n          <v-col class=\"pt-0\" sm=\"6\" cols=\"12\">\n            <template>\n              <v-simple-table class=\"table_list nomal_table\">\n                <template>\n                  <tbody>\n                    <tr>\n                      <td style=\"width: 45%\" class=\"\">\n                        {{ $t(\"budget_name\") }}\n                      </td>\n                      <td class=\"\">{{ budget.name }}</td>\n                    </tr>\n                    <tr>\n                      <td class=\"\">{{ $t(\"segment\") }}</td>\n                      <td class=\"\" v-if=\"budget.segment\">\n                        {{ budget.segment.name }}\n                      </td>\n                    </tr>\n                    <tr>\n                      <td class=\"\">{{ $t(\"fiscal_year\") }}</td>\n                      <td class=\"\" v-if=\"budget.fiscal_year\">\n                        {{\n                          Helper.formatFiscalDate(budget.fiscal_year.start_date)\n                        }}\n                      </td>\n                    </tr>\n                    <tr>\n                      <td class=\"\">{{ $t(\"used_for_consolidation\") }}</td>\n                      <td class=\"\">\n                        {{ budget.use_consolidation === 1 ? \"Yes\" : \"No\" }}\n                      </td>\n                    </tr>\n                  </tbody>\n                </template>\n              </v-simple-table>\n            </template>\n          </v-col>\n          <v-col class=\"pt-0\" sm=\"6\" cols=\"12\">\n            <template>\n              <v-simple-table class=\"table_list nomal_table\">\n                <template>\n                  <tbody>\n                    <tr>\n                      <td class=\"\">{{ $t(\"created_on\") }}</td>\n                      <!-- <td class=\"\">{{ budget.created_date }}</td> by rothny -->\n                      <td class=\"\" v-if=\"budget.created_date\">\n                        {{ Helper.dateFormat(budget.created_date) }}\n                      </td>\n                    </tr>\n                    <tr>\n                      <td class=\"\">{{ $t(\"last_edited_on\") }}</td>\n                      <td class=\"\">{{ budget.modified_date }}</td>\n                    </tr>\n                    <tr>\n                      <td class=\"\">{{ $t(\"last_edited_by\") }}</td>\n                      <td class=\"\">\n                        {{\n                          budget.modified_by.first_name === \"\"\n                            ? budget.created_by.first_name +\n                              \" \" +\n                              budget.created_by.last_name\n                            : budget.modified_by.first_name +\n                              \" \" +\n                              budget.modified_by.last_name\n                        }}\n                      </td>\n                    </tr>\n                  </tbody>\n                </template>\n              </v-simple-table>\n            </template>\n          </v-col>\n        </v-row>\n\n        <!-- Grid -->\n        <v-row>\n          <v-col sm=\"12\" cols=\"12\" class=\"pt-1\">\n            <template>\n              <kendo-datasource\n                ref=\"statementPLDS\"\n                :data=\"statementPLList\"\n                :schema=\"schemaDefinition\"\n                :sort=\"sortDefinition\"\n                :group=\"groupDefinition\"\n                :aggregate=\"aggregateDefinition\"\n              />\n\n              <kendo-grid\n                id=\"incomeStatementGrid\"\n                class=\"custom_grid\"\n                :data-source-ref=\"'statementPLDS'\"\n                :dataBound=\"dataBound\"\n                :sortable=\"true\"\n                :column-menu=\"false\"\n                :reorderable=\"true\"\n                :resizable=\"true\"\n                :noRecords=\"true\"\n                :groupable=\"groupable\"\n                :columns=\"columns\"\n              />\n\n              <LoadingMe\n                type=\"loading\"\n                :isLoading=\"showLoading\"\n                :myLoading=\"true\"\n                :fullPage=\"false\"\n              />\n            </template>\n          </v-col>\n        </v-row>\n      </v-card>\n    </v-col>\n  </v-row>\n</template>\n\n<script>\nimport kendo from \"@progress/kendo-ui\";\nimport { i18n } from \"@/i18n\";\nimport Helper from \"@/helper.js\";\n/* Models */\nimport SegmentModel from \"@/scripts/model/Segment.js\";\nimport BudgetModel from \"@/scripts/model/Budget.js\";\nimport AccountModel from \"@/scripts/model/Account.js\";\nimport { dataStore } from \"@/observable/store\";\n\nconst incomeStatementHandler = require(\"@/scripts/handler/accounting/incomeStatementHandler\");\nconst OrderNumberPL = require(\"@/scripts/default_setup/OrderNumberPL.js\");\nconst NumberInWord = require(\"@/scripts/default_setup/NumberInWord.js\");\n\nexport default {\n  components: {\n    LoadingMe: () => import(\"@/components/Loading\"),\n    \"app-fiscal-date-dropdownlist\": () =>\n      import(\"@/components/kendo_templates/FiscalDateDropDownList\"),\n    \"app-month-of-picker\": () =>\n      import(\"@/components/kendo_templates/MonthOfPicker\"),\n    \"app-reporting-language\": () =>\n      import(\"@/components/kendo_templates/ReportingLanguageDropDownList\"),\n  },\n  data: () => ({\n    monthOf: \"\",\n    budget: new BudgetModel(),\n    budgetList: [],\n    incomeStatements: [],\n    statementPLList: [],\n    fiscalDate: null,\n    fiscalMonths: [],\n    minMonth: \"\",\n    maxMonth: \"\",\n    Helper: Helper,\n    columns: [],\n    sortDefinition: { field: \"number\", dir: \"asc\" },\n    groupable: {\n      enabled: false,\n      showFooter: true,\n    },\n    groupDefinition: [],\n    aggregateDefinition: [\n      { field: \"budget_month\", aggregate: \"sum\" },\n      { field: \"budget_ytd\", aggregate: \"sum\" },\n      { field: \"budget_whole\", aggregate: \"sum\" },\n      { field: \"actual_month\", aggregate: \"sum\" },\n      { field: \"actual_ytd\", aggregate: \"sum\" },\n      { field: \"actual_whole\", aggregate: \"sum\" },\n    ],\n    schemaDefinition: {\n      model: { id: \"uuid\" },\n    },\n    // Reporting Language\n    reportingLanguage: \"english\",\n    fieldName: \"name\",\n    fieldType: \"type\",\n    totalWord: \"Total\",\n    // LoadingMe\n    showLoading: false,\n  }),\n  methods: {\n    onFiscalDateChanges() {\n      this.monthOf = \"\";\n      this.budget = new BudgetModel();\n      this.fiscalMonths = [];\n\n      if (this.fiscalDate !== null) {\n        /* Set Month Range */\n        this.minMonth = this.fiscalDate.start_date;\n        this.maxMonth = this.fiscalDate.end_date;\n\n        /* Generate Months */\n        this.fiscalMonths = Helper.generateFiscalMonths(\n          this.fiscalDate.start_date,\n          this.fiscalDate.end_date,\n          \"12\"\n        );\n\n        /* Load Budget */\n        this.loadBudget();\n      }\n    },\n    onMonthOfChanges() {\n      if (this.incomeStatements.length > 0) {\n        /* Bind Data */\n        this.bindData();\n      }\n    },\n    async loadBudget() {\n      let budgets = await this.$store.dispatch(\"budgets/getList\"),\n        segments = await this.$store.dispatch(\"segments/getList\");\n\n      let budgetList = [];\n      budgets.forEach((value) => {\n        if (\n          value.fiscal_year.uuid === this.fiscalDate.uuid &&\n          value.segment_uuid !== \"\"\n        ) {\n          let budget = new BudgetModel(value);\n          budget.segment = new SegmentModel(\n            segments.find((i) => i.id === value.segment_uuid)\n          );\n          budgetList.push(budget);\n        }\n      });\n      this.budgetList = budgetList;\n    },\n    /* On Budget Changes */\n    onChangeBudget() {\n      this.search();\n    },\n    /* Search */\n    search() {\n      if (this.budget.uuid !== \"\") {\n        let sdate =\n            kendo.toString(new Date(this.fiscalDate.start_date), \"yyyy-MM-dd\") +\n            \"T00:00:00.000Z\",\n          edate =\n            kendo.toString(new Date(this.fiscalDate.end_date), \"yyyy-MM-dd\") +\n            \"T23:59:59.999Z\";\n\n        // Empty statementPLDS\n        let ds = this.$refs.statementPLDS.kendoWidget();\n        ds.data([]);\n\n        // Query Income Statement\n        this.showLoading = true;\n        incomeStatementHandler\n          .getIncomeStatement({\n            params: {\n              start_date: sdate,\n              end_date: edate,\n              group_by: \"12\",\n              segment_uuid: this.budget.segment_uuid,\n            },\n          })\n          .then((res) => {\n            if (res.data) {\n              this.incomeStatements = res.data;\n              this.bindData();\n            }\n          })\n          .finally(() => {\n            this.showLoading = false;\n          });\n      } else {\n        /* Alert Warning */\n        this.$snotify.warning(i18n.t(\"please_select_budget\"));\n      }\n    },\n    async bindData() {\n      let entries = [];\n      let Entry = kendo.data.Model.define({\n        id: \"uuid\", // the identifier of the model\n        fields: {\n          /* Budget */\n          budget_month: { type: \"number\", defaultValue: 0 },\n          budget_ytd: { type: \"number\", defaultValue: 0 },\n          budget_whole: { type: \"number\", defaultValue: 0 },\n\n          /* Actual */\n          actual_month: { type: \"number\", defaultValue: 0 },\n          actual_ytd: { type: \"number\", defaultValue: 0 },\n          actual_whole: { type: \"number\", defaultValue: 0 },\n\n          /* Percentage */\n          month_percentage: { type: \"number\", defaultValue: 0 },\n          ytd_percentage: { type: \"number\", defaultValue: 0 },\n          whole_percentage: { type: \"number\", defaultValue: 0 },\n\n          /* Account Information */\n          name: { type: \"string\", defaultValue: \"\" },\n          local_name: { type: \"string\", defaultValue: \"\" },\n          type: { type: \"string\", defaultValue: \"\" },\n          type_local_name: { type: \"string\", defaultValue: \"\" },\n          account_type_number: { type: \"number\", defaultValue: 0 },\n\n          /* Other */\n          order: { type: \"number\", defaultValue: 0 },\n        },\n      });\n\n      // Load Account List\n      let accounts = await this.$store.dispatch(\"accounting/getAccounts\");\n\n      /* Find index of selected month */\n      let monthOfFormated = kendo.toString(new Date(this.monthOf), \"MMM yyyy\"),\n        budgetMonthFormated = kendo.toString(new Date(this.monthOf), \"yyyy-MM\");\n\n      let monthOfIndex = this.fiscalMonths.indexOf(monthOfFormated);\n\n      /* Gathering from budget lines */\n      this.budget.lines.forEach((value) => {\n        let entry = new Entry(),\n          nature = 1; /* Default Naure is Dr = 1 */\n\n        /* Set Account Information */\n        let account = new AccountModel(\n          accounts.find((item) => item.uuid === value.account_uuid)\n        );\n        entry.uuid = account.uuid;\n        entry.name = account.name;\n        entry.local_name = account.local_name;\n        entry.type = account.account_type.name;\n        entry.type_local_name = account.account_type.local_name;\n        entry.account_type_number = account.account_type.number;\n\n        /* Reverse Nature */\n        if (account.account_type.nature.toLowerCase() === \"cr\") {\n          nature = -1;\n        }\n\n        /* Order */\n        if (account.account_type.number === OrderNumberPL.OtherRevenue.number) {\n          //Other Revenue\n          entry.order = OrderNumberPL.OtherRevenue.order;\n        } else {\n          entry.order = account.account_type.number;\n        }\n\n        /* BUDGET */\n        /* Budget Whole */\n        entry.budget_whole = value.amount * nature;\n\n        value.monthly_amount.forEach((mline) => {\n          /* Budget Month */\n          if (mline.month_of === budgetMonthFormated) {\n            entry.budget_month = mline.amount * nature;\n          }\n\n          /* Budget YTD */\n          if (\n            kendo.toString(new Date(mline.month_of), \"yyyy-MM-dd\") <=\n            kendo.toString(new Date(this.monthOf), \"yyyy-MM-dd\")\n          ) {\n            entry.budget_ytd += mline.amount * nature;\n          }\n        });\n\n        /* ACTUAL */\n        this.incomeStatements.forEach((plline) => {\n          if (plline.accountUUID === value.account_uuid) {\n            /* Actual Month */\n            let propertyMonth = NumberInWord[monthOfIndex]; // ['zero','one','two',...]\n            entry.actual_month = plline[propertyMonth]; // plline['zero']\n\n            for (let i = 0; i < 12; i++) {\n              let property = NumberInWord[i];\n\n              /* Actual YTD */\n              if (i <= monthOfIndex) {\n                entry.actual_ytd += plline[property];\n              }\n\n              /* Actual Whole */\n              entry.actual_whole += plline[property];\n            }\n          }\n        });\n\n        /* Percentage = Actual / Budget */\n        if (entry.budget_month !== 0) {\n          entry.month_percentage = entry.actual_month / entry.budget_month;\n        }\n        if (entry.budget_ytd !== 0) {\n          entry.ytd_percentage = entry.actual_ytd / entry.budget_ytd;\n        }\n        if (entry.budget_whole !== 0) {\n          entry.whole_percentage = entry.actual_whole / entry.budget_whole;\n        }\n\n        /* Add entry */\n        entries.push(entry);\n      });\n\n      /* Gathering from budget estimations */\n      this.budget.budget_estimations.forEach((value) => {\n        let entry = new Entry();\n\n        /* Set Account Information */\n        entry.uuid = value.accountUUID;\n        entry.name = value.name;\n        entry.local_name = value.local_name;\n        entry.type = value.type;\n        entry.type_local_name = value.type_local_name;\n        entry.account_type_number = value.account_type_number;\n\n        // Order\n        if (value.account_type_number == OrderNumberPL.GrossProfit.number) {\n          // Gross Profit\n          entry.order = OrderNumberPL.GrossProfit.order;\n        } else if (\n          value.account_type_number == OrderNumberPL.OtherRevenue.number\n        ) {\n          // Other Revenue\n          entry.order = OrderNumberPL.OtherRevenue.order;\n        } else if (\n          value.account_type_number == OrderNumberPL.OperatingExpense.number\n        ) {\n          // Operating Expense\n          entry.order = OrderNumberPL.OperatingExpense.order;\n        } else if (\n          value.account_type_number ==\n          OrderNumberPL.OperatingIncomeEBITDA.number\n        ) {\n          // Operating Income (EBITDA)\n          entry.order = OrderNumberPL.OperatingIncomeEBITDA.order;\n        } else if (\n          value.account_type_number ==\n          OrderNumberPL.EarningBeforeInterestAndTaxEBIT.number\n        ) {\n          // Earning Before Interest And Tax(EBIT)\n          entry.order = OrderNumberPL.EarningBeforeInterestAndTaxEBIT.order;\n        } else if (\n          value.account_type_number == OrderNumberPL.ProfitBeforeTax.number\n        ) {\n          // Profit Before Tax\n          entry.order = OrderNumberPL.ProfitBeforeTax.order;\n        } else if (\n          value.account_type_number == OrderNumberPL.ProfitForThePeriod.number\n        ) {\n          // Profit For The Period\n          entry.order = OrderNumberPL.ProfitForThePeriod.order;\n        } else {\n          entry.order = value.account_type_number;\n        }\n\n        /* BUDGET */\n\n        /* Budget Month */\n        let propertyBudgetMonth = NumberInWord[monthOfIndex]; // ['zero','one','two',...]\n        entry.budget_month = value[propertyBudgetMonth]; // value['zero']\n\n        for (let i = 0; i < 12; i++) {\n          let property = NumberInWord[i];\n\n          /* Budget YTD */\n          if (i <= monthOfIndex) {\n            entry.budget_ytd += value[property];\n          }\n\n          /* Budget Whole */\n          entry.budget_whole += value[property];\n        }\n\n        /* ACTUAL */\n        this.incomeStatements.forEach((plline) => {\n          if (plline.account_type_number === value.account_type_number) {\n            /* Actual Month */\n            let propertyActualMonth = NumberInWord[monthOfIndex]; // ['zero','one','two',...]\n            entry.actual_month = plline[propertyActualMonth]; // plline['zero']\n\n            for (let i = 0; i < 12; i++) {\n              let property = NumberInWord[i];\n\n              /* Actual YTD */\n              if (i <= monthOfIndex) {\n                entry.actual_ytd += plline[property];\n              }\n\n              /* Actual Whole */\n              entry.actual_whole += plline[property];\n            }\n          }\n        });\n\n        /* Percentage = Actual / Budget */\n        if (entry.budget_month !== 0) {\n          entry.month_percentage = entry.actual_month / entry.budget_month;\n        }\n        if (entry.budget_ytd !== 0) {\n          entry.ytd_percentage = entry.actual_ytd / entry.budget_ytd;\n        }\n        if (entry.budget_whole !== 0) {\n          entry.whole_percentage = entry.actual_whole / entry.budget_whole;\n        }\n\n        /* Add entry */\n        entries.push(entry);\n      });\n\n      /* BIND STATMENT */\n      this.statementPLList = entries;\n      this.generateColumn();\n    },\n    /* Databound */\n    dataBound(e) {\n      let grid = e.sender;\n\n      grid.dataSource.data().forEach((value) => {\n        if (value.account_type_number >= 100) {\n          let row = grid.tbody\n            .find(\"tr[data-uid='\" + value.uid + \"']\")\n            .prev(\".k-grouping-row\");\n          grid.collapseGroup(row);\n        }\n      });\n    },\n    // Generate Columns\n    generateColumn() {\n      let headerAttributes = {\n          class: \"table-header-cell\",\n          style: \"text-align: center; font-size: 14px\",\n        },\n        subHeaderAttributes = {\n          class: \"table-header-cell\",\n          style: \"text-align: right; font-size: 14px\",\n        },\n        attributes = {\n          class: \"table-cell\",\n          style: \"text-align: right; font-size: 14px\",\n        };\n\n      /* Columns */\n      let columns = [\n        {\n          field: this.fieldName,\n          title: i18n.t(\"account\"),\n          groupFooterTemplate: this.totalWord + \" #=value#\",\n          locked: true,\n          width: 300,\n        },\n        {\n          field: this.fieldType,\n          title: \"TYPE\",\n          hidden: true,\n          groupHeaderTemplate: this.typeGroupHeaderTmpl,\n          width: 300,\n        },\n        /* Selected Month */\n        {\n          title: kendo.toString(new Date(this.monthOf), \"MMMM yyyy\"),\n          headerAttributes: headerAttributes,\n          columns: [\n            {\n              field: \"budget_month\",\n              title: i18n.t(\"budget\"),\n              format: \"{0:n}\",\n              aggregates: \"['sum']\",\n              groupFooterTemplate:\n                \"<div class='text-right text-bold text-black'>#=kendo.toString(sum, 'n')#</div>\",\n              width: 150,\n              headerAttributes: subHeaderAttributes,\n              attributes: attributes,\n            },\n            {\n              field: \"actual_month\",\n              title: i18n.t(\"actual\"),\n              format: \"{0:n}\",\n              aggregates: \"['sum']\",\n              groupFooterTemplate:\n                \"<div class='text-right text-bold text-black'>#=kendo.toString(sum, 'n')#</div>\",\n              width: 150,\n              headerAttributes: subHeaderAttributes,\n              attributes: attributes,\n            },\n            {\n              field: \"month_percentage\",\n              title: \"%\",\n              format: \"{0:p}\",\n              width: 150,\n              headerAttributes: subHeaderAttributes,\n              attributes: attributes,\n            },\n          ],\n        },\n        /* YTD(up to selected month) */\n        {\n          title: i18n.t(\"ytd_up_to_selected_month\"),\n          headerAttributes: headerAttributes,\n          columns: [\n            {\n              field: \"budget_ytd\",\n              title: i18n.t(\"budget\"),\n              format: \"{0:n}\",\n              aggregates: \"['sum']\",\n              groupFooterTemplate:\n                \"<div class='text-right text-bold text-black'>#=kendo.toString(sum, 'n')#</div>\",\n              width: 150,\n              headerAttributes: subHeaderAttributes,\n              attributes: attributes,\n            },\n            {\n              field: \"actual_ytd\",\n              title: i18n.t(\"actual\"),\n              format: \"{0:n}\",\n              aggregates: \"['sum']\",\n              groupFooterTemplate:\n                \"<div class='text-right text-bold text-black'>#=kendo.toString(sum, 'n')#</div>\",\n              width: 150,\n              headerAttributes: subHeaderAttributes,\n              attributes: attributes,\n            },\n            {\n              field: \"ytd_percentage\",\n              title: \"%\",\n              format: \"{0:p}\",\n              width: 150,\n              headerAttributes: subHeaderAttributes,\n              attributes: attributes,\n            },\n          ],\n        },\n        /* Whole Year */\n        {\n          title: i18n.t(\"whole_year\"),\n          headerAttributes: headerAttributes,\n          columns: [\n            {\n              field: \"budget_whole\",\n              title: i18n.t(\"budget\"),\n              format: \"{0:n}\",\n              aggregates: \"['sum']\",\n              groupFooterTemplate:\n                \"<div class='text-right text-bold text-black'>#=kendo.toString(sum, 'n')#</div>\",\n              width: 150,\n              headerAttributes: subHeaderAttributes,\n              attributes: attributes,\n            },\n            {\n              field: \"actual_whole\",\n              title: i18n.t(\"actual\"),\n              format: \"{0:n}\",\n              aggregates: \"['sum']\",\n              groupFooterTemplate:\n                \"<div class='text-right text-bold text-black'>#=kendo.toString(sum, 'n')#</div>\",\n              width: 150,\n              headerAttributes: subHeaderAttributes,\n              attributes: attributes,\n            },\n            {\n              field: \"whole_percentage\",\n              title: \"%\",\n              format: \"{0:p}\",\n              width: 150,\n              headerAttributes: subHeaderAttributes,\n              attributes: attributes,\n            },\n          ],\n        },\n      ];\n\n      /* Set Columns */\n      this.columns = columns;\n    },\n    // On Reporint Language Changes\n    onReportingLanguageChanges() {\n      this.fieldName = \"name\";\n      this.fieldType = \"type\";\n      this.totalWord = \"Total\";\n      if (this.reportingLanguage === \"local\") {\n        this.fieldName = \"local_name\";\n        this.fieldType = \"type_local_name\";\n        this.totalWord = \"សរុប\";\n      }\n\n      // Generate Group By\n      this.generateGroupBy();\n\n      // Generate column with new language\n      this.generateColumn();\n    },\n    /* Templates */\n    typeGroupHeaderTmpl(dataItem) {\n      let name = dataItem.items[0].type;\n\n      if (this.reportingLanguage === \"local\") {\n        name = dataItem.items[0].type_local_name;\n      }\n\n      return \"<span class='text-bold text-black'>\" + name + \"</span>\";\n    },\n    // Generate Group By\n    generateGroupBy() {\n      this.groupDefinition = {\n        field: this.fieldType,\n        aggregates: this.aggregateDefinition,\n        compare: function(a, b) {\n          if (a.items[0].order === b.items[0].order) {\n            return 0;\n          } else if (a.items[0].order > b.items[0].order) {\n            return 1;\n          } else {\n            return -1;\n          }\n        },\n      };\n    },\n  },\n  watch: {\n    budget() {\n      // Prevent null error\n      if (this.budget === null) {\n        this.budget = new BudgetModel();\n      }\n    },\n    reportingLanguage() {\n      this.onReportingLanguageChanges();\n    },\n  },\n  computed: {\n\t\tappType(){\n\t\t\treturn dataStore.productType;\n\t\t},\n\t},\n  mounted() {\n    // Generate Group By\n    this.generateGroupBy();\n\n    // Initial Grid Columns\n    // this.generateColumn();\n  },\n};\n</script>\n\n<style scoped>\n.theme--light.v-data-table {\n  background-color: transparent !important;\n}\n\n.v-data-table > .v-data-table__wrapper > table > tbody > tr > td {\n  height: 32px !important;\n  border-bottom: thin solid rgba(0, 0, 0, 0.12) !important;\n  border-right: thin solid rgba(0, 0, 0, 0.12) !important;\n}\n.v-data-table.simple1_table.theme--light,\n.v-data-table > .v-data-table__wrapper > table > tbody > tr:first-child > td {\n  border-top: thin solid rgba(0, 0, 0, 0.12) !important;\n}\n.v-data-table.simple_table.theme--light {\n  border-left: thin solid rgba(0, 0, 0, 0.12) !important;\n  border-right: thin solid rgba(0, 0, 0, 0.12) !important;\n}\n\n.theme--light.v-data-table.simple1_table\n  > .v-data-table__wrapper\n  > table\n  > thead\n  > tr:last-child\n  > th:last-child {\n  border-right: none !important;\n}\n\n.theme--light.v-data-table\n  > .v-data-table__wrapper\n  > table\n  > tbody\n  > tr:hover:not(.v-data-table__expanded__content):not(.v-data-table__empty-wrapper) {\n  background-color: transparent !important;\n}\n\n.border-bottom {\n  border-bottom: thin solid rgba(0, 0, 0, 0.12) !important;\n}\n\n.font-small {\n  font-size: 12px;\n  line-height: 15px;\n}\n\n.font-26 {\n  font-size: 26px !important;\n}\n.v-data-table.simple_table.theme--light {\n  border-top: thin solid rgba(0, 0, 0, 0.12) !important;\n}\n.theme--light.v-data-table\n  > .v-data-table__wrapper\n  > table\n  > thead\n  > tr:last-child\n  > th {\n  border-bottom: none !important;\n  border-right: thin solid rgba(0, 0, 0, 0.12) !important;\n}\n.theme--light.v-data-table > .v-data-table__wrapper > table > thead > tr > th {\n  border-bottom: thin solid rgba(0, 0, 0, 0.12) !important;\n  border-right: thin solid rgba(0, 0, 0, 0.12) !important;\n}\n.theme--light.v-data-table\n  > .v-data-table__wrapper\n  > table\n  > tbody\n  > tr:not(:last-child)\n  > td:last-child,\n.theme--light.v-data-table\n  > .v-data-table__wrapper\n  > table\n  > tbody\n  > tr:not(:last-child)\n  > th:last-child,\n.theme--light.v-data-table\n  > .v-data-table__wrapper\n  > table\n  > tbody\n  > tr\n  > td:last-child {\n  border-right: none !important;\n}\n\n.v-data-table.table_list > .v-data-table__wrapper > table > tbody > tr > td {\n  height: 32px !important;\n  border-bottom: thin solid rgba(0, 0, 0, 0.12) !important;\n  border-right: none !important;\n}\n.v-data-table.table_list.theme--light\n  > .v-data-table__wrapper\n  > table\n  > tbody\n  > tr:first-child\n  > td {\n  border-top: none !important;\n}\n\n@media (max-width: 576px) {\n}\n</style>\n"]}]}