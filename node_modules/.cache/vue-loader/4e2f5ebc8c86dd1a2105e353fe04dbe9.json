{"remainingRequest":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/src/views/customers/PaymentOption.vue?vue&type=style&index=0&id=785b2c17&scoped=true&lang=css&","dependencies":[{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/src/views/customers/PaymentOption.vue","mtime":1638499443190},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/@vue/cli-service/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLmRyb3Bkb3duLWhlYWRlciB7CiAgYm9yZGVyLXdpZHRoOiAwIDAgMXB4IDA7CiAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTsKfQoKLmRyb3Bkb3duLWhlYWRlciA+IHNwYW4gewogIGRpc3BsYXk6IGlubGluZS1ibG9jazsKICBwYWRkaW5nOiAxMHB4Owp9CgouZHJvcGRvd24taGVhZGVyID4gc3BhbjpmaXJzdC1jaGlsZCB7CiAgd2lkdGg6IDUwcHg7Cn0KCi5rLWxpc3QtY29udGFpbmVyID4gLmstZm9vdGVyIHsKICBwYWRkaW5nOiAxMHB4Owp9CgouZnVuY3Rpb25fY29udGVudCB7CiAgcGFkZGluZzogMCAyNXB4IDI1cHg7CiAgYm9yZGVyLWJvdHRvbTogMDsKICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmICFpbXBvcnRhbnQ7Cn0KCkBtZWRpYSAobWluLXdpZHRoOiAxMjY0cHgpIHsKICAuY29udGFpbmVyIHsKICAgIC8qIG1heC13aWR0aDogMTE4NXB4OyAqLwogICAgbWF4LXdpZHRoOiAxMDgwcHggIWltcG9ydGFudDsKICB9Cn0KCi5ncmF5QmcgewogIGJhY2tncm91bmQtY29sb3I6ICNGOEY4Rjk7Cn0KCkBtZWRpYSAobWF4LXdpZHRoOiA1NzZweCkgewogIC5tYi02IHsKICAgIG1hcmdpbi1ib3R0b206IDAgIWltcG9ydGFudDsKICB9Cn0KCi5zZWN0aW9uMiB7CiAgYm9yZGVyOiAxcHggc29saWQgI2Q2ZDdkODsKfQoKLmJvcmRlcl9ncmV5IHsKICBib3JkZXI6IDFweCBzb2xpZCAjZDZkN2Q4Owp9CgouYXR0YWNobWVudF90YWJsZSB7CiAgd2lkdGg6IDEwMCU7Cn0KCi5teV9yYWRpbyBbdHlwZT0icmFkaW8iXSArIGxhYmVsIHsKICBwb3NpdGlvbjogcmVsYXRpdmU7CiAgcGFkZGluZzogNnB4OwogIGdyaWQtdGVtcGxhdGUtY29sdW1uczogMTUlIDgwJSAhaW1wb3J0YW50OwogIGRpc3BsYXk6IGdyaWQ7Cn0KCi51cGxvYWRfYnRuIHsKICBwYWRkaW5nOiAxMHB4IDZweDsKICB0ZXh0LWFsaWduOiBjZW50ZXI7CiAgY29sb3I6IHdoaXRlOwogIG1hcmdpbi10b3A6IDE1cHg7CiAgbWFyZ2luLWJvdHRvbTogbm9uZSAhaW1wb3J0YW50OwogIGJvcmRlci1yYWRpdXM6IDIycHg7CiAgYmFja2dyb3VuZDogIzkyZDA1MDsKfQoKLnRoZW1lLS1saWdodC52LWRhdGEtdGFibGUgPiAudi1kYXRhLXRhYmxlX193cmFwcGVyID4gdGFibGUgPiB0Ym9keSA+IHRyOmhvdmVyOm5vdCgudi1kYXRhLXRhYmxlX19leHBhbmRlZF9fY29udGVudCk6bm90KC52LWRhdGEtdGFibGVfX2VtcHR5LXdyYXBwZXIpIHsKICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudCAhaW1wb3J0YW50Owp9Cg=="},{"version":3,"sources":["PaymentOption.vue"],"names":[],"mappingskiBA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA","file":"PaymentOption.vue","sourceRoot":"src/views/customers","sourcesContent":["<template>\n  <v-app>\n    <v-container>\n      <v-row>\n        <v-col cols=\"12\" sm=\"12\">\n          <v-card\n              outlined\n              dense\n              class=\"pa-4 no_border rounded-sm\"\n              color=\"white\">\n            <v-form ref=\"form\" v-model=\"valid\" lazy-validation>\n              <v-card outlined dense class=\"no_border\">\n                <h2 class=\"mb-0\">{{ $t(\"payment_option\") }}</h2>\n                <v-icon\n                    onclick=\"window.history.go(-1); return false;\"\n                    style=\"cursor: pointer; color: #333; font-size: 40px;\"\n                    class=\"float-right\">close\n                </v-icon>\n              </v-card>\n              <v-card outlined dense class=\"px-3 no_border\" color=\"grayBg\">\n                <v-row>\n                  <v-col sm=\"4\" cols=\"12\" class=\"pb-0\">\n                    <label class=\"label  mb-0 mt-1\" style=\"\">{{\n                        $t(\"code\")\n                      }}</label>\n                    <v-text-field\n                        class=\"mt-1\"\n                        tage=\"Number\"\n                        v-model=\"paymentOption.code\"\n                        :rules=\"[v => !!v || $t('is_required')]\"\n                        outlined/>\n                  </v-col>\n                  <v-col sm=\"4\" cols=\"12\" class=\"pb-0\">\n                    <label class=\"label  mb-0\">{{ $t(\"name\") }}</label>\n                    <v-text-field\n                        class=\"mt-1\"\n                        tage=\"Catalog Name\"\n                        v-model=\"paymentOption.name\"\n                        :placeholder=\"$t('name')\"\n                        :rules=\"[v => !!v || $t('is_required')]\"\n                        outlined/>\n                  </v-col>\n                  <v-col sm=\"4\" cols=\"12\" class=\"pb-0\">\n                    <label class=\"label  mb-0 mt-1\" style=\"\">{{\n                        $t(\"type\")\n                      }}</label>\n                    <v-select class=\"mt-1\"\n                              :disabled=\"disabled\"\n                              id=\"acc_type_selector\"\n                              :items=\"paymentTypes\"\n                              v-model=\"paymentOption.type\"\n                              @change=\"TypeChange\"\n                              tage=\"Payment Type\"\n                              :rules=\"[v => !!v || $t('is_required')]\"\n                              outlined/>\n                  </v-col>\n                </v-row>\n                <v-row v-show=\"!isHideBank\">\n                  <v-col sm=\"5\" cols=\"12\" class=\"pb-0\">\n                    <label class=\"label  mb-0 mt-1\" style=\"\">{{\n                        $t(\"account\")\n                      }}</label>\n                    <v-select class=\"mt-1\"\n                              id=\"acc_type_selector\"\n                              :items=\"accounts\"\n                              v-model=\"paymentOption.account\"\n                              item-value=\"id\"\n                              :item-text=\"item =>`${item.number} - ${item.name}`\"\n                              return-object\n                              tage=\"Account\"\n                              :rules=\"[v => !!v || $t('is_required')]\"\n                              outlined/>\n                  </v-col>\n                </v-row>\n              </v-card>\n              <v-card outlined dense class=\"no_border mb-1\" color=\"white\">\n                <v-row v-show=\"isHideBank\">\n                  <v-col sm=\"12\" cols=\"12\" class=\"\">\n                    <v-row>\n                      <v-col sm=\"12\">\n                        <h3 class=\" mb-0\">\n                          {{ $t(\"select_bank_account\") }}\n                        </h3>\n                      </v-col>\n                      <v-col cols=\"12\" sm=\"12\">\n                        <kendo-datasource ref=\"connectedBankDS\"\n                                          :data=\"connectedBanks\"/>\n                        <kendo-grid id=\"gridLeft\" class=\"grid-function\"\n                                    :data-source-ref=\"'connectedBankDS'\"\n                                    :editable=\"false\"\n                                    :scrollable-virtual=\"true\">\n                          <kendo-grid-column\n                              :field=\"'tick'\"\n                              :title=\"$t(' ')\"\n                              :width=\"63\"\n                              :template=\"getRowTemplate\"\n                              :headerAttributes=\"{style: 'text-align: left; background-color: #EDF1F5'}\"/>\n                          <kendo-grid-column\n                              :field=\"'logo'\"\n                              :title=\"$t('logo')\"\n                              :template=\"loadImage\"\n                              :width=\"100\"\n                              :headerAttributes=\"{ style: 'background-color: #EDF1F5' }\"/>\n                          <kendo-grid-column\n                              :field=\"'bank'\"\n                              :title=\"$t('fi')\"\n                              :width=\"200\"\n                              :template=\"bankTemplate\"\n                              :headerAttributes=\"{ style: 'background-color: #EDF1F5' }\"/>\n                          <kendo-grid-column\n                              :field=\"'bankAccount'\"\n                              :title=\"$t('bank_account')\"\n                              :width=\"250\"\n                              :template=\"bankAccountTemplate\"\n                              :headerAttributes=\"{ style: 'background-color: #EDF1F5' }\"/>\n                          <kendo-grid-column\n                              :field=\"'account'\"\n                              :title=\"$t('account')\"\n                              :width=\"250\"\n                              :template=\"accountTemplate\"\n                              :headerAttributes=\"{ style: 'background-color: #EDF1F5' }\"/>\n                        </kendo-grid>\n\n                        <!--                        <v-btn color=\"primary\" @click=\"addRowL\"-->\n                        <!--                               class=\"float-left rounded-0 white&#45;&#45;text mt-3\">-->\n                        <!--                          <v-icon size=\"\" class=\"ma-1\">mdi-plus</v-icon>-->\n                        <!--                        </v-btn>-->\n                      </v-col>\n                    </v-row>\n                  </v-col>\n                </v-row>\n              </v-card>\n              <v-divider/>\n              <v-card outlined dense class=\"no_border function_footer\">\n                <v-btn @click=\"cancel\"\n                       color=\"black\"\n                       outlined\n                       class=\"text-capitalize  black--text float-left\"\n                >{{ $t(\"cancel\") }}\n                </v-btn>\n\n                <v-btn @click=\"onSaveClose\"\n                       color=\"primary\"\n                       class=\"float-right  white--text text-capitalize\"\n                >{{ $t(\"save_close\") }}\n                </v-btn>\n              </v-card>\n            </v-form>\n          </v-card>\n        </v-col>\n      </v-row>\n      <LoadingMe :isLoading=\"showLoading\" :fullPage=\"false\" :myLoading=\"true\"/>\n    </v-container>\n  </v-app>\n</template>\n\n<script>\nimport Vue from \"vue\";\nimport PaymentOptionModel from \"@/scripts/model/PaymentOption\";\nimport BankPaymentModel from \"@/scripts/model/BankPaymenOption\";\n// import ConnectedBankModel from \"@/scripts/bank-partner/model/ConnectedBank\";\nimport Row from \"./settings/CheckboxTemplate\";\nimport {bankAccountHandler} from '@/scripts/AppHandlers';\nimport {uuid} from \"vue-uuid\";\nimport {AccountModel, BankModel} from \"@/scripts/model/AppModels\";\nimport AccountMappingModel from '@/scripts/account-map/Account'\n\nconst rowTemplate = Vue.component(Row.name, Row);\n\nconst bankPaymentHandler = require(\"@/scripts/bankPaymentHandler\")\nconst paymentOptionHandler = require(\"@/scripts/paymentOptionHandler\")\n\n// const $ = kendo.jQuery\nconst accountHandler = require(\"@/scripts/handler/accounting/account\")\nconst paymentOptionModel = new PaymentOptionModel({})\nconst bankPaymentModel = new BankPaymentModel({})\nconst {PAYMENT_OPINION_TYPE, TYPE_CUSTOMER} = require(\"@/scripts/default_setup/Setting\");\n\nconst BILL = PAYMENT_OPINION_TYPE.BILL_PAYMENT\nconst CASH = PAYMENT_OPINION_TYPE.CASH_PAYMENT\nconst BANK = PAYMENT_OPINION_TYPE.BANK_TRANSFER\nconst QR = PAYMENT_OPINION_TYPE.QR_PAYMENT\nconst CARD = PAYMENT_OPINION_TYPE.CARD_PAYMENT\nconst OPTION_TYPE = TYPE_CUSTOMER\n\nexport default {\n  name: \"AddPaymentOption\",\n  props: ['id'],\n  components: {\n    LoadingMe: () => import(`@/components/Loading`)\n  },\n  data: () => ({\n    paymentTypes: [CASH, BANK, BILL, QR, CARD],\n    showLoading: false,\n    customerList: [],\n    customers: [],\n    customer: {},\n    supplier: {},\n    valid: true,\n    paymentOption: paymentOptionModel,\n    supplierList: [],\n    accounts: [],\n    mAccount: {},\n    bank: bankPaymentModel,\n    bankCenters: [],\n    connectedBanks: [],\n    isHideBank: false\n  }),\n  methods: {\n    updateSelection(item, value) {\n      const ds = this.$refs.connectedBankDS.kendoWidget()\n      const rows = ds.data()\n      rows.map(row => {\n        if (row.id === item.id) {\n          // row.set('tick', value)\n          row['tick'] = value\n        }\n      })\n      // window.console.log('hello', value);\n      // for (let i = 0; i < this.connectedBanks.length; i++) {\n      //   if (item.id == this.connectedBanks[i].id) {\n      //     this.connectedBanks[i].tick = value;\n      //     break;\n      //   }\n      // }\n      //why is this not reactive? Bug?  Will it be fixed at some point?\n      // this.connectedBanks = Object.assign([], this.connectedBanks);\n    },\n    getRowTemplate(e) {\n      return {\n        template: rowTemplate,\n        templateArgs: Object.assign(this.templateData(e, true))\n      };\n    },\n    templateData(item, isOdd) {\n      window.console.log(isOdd, '----', item)\n      return {\n        dataItem: item,\n        parentComponent: this\n      };\n    },\n    loadImage(dataItem) {\n      const item = dataItem.logo || ''\n      if (item) {\n        return \"<img width='50' height='50' style= 'margin: auto;display: block;' src='\" + item + \"' />\"\n      }\n      return ''\n    },\n    bankTemplate(dataItem) {\n      const item = dataItem.bank\n      if (item) {\n        return `<span>${item.name || ``}</span>`\n      } else {\n        return ``\n      }\n    },\n    bankAccountTemplate(dataItem) {\n      const item = dataItem.bankAccount\n      if (item) {\n        return `<span>${item.number + ' - ' + item.name}</span>`\n      } else {\n        return ``\n      }\n    },\n    accountTemplate(dataItem) {\n      const item = dataItem.account\n      if (item) {\n        return `<span>${item.number + ' - ' + item.name}</span>`\n      } else {\n        return ``\n      }\n    },\n    TypeChange() {\n      this.isHideBank = this.paymentOption.type === BILL || this.paymentOption.type === CARD || this.paymentOption.type === QR || this.paymentOption.type === BANK;\n      this.connectedBanks = []\n      if (this.paymentOption.type) {\n        const type = this.paymentOption.type || ''\n        if (type === BANK) {\n          this.loadBankCenter()\n        } else if (type !== CASH) {\n          this.loadConnectedBank()\n        }\n      }\n    },\n    async loadAccountTypes() {\n      new Promise(resolve => {\n        setTimeout(() => {\n          resolve('resolved');\n          accountHandler.getAll().then(res => {\n            this.showLoading = false\n            this.accounts = res.data.filter(m => m.account_type.number <= 5).map(item => {\n              return {\n                id: item.uuid,\n                uuid: item.uuid,\n                name: item.name,\n                local_name: item.local_name,\n                number: item.number,\n                is_taxable: item.is_taxable,\n                banhjiAccCode: item.banhjiAccCode,\n                group_code: item.group_code,\n                parent_account: item.parent_account,\n                type_code: item.type_code,\n                account_type: item.account_type\n              }\n            })\n          })\n        }, 10);\n      })\n    },\n    async loadConnectedBank() {\n      new Promise(resolve => {\n        setTimeout(() => {\n          resolve('resolved')\n          const strFilter = '?type=' + this.paymentOption.type.replace(/ /g, '').toLowerCase()\n          this.showLoading = true\n          bankPaymentHandler.list(strFilter).then(async res => {\n            this.connectedBanks = []\n            this.showLoading = false\n            const result = res.data\n            let banks = []\n            result.forEach(n => {\n              const coa = n.coa || {}\n              let bank = coa.bank || {}\n              const bankId = bank.uuid || ''\n              const bankAccountNumber = coa.number || ''\n              const bankAccountName = coa.name || ''\n              const account = coa.account || {}\n              bank['id'] = bankId\n              bank['name'] = n.bank || ''\n              const obj = {\n                lineId: `lin-${uuid.v1()}`,\n                id: n.id,\n                tick: false,\n                bank: new BankModel(bank),\n                bankAccount: {\n                  number: bankAccountNumber,\n                  name: bankAccountName\n                },\n                account: new AccountMappingModel(account),\n                merchant: n.merchant,\n                logo: n.logo,\n                coa: new AccountModel(n.coa)\n              }\n              banks.push(obj)\n            })\n            if (this.$route.params.id) {\n              const bank = this.paymentOption.bank || []\n              banks.forEach(n => {\n                const find = bank.filter(m => m.id === n.id)\n                if (find) {\n                  n['tick'] = true\n                }\n              })\n              this.connectedBanks = banks\n            } else {\n              this.connectedBanks = banks\n            }\n          }).catch()\n          {\n            // this.showLoading = false\n          }\n        }, 10)\n      })\n    },\n    async initData() {\n      if (this.$route.params.id !== undefined) {\n        await this.loadSinglePaymentOption()\n      } else {\n        this.clear()\n      }\n    },\n    clear() {\n      this.paymentOption = {}\n      this.connectedBanks = []\n      this.bankCenters = []\n    },\n    async onSaveClose() {\n      // if (!this.$refs.form.validate()) {\n      //   this.$refs.form.validate()\n      //   return\n      // }\n      let bank = this.$refs.connectedBankDS.kendoWidget()\n      let row = bank.data().filter(m => m.tick === true).map(item => {\n        return {\n          lineId: item.lineId,\n          id: item.id,\n          tick: item.tick,\n          bank: new BankModel(item.bank),\n          bankAccount: item.bankAccount,\n          account: new AccountMappingModel(item.account),\n          merchant: item.merchant,\n          logo: item.logo,\n          coa: new AccountModel(item.coa)\n        }\n        // return new ConnectedBankModel(item)\n      })\n\n      // window.console.log(row, 'row')\n      // return\n      new Promise(resolve => {\n        setTimeout(() => {\n          resolve('resolved');\n          let account = this.paymentOption.account\n          if (this.paymentOption.type !== CASH) {\n            account = {}\n          } else {\n            row = []\n          }\n          let data = {\n            \"id\": this.paymentOption.id ? this.paymentOption.id : '',\n            \"name\": this.paymentOption.name,\n            \"code\": this.paymentOption.code,\n            \"type\": this.paymentOption.type,\n            \"bank\": row,\n            \"optionType\": OPTION_TYPE,\n            \"account\": account\n          }\n          // window.console.log(JSON.stringify(row), 'row')\n          this.btnEnable = true\n          paymentOptionHandler.create(data).then(response => {\n            if (response.data.statusCode === 201) {\n              // const res = response.data.data\n              this.btnEnable = false\n              this.$snotify.success('Success')\n              this.close()\n            }\n          }).catch(e => {\n            this.btnEnable = false\n            this.$snotify.error('Something went wrong')\n            this.errors.push(e)\n          })\n        }, 10);\n      })\n    },\n    cancel() {\n      window.history.go(-1)\n    },\n    close() {\n      window.history.go(-1)\n      // this.$router.push({\n      //   name: 'Customers', params: {\n      //     data: data\n      //   }\n      // })\n    },\n    async loadSinglePaymentOption() {\n      new Promise(resolve => {\n        setTimeout(() => {\n          resolve('resolved')\n          this.paymentOptions = []\n          paymentOptionHandler.list('?id=' + this.$route.params.id).then(res => {\n            this.showLoading = true\n            if (res.data.statusCode === 200) {\n              this.showLoading = false\n              const response = res.data.data\n              this.paymentOption = {}\n              if (response.length > 0) {\n                this.paymentOption = response[0]\n                this.connectedBanks = this.paymentOption.bank\n                if (this.paymentOption.type) {\n                  const type = this.paymentOption.type || ''\n                  if (type === BANK) {\n                    this.loadBankCenter()\n                  } else if (type !== CASH) {\n                    this.loadConnectedBank()\n                  }\n                }\n                this.isHideBank = this.paymentOption.type === BILL || this.paymentOption.type === CARD || this.paymentOption.type === QR || this.paymentOption.type === BANK\n              }\n            }\n          })\n        }, 10)\n      })\n    },\n    async loadBankCenter() {\n      this.showLoading = true\n      const bankAccounts = await bankAccountHandler.getAll();\n      this.showLoading = false\n      // window.console.log('bankAccounts', bankAccounts)\n      if (bankAccounts) {\n        const result = await bankAccounts.data;\n        this.connectedBanks = []\n        let banks = []\n        result.forEach(n => {\n          let bank = n.bank || {}\n          const bankId = bank.uuid || ''\n          const bankAccountNumber = n.number || ''\n          const bankAccountName = n.name || ''\n          const account = n.account || {}\n          bank['id'] = bankId\n          const obj = {\n            lineId: `lin-${uuid.v1()}`,\n            id: n.uuid,\n            tick: false,\n            bank: bank,\n            bankAccount: {\n              number: bankAccountNumber,\n              name: bankAccountName\n            },\n            account: account,\n            currency: n.currency || {},\n            merchant: n.merchant || {},\n            logo: n.logo || '',\n            coa: {}\n          }\n          banks.push(obj)\n        })\n        if (this.$route.params.id) {\n          const bank = this.paymentOption.bank || []\n          banks.forEach(n => {\n            const find = bank.filter(m => m.id === n.id)\n            if (find.length > 0) {\n              n['tick'] = true\n            }\n          })\n          this.connectedBanks = banks\n        } else {\n          this.connectedBanks = banks\n        }\n      }\n    },\n  },\n  mounted: async function () {\n    // await this.initGrid(this)\n    // await this.loadConnectedBank()\n    await this.loadAccountTypes()\n    await this.initData()\n  },\n  watch: {\n    id() {\n      if (this.$route.params.id !== undefined) {\n        this.loadSinglePaymentOption()\n      } else {\n        this.clear()\n      }\n    }\n  },\n  computed: {\n    disabled() {\n      return !!this.$route.params.id;\n    }\n  }\n};\n</script>\n\n<style scoped>\n.dropdown-header {\n  border-width: 0 0 1px 0;\n  text-transform: uppercase;\n}\n\n.dropdown-header > span {\n  display: inline-block;\n  padding: 10px;\n}\n\n.dropdown-header > span:first-child {\n  width: 50px;\n}\n\n.k-list-container > .k-footer {\n  padding: 10px;\n}\n\n.function_content {\n  padding: 0 25px 25px;\n  border-bottom: 0;\n  background-color: #fff !important;\n}\n\n@media (min-width: 1264px) {\n  .container {\n    /* max-width: 1185px; */\n    max-width: 1080px !important;\n  }\n}\n\n.grayBg {\n  background-color: #F8F8F9;\n}\n\n@media (max-width: 576px) {\n  .mb-6 {\n    margin-bottom: 0 !important;\n  }\n}\n\n.section2 {\n  border: 1px solid #d6d7d8;\n}\n\n.border_grey {\n  border: 1px solid #d6d7d8;\n}\n\n.attachment_table {\n  width: 100%;\n}\n\n.my_radio [type=\"radio\"] + label {\n  position: relative;\n  padding: 6px;\n  grid-template-columns: 15% 80% !important;\n  display: grid;\n}\n\n.upload_btn {\n  padding: 10px 6px;\n  text-align: center;\n  color: white;\n  margin-top: 15px;\n  margin-bottom: none !important;\n  border-radius: 22px;\n  background: #92d050;\n}\n\n.theme--light.v-data-table > .v-data-table__wrapper > table > tbody > tr:hover:not(.v-data-table__expanded__content):not(.v-data-table__empty-wrapper) {\n  background-color: transparent !important;\n}\n</style>\n"]}]}