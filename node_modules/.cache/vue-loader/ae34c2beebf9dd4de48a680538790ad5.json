{"remainingRequest":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/src/views/services_projects/projects/budgets/BudgetSummary.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/src/views/services_projects/projects/budgets/BudgetSummary.vue","mtime":1638499443307},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["BudgetSummary.vue"],"names":[],"mappings":";;;;;AAKA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"BudgetSummary.vue","sourceRoot":"src/views/services_projects/projects/budgets","sourcesContent":["<template>\n    <div id=\"grid\"></div>\n</template>\n\n<script>\n    import kendo from '@progress/kendo-ui';\n    import {i18n} from '@/i18n'\n    import Helper from \"@/helper.js\";\n    /* Models */\n    import BudgetModel from \"@/scripts/model/Budget.js\";\n    import AccountModel from \"@/scripts/model/Account.js\";\n\n    const accountHandler = require(\"@/scripts/handler/accounting/account.js\");\n    const OrderNumberPL = require(\"@/scripts/default_setup/OrderNumberPL.js\");\n    const NumberInWord = require(\"@/scripts/default_setup/NumberInWord.js\");\n    const AccountTypeCode = require(\"@/scripts/default_setup/AccountTypeCode.js\");\n\n    export default {\n        name: \"BudgetSummary\",\n        props: {\n            initBudget: {\n                type: BudgetModel,\n            },\n        },\n        data: () => ({\n            budget : new BudgetModel(),\n        }),\n        methods: {\n            /* Load Data */\n            async loadData () {\n                /* Bind Budget */\n                this.budget = this.initBudget;\n\n                /* Set Current Fiscal Date */\n                let currencyFiscalDate = Helper.getFiscalDateByDate(new Date());\n                let fiscalMonths = Helper.generateFiscalMonths(currencyFiscalDate.start_date, currencyFiscalDate.end_date, \"12\");\n\n                let entries = [];\n                let Entry = kendo.data.Model.define({\n                    id: \"uuid\", // the identifier of the model\n                    fields: {\n                        \"month_name\": { type: \"number\", defaultValue: '' },\n                        \"rev\": { type: \"number\", defaultValue: 0 },\n                        \"cogs\": { type: \"number\", defaultValue: 0 },\n                        \"ope_exp\": { type: \"number\", defaultValue: 0 },\n                        \"oth_exp_dep\": { type: \"number\", defaultValue: 0 },\n                        \"oth_rev\": { type: \"number\", defaultValue: 0 },\n                        \"fin_cost_tax\": { type: \"number\", defaultValue: 0 },\n                        \"net_income\": { type: \"number\", defaultValue: 0 },\n                    }\n                });\n\n                // Load Account List\n                let accounts = await accountHandler.getAll();\n\n                /* Total */\n                let totalEntry = new Entry();\n                totalEntry.month_name = \"Total\";\n                \n                /* Gathering from line */\n                this.budget.lines.forEach(value => {\n                    /* Set Account Information */\n                    let account = new AccountModel(accounts.data.find(item => item.uuid === value.account_uuid));\n\n                    /* Reverse Nature */\n                    let nature = 1; /* Default Naure is Dr = 1 */\n                    if(account.account_type.nature.toLowerCase() === \"cr\"){\n                        nature = -1;\n                    }\n\n                    /* Revenue */\n                    if(account.account_type.number === AccountTypeCode.REVENUE){\n                        totalEntry.rev += value.amount * nature;\n                    }\n\n                    /* COGS */\n                    if(account.account_type.number === AccountTypeCode.COGS){\n                        totalEntry.cogs += value.amount * nature;\n                    }\n\n                    /* Other Expense & Depreciations */\n                    if(account.account_type.number === AccountTypeCode.OTHER_EXPENSE || account.account_type.number === AccountTypeCode.DEPRECIATION){\n                        totalEntry.oth_exp_dep += value.amount * nature;\n                    }\n\n                    /* Other Revenue */\n                    if(account.account_type.number === AccountTypeCode.OTHER_REVENUE){\n                        totalEntry.oth_rev += value.amount * nature;\n                    }\n\n                    /* Financing Cost & Tax */\n                    if(account.account_type.number === AccountTypeCode.FINANCING_COST || account.account_type.number === AccountTypeCode.TAX){\n                        totalEntry.fin_cost_tax += value.amount * nature;\n                    }\n                });\n\n                /* Gathering from budget estimations */\n                this.budget.budget_estimations.forEach(value => {\n                    /* Operating Expense */\n                    if(value.account_type_number === OrderNumberPL.OperatingExpense.number){\n                        totalEntry.ope_exp += value.balance;\n                    }\n\n                    /* Profit For The Period */\n                    if(value.account_type_number === OrderNumberPL.ProfitForThePeriod.number){\n                        totalEntry.net_income += value.balance;\n                    }\n                });\n                \n                /* Add to entries */\n                entries.push(totalEntry);\n                /* End Total */\n\n                /* Monthly */\n                let monthEntries = [];\n                for (let i = 0; i < 12; i++) {\n                    let monthEntry = new Entry();\n\n                    /* Month Name */\n                    monthEntry.month_name = fiscalMonths[i];\n\n                    /* Add Entry */\n                    monthEntries.push(monthEntry);\n                }\n\n                /* Gathering from line */\n                this.budget.lines.forEach(value => {\n                    /* Set Account Information */\n                    let account = new AccountModel(accounts.data.find(item => item.uuid === value.account_uuid));\n\n                    /* Reverse Nature */\n                    let nature = 1; /* Default Naure is Dr = 1 */\n                    if(account.account_type.nature.toLowerCase() === \"cr\"){\n                        nature = -1;\n                    }\n\n                    for (let i = 0; i < 12; i++) {\n                        /* Revenue */\n                        if(account.account_type.number === AccountTypeCode.REVENUE){\n                            monthEntries[i].rev += value.monthly_amount[i].amount * nature;\n                        }\n\n                        /* COGS */\n                        if(account.account_type.number === AccountTypeCode.COGS){\n                            monthEntries[i].cogs += value.monthly_amount[i].amount * nature;\n                        }\n\n                        /* Other Expense & Depreciations */\n                        if(account.account_type.number === AccountTypeCode.OTHER_EXPENSE || account.account_type.number === AccountTypeCode.DEPRECIATION){\n                            monthEntries[i].oth_exp_dep += value.monthly_amount[i].amount * nature;\n                        }\n\n                        /* Other Revenue */\n                        if(account.account_type.number === AccountTypeCode.OTHER_REVENUE){\n                            monthEntries[i].oth_rev += value.monthly_amount[i].amount * nature;\n                        }\n\n                        /* Financing Cost & Tax */\n                        if(account.account_type.number === AccountTypeCode.FINANCING_COST || account.account_type.number === AccountTypeCode.TAX){\n                            monthEntries[i].fin_cost_tax += value.monthly_amount[i].amount * nature;\n                        }\n                    }\n                });\n                \n                /* Gathering from budget estimations */\n                this.budget.budget_estimations.forEach(value => {\n                    for (let i = 0; i < 12; i++) {\n                        let property = NumberInWord[i];\n                        \n                        /* Operating Expense */\n                        if(value.account_type_number === OrderNumberPL.OperatingExpense.number){\n                            monthEntries[i].ope_exp += value[property];\n                        }\n\n                        /* Profit For The Period */\n                        if(value.account_type_number === OrderNumberPL.ProfitForThePeriod.number){\n                            monthEntries[i].net_income += value[property];\n                        }\n                    }\n                });\n\n                /* Add to entries */\n                monthEntries.forEach(value => {\n                    entries.push(value);\n                });\n                /* End Monthly */\n\n                /* Styles */\n                let headerAttributes = {\n                        \"class\": \"table-header-cell\",\n                        style: \"text-align: right; font-size: 14px\"\n                    },\n                    attributes = {\n                        \"class\": \"table-cell\",\n                        style: \"text-align: right; font-size: 14px\"\n                    };\n                \n                kendo.jQuery(\"#grid\").kendoGrid({\n                    dataSource: {\n                        data: entries,\n                        pageSize: 20,\n                    },\n                    scrollable:true,\n                    columns: [\n                        {\n                            field: \"month_name\",\n                            title: i18n.t('monthly'),\n                            headerAttributes: headerAttributes,\n                            attributes: attributes,\n                        },\n                        {\n                            field: \"rev\",\n                            title: i18n.t('revenue'),\n                            format: \"{0:n}\",\n                            headerAttributes: headerAttributes,\n                            attributes: attributes,\n                        },\n                        {\n                            field: \"cogs\",\n                            title: i18n.t('cost_of_goods_sold'),\n                            format: \"{0:n}\",\n                            headerAttributes: headerAttributes,\n                            attributes: attributes,\n                        },\n                        {\n                            field: \"ope_exp\",\n                            title: i18n.t('operating_expenses'),\n                            format: \"{0:n}\",\n                            headerAttributes: headerAttributes,\n                            attributes: attributes,\n                        },\n                        {\n                            field: \"oth_exp_dep\",\n                            title: i18n.t('other_expenses_&_depreciations'),\n                            format: \"{0:n}\",\n                            headerAttributes: headerAttributes,\n                            attributes: attributes,\n                        },\n                        {\n                            field: \"oth_rev\",\n                            title: i18n.t('other_revenues'),\n                            format: \"{0:n}\",\n                            headerAttributes: headerAttributes,\n                            attributes: attributes,\n                        },\n                        {\n                            field: \"fin_cost_tax\",\n                            title: i18n.t('financing_cost_&_tax'),\n                            format: \"{0:n}\",\n                            headerAttributes: headerAttributes,\n                            attributes: attributes,\n                        },\n                        {\n                            field: \"net_income\",\n                            title: i18n.t('net_income'),\n                            format: \"{0:n}\",\n                            headerAttributes: headerAttributes,\n                            attributes: attributes,\n                        },\n                    ]\n                });\n\t\t\t},\n        },\n        watch: {\n            initBudget () {\n                this.loadData();\n            },\n        },\n    };\n</script>\n\n<style scoped>\n</style>"]}]}