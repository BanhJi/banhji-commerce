{"remainingRequest":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/babel-loader/lib/index.js!/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/eslint-loader/index.js??ref--14-0!/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/src/scripts/dashboard/customer/handler/dashboardHandler.js","dependencies":[{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/src/scripts/dashboard/customer/handler/dashboardHandler.js","mtime":1638499442978},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/babel.config.js","mtime":1638499442885},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/src/scripts/dashboard/customer/handler/dashboardHandler.js"],"names":["axios","require","apiUrl","module","exports","customerRevenue","strFilter","get","dashboard","revenue","response","window","console","error","customerSaleFunel","sale_funel","customerSaleAnalysis","sale_analysis","customerBalanceNPaymentGraph","sale_payment_graph","customerOverCreditLimit","sale_over_credit_limit","vendorTotalPurchase","total_purchase","vendorPurchaseNPurchaseOrder","vendor_purchasex_purchase_order_graph","vendorPurchaseAnalysis","vendor_purchase_analysis","vendor3WayMatching","vendor_3way_matching","vendorOverCreditLimit","vendor_over_credit_limit","top5InventoryBalance","product_top5_inventory_balance","top5InventoryCategory","product_top5_inventory_category","productPurchase","product_purchase","productSale","product_sale","productGraph","product_balance_purchase_sale_graph","top5ServiceCategory","service_top5_service_category","servicePurchase","service_purchase","serviceSale","service_sale","serviceGraph","service_revenue_graph","serviceProjectRatio","service_project_ratio","bankingGraphPaymentOption","banking_graph_payment_option","saleMarginAnalysis","sale_margin_analysis","saleTaxDetail","sale_tax_detail"],"mappings":"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","sourcesContent":["const axios = require('axios')\nconst apiUrl = require('@/apiUrl')\n\n// List\nmodule.exports.customerRevenue = async function (strFilter = '') {\n    try {\n        const response = await axios.get(apiUrl.dashboard.revenue + strFilter)\n\n        return response\n    } catch (error) {\n        window.console.error(error)\n    }\n}\n\n// List Sale Funel\nmodule.exports.customerSaleFunel = async function (strFilter = '') {\n    try {\n        const response = await axios.get(apiUrl.dashboard.sale_funel + strFilter)\n\n        return response\n    } catch (error) {\n        window.console.error(error)\n    }\n}\n\n// List Sale Analysis\nmodule.exports.customerSaleAnalysis = async function (strFilter = '') {\n    try {\n        const response = await axios.get(apiUrl.dashboard.sale_analysis + strFilter)\n\n        return response\n    } catch (error) {\n        window.console.error(error)\n    }\n}\n\n\n// Dashboard Customer and Payment Graph\nmodule.exports.customerBalanceNPaymentGraph = async function (strFilter = '') {\n    try {\n        const response = await axios.get(apiUrl.dashboard.sale_payment_graph + strFilter)\n\n        return response\n    } catch (error) {\n        window.console.error(error)\n    }\n}\n\n// Dashboard Customer Over Credit Limit\nmodule.exports.customerOverCreditLimit = async function (strFilter = '') {\n    try {\n        const response = await axios.get(apiUrl.dashboard.sale_over_credit_limit + strFilter)\n\n        return response\n    } catch (error) {\n        window.console.error(error)\n    }\n}\n\n// Dashboard Vendor Purchase\nmodule.exports.vendorTotalPurchase = async function (strFilter = '') {\n    try {\n        const response = await axios.get(apiUrl.dashboard.total_purchase + strFilter)\n\n        return response\n    } catch (error) {\n        window.console.error(error)\n    }\n}\n// Dashboard Vendor Purchase n Expense n Purchase Order Graph\nmodule.exports.vendorPurchaseNPurchaseOrder = async function (strFilter = '') {\n    try {\n        const response = await axios.get(apiUrl.dashboard.vendor_purchasex_purchase_order_graph + strFilter)\n\n        return response\n    } catch (error) {\n        window.console.error(error)\n    }\n}\n\n// List Vendor Purchase Analysis\nmodule.exports.vendorPurchaseAnalysis = async function (strFilter = '') {\n    try {\n        const response = await axios.get(apiUrl.dashboard.vendor_purchase_analysis + strFilter)\n\n        return response\n    } catch (error) {\n        window.console.error(error)\n    }\n}\n\n// List Vendor Purchase 3 ways matching\nmodule.exports.vendor3WayMatching = async function (strFilter = '') {\n    try {\n        const response = await axios.get(apiUrl.dashboard.vendor_3way_matching + strFilter)\n\n        return response\n    } catch (error) {\n        window.console.error(error)\n    }\n}\n// Dashboard Vendor Over Credit Limit\nmodule.exports.vendorOverCreditLimit = async function (strFilter = '') {\n    try {\n        const response = await axios.get(apiUrl.dashboard.vendor_over_credit_limit + strFilter)\n\n        return response\n    } catch (error) {\n        window.console.error(error)\n    }\n}\n\n// List Product Inventory Balance top 5\nmodule.exports.top5InventoryBalance = async function (strFilter = '') {\n    try {\n        const response = await axios.get(apiUrl.dashboard.product_top5_inventory_balance + strFilter)\n\n        return response\n    } catch (error) {\n        window.console.error(error)\n    }\n}\n// List Product Inventory Balance top 5 category\nmodule.exports.top5InventoryCategory = async function (strFilter = '') {\n    try {\n        const response = await axios.get(apiUrl.dashboard.product_top5_inventory_category + strFilter)\n\n        return response\n    } catch (error) {\n        window.console.error(error)\n    }\n}\n\n// List Product Purchase Item only\nmodule.exports.productPurchase = async function (strFilter = '') {\n    try {\n        const response = await axios.get(apiUrl.dashboard.product_purchase + strFilter)\n\n        return response\n    } catch (error) {\n        window.console.error(error)\n    }\n}\n\n// List Product Sale Item only\nmodule.exports.productSale = async function (strFilter = '') {\n    try {\n        const response = await axios.get(apiUrl.dashboard.product_sale + strFilter)\n\n        return response\n    } catch (error) {\n        window.console.error(error)\n    }\n}\n\n// List Product Balance Purchase Sale Graph\nmodule.exports.productGraph = async function (strFilter = '') {\n    try {\n        const response = await axios.get(apiUrl.dashboard.product_balance_purchase_sale_graph + strFilter)\n\n        return response\n    } catch (error) {\n        window.console.error(error)\n    }\n}\n\n// List Service top 5 category\nmodule.exports.top5ServiceCategory = async function (strFilter = '') {\n    try {\n        const response = await axios.get(apiUrl.dashboard.service_top5_service_category + strFilter)\n\n        return response\n    } catch (error) {\n        window.console.error(error)\n    }\n}\n\n// List Service Service service purchase\nmodule.exports.servicePurchase = async function (strFilter = '') {\n    try {\n        const response = await axios.get(apiUrl.dashboard.service_purchase + strFilter)\n\n        return response\n    } catch (error) {\n        window.console.error(error)\n    }\n}\n\n// List Service Sale service only\nmodule.exports.serviceSale = async function (strFilter = '') {\n    try {\n        const response = await axios.get(apiUrl.dashboard.service_sale + strFilter)\n\n        return response\n    } catch (error) {\n        window.console.error(error)\n    }\n}\n\n// List Service Revenue Graph\nmodule.exports.serviceGraph = async function (strFilter = '') {\n    try {\n        const response = await axios.get(apiUrl.dashboard.service_revenue_graph + strFilter)\n\n        return response\n    } catch (error) {\n        window.console.error(error)\n    }\n}\n// List Service Project Ratio\nmodule.exports.serviceProjectRatio = async function (strFilter = '') {\n    try {\n        const response = await axios.get(apiUrl.dashboard.service_project_ratio + strFilter)\n\n        return response\n    } catch (error) {\n        window.console.error(error)\n    }\n}\n// Dashboard Banking graph\nmodule.exports.bankingGraphPaymentOption = async function (strFilter = '') {\n    try {\n        const response = await axios.get(apiUrl.dashboard.banking_graph_payment_option + strFilter)\n\n        return response\n    } catch (error) {\n        window.console.error(error)\n    }\n}\n\n//Todo: Sale Margin Analysis\nmodule.exports.saleMarginAnalysis = async function (strFilter = '') {\n    try {\n        return await axios.get(apiUrl.dashboard.sale_margin_analysis + '/' + strFilter)\n    } catch (error) {\n        window.console.error(error)\n    }\n}\n//Todo: Sale Tax Detail\nmodule.exports.saleTaxDetail = async function (strFilter = '') {\n    try {\n        return await axios.get(apiUrl.dashboard.sale_tax_detail + '/' + strFilter)\n    } catch (error) {\n        window.console.error(error)\n    }\n}"]}]}