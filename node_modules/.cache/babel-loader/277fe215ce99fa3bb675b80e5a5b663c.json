{"remainingRequest":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/babel-loader/lib/index.js!/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/eslint-loader/index.js??ref--14-0!/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/src/scripts/exchangeRateHandler.js","dependencies":[{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/src/scripts/exchangeRateHandler.js","mtime":1638499442983},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/babel.config.js","mtime":1638499442885},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIF9hc3luY1RvR2VuZXJhdG9yID0gcmVxdWlyZSgiL1VzZXJzL21hY29zL0Rlc2t0b3AvYmFuaGppLTAuMi9iYW5oamktYWNjb3VudGluZy13ZWItbW9kdWxlL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2FzeW5jVG9HZW5lcmF0b3IuanMiKS5kZWZhdWx0OwoKcmVxdWlyZSgicmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lLmpzIik7Cgp2YXIgYXhpb3MgPSByZXF1aXJlKCdheGlvcycpOwoKdmFyIGFwaVVybCA9IHJlcXVpcmUoJy4uL2FwaVVybC5qcycpOyAvLyBHRVQgQ1VSUkVOQ1kgTElTVAoKCm1vZHVsZS5leHBvcnRzLmdldEN1cnJlbmN5TGlzdCA9IC8qI19fUFVSRV9fKi9fYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoKSB7CiAgdmFyIHJlc3BvbnNlOwogIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgd2hpbGUgKDEpIHsKICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgIGNhc2UgMDoKICAgICAgICAgIF9jb250ZXh0LnByZXYgPSAwOwogICAgICAgICAgX2NvbnRleHQubmV4dCA9IDM7CiAgICAgICAgICByZXR1cm4gYXhpb3MuZ2V0KGFwaVVybC5jdXJyZW5jaWVzKTsKCiAgICAgICAgY2FzZSAzOgogICAgICAgICAgcmVzcG9uc2UgPSBfY29udGV4dC5zZW50OwogICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdCgicmV0dXJuIiwgcmVzcG9uc2UpOwoKICAgICAgICBjYXNlIDc6CiAgICAgICAgICBfY29udGV4dC5wcmV2ID0gNzsKICAgICAgICAgIF9jb250ZXh0LnQwID0gX2NvbnRleHRbImNhdGNoIl0oMCk7CiAgICAgICAgICB3aW5kb3cuY29uc29sZS5lcnJvcihfY29udGV4dC50MCk7CgogICAgICAgIGNhc2UgMTA6CiAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgIH0KICAgIH0KICB9LCBfY2FsbGVlLCBudWxsLCBbWzAsIDddXSk7Cn0pKTsgLy8gR0VUIFJFUE9SVElORyBDVVJSRU5DWQoKbW9kdWxlLmV4cG9ydHMuZ2V0UmVwb3J0aW5nQ3VycmVuY3kgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkgewogIHZhciBfcmVmMiA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTIocGFyYW1zKSB7CiAgICB2YXIgcmVzcG9uc2U7CiAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTIkKF9jb250ZXh0MikgewogICAgICB3aGlsZSAoMSkgewogICAgICAgIHN3aXRjaCAoX2NvbnRleHQyLnByZXYgPSBfY29udGV4dDIubmV4dCkgewogICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICBfY29udGV4dDIucHJldiA9IDA7CiAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gMzsKICAgICAgICAgICAgcmV0dXJuIGF4aW9zLmdldChhcGlVcmwucmVwb3J0aW5nX2N1cnJlbmN5X2dldCArIHBhcmFtcy5wYXJhbXMudHlwZSArICcvJyArIHBhcmFtcy5wYXJhbXMueWVhcik7CgogICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICByZXNwb25zZSA9IF9jb250ZXh0Mi5zZW50OwogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLmFicnVwdCgicmV0dXJuIiwgcmVzcG9uc2UpOwoKICAgICAgICAgIGNhc2UgNzoKICAgICAgICAgICAgX2NvbnRleHQyLnByZXYgPSA3OwogICAgICAgICAgICBfY29udGV4dDIudDAgPSBfY29udGV4dDJbImNhdGNoIl0oMCk7CiAgICAgICAgICAgIHdpbmRvdy5jb25zb2xlLmVycm9yKF9jb250ZXh0Mi50MCk7CgogICAgICAgICAgY2FzZSAxMDoKICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuc3RvcCgpOwogICAgICAgIH0KICAgICAgfQogICAgfSwgX2NhbGxlZTIsIG51bGwsIFtbMCwgN11dKTsKICB9KSk7CgogIHJldHVybiBmdW5jdGlvbiAoX3gpIHsKICAgIHJldHVybiBfcmVmMi5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogIH07Cn0oKTsgLy8gR0VUIEZVTkNUSU9OQUwgQ1VSUkVOQ1kKCgptb2R1bGUuZXhwb3J0cy5nZXRGdW5jdGlvbmFsQ3VycmVuY3kgPSAvKiNfX1BVUkVfXyovX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMygpIHsKICB2YXIgcmVzcG9uc2U7CiAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUzJChfY29udGV4dDMpIHsKICAgIHdoaWxlICgxKSB7CiAgICAgIHN3aXRjaCAoX2NvbnRleHQzLnByZXYgPSBfY29udGV4dDMubmV4dCkgewogICAgICAgIGNhc2UgMDoKICAgICAgICAgIF9jb250ZXh0My5wcmV2ID0gMDsKICAgICAgICAgIF9jb250ZXh0My5uZXh0ID0gMzsKICAgICAgICAgIHJldHVybiBheGlvcy5nZXQoYXBpVXJsLnhjaGFuZ2VfZ2V0ICsgJ2ZuYycpOwoKICAgICAgICBjYXNlIDM6CiAgICAgICAgICByZXNwb25zZSA9IF9jb250ZXh0My5zZW50OwogICAgICAgICAgcmV0dXJuIF9jb250ZXh0My5hYnJ1cHQoInJldHVybiIsIHJlc3BvbnNlKTsKCiAgICAgICAgY2FzZSA3OgogICAgICAgICAgX2NvbnRleHQzLnByZXYgPSA3OwogICAgICAgICAgX2NvbnRleHQzLnQwID0gX2NvbnRleHQzWyJjYXRjaCJdKDApOwogICAgICAgICAgd2luZG93LmNvbnNvbGUuZXJyb3IoX2NvbnRleHQzLnQwKTsKCiAgICAgICAgY2FzZSAxMDoKICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgcmV0dXJuIF9jb250ZXh0My5zdG9wKCk7CiAgICAgIH0KICAgIH0KICB9LCBfY2FsbGVlMywgbnVsbCwgW1swLCA3XV0pOwp9KSk7IC8vIEdFVCBUUkFOU0FDVElPTiBDVVJSRU5DWQoKbW9kdWxlLmV4cG9ydHMuZ2V0VHJhbnNhY3Rpb25DdXJyZW5jeSA9IC8qI19fUFVSRV9fKi9fYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWU0KCkgewogIHZhciByZXNwb25zZTsKICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTQkKF9jb250ZXh0NCkgewogICAgd2hpbGUgKDEpIHsKICAgICAgc3dpdGNoIChfY29udGV4dDQucHJldiA9IF9jb250ZXh0NC5uZXh0KSB7CiAgICAgICAgY2FzZSAwOgogICAgICAgICAgX2NvbnRleHQ0LnByZXYgPSAwOwogICAgICAgICAgX2NvbnRleHQ0Lm5leHQgPSAzOwogICAgICAgICAgcmV0dXJuIGF4aW9zLmdldChhcGlVcmwueGNoYW5nZV9nZXQgKyAndHhuJyk7CgogICAgICAgIGNhc2UgMzoKICAgICAgICAgIHJlc3BvbnNlID0gX2NvbnRleHQ0LnNlbnQ7CiAgICAgICAgICByZXR1cm4gX2NvbnRleHQ0LmFicnVwdCgicmV0dXJuIiwgcmVzcG9uc2UpOwoKICAgICAgICBjYXNlIDc6CiAgICAgICAgICBfY29udGV4dDQucHJldiA9IDc7CiAgICAgICAgICBfY29udGV4dDQudDAgPSBfY29udGV4dDRbImNhdGNoIl0oMCk7CiAgICAgICAgICB3aW5kb3cuY29uc29sZS5lcnJvcihfY29udGV4dDQudDApOwoKICAgICAgICBjYXNlIDEwOgogICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICByZXR1cm4gX2NvbnRleHQ0LnN0b3AoKTsKICAgICAgfQogICAgfQogIH0sIF9jYWxsZWU0LCBudWxsLCBbWzAsIDddXSk7Cn0pKTsgLy8gR0VUIExJU1QKCm1vZHVsZS5leHBvcnRzLmdldEFsbCA9IC8qI19fUFVSRV9fKi9fYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWU1KCkgewogIHZhciByZXNwb25zZTsKICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTUkKF9jb250ZXh0NSkgewogICAgd2hpbGUgKDEpIHsKICAgICAgc3dpdGNoIChfY29udGV4dDUucHJldiA9IF9jb250ZXh0NS5uZXh0KSB7CiAgICAgICAgY2FzZSAwOgogICAgICAgICAgX2NvbnRleHQ1LnByZXYgPSAwOwogICAgICAgICAgX2NvbnRleHQ1Lm5leHQgPSAzOwogICAgICAgICAgcmV0dXJuIGF4aW9zLmdldChhcGlVcmwueGNoYW5nZV9nZXQgKyAndHhuJyk7CgogICAgICAgIGNhc2UgMzoKICAgICAgICAgIHJlc3BvbnNlID0gX2NvbnRleHQ1LnNlbnQ7CiAgICAgICAgICByZXR1cm4gX2NvbnRleHQ1LmFicnVwdCgicmV0dXJuIiwgcmVzcG9uc2UpOwoKICAgICAgICBjYXNlIDc6CiAgICAgICAgICBfY29udGV4dDUucHJldiA9IDc7CiAgICAgICAgICBfY29udGV4dDUudDAgPSBfY29udGV4dDVbImNhdGNoIl0oMCk7CiAgICAgICAgICB3aW5kb3cuY29uc29sZS5lcnJvcihfY29udGV4dDUudDApOwoKICAgICAgICBjYXNlIDEwOgogICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICByZXR1cm4gX2NvbnRleHQ1LnN0b3AoKTsKICAgICAgfQogICAgfQogIH0sIF9jYWxsZWU1LCBudWxsLCBbWzAsIDddXSk7Cn0pKTsgLy8gR0VUIEJZIERBVEUKCm1vZHVsZS5leHBvcnRzLmdldEJ5RGF0ZSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7CiAgdmFyIF9yZWY2ID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlNihkYXRlLCBjb2RlKSB7CiAgICB2YXIgcmVzcG9uc2U7CiAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTYkKF9jb250ZXh0NikgewogICAgICB3aGlsZSAoMSkgewogICAgICAgIHN3aXRjaCAoX2NvbnRleHQ2LnByZXYgPSBfY29udGV4dDYubmV4dCkgewogICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICBfY29udGV4dDYucHJldiA9IDA7CiAgICAgICAgICAgIGRhdGUgPSAnJzsKICAgICAgICAgICAgY29kZSA9ICcnOwogICAgICAgICAgICBfY29udGV4dDYubmV4dCA9IDU7CiAgICAgICAgICAgIHJldHVybiBheGlvcy5nZXQoYXBpVXJsLnhjaGFuZ2VfZ2V0ICsgJ3R4bicgKyBkYXRlICsgY29kZSk7CgogICAgICAgICAgY2FzZSA1OgogICAgICAgICAgICByZXNwb25zZSA9IF9jb250ZXh0Ni5zZW50OwogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ2LmFicnVwdCgicmV0dXJuIiwgcmVzcG9uc2UpOwoKICAgICAgICAgIGNhc2UgOToKICAgICAgICAgICAgX2NvbnRleHQ2LnByZXYgPSA5OwogICAgICAgICAgICBfY29udGV4dDYudDAgPSBfY29udGV4dDZbImNhdGNoIl0oMCk7CiAgICAgICAgICAgIHdpbmRvdy5jb25zb2xlLmVycm9yKF9jb250ZXh0Ni50MCk7CgogICAgICAgICAgY2FzZSAxMjoKICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dDYuc3RvcCgpOwogICAgICAgIH0KICAgICAgfQogICAgfSwgX2NhbGxlZTYsIG51bGwsIFtbMCwgOV1dKTsKICB9KSk7CgogIHJldHVybiBmdW5jdGlvbiAoX3gyLCBfeDMpIHsKICAgIHJldHVybiBfcmVmNi5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogIH07Cn0oKTs="},{"version":3,"sources":["/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/src/scripts/exchangeRateHandler.js"],"names":["axios","require","apiUrl","module","exports","getCurrencyList","get","currencies","response","window","console","error","getReportingCurrency","params","reporting_currency_get","type","year","getFunctionalCurrency","xchange_get","getTransactionCurrency","getAll","getByDate","date","code"],"mappings":"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","sourcesContent":["const axios \t= require('axios')\nconst apiUrl \t= require('../apiUrl.js')\n\n// GET CURRENCY LIST\nmodule.exports.getCurrencyList = async () => {\n    try {\n        const response = await axios.get(apiUrl.currencies)\n\n        return response\n    } catch (error) {\n        window.console.error(error)\n    }\n}\n\n// GET REPORTING CURRENCY\nmodule.exports.getReportingCurrency = async (params) => {\n    try {\n        const response = await axios.get(apiUrl.reporting_currency_get + params.params.type +'/'+ params.params.year)\n\n        return response\n    } catch (error) {\n        window.console.error(error)\n    }\n}\n\n// GET FUNCTIONAL CURRENCY\nmodule.exports.getFunctionalCurrency = async () => {\n    try {\n        const response = await axios.get(apiUrl.xchange_get + 'fnc')\n\n        return response\n    } catch (error) {\n        window.console.error(error)\n    }\n}\n\n// GET TRANSACTION CURRENCY\nmodule.exports.getTransactionCurrency = async () => {\n    try {\n        const response = await axios.get(apiUrl.xchange_get + 'txn')\n\n        return response\n    } catch (error) {\n        window.console.error(error)\n    }\n}\n\n// GET LIST\nmodule.exports.getAll = async () => {\n    try {\n        const response = await axios.get(apiUrl.xchange_get + 'txn')\n\n        return response\n    } catch (error) {\n        window.console.error(error)\n    }\n}\n\n// GET BY DATE\nmodule.exports.getByDate = async (date, code) => {\n    try {\n        date = '';\n        code = '';\n        const response = await axios.get(apiUrl.xchange_get + 'txn' +date+code);\n        \n        return response;\n    } catch (error) {\n        window.console.error(error);\n    }\n}"]}]}