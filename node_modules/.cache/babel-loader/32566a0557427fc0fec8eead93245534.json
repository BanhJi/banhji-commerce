{"remainingRequest":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/babel-loader/lib/index.js!/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/eslint-loader/index.js??ref--13-0!/Users/macos/Desktop/banhji-0.2/banhji-commerce/src/scripts/projectHandler.js","dependencies":[{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/src/scripts/projectHandler.js","mtime":1638499443049},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/macos/Desktop/banhji-0.2/banhji-commerce/src/scripts/projectHandler.js"],"names":["axios","require","apiUrl","module","exports","list","strFilter","get","customer","project_get","response","window","console","error","getAll","id","create","data","post","project_post","getByCustomer","project_by_customer_get","getBySupplier","project_by_supplier_get","projectReport","customer_project_report","projectReportSummary","customer_project_report_summary","projectCompletion","customer_project_completion"],"mappings":"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","sourcesContent":["const axios = require('axios')\nconst apiUrl = require('../apiUrl.js')\n\n// List\nmodule.exports.list = async function (strFilter = '') {\n    try {\n        const response = await axios.get(apiUrl.customer.project_get + strFilter)\n        return response\n    } catch (error) {\n        window.console.error(error)\n    }\n}\n\n// GET LIST (BY DAWINE)\nmodule.exports.getAll = async () => {\n    try {\n        const response = await axios.get(apiUrl.customer.project_get);\n\n        return response;\n    } catch (error) {\n        window.console.error(error)\n    }\n}\n// GET\nmodule.exports.get = async function (id) {\n    try {\n        const response = await axios.get(apiUrl.customer.project_get + '/' + id)\n        return response\n    } catch (error) {\n        window.console.error(error)\n    }\n}\n// save\nmodule.exports.create = async (data) => {\n    try {\n        const response = await axios.post(apiUrl.customer.project_post, data)\n        return response\n    } catch (error) {\n        window.console.error(error)\n    }\n}\n\n// Get project by customer\nmodule.exports.getByCustomer = async function (id='') {\n    try {\n        const response = await axios.get(apiUrl.customer.project_by_customer_get + id)\n\n        return response\n    } catch (error) {\n        window.console.error(error)\n    }\n}\n\n// Get project by supplier\nmodule.exports.getBySupplier = async function (id) {\n    try {\n        const response = await axios.get(apiUrl.customer.project_by_supplier_get + id)\n\n        return response\n    } catch (error) {\n        window.console.error(error)\n    }\n}\n\n// Get project report detail\nmodule.exports.projectReport = async function (strFilter = '') {\n    try {\n        const response = await axios.get(apiUrl.customer.customer_project_report + strFilter)\n\n        return response\n    } catch (error) {\n        window.console.error(error)\n    }\n}\n\n// Get project report summary\nmodule.exports.projectReportSummary = async function (strFilter = '') {\n    try {\n        const response = await axios.get(apiUrl.customer.customer_project_report_summary + strFilter)\n\n        return response\n    } catch (error) {\n        window.console.error(error)\n    }\n}\n\n// Get project report complete\nmodule.exports.projectCompletion = async function (data = '') {\n    try {\n        const response = await axios.post(apiUrl.customer.customer_project_completion, data)\n        return response\n    } catch (error) {\n        window.console.error(error)\n    }\n}"]}]}