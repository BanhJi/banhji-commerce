{"remainingRequest":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/babel-loader/lib/index.js!/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/eslint-loader/index.js??ref--13-0!/Users/macos/Desktop/banhji-0.2/banhji-commerce/src/scripts/handler/accounting/incomeStatementHandler.js","dependencies":[{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/src/scripts/handler/accounting/incomeStatementHandler.js","mtime":1641438291826},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/macos/Desktop/banhji-0.2/banhji-commerce/src/scripts/handler/accounting/incomeStatementHandler.js"],"names":["axios","require","apiUrl","urlPath","income_statement_get","module","exports","getIncomeStatement","params","secondary","get","response","window","console","error","dimension","id","accounting_report","getByProject","projectUuid","getByProjects","startDate","endDate","proIds","requests","proId","start_date","end_date","group_by","request","push","Promise","all","responses","results","i","length","element","data","getBySegments","segIds","segId","segment_uuid","getAccountBalance","getByBusinessUnit","location_id"],"mappings":"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","sourcesContent":["/* Statement Of Profit Or Loss */\nconst axios = require('axios');\nconst apiUrl = require('@/apiUrl.js');\nconst urlPath = apiUrl.income_statement_get;\n\n// GET\nmodule.exports.getIncomeStatement = async (params, secondary=\"\") => {\n    try {\n        const response = await axios.get(urlPath + secondary, params);\n        \n        return response;\n    } catch (error) {\n        window.console.error(error);\n    }\n}\n\n// GET\nmodule.exports.get = async (dimension, id, params) => {\n    try {\n        const response = await axios.get(apiUrl.accounting_report + `/reports/pnl/${dimension}/${id}`, params);\n        \n        return response;\n    } catch (error) {\n        window.console.error(error);\n    }\n}\n\n// GET BY PROJECT\nmodule.exports.getByProject = async (params, projectUuid, secondary=\"\") => {\n    try {\n        const response = await axios.get(urlPath + `${secondary}/project/${projectUuid}`, params);\n        \n        return response;\n    } catch (error) {\n        window.console.error(error);\n    }\n}\n\n// GET BY PROJECTS\nmodule.exports.getByProjects = async (startDate, endDate, proIds, secondary=\"\") => {\n    try {\n        let requests = [];\n        for (const proId of proIds) {\n            let request = await axios.get(urlPath + `${secondary}/project/${proId}`,{\n                params: {\n                    start_date: startDate,\n                    end_date: endDate,\n                    group_by: \"1\",\n                },\n            })\n\n            /* Add requests */\n            requests.push(request);\n        }\n\n        let responses = await Promise.all(requests);\n\n        let results = [];\n        for (let i = 0; i < proIds.length; i++) {\n            const element = responses[i];\n            results.push(element.data);\n        }\n        return results;\n    } catch (error) {\n        window.console.error(error);\n    }\n}\n\n// GET BY SEGMENTS\nmodule.exports.getBySegments = async (startDate, endDate, segIds, secondary=\"\") => {\n    try {\n        let requests = [];\n        for (const segId of segIds) {\n            let request = await axios.get(urlPath + secondary,{\n                params: {\n                    start_date: startDate,\n                    end_date: endDate,\n                    group_by: \"1\",\n                    segment_uuid: segId,\n                },\n            })\n\n            /* Add requests */\n            requests.push(request);\n        }\n\n        let responses = await Promise.all(requests);\n\n        let results = [];\n        for (let i = 0; i < segIds.length; i++) {\n            const element = responses[i];\n            results.push(element.data);\n        }\n        return results;\n    } catch (error) {\n        window.console.error(error);\n    }\n}\n\n// GET ACCOUNT BALANCE\nmodule.exports.getAccountBalance = async (params) => {\n    try {\n        const response = await axios.get(apiUrl.accounting_report + \"/reports/accountsbalance\", params);\n        \n        return response;\n    } catch (error) {\n        window.console.error(error);\n    }\n}\n\n// GET BY BUSINESS UNIT\nmodule.exports.getByBusinessUnit = async (params, location_id) => {\n    try {\n        const response = await axios.get(urlPath + `/bu/${location_id}`, params);\n        \n        return response;\n    } catch (error) {\n        window.console.error(error);\n    }\n}"]}]}