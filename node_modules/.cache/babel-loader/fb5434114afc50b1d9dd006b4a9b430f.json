{"remainingRequest":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/babel-loader/lib/index.js!/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/eslint-loader/index.js??ref--13-0!/Users/macos/Desktop/banhji-0.2/banhji-commerce/src/scripts/employeeHandler.js","dependencies":[{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/src/scripts/employeeHandler.js","mtime":1638499442982},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/macos/Desktop/banhji-0.2/banhji-commerce/src/scripts/employeeHandler.js"],"names":["axios","require","apiUrl","module","exports","searchURL","response","employee","employee_search","error","window","console","search","employee_center","center","undefined","get","id","employee_getOne","create","data","post","employee_post","update","put","employee_update","getAll","createEmployment","employment_record_post","getEmploymentListByEmployee","record_list_by_employee_get","getRecord","param","record_get","params","status","employeeId","location_id","department_id","natureContract_id","employeeGroup_id","getEmploymentByEmployee","record_by_employee_get","createTimesheet","timesheet_post","getTimesheet","timesheet_get","getTimesheetSingle","timesheet_single","getEmployeeTransactions","employeeUuid","transactions","getEmployeeInfo","employee_info","getEmployeeDashboard","employee_dashboard","getEmployeeBalance","val","employee_balance","end_date","getEmployeeLeave","employee_leave","year","log","getLeaveSummary","leave_summary","createFringeBenefit","employee_benefit","getFringeBenefit","employee_benefit_get","month_of","getLastNumber","last_number_get","abbr"],"mappings":"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","sourcesContent":["const axios = require('axios')\nconst apiUrl = require('../apiUrl.js')\n\n//Search URL\nmodule.exports.searchURL = function () {\n    try {\n        const response = apiUrl.employee.employee_search\n        return response\n    } catch (error) {\n        window.console.error(error)\n    }\n}\n\n\n//Search\nmodule.exports.search = function () {\n    try {\n        const response = apiUrl.employee.employee_center\n        return response\n    } catch (error) {\n        window.console.error(error)\n    }\n}\n// Center\nmodule.exports.center = async function (search) {\n    try {\n        let response = []\n        if (search !== '' && search !== null && search !== 'null' && search !== undefined) {\n            response = await axios.get(apiUrl.employee.employee_center + '/' + search)\n            return response\n        } else {\n            response = await axios.get(apiUrl.employee.employee_center)\n            return response\n        }\n    } catch (error) {\n        window.console.error(error)\n    }\n}\n// // List\n// module.exports.list = async function () {\n//     try {\n//         const response = await axios.get(apiUrl.customer.customer_get)\n//\n//         return response\n//     } catch (error) {\n//         window.console.error(error)\n//     }\n// }\n// Get One\nmodule.exports.get = async function (id) {\n    try {\n        const response = await axios.get(apiUrl.employee.employee_getOne + id)\n\n        return response\n    } catch (error) {\n        window.console.error(error)\n    }\n}\n\n// save\nmodule.exports.create = async (data) => {\n    try {\n        const response = await axios.post(apiUrl.employee.employee_post, data)\n        return response\n    } catch (error) {\n        window.console.error(error)\n    }\n}\n// update\nmodule.exports.update = async (id) => {\n    try {\n        const response = await axios.put(apiUrl.employee.employee_update + id)\n        return response\n    } catch (error) {\n        window.console.error(error)\n    }\n}\n// GET LIST BY DAWINE\nmodule.exports.getAll = async () => {\n    try {\n        const response = await axios.get(apiUrl.employee.employee_center)\n\n        return response\n    } catch (error) {\n        window.console.error(error)\n    }\n}\nmodule.exports.createEmployment = async (data) => {\n    try {\n        const response = await axios.post(apiUrl.employee.employment_record_post, data)\n        return response\n    } catch (error) {\n        window.console.error(error)\n    }\n}\nmodule.exports.getEmploymentListByEmployee = async function (id) {\n    try {\n        const response = await axios.get(apiUrl.employee.record_list_by_employee_get + '/' +  id)\n        return response.data.data\n    } catch (error) {\n        window.console.error(error)\n    }\n}\nmodule.exports.getRecord = async function (param) {\n    try {\n        const response = await axios.get(apiUrl.employee.record_get,{\n            params: {\n                status:             param.status ? param.status: 1,\n                employeeId:         param.employeeId ? param.employeeId: '',\n                location_id:        param.location_id || '',\n                department_id:      param.department_id || '',\n                natureContract_id:  param.natureContract_id || '',\n                employeeGroup_id:   param.employeeGroup_id || ''\n            }\n        })\n        return response\n        \n    } catch (error) {\n        window.console.error(error)\n    }\n}\nmodule.exports.getEmploymentByEmployee = async (id) => {\n    try {\n        const response = await axios.get(apiUrl.employee.record_by_employee_get + `/${id}`)\n        return response\n    } catch (error) {\n        window.console.error(error)\n    }\n}\nmodule.exports.createTimesheet = async (data) => {\n    try {\n        const response = await axios.post(apiUrl.employee.timesheet_post, data)\n        return response\n    } catch (error) {\n        window.console.error(error)\n    }\n}\nmodule.exports.getTimesheet = async function (id) {\n    try {\n        const response = await axios.get(apiUrl.employee.timesheet_get+ '/' +  id)\n        return response.data\n    } catch (error) {\n        window.console.error(error)\n    }\n}\nmodule.exports.getTimesheetSingle = async function (id) {\n    try {\n        const response = await axios.get(apiUrl.employee.timesheet_single+  '/' +  id)\n        return response.data\n    } catch (error) {\n        window.console.error(error)\n    }\n}\nmodule.exports.getEmployeeTransactions = async function (employeeUuid) {\n    try {\n        const response = await axios.get(apiUrl.employee.transactions+  '/' +  employeeUuid)\n        return response.data\n    } catch (error) {\n        window.console.error(error)\n    }\n}\nmodule.exports.getEmployeeInfo = async function (employeeUuid) {\n    try {\n        const response = await axios.get(apiUrl.employee.employee_info+  '/' +  employeeUuid)\n        return response.data\n    } catch (error) {\n        window.console.error(error)\n    }\n}\nmodule.exports.getEmployeeDashboard = async function () {\n    try {\n        const response = await axios.get(apiUrl.employee.employee_dashboard)\n        return response.data\n    } catch (error) {\n        window.console.error(error)\n    }\n}\nmodule.exports.getEmployeeBalance = async function (val) {\n    try {\n        const response = await axios.get(apiUrl.employee.employee_balance,{\n            params:{\n                'employeeUuid': val.employeeUuid ? val.employeeUuid: '',\n                'end_date': val.end_date\n            }\n        })\n        return response.data\n    } catch (error) {\n        window.console.error(error)\n    }\n}\nmodule.exports.getEmployeeLeave = async function (search, params) {\n    try {\n        let response = []\n        if (search !== '' && search !== null && search !== 'null' && search !== undefined) {\n            response = await axios.get(apiUrl.employee.employee_leave + '/' + search,{\n                params: {\n                    'year':      params.year,\n                }\n            })\n            window.console.log('response',response)\n            return response\n        } else {\n            response = await axios.get(apiUrl.employee.employee_leave,{\n                params: {\n                    'year':      params.year,\n                }\n            })\n            return response\n        }\n    } catch (error) {\n        window.console.error(error)\n    }\n}\nmodule.exports.getLeaveSummary = async function (search, params) {\n    try {\n        let response = []\n        if (search !== '' && search !== null && search !== 'null' && search !== undefined) {\n            response = await axios.get(apiUrl.employee.leave_summary + '/' + search,{\n                params: {\n                    'year':      params.year,\n                }\n            })\n            return response\n        } else {\n            response = await axios.get(apiUrl.employee.leave_summary,{\n                params: {\n                    'year':      params.year,\n                }\n            })\n            return response\n        }\n    } catch (error) {\n        window.console.error(error)\n    }\n}\nmodule.exports.createFringeBenefit = async (data) => {\n    try {\n        const response = await axios.post(apiUrl.employee.employee_benefit, data)\n        return response\n    } catch (error) {\n        window.console.error(error)\n    }\n}\nmodule.exports.getFringeBenefit = async function (val) {\n    try {\n        const response = await axios.get(apiUrl.employee.employee_benefit_get,{\n            params:{\n                month_of: val\n            }\n        })\n        return response.data\n    } catch (error) {\n        window.console.error(error)\n    }\n}\nmodule.exports.getLastNumber = async function (val) {\n    try {\n        const response = await axios.get(apiUrl.employee.last_number_get,{\n            params:{\n                abbr: val.abbr,\n                id:   val.id || \"\"\n            }\n        })\n        return response.data\n    } catch (error) {\n        window.console.error(error)\n    }\n}"]}]}