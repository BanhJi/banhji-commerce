{"remainingRequest":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/babel-loader/lib/index.js!/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/eslint-loader/index.js??ref--14-0!/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/src/scripts/customerHandler.js","dependencies":[{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/src/scripts/customerHandler.js","mtime":1638499442978},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/babel.config.js","mtime":1638499442885},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/src/scripts/customerHandler.js"],"names":["axios","require","apiUrl","unknown","module","exports","gender","error","window","console","search","response","customer","customer_search","center","customerTypeId","customerGroupId","strFilter","undefined","get","customer_center","list","customer_get","getAll","getAllDonors","id","customer_getOne","create","data","post","customer_post","upload","directory","val","customer_directory","params","type","paymentTermReport","payment_term_report","importCreate","importVendorCreate","importEmpCreate","importServiceCreate","importSaleUnitCreate","hasTxn","has_txn","update","put","customer_put","lastNumber","customer_lastNumber","fundingCreate","funding_post","fundingGet","funding_get"],"mappings":"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","sourcesContent":["const axios = require('axios')\nconst apiUrl = require('../apiUrl.js')\nconst unknown = require('../api/unknown')\n\n// Gender\nmodule.exports.gender = function () {\n    try {\n        const gender = unknown.gender\n        // const response = await axios.get(unknown.gender)\n\n        return gender\n    } catch (error) {\n        window.console.error(error)\n    }\n}\n// Search\nmodule.exports.search = function () {\n    try {\n        const response = apiUrl.customer.customer_search\n        return response\n    } catch (error) {\n        window.console.error(error)\n    }\n}\n// Center\nmodule.exports.center = async function (customerTypeId, customerGroupId, search, strFilter = '') {\n    try {\n        let response = []\n        if (search !== '' && search !== null && search !== 'null' && search !== undefined && search !== 'undefined') {\n            response = await axios.get(apiUrl.customer.customer_center + '/' + customerTypeId + '/center/' + customerGroupId + '/' + search + strFilter)\n            return response\n        } else {\n            response = await axios.get(apiUrl.customer.customer_center + '/' + customerTypeId + '/center/' + customerGroupId + strFilter)\n            return response\n        }\n    } catch (error) {\n        window.console.error(error)\n    }\n}\n\n// List\nmodule.exports.list = async function () {\n    try {\n        const response = await axios.get(apiUrl.customer.customer_get)\n\n        return response\n    } catch (error) {\n        window.console.error(error)\n    }\n}\n\n// GET ALL BY DAWINE\nmodule.exports.getAll = async () => {\n    try {\n        const response = await axios.get(apiUrl.customer.customer_get)\n\n        return response;\n    } catch (error) {\n        window.console.error(error)\n    }\n}\n\n// GET ALL DONORS BY DAWINE\nmodule.exports.getAllDonors = async () => {\n    try {\n        const response = await axios.get(apiUrl.customer.customer_center + \"/undefined/center/undefined?is_donor=true\");\n\n        return response;\n    } catch (error) {\n        window.console.error(error)\n    }\n}\n\n// Get One\nmodule.exports.get = async function (id) {\n    try {\n        const response = await axios.get(apiUrl.customer.customer_getOne + id)\n\n        return response\n    } catch (error) {\n        window.console.error(error)\n    }\n}\n\n// save\nmodule.exports.create = async (data) => {\n    try {\n        const response = await axios.post(apiUrl.customer.customer_post, data)\n        return response\n    } catch (error) {\n        window.console.error(error)\n    }\n}\n\n\n// upload\nmodule.exports.upload = async (data) => {\n    try {\n        const response = await axios.post(\"https://ck3f4yltlf.execute-api.ap-southeast-1.amazonaws.com/dev/v1/uploads/file/upload\", data)\n        return response\n    } catch (error) {\n        window.console.error(error)\n    }\n}\n// update\n// module.exports.update = async (id, data) => {\n//     try {\n//         const response = await axios.put(apiUrl.customer.customer_group_put + id, data)\n//\n//         return response\n//     } catch (error) {\n//         window.console.error(error)\n//     }\n// }\nmodule.exports.directory = async function (val) {\n    try {\n        let response = await axios.get(apiUrl.customer.customer_directory, {\n            params: {\n                search: val.search,\n                type: val.type\n            }\n        })\n        return response\n    } catch (error) {\n        window.console.error(error)\n    }\n}\n\n//Todo: Payment term report\nmodule.exports.paymentTermReport = async function (strFilter = '') {\n    try {\n        return await axios.get(apiUrl.customer.payment_term_report + '/' + strFilter)\n    } catch (error) {\n        window.console.error(error)\n    }\n}\n\nmodule.exports.importCreate = async (data) => {\n    try {\n        const response = await axios.post(apiUrl.customer.importCreate, data)\n        return response\n    } catch (error) {\n        window.console.error(error)\n    }\n}\nmodule.exports.importVendorCreate = async (data) => {\n    try {\n        const response = await axios.post(apiUrl.customer.importVendorCreate, data)\n        return response\n    } catch (error) {\n        window.console.error(error)\n    }\n}\nmodule.exports.importEmpCreate = async (data) => {\n    try {\n        const response = await axios.post(apiUrl.customer.importEmpCreate, data)\n        return response\n    } catch (error) {\n        window.console.error(error)\n    }\n}\nmodule.exports.importServiceCreate = async (data) => {\n    try {\n        const response = await axios.post(apiUrl.customer.importServiceCreate, data)\n        return response\n    } catch (error) {\n        window.console.error(error)\n    }\n}\nmodule.exports.importSaleUnitCreate = async (data) => {\n    try {\n        const response = await axios.post(apiUrl.customer.importSaleUnitCreate, data)\n        return response\n    } catch (error) {\n        window.console.error(error)\n    }\n}\n//todo: check customer has transaction , can be delete\nmodule.exports.hasTxn = async (strFilter) => {\n    try {\n        return await axios.get(apiUrl.customer.has_txn + strFilter)\n    } catch (error) {\n        window.console.error(error)\n    }\n}\n//todo: update status customer to delete\nmodule.exports.update = async (strFilter) => {\n    try {\n        return await axios.put(apiUrl.customer.customer_put, strFilter)\n    } catch (error) {\n        window.console.error(error)\n    }\n}\n\n//todo: customer auto number generate\nmodule.exports.lastNumber = async (strFilter) => {\n    try {\n        return await axios.post(apiUrl.customer.customer_lastNumber, strFilter)\n    } catch (error) {\n        window.console.error(error)\n    }\n}\n\nmodule.exports.fundingCreate = async (data) => {\n    try {\n        const response = await axios.post(apiUrl.customer.funding_post, data)\n        return response\n    } catch (error) {\n        window.console.error(error)\n    }\n}\nmodule.exports.fundingGet = async function () {\n    try {\n        const response = await axios.get(apiUrl.customer.funding_get)\n        return response.data\n    } catch (error) {\n        window.console.error(error)\n    }\n}"]}]}