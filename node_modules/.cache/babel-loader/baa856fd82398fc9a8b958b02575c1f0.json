{"remainingRequest":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/babel-loader/lib/index.js!/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/eslint-loader/index.js??ref--13-0!/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/src/scripts/otherHandler.js","dependencies":[{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/src/scripts/otherHandler.js","mtime":1638499443047},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/src/scripts/otherHandler.js"],"names":["axios","require","instance","create","apiUrl","unknown","module","exports","bank","data","error","window","console","employeeType","gender","maritalStatus","paymentPeriod","nationality","get","response","country","other","customerTypeNature","customer","customer_nature_get","customerGroupPriceLevel","customer_group_price_level","customerBillTo","customer_bill_to","institute","institutes","bankParner","connectedBanks"],"mappings":"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","sourcesContent":["const axios = require('axios');\nconst instance = axios.create();\nconst apiUrl = require('../apiUrl.js')\nconst unknown = require('../api/unknown')\n\n// bank\nmodule.exports.bank = function () {\n    try {\n        const data = unknown.bank\n        // const response = await axios.get(unknown.gender)\n\n        return data\n    } catch (error) {\n        window.console.error(error)\n    }\n}\n// Employee Type\nmodule.exports.employeeType = function () {\n    try {\n        const employeeType = unknown.employeeType\n        // const response = await axios.get(unknown.gender)\n\n        return employeeType\n    } catch (error) {\n        window.console.error(error)\n    }\n}\n// Gender\nmodule.exports.gender = function () {\n    try {\n        const gender = unknown.gender\n        // const response = await axios.get(unknown.gender)\n\n        return gender\n    } catch (error) {\n        window.console.error(error)\n    }\n}\n// maritalStatus\nmodule.exports.maritalStatus = function () {\n    try {\n        const maritalStatus = unknown.maritalStatus\n        // const response = await axios.get(unknown.gender)\n\n        return maritalStatus\n    } catch (error) {\n        window.console.error(error)\n    }\n}\n// paymentPeriod\nmodule.exports.paymentPeriod = function () {\n    try {\n        const data = unknown.paymentPeriod\n        // const response = await axios.get(unknown.gender)\n\n        return data\n    } catch (error) {\n        window.console.error(error)\n    }\n}\n// Nationality\nmodule.exports.nationality = async function () {\n    try {\n        const response = await instance.get(unknown.nationality)\n        return response.data\n    } catch (error) {\n        window.console.error(error)\n    }\n}\n// List\nmodule.exports.country = async function () {\n    try {\n        const response = await instance.get(apiUrl.other.country)\n\n        return response.data\n    } catch (error) {\n        window.console.error(error)\n    }\n}\nmodule.exports.customerTypeNature = async function () {\n    try {\n        // const response = await axios.get(apiUrl.other.customer_type_nature_type)\n        const response = await axios.get(apiUrl.customer.customer_nature_get)\n\n        return response\n    } catch (error) {\n        window.console.error(error)\n    }\n}\nmodule.exports.customerGroupPriceLevel = async function () {\n    try {\n        const response = await axios.get(apiUrl.other.customer_group_price_level)\n\n        return response.data\n    } catch (error) {\n        window.console.error(error)\n    }\n}\nmodule.exports.customerBillTo = async function () {\n    try {\n        const response = await instance.get(apiUrl.other.customer_bill_to)\n\n        return response.data\n    } catch (error) {\n        window.console.error(error)\n    }\n}\n\n// institute list\n// List\nmodule.exports.institute = async function () {\n    try {\n        const response = await axios.get(apiUrl.other.institutes)\n\n        return response.data\n    } catch (error) {\n        window.console.error(error)\n    }\n}\n// get bank partner\nmodule.exports.bankParner = async function () {\n    try {\n        const response = await axios.get(unknown.connectedBanks)\n\n        return response.data\n    } catch (error) {\n        window.console.error(error)\n    }\n}\n\n\n"]}]}