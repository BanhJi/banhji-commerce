{"remainingRequest":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/babel-loader/lib/index.js!/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/eslint-loader/index.js??ref--13-0!/Users/macos/Desktop/banhji-0.2/banhji-commerce/src/scripts/kendo_editor/ExchangeRateEditor.js","dependencies":[{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/src/scripts/kendo_editor/ExchangeRateEditor.js","mtime":1638499442996},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IGtlbmRvIGZyb20gJ0Bwcm9ncmVzcy9rZW5kby11aSc7Cgp2YXIgX3JlcXVpcmUgPSByZXF1aXJlKCJAL3NjcmlwdHMvQXBwSGFuZGxlcnMiKSwKICAgIGV4Y2hhbmdlUmF0ZUhhbmRsZXIgPSBfcmVxdWlyZS5leGNoYW5nZVJhdGVIYW5kbGVyOwoKZXhwb3J0IGRlZmF1bHQgKGZ1bmN0aW9uIChjb250YWluZXIsIG9wdGlvbnMpIHsKICAvLyBVc2UgbG9jYWwgZGF0YQogIHZhciBkcyA9IG5ldyBrZW5kby5kYXRhLkRhdGFTb3VyY2UoewogICAgZGF0YTogW10KICB9KTsgLy8gRGVmaW5kZSBkcm9wZG93bmxpc3QKCiAgdmFyIGRkbCA9IGtlbmRvLmpRdWVyeSgnPGlucHV0IHJlcXVpcmVkIG5hbWU9IicgKyBvcHRpb25zLmZpZWxkICsgJyIvPicpLmFwcGVuZFRvKGNvbnRhaW5lcikua2VuZG9Ecm9wRG93bkxpc3QoewogICAgYXV0b1dpZHRoOiB0cnVlLAogICAgaGVpZ2h0OiA0MDAsCiAgICBmaWx0ZXI6ICJzdGFydHN3aXRoIiwKICAgIGRhdGFUZXh0RmllbGQ6ICJjb2RlIiwKICAgIGRhdGFWYWx1ZUZpZWxkOiAic2siLAogICAgb3B0aW9uTGFiZWw6ICItLS0gU2VsZWN0IC0tLSIsCiAgICBkYXRhU291cmNlOiBkcwogIH0pLmRhdGEoImtlbmRvRHJvcERvd25MaXN0Iik7IC8vIFVzZSByZW1vdGUgZGF0YQoKICBleGNoYW5nZVJhdGVIYW5kbGVyLmdldEFsbCgpLnRoZW4oZnVuY3Rpb24gKHJlcykgewogICAgdmFyIHJlbW90ZURTID0gbmV3IGtlbmRvLmRhdGEuRGF0YVNvdXJjZSh7CiAgICAgIGRhdGE6IHJlcy5kYXRhLmRhdGEKICAgIH0pOwogICAgZGRsLnNldERhdGFTb3VyY2UocmVtb3RlRFMpOwogIH0pOwogIHJldHVybiBkZGw7Cn0pOw=="},{"version":3,"sources":["/Users/macos/Desktop/banhji-0.2/banhji-commerce/src/scripts/kendo_editor/ExchangeRateEditor.js"],"names":["kendo","require","exchangeRateHandler","container","options","ds","data","DataSource","ddl","jQuery","field","appendTo","kendoDropDownList","autoWidth","height","filter","dataTextField","dataValueField","optionLabel","dataSource","getAll","then","res","remoteDS","setDataSource"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,oBAAlB;;AAEA,eAAgCC,OAAO,CAAC,uBAAD,CAAvC;AAAA,IAAQC,mBAAR,YAAQA,mBAAR;;AAEA,gBAAe,UAACC,SAAD,EAAYC,OAAZ,EAAwB;AACnC;AACA,MAAIC,EAAE,GAAG,IAAIL,KAAK,CAACM,IAAN,CAAWC,UAAf,CAA0B;AAC/BD,IAAAA,IAAI,EAAE;AADyB,GAA1B,CAAT,CAFmC,CAMnC;;AACA,MAAIE,GAAG,GAAGR,KAAK,CAACS,MAAN,CAAa,2BAA2BL,OAAO,CAACM,KAAnC,GAA2C,KAAxD,EACDC,QADC,CACQR,SADR,EAEDS,iBAFC,CAEiB;AACfC,IAAAA,SAAS,EAAE,IADI;AAEfC,IAAAA,MAAM,EAAE,GAFO;AAGfC,IAAAA,MAAM,EAAC,YAHQ;AAIfC,IAAAA,aAAa,EAAE,MAJA;AAKfC,IAAAA,cAAc,EAAE,IALD;AAMfC,IAAAA,WAAW,EAAE,gBANE;AAOfC,IAAAA,UAAU,EAAEd;AAPG,GAFjB,EAUCC,IAVD,CAUM,mBAVN,CAAV,CAPmC,CAmBnC;;AAEIJ,EAAAA,mBAAmB,CAACkB,MAApB,GACCC,IADD,CACM,UAAAC,GAAG,EAAI;AACT,QAAIC,QAAQ,GAAG,IAAIvB,KAAK,CAACM,IAAN,CAAWC,UAAf,CAA0B;AACrCD,MAAAA,IAAI,EAAEgB,GAAG,CAAChB,IAAJ,CAASA;AADsB,KAA1B,CAAf;AAIAE,IAAAA,GAAG,CAACgB,aAAJ,CAAkBD,QAAlB;AACH,GAPD;AASJ,SAAOf,GAAP;AACH,CA/BD","sourcesContent":["import kendo from '@progress/kendo-ui';\n\nconst { exchangeRateHandler } = require(\"@/scripts/AppHandlers\");\n\nexport default (container, options) => {\n    // Use local data\n    let ds = new kendo.data.DataSource({\n        data: []\n    })\n\n    // Definde dropdownlist\n    let ddl = kendo.jQuery('<input required name=\"' + options.field + '\"/>')\n            .appendTo(container)\n            .kendoDropDownList({\n                autoWidth: true,\n                height: 400,\n                filter:\"startswith\",\n                dataTextField: \"code\",\n                dataValueField: \"sk\",\n                optionLabel: \"--- Select ---\",\n                dataSource: ds\n            }).data(\"kendoDropDownList\");\n    \n    // Use remote data\n    \n        exchangeRateHandler.getAll()\n        .then(res => {\n            let remoteDS = new kendo.data.DataSource({\n                data: res.data.data\n            })\n\n            ddl.setDataSource(remoteDS);\n        });\n\n    return ddl;\n}"]}]}