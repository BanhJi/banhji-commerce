{"remainingRequest":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/babel-loader/lib/index.js!/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/eslint-loader/index.js??ref--13-0!/Users/macos/Desktop/banhji-0.2/banhji-commerce/src/scripts/bankStatementHandler.js","dependencies":[{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/src/scripts/bankStatementHandler.js","mtime":1638499442969},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIF9hc3luY1RvR2VuZXJhdG9yID0gcmVxdWlyZSgiL1VzZXJzL21hY29zL0Rlc2t0b3AvYmFuaGppLTAuMi9iYW5oamktY29tbWVyY2Uvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXN5bmNUb0dlbmVyYXRvciIpLmRlZmF1bHQ7CgpyZXF1aXJlKCJyZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUuanMiKTsKCnZhciBheGlvcyA9IHJlcXVpcmUoJ2F4aW9zJyk7Cgp2YXIgYXBpVXJsID0gcmVxdWlyZSgnQC9hcGlVcmwuanMnKTsKCnZhciB1cmxQYXRoID0gYXBpVXJsLmJhbmtfYWNjb3VudHM7IC8vIEdFVCBCWSBCQU5LIEFDQ09VTlQgVVVJRAoKbW9kdWxlLmV4cG9ydHMuZ2V0QnlCYW5rQWNjb3VudElkID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHsKICB2YXIgX3JlZiA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZShpZCkgewogICAgdmFyIHJlc3BvbnNlOwogICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7CiAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gMDsKICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDM7CiAgICAgICAgICAgIHJldHVybiBheGlvcy5nZXQodXJsUGF0aCArICIvIi5jb25jYXQoaWQsICIvc3RhdGVtZW50cyIpKTsKCiAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgIHJlc3BvbnNlID0gX2NvbnRleHQuc2VudDsKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdCgicmV0dXJuIiwgcmVzcG9uc2UpOwoKICAgICAgICAgIGNhc2UgNzoKICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDc7CiAgICAgICAgICAgIF9jb250ZXh0LnQwID0gX2NvbnRleHRbImNhdGNoIl0oMCk7CiAgICAgICAgICAgIHdpbmRvdy5jb25zb2xlLmVycm9yKF9jb250ZXh0LnQwKTsKCiAgICAgICAgICBjYXNlIDEwOgogICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0sIF9jYWxsZWUsIG51bGwsIFtbMCwgN11dKTsKICB9KSk7CgogIHJldHVybiBmdW5jdGlvbiAoX3gpIHsKICAgIHJldHVybiBfcmVmLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgfTsKfSgpOyAvLyBHRVQgTElTVAoKCm1vZHVsZS5leHBvcnRzLmdldEFsbCA9IC8qI19fUFVSRV9fKi9fYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUyKCkgewogIHZhciByZXNwb25zZTsKICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTIkKF9jb250ZXh0MikgewogICAgd2hpbGUgKDEpIHsKICAgICAgc3dpdGNoIChfY29udGV4dDIucHJldiA9IF9jb250ZXh0Mi5uZXh0KSB7CiAgICAgICAgY2FzZSAwOgogICAgICAgICAgX2NvbnRleHQyLnByZXYgPSAwOwogICAgICAgICAgX2NvbnRleHQyLm5leHQgPSAzOwogICAgICAgICAgcmV0dXJuIGF4aW9zLmdldCh1cmxQYXRoICsgJy9iYW5rc3RhdGVtZW50cycpOwoKICAgICAgICBjYXNlIDM6CiAgICAgICAgICByZXNwb25zZSA9IF9jb250ZXh0Mi5zZW50OwogICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5hYnJ1cHQoInJldHVybiIsIHJlc3BvbnNlKTsKCiAgICAgICAgY2FzZSA3OgogICAgICAgICAgX2NvbnRleHQyLnByZXYgPSA3OwogICAgICAgICAgX2NvbnRleHQyLnQwID0gX2NvbnRleHQyWyJjYXRjaCJdKDApOwogICAgICAgICAgd2luZG93LmNvbnNvbGUuZXJyb3IoX2NvbnRleHQyLnQwKTsKCiAgICAgICAgY2FzZSAxMDoKICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5zdG9wKCk7CiAgICAgIH0KICAgIH0KICB9LCBfY2FsbGVlMiwgbnVsbCwgW1swLCA3XV0pOwp9KSk7IC8vIFNBVkUKCm1vZHVsZS5leHBvcnRzLnNhdmUgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkgewogIHZhciBfcmVmMyA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTMoZGF0YSkgewogICAgdmFyIGlzQmF0Y2gsCiAgICAgICAgc2F2ZUJhdGNoLAogICAgICAgIHJlc3BvbnNlLAogICAgICAgIF9hcmdzMyA9IGFyZ3VtZW50czsKICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMyQoX2NvbnRleHQzKSB7CiAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgc3dpdGNoIChfY29udGV4dDMucHJldiA9IF9jb250ZXh0My5uZXh0KSB7CiAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgIGlzQmF0Y2ggPSBfYXJnczMubGVuZ3RoID4gMSAmJiBfYXJnczNbMV0gIT09IHVuZGVmaW5lZCA/IF9hcmdzM1sxXSA6IGZhbHNlOwogICAgICAgICAgICBfY29udGV4dDMucHJldiA9IDE7CiAgICAgICAgICAgIHNhdmVCYXRjaCA9ICcnOwoKICAgICAgICAgICAgaWYgKGlzQmF0Y2gpIHsKICAgICAgICAgICAgICBzYXZlQmF0Y2ggPSAnL2JhdGNoJzsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgX2NvbnRleHQzLm5leHQgPSA2OwogICAgICAgICAgICByZXR1cm4gYXhpb3MucG9zdCh1cmxQYXRoICsgJy9zdGF0ZW1lbnRzJyArIHNhdmVCYXRjaCwgZGF0YSk7CgogICAgICAgICAgY2FzZSA2OgogICAgICAgICAgICByZXNwb25zZSA9IF9jb250ZXh0My5zZW50OwogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQzLmFicnVwdCgicmV0dXJuIiwgcmVzcG9uc2UpOwoKICAgICAgICAgIGNhc2UgMTA6CiAgICAgICAgICAgIF9jb250ZXh0My5wcmV2ID0gMTA7CiAgICAgICAgICAgIF9jb250ZXh0My50MCA9IF9jb250ZXh0M1siY2F0Y2giXSgxKTsKICAgICAgICAgICAgd2luZG93LmNvbnNvbGUuZXJyb3IoX2NvbnRleHQzLnQwKTsKCiAgICAgICAgICBjYXNlIDEzOgogICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0My5zdG9wKCk7CiAgICAgICAgfQogICAgICB9CiAgICB9LCBfY2FsbGVlMywgbnVsbCwgW1sxLCAxMF1dKTsKICB9KSk7CgogIHJldHVybiBmdW5jdGlvbiAoX3gyKSB7CiAgICByZXR1cm4gX3JlZjMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICB9Owp9KCk7IC8vIEdFVCBMSVNUCgoKbW9kdWxlLmV4cG9ydHMudG9CZVJlY29uY2lsZUVudHJpZXMgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkgewogIHZhciBfcmVmNCA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTQocGFyYW1zKSB7CiAgICB2YXIgcmVzcG9uc2U7CiAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTQkKF9jb250ZXh0NCkgewogICAgICB3aGlsZSAoMSkgewogICAgICAgIHN3aXRjaCAoX2NvbnRleHQ0LnByZXYgPSBfY29udGV4dDQubmV4dCkgewogICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICBfY29udGV4dDQucHJldiA9IDA7CiAgICAgICAgICAgIF9jb250ZXh0NC5uZXh0ID0gMzsKICAgICAgICAgICAgcmV0dXJuIGF4aW9zLmdldChhcGlVcmwuYmFua2luZyArICcvdG9iZXJlY29uY2lsZWVudHJpZXMnLCBwYXJhbXMpOwoKICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgcmVzcG9uc2UgPSBfY29udGV4dDQuc2VudDsKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NC5hYnJ1cHQoInJldHVybiIsIHJlc3BvbnNlKTsKCiAgICAgICAgICBjYXNlIDc6CiAgICAgICAgICAgIF9jb250ZXh0NC5wcmV2ID0gNzsKICAgICAgICAgICAgX2NvbnRleHQ0LnQwID0gX2NvbnRleHQ0WyJjYXRjaCJdKDApOwogICAgICAgICAgICB3aW5kb3cuY29uc29sZS5lcnJvcihfY29udGV4dDQudDApOwoKICAgICAgICAgIGNhc2UgMTA6CiAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ0LnN0b3AoKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0sIF9jYWxsZWU0LCBudWxsLCBbWzAsIDddXSk7CiAgfSkpOwoKICByZXR1cm4gZnVuY3Rpb24gKF94MykgewogICAgcmV0dXJuIF9yZWY0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgfTsKfSgpOw=="},{"version":3,"sources":["/Users/macos/Desktop/banhji-0.2/banhji-commerce/src/scripts/bankStatementHandler.js"],"names":["axios","require","apiUrl","urlPath","bank_accounts","module","exports","getByBankAccountId","id","get","response","window","console","error","getAll","save","data","isBatch","saveBatch","post","toBeReconcileEntries","params","banking"],"mappings":";;;;AAAA,IAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AACA,IAAMC,MAAM,GAAGD,OAAO,CAAC,aAAD,CAAtB;;AACA,IAAME,OAAO,GAAGD,MAAM,CAACE,aAAvB,C,CAEA;;AACAC,MAAM,CAACC,OAAP,CAAeC,kBAAf;AAAA,qEAAoC,iBAAOC,EAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAELR,KAAK,CAACS,GAAN,CAAUN,OAAO,cAAOK,EAAP,gBAAjB,CAFK;;AAAA;AAEtBE,YAAAA,QAFsB;AAAA,6CAIrBA,QAJqB;;AAAA;AAAA;AAAA;AAM5BC,YAAAA,MAAM,CAACC,OAAP,CAAeC,KAAf;;AAN4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAApC;;AAAA;AAAA;AAAA;AAAA,I,CAUA;;;AACAR,MAAM,CAACC,OAAP,CAAeQ,MAAf,wEAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAEOd,KAAK,CAACS,GAAN,CAAUN,OAAO,GAAG,iBAApB,CAFP;;AAAA;AAEVO,UAAAA,QAFU;AAAA,4CAITA,QAJS;;AAAA;AAAA;AAAA;AAMhBC,UAAAA,MAAM,CAACC,OAAP,CAAeC,KAAf;;AANgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAxB,G,CAUA;;AACAR,MAAM,CAACC,OAAP,CAAeS,IAAf;AAAA,sEAAsB,kBAAOC,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAaC,YAAAA,OAAb,8DAAuB,KAAvB;AAAA;AAEVC,YAAAA,SAFU,GAEE,EAFF;;AAGd,gBAAGD,OAAH,EAAW;AACPC,cAAAA,SAAS,GAAG,QAAZ;AACH;;AALa;AAAA,mBAOSlB,KAAK,CAACmB,IAAN,CAAWhB,OAAO,GAAG,aAAV,GAA0Be,SAArC,EAAgDF,IAAhD,CAPT;;AAAA;AAORN,YAAAA,QAPQ;AAAA,8CASPA,QATO;;AAAA;AAAA;AAAA;AAWdC,YAAAA,MAAM,CAACC,OAAP,CAAeC,KAAf;;AAXc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAtB;;AAAA;AAAA;AAAA;AAAA,I,CAeA;;;AACAR,MAAM,CAACC,OAAP,CAAec,oBAAf;AAAA,sEAAsC,kBAAOC,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEPrB,KAAK,CAACS,GAAN,CAAUP,MAAM,CAACoB,OAAP,GAAiB,uBAA3B,EAAoDD,MAApD,CAFO;;AAAA;AAExBX,YAAAA,QAFwB;AAAA,8CAIvBA,QAJuB;;AAAA;AAAA;AAAA;AAM9BC,YAAAA,MAAM,CAACC,OAAP,CAAeC,KAAf;;AAN8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAtC;;AAAA;AAAA;AAAA;AAAA","sourcesContent":["const axios = require('axios');\nconst apiUrl = require('@/apiUrl.js');\nconst urlPath = apiUrl.bank_accounts;\n\n// GET BY BANK ACCOUNT UUID\nmodule.exports.getByBankAccountId = async (id) => {\n    try {\n        const response = await axios.get(urlPath + `/${id}/statements`);\n        \n        return response;\n    } catch (error) {\n        window.console.error(error);\n    }\n}\n\n// GET LIST\nmodule.exports.getAll = async () => {\n    try {\n        const response = await axios.get(urlPath + '/bankstatements');\n        \n        return response;\n    } catch (error) {\n        window.console.error(error);\n    }\n}\n\n// SAVE\nmodule.exports.save = async (data, isBatch = false) => {\n    try {\n        let saveBatch = '';\n        if(isBatch){\n            saveBatch = '/batch';\n        }\n\n        const response = await axios.post(urlPath + '/statements' + saveBatch, data);\n        \n        return response;\n    } catch (error) {\n        window.console.error(error);\n    }\n}\n\n// GET LIST\nmodule.exports.toBeReconcileEntries = async (params) => {\n    try {\n        const response = await axios.get(apiUrl.banking + '/tobereconcileentries', params);\n        \n        return response;\n    } catch (error) {\n        window.console.error(error);\n    }\n}"]}]}