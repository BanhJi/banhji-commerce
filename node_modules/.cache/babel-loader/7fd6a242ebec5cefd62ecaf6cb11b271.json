{"remainingRequest":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/babel-loader/lib/index.js!/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/eslint-loader/index.js??ref--13-0!/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/src/scripts/employeeHandler.js","dependencies":[{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/src/scripts/employeeHandler.js","mtime":1638499442982},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIF9hc3luY1RvR2VuZXJhdG9yID0gcmVxdWlyZSgiL1VzZXJzL21hY29zL0Rlc2t0b3AvYmFuaGppLTAuMi9iYW5oamktYWNjb3VudGluZy13ZWItbW9kdWxlL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2FzeW5jVG9HZW5lcmF0b3IiKS5kZWZhdWx0OwoKcmVxdWlyZSgicmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lLmpzIik7CgpyZXF1aXJlKCJjb3JlLWpzL21vZHVsZXMvZXMucmVnZXhwLmV4ZWMuanMiKTsKCnJlcXVpcmUoImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuc2VhcmNoLmpzIik7Cgp2YXIgYXhpb3MgPSByZXF1aXJlKCdheGlvcycpOwoKdmFyIGFwaVVybCA9IHJlcXVpcmUoJy4uL2FwaVVybC5qcycpOyAvL1NlYXJjaCBVUkwKCgptb2R1bGUuZXhwb3J0cy5zZWFyY2hVUkwgPSBmdW5jdGlvbiAoKSB7CiAgdHJ5IHsKICAgIHZhciByZXNwb25zZSA9IGFwaVVybC5lbXBsb3llZS5lbXBsb3llZV9zZWFyY2g7CiAgICByZXR1cm4gcmVzcG9uc2U7CiAgfSBjYXRjaCAoZXJyb3IpIHsKICAgIHdpbmRvdy5jb25zb2xlLmVycm9yKGVycm9yKTsKICB9Cn07IC8vU2VhcmNoCgoKbW9kdWxlLmV4cG9ydHMuc2VhcmNoID0gZnVuY3Rpb24gKCkgewogIHRyeSB7CiAgICB2YXIgcmVzcG9uc2UgPSBhcGlVcmwuZW1wbG95ZWUuZW1wbG95ZWVfY2VudGVyOwogICAgcmV0dXJuIHJlc3BvbnNlOwogIH0gY2F0Y2ggKGVycm9yKSB7CiAgICB3aW5kb3cuY29uc29sZS5lcnJvcihlcnJvcik7CiAgfQp9OyAvLyBDZW50ZXIKCgptb2R1bGUuZXhwb3J0cy5jZW50ZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkgewogIHZhciBfcmVmID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlKHNlYXJjaCkgewogICAgdmFyIHJlc3BvbnNlOwogICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7CiAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gMDsKICAgICAgICAgICAgcmVzcG9uc2UgPSBbXTsKCiAgICAgICAgICAgIGlmICghKHNlYXJjaCAhPT0gJycgJiYgc2VhcmNoICE9PSBudWxsICYmIHNlYXJjaCAhPT0gJ251bGwnICYmIHNlYXJjaCAhPT0gdW5kZWZpbmVkKSkgewogICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA5OwogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICB9CgogICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNTsKICAgICAgICAgICAgcmV0dXJuIGF4aW9zLmdldChhcGlVcmwuZW1wbG95ZWUuZW1wbG95ZWVfY2VudGVyICsgJy8nICsgc2VhcmNoKTsKCiAgICAgICAgICBjYXNlIDU6CiAgICAgICAgICAgIHJlc3BvbnNlID0gX2NvbnRleHQuc2VudDsKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdCgicmV0dXJuIiwgcmVzcG9uc2UpOwoKICAgICAgICAgIGNhc2UgOToKICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDExOwogICAgICAgICAgICByZXR1cm4gYXhpb3MuZ2V0KGFwaVVybC5lbXBsb3llZS5lbXBsb3llZV9jZW50ZXIpOwoKICAgICAgICAgIGNhc2UgMTE6CiAgICAgICAgICAgIHJlc3BvbnNlID0gX2NvbnRleHQuc2VudDsKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdCgicmV0dXJuIiwgcmVzcG9uc2UpOwoKICAgICAgICAgIGNhc2UgMTM6CiAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAxODsKICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgY2FzZSAxNToKICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDE1OwogICAgICAgICAgICBfY29udGV4dC50MCA9IF9jb250ZXh0WyJjYXRjaCJdKDApOwogICAgICAgICAgICB3aW5kb3cuY29uc29sZS5lcnJvcihfY29udGV4dC50MCk7CgogICAgICAgICAgY2FzZSAxODoKICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgfQogICAgICB9CiAgICB9LCBfY2FsbGVlLCBudWxsLCBbWzAsIDE1XV0pOwogIH0pKTsKCiAgcmV0dXJuIGZ1bmN0aW9uIChfeCkgewogICAgcmV0dXJuIF9yZWYuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICB9Owp9KCk7IC8vIC8vIExpc3QKLy8gbW9kdWxlLmV4cG9ydHMubGlzdCA9IGFzeW5jIGZ1bmN0aW9uICgpIHsKLy8gICAgIHRyeSB7Ci8vICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBheGlvcy5nZXQoYXBpVXJsLmN1c3RvbWVyLmN1c3RvbWVyX2dldCkKLy8KLy8gICAgICAgICByZXR1cm4gcmVzcG9uc2UKLy8gICAgIH0gY2F0Y2ggKGVycm9yKSB7Ci8vICAgICAgICAgd2luZG93LmNvbnNvbGUuZXJyb3IoZXJyb3IpCi8vICAgICB9Ci8vIH0KLy8gR2V0IE9uZQoKCm1vZHVsZS5leHBvcnRzLmdldCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7CiAgdmFyIF9yZWYyID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMihpZCkgewogICAgdmFyIHJlc3BvbnNlOwogICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUyJChfY29udGV4dDIpIHsKICAgICAgd2hpbGUgKDEpIHsKICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Mi5wcmV2ID0gX2NvbnRleHQyLm5leHQpIHsKICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgX2NvbnRleHQyLnByZXYgPSAwOwogICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDM7CiAgICAgICAgICAgIHJldHVybiBheGlvcy5nZXQoYXBpVXJsLmVtcGxveWVlLmVtcGxveWVlX2dldE9uZSArIGlkKTsKCiAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgIHJlc3BvbnNlID0gX2NvbnRleHQyLnNlbnQ7CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuYWJydXB0KCJyZXR1cm4iLCByZXNwb25zZSk7CgogICAgICAgICAgY2FzZSA3OgogICAgICAgICAgICBfY29udGV4dDIucHJldiA9IDc7CiAgICAgICAgICAgIF9jb250ZXh0Mi50MCA9IF9jb250ZXh0MlsiY2F0Y2giXSgwKTsKICAgICAgICAgICAgd2luZG93LmNvbnNvbGUuZXJyb3IoX2NvbnRleHQyLnQwKTsKCiAgICAgICAgICBjYXNlIDEwOgogICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5zdG9wKCk7CiAgICAgICAgfQogICAgICB9CiAgICB9LCBfY2FsbGVlMiwgbnVsbCwgW1swLCA3XV0pOwogIH0pKTsKCiAgcmV0dXJuIGZ1bmN0aW9uIChfeDIpIHsKICAgIHJldHVybiBfcmVmMi5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogIH07Cn0oKTsgLy8gc2F2ZQoKCm1vZHVsZS5leHBvcnRzLmNyZWF0ZSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7CiAgdmFyIF9yZWYzID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMyhkYXRhKSB7CiAgICB2YXIgcmVzcG9uc2U7CiAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTMkKF9jb250ZXh0MykgewogICAgICB3aGlsZSAoMSkgewogICAgICAgIHN3aXRjaCAoX2NvbnRleHQzLnByZXYgPSBfY29udGV4dDMubmV4dCkgewogICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICBfY29udGV4dDMucHJldiA9IDA7CiAgICAgICAgICAgIF9jb250ZXh0My5uZXh0ID0gMzsKICAgICAgICAgICAgcmV0dXJuIGF4aW9zLnBvc3QoYXBpVXJsLmVtcGxveWVlLmVtcGxveWVlX3Bvc3QsIGRhdGEpOwoKICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgcmVzcG9uc2UgPSBfY29udGV4dDMuc2VudDsKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0My5hYnJ1cHQoInJldHVybiIsIHJlc3BvbnNlKTsKCiAgICAgICAgICBjYXNlIDc6CiAgICAgICAgICAgIF9jb250ZXh0My5wcmV2ID0gNzsKICAgICAgICAgICAgX2NvbnRleHQzLnQwID0gX2NvbnRleHQzWyJjYXRjaCJdKDApOwogICAgICAgICAgICB3aW5kb3cuY29uc29sZS5lcnJvcihfY29udGV4dDMudDApOwoKICAgICAgICAgIGNhc2UgMTA6CiAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQzLnN0b3AoKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0sIF9jYWxsZWUzLCBudWxsLCBbWzAsIDddXSk7CiAgfSkpOwoKICByZXR1cm4gZnVuY3Rpb24gKF94MykgewogICAgcmV0dXJuIF9yZWYzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgfTsKfSgpOyAvLyB1cGRhdGUKCgptb2R1bGUuZXhwb3J0cy51cGRhdGUgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkgewogIHZhciBfcmVmNCA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTQoaWQpIHsKICAgIHZhciByZXNwb25zZTsKICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlNCQoX2NvbnRleHQ0KSB7CiAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgc3dpdGNoIChfY29udGV4dDQucHJldiA9IF9jb250ZXh0NC5uZXh0KSB7CiAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgIF9jb250ZXh0NC5wcmV2ID0gMDsKICAgICAgICAgICAgX2NvbnRleHQ0Lm5leHQgPSAzOwogICAgICAgICAgICByZXR1cm4gYXhpb3MucHV0KGFwaVVybC5lbXBsb3llZS5lbXBsb3llZV91cGRhdGUgKyBpZCk7CgogICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICByZXNwb25zZSA9IF9jb250ZXh0NC5zZW50OwogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ0LmFicnVwdCgicmV0dXJuIiwgcmVzcG9uc2UpOwoKICAgICAgICAgIGNhc2UgNzoKICAgICAgICAgICAgX2NvbnRleHQ0LnByZXYgPSA3OwogICAgICAgICAgICBfY29udGV4dDQudDAgPSBfY29udGV4dDRbImNhdGNoIl0oMCk7CiAgICAgICAgICAgIHdpbmRvdy5jb25zb2xlLmVycm9yKF9jb250ZXh0NC50MCk7CgogICAgICAgICAgY2FzZSAxMDoKICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dDQuc3RvcCgpOwogICAgICAgIH0KICAgICAgfQogICAgfSwgX2NhbGxlZTQsIG51bGwsIFtbMCwgN11dKTsKICB9KSk7CgogIHJldHVybiBmdW5jdGlvbiAoX3g0KSB7CiAgICByZXR1cm4gX3JlZjQuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICB9Owp9KCk7IC8vIEdFVCBMSVNUIEJZIERBV0lORQoKCm1vZHVsZS5leHBvcnRzLmdldEFsbCA9IC8qI19fUFVSRV9fKi9fYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWU1KCkgewogIHZhciByZXNwb25zZTsKICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTUkKF9jb250ZXh0NSkgewogICAgd2hpbGUgKDEpIHsKICAgICAgc3dpdGNoIChfY29udGV4dDUucHJldiA9IF9jb250ZXh0NS5uZXh0KSB7CiAgICAgICAgY2FzZSAwOgogICAgICAgICAgX2NvbnRleHQ1LnByZXYgPSAwOwogICAgICAgICAgX2NvbnRleHQ1Lm5leHQgPSAzOwogICAgICAgICAgcmV0dXJuIGF4aW9zLmdldChhcGlVcmwuZW1wbG95ZWUuZW1wbG95ZWVfY2VudGVyKTsKCiAgICAgICAgY2FzZSAzOgogICAgICAgICAgcmVzcG9uc2UgPSBfY29udGV4dDUuc2VudDsKICAgICAgICAgIHJldHVybiBfY29udGV4dDUuYWJydXB0KCJyZXR1cm4iLCByZXNwb25zZSk7CgogICAgICAgIGNhc2UgNzoKICAgICAgICAgIF9jb250ZXh0NS5wcmV2ID0gNzsKICAgICAgICAgIF9jb250ZXh0NS50MCA9IF9jb250ZXh0NVsiY2F0Y2giXSgwKTsKICAgICAgICAgIHdpbmRvdy5jb25zb2xlLmVycm9yKF9jb250ZXh0NS50MCk7CgogICAgICAgIGNhc2UgMTA6CiAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgIHJldHVybiBfY29udGV4dDUuc3RvcCgpOwogICAgICB9CiAgICB9CiAgfSwgX2NhbGxlZTUsIG51bGwsIFtbMCwgN11dKTsKfSkpOwoKbW9kdWxlLmV4cG9ydHMuY3JlYXRlRW1wbG95bWVudCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7CiAgdmFyIF9yZWY2ID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlNihkYXRhKSB7CiAgICB2YXIgcmVzcG9uc2U7CiAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTYkKF9jb250ZXh0NikgewogICAgICB3aGlsZSAoMSkgewogICAgICAgIHN3aXRjaCAoX2NvbnRleHQ2LnByZXYgPSBfY29udGV4dDYubmV4dCkgewogICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICBfY29udGV4dDYucHJldiA9IDA7CiAgICAgICAgICAgIF9jb250ZXh0Ni5uZXh0ID0gMzsKICAgICAgICAgICAgcmV0dXJuIGF4aW9zLnBvc3QoYXBpVXJsLmVtcGxveWVlLmVtcGxveW1lbnRfcmVjb3JkX3Bvc3QsIGRhdGEpOwoKICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgcmVzcG9uc2UgPSBfY29udGV4dDYuc2VudDsKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Ni5hYnJ1cHQoInJldHVybiIsIHJlc3BvbnNlKTsKCiAgICAgICAgICBjYXNlIDc6CiAgICAgICAgICAgIF9jb250ZXh0Ni5wcmV2ID0gNzsKICAgICAgICAgICAgX2NvbnRleHQ2LnQwID0gX2NvbnRleHQ2WyJjYXRjaCJdKDApOwogICAgICAgICAgICB3aW5kb3cuY29uc29sZS5lcnJvcihfY29udGV4dDYudDApOwoKICAgICAgICAgIGNhc2UgMTA6CiAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ2LnN0b3AoKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0sIF9jYWxsZWU2LCBudWxsLCBbWzAsIDddXSk7CiAgfSkpOwoKICByZXR1cm4gZnVuY3Rpb24gKF94NSkgewogICAgcmV0dXJuIF9yZWY2LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgfTsKfSgpOwoKbW9kdWxlLmV4cG9ydHMuZ2V0RW1wbG95bWVudExpc3RCeUVtcGxveWVlID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHsKICB2YXIgX3JlZjcgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWU3KGlkKSB7CiAgICB2YXIgcmVzcG9uc2U7CiAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTckKF9jb250ZXh0NykgewogICAgICB3aGlsZSAoMSkgewogICAgICAgIHN3aXRjaCAoX2NvbnRleHQ3LnByZXYgPSBfY29udGV4dDcubmV4dCkgewogICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICBfY29udGV4dDcucHJldiA9IDA7CiAgICAgICAgICAgIF9jb250ZXh0Ny5uZXh0ID0gMzsKICAgICAgICAgICAgcmV0dXJuIGF4aW9zLmdldChhcGlVcmwuZW1wbG95ZWUucmVjb3JkX2xpc3RfYnlfZW1wbG95ZWVfZ2V0ICsgJy8nICsgaWQpOwoKICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgcmVzcG9uc2UgPSBfY29udGV4dDcuc2VudDsKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Ny5hYnJ1cHQoInJldHVybiIsIHJlc3BvbnNlLmRhdGEuZGF0YSk7CgogICAgICAgICAgY2FzZSA3OgogICAgICAgICAgICBfY29udGV4dDcucHJldiA9IDc7CiAgICAgICAgICAgIF9jb250ZXh0Ny50MCA9IF9jb250ZXh0N1siY2F0Y2giXSgwKTsKICAgICAgICAgICAgd2luZG93LmNvbnNvbGUuZXJyb3IoX2NvbnRleHQ3LnQwKTsKCiAgICAgICAgICBjYXNlIDEwOgogICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Ny5zdG9wKCk7CiAgICAgICAgfQogICAgICB9CiAgICB9LCBfY2FsbGVlNywgbnVsbCwgW1swLCA3XV0pOwogIH0pKTsKCiAgcmV0dXJuIGZ1bmN0aW9uIChfeDYpIHsKICAgIHJldHVybiBfcmVmNy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogIH07Cn0oKTsKCm1vZHVsZS5leHBvcnRzLmdldFJlY29yZCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7CiAgdmFyIF9yZWY4ID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlOChwYXJhbSkgewogICAgdmFyIHJlc3BvbnNlOwogICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU4JChfY29udGV4dDgpIHsKICAgICAgd2hpbGUgKDEpIHsKICAgICAgICBzd2l0Y2ggKF9jb250ZXh0OC5wcmV2ID0gX2NvbnRleHQ4Lm5leHQpIHsKICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgX2NvbnRleHQ4LnByZXYgPSAwOwogICAgICAgICAgICBfY29udGV4dDgubmV4dCA9IDM7CiAgICAgICAgICAgIHJldHVybiBheGlvcy5nZXQoYXBpVXJsLmVtcGxveWVlLnJlY29yZF9nZXQsIHsKICAgICAgICAgICAgICBwYXJhbXM6IHsKICAgICAgICAgICAgICAgIHN0YXR1czogcGFyYW0uc3RhdHVzID8gcGFyYW0uc3RhdHVzIDogMSwKICAgICAgICAgICAgICAgIGVtcGxveWVlSWQ6IHBhcmFtLmVtcGxveWVlSWQgPyBwYXJhbS5lbXBsb3llZUlkIDogJycsCiAgICAgICAgICAgICAgICBsb2NhdGlvbl9pZDogcGFyYW0ubG9jYXRpb25faWQgfHwgJycsCiAgICAgICAgICAgICAgICBkZXBhcnRtZW50X2lkOiBwYXJhbS5kZXBhcnRtZW50X2lkIHx8ICcnLAogICAgICAgICAgICAgICAgbmF0dXJlQ29udHJhY3RfaWQ6IHBhcmFtLm5hdHVyZUNvbnRyYWN0X2lkIHx8ICcnLAogICAgICAgICAgICAgICAgZW1wbG95ZWVHcm91cF9pZDogcGFyYW0uZW1wbG95ZWVHcm91cF9pZCB8fCAnJwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CgogICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICByZXNwb25zZSA9IF9jb250ZXh0OC5zZW50OwogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ4LmFicnVwdCgicmV0dXJuIiwgcmVzcG9uc2UpOwoKICAgICAgICAgIGNhc2UgNzoKICAgICAgICAgICAgX2NvbnRleHQ4LnByZXYgPSA3OwogICAgICAgICAgICBfY29udGV4dDgudDAgPSBfY29udGV4dDhbImNhdGNoIl0oMCk7CiAgICAgICAgICAgIHdpbmRvdy5jb25zb2xlLmVycm9yKF9jb250ZXh0OC50MCk7CgogICAgICAgICAgY2FzZSAxMDoKICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dDguc3RvcCgpOwogICAgICAgIH0KICAgICAgfQogICAgfSwgX2NhbGxlZTgsIG51bGwsIFtbMCwgN11dKTsKICB9KSk7CgogIHJldHVybiBmdW5jdGlvbiAoX3g3KSB7CiAgICByZXR1cm4gX3JlZjguYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICB9Owp9KCk7Cgptb2R1bGUuZXhwb3J0cy5nZXRFbXBsb3ltZW50QnlFbXBsb3llZSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7CiAgdmFyIF9yZWY5ID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlOShpZCkgewogICAgdmFyIHJlc3BvbnNlOwogICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU5JChfY29udGV4dDkpIHsKICAgICAgd2hpbGUgKDEpIHsKICAgICAgICBzd2l0Y2ggKF9jb250ZXh0OS5wcmV2ID0gX2NvbnRleHQ5Lm5leHQpIHsKICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgX2NvbnRleHQ5LnByZXYgPSAwOwogICAgICAgICAgICBfY29udGV4dDkubmV4dCA9IDM7CiAgICAgICAgICAgIHJldHVybiBheGlvcy5nZXQoYXBpVXJsLmVtcGxveWVlLnJlY29yZF9ieV9lbXBsb3llZV9nZXQgKyAiLyIuY29uY2F0KGlkKSk7CgogICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICByZXNwb25zZSA9IF9jb250ZXh0OS5zZW50OwogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ5LmFicnVwdCgicmV0dXJuIiwgcmVzcG9uc2UpOwoKICAgICAgICAgIGNhc2UgNzoKICAgICAgICAgICAgX2NvbnRleHQ5LnByZXYgPSA3OwogICAgICAgICAgICBfY29udGV4dDkudDAgPSBfY29udGV4dDlbImNhdGNoIl0oMCk7CiAgICAgICAgICAgIHdpbmRvdy5jb25zb2xlLmVycm9yKF9jb250ZXh0OS50MCk7CgogICAgICAgICAgY2FzZSAxMDoKICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dDkuc3RvcCgpOwogICAgICAgIH0KICAgICAgfQogICAgfSwgX2NhbGxlZTksIG51bGwsIFtbMCwgN11dKTsKICB9KSk7CgogIHJldHVybiBmdW5jdGlvbiAoX3g4KSB7CiAgICByZXR1cm4gX3JlZjkuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICB9Owp9KCk7Cgptb2R1bGUuZXhwb3J0cy5jcmVhdGVUaW1lc2hlZXQgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkgewogIHZhciBfcmVmMTAgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUxMChkYXRhKSB7CiAgICB2YXIgcmVzcG9uc2U7CiAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTEwJChfY29udGV4dDEwKSB7CiAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgc3dpdGNoIChfY29udGV4dDEwLnByZXYgPSBfY29udGV4dDEwLm5leHQpIHsKICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgX2NvbnRleHQxMC5wcmV2ID0gMDsKICAgICAgICAgICAgX2NvbnRleHQxMC5uZXh0ID0gMzsKICAgICAgICAgICAgcmV0dXJuIGF4aW9zLnBvc3QoYXBpVXJsLmVtcGxveWVlLnRpbWVzaGVldF9wb3N0LCBkYXRhKTsKCiAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgIHJlc3BvbnNlID0gX2NvbnRleHQxMC5zZW50OwogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQxMC5hYnJ1cHQoInJldHVybiIsIHJlc3BvbnNlKTsKCiAgICAgICAgICBjYXNlIDc6CiAgICAgICAgICAgIF9jb250ZXh0MTAucHJldiA9IDc7CiAgICAgICAgICAgIF9jb250ZXh0MTAudDAgPSBfY29udGV4dDEwWyJjYXRjaCJdKDApOwogICAgICAgICAgICB3aW5kb3cuY29uc29sZS5lcnJvcihfY29udGV4dDEwLnQwKTsKCiAgICAgICAgICBjYXNlIDEwOgogICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MTAuc3RvcCgpOwogICAgICAgIH0KICAgICAgfQogICAgfSwgX2NhbGxlZTEwLCBudWxsLCBbWzAsIDddXSk7CiAgfSkpOwoKICByZXR1cm4gZnVuY3Rpb24gKF94OSkgewogICAgcmV0dXJuIF9yZWYxMC5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogIH07Cn0oKTsKCm1vZHVsZS5leHBvcnRzLmdldFRpbWVzaGVldCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7CiAgdmFyIF9yZWYxMSA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTExKGlkKSB7CiAgICB2YXIgcmVzcG9uc2U7CiAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTExJChfY29udGV4dDExKSB7CiAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgc3dpdGNoIChfY29udGV4dDExLnByZXYgPSBfY29udGV4dDExLm5leHQpIHsKICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgX2NvbnRleHQxMS5wcmV2ID0gMDsKICAgICAgICAgICAgX2NvbnRleHQxMS5uZXh0ID0gMzsKICAgICAgICAgICAgcmV0dXJuIGF4aW9zLmdldChhcGlVcmwuZW1wbG95ZWUudGltZXNoZWV0X2dldCArICcvJyArIGlkKTsKCiAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgIHJlc3BvbnNlID0gX2NvbnRleHQxMS5zZW50OwogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQxMS5hYnJ1cHQoInJldHVybiIsIHJlc3BvbnNlLmRhdGEpOwoKICAgICAgICAgIGNhc2UgNzoKICAgICAgICAgICAgX2NvbnRleHQxMS5wcmV2ID0gNzsKICAgICAgICAgICAgX2NvbnRleHQxMS50MCA9IF9jb250ZXh0MTFbImNhdGNoIl0oMCk7CiAgICAgICAgICAgIHdpbmRvdy5jb25zb2xlLmVycm9yKF9jb250ZXh0MTEudDApOwoKICAgICAgICAgIGNhc2UgMTA6CiAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQxMS5zdG9wKCk7CiAgICAgICAgfQogICAgICB9CiAgICB9LCBfY2FsbGVlMTEsIG51bGwsIFtbMCwgN11dKTsKICB9KSk7CgogIHJldHVybiBmdW5jdGlvbiAoX3gxMCkgewogICAgcmV0dXJuIF9yZWYxMS5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogIH07Cn0oKTsKCm1vZHVsZS5leHBvcnRzLmdldFRpbWVzaGVldFNpbmdsZSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7CiAgdmFyIF9yZWYxMiA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTEyKGlkKSB7CiAgICB2YXIgcmVzcG9uc2U7CiAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTEyJChfY29udGV4dDEyKSB7CiAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgc3dpdGNoIChfY29udGV4dDEyLnByZXYgPSBfY29udGV4dDEyLm5leHQpIHsKICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgX2NvbnRleHQxMi5wcmV2ID0gMDsKICAgICAgICAgICAgX2NvbnRleHQxMi5uZXh0ID0gMzsKICAgICAgICAgICAgcmV0dXJuIGF4aW9zLmdldChhcGlVcmwuZW1wbG95ZWUudGltZXNoZWV0X3NpbmdsZSArICcvJyArIGlkKTsKCiAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgIHJlc3BvbnNlID0gX2NvbnRleHQxMi5zZW50OwogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQxMi5hYnJ1cHQoInJldHVybiIsIHJlc3BvbnNlLmRhdGEpOwoKICAgICAgICAgIGNhc2UgNzoKICAgICAgICAgICAgX2NvbnRleHQxMi5wcmV2ID0gNzsKICAgICAgICAgICAgX2NvbnRleHQxMi50MCA9IF9jb250ZXh0MTJbImNhdGNoIl0oMCk7CiAgICAgICAgICAgIHdpbmRvdy5jb25zb2xlLmVycm9yKF9jb250ZXh0MTIudDApOwoKICAgICAgICAgIGNhc2UgMTA6CiAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQxMi5zdG9wKCk7CiAgICAgICAgfQogICAgICB9CiAgICB9LCBfY2FsbGVlMTIsIG51bGwsIFtbMCwgN11dKTsKICB9KSk7CgogIHJldHVybiBmdW5jdGlvbiAoX3gxMSkgewogICAgcmV0dXJuIF9yZWYxMi5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogIH07Cn0oKTsKCm1vZHVsZS5leHBvcnRzLmdldEVtcGxveWVlVHJhbnNhY3Rpb25zID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHsKICB2YXIgX3JlZjEzID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMTMoZW1wbG95ZWVVdWlkKSB7CiAgICB2YXIgcmVzcG9uc2U7CiAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTEzJChfY29udGV4dDEzKSB7CiAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgc3dpdGNoIChfY29udGV4dDEzLnByZXYgPSBfY29udGV4dDEzLm5leHQpIHsKICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgX2NvbnRleHQxMy5wcmV2ID0gMDsKICAgICAgICAgICAgX2NvbnRleHQxMy5uZXh0ID0gMzsKICAgICAgICAgICAgcmV0dXJuIGF4aW9zLmdldChhcGlVcmwuZW1wbG95ZWUudHJhbnNhY3Rpb25zICsgJy8nICsgZW1wbG95ZWVVdWlkKTsKCiAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgIHJlc3BvbnNlID0gX2NvbnRleHQxMy5zZW50OwogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQxMy5hYnJ1cHQoInJldHVybiIsIHJlc3BvbnNlLmRhdGEpOwoKICAgICAgICAgIGNhc2UgNzoKICAgICAgICAgICAgX2NvbnRleHQxMy5wcmV2ID0gNzsKICAgICAgICAgICAgX2NvbnRleHQxMy50MCA9IF9jb250ZXh0MTNbImNhdGNoIl0oMCk7CiAgICAgICAgICAgIHdpbmRvdy5jb25zb2xlLmVycm9yKF9jb250ZXh0MTMudDApOwoKICAgICAgICAgIGNhc2UgMTA6CiAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQxMy5zdG9wKCk7CiAgICAgICAgfQogICAgICB9CiAgICB9LCBfY2FsbGVlMTMsIG51bGwsIFtbMCwgN11dKTsKICB9KSk7CgogIHJldHVybiBmdW5jdGlvbiAoX3gxMikgewogICAgcmV0dXJuIF9yZWYxMy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogIH07Cn0oKTsKCm1vZHVsZS5leHBvcnRzLmdldEVtcGxveWVlSW5mbyA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7CiAgdmFyIF9yZWYxNCA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTE0KGVtcGxveWVlVXVpZCkgewogICAgdmFyIHJlc3BvbnNlOwogICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUxNCQoX2NvbnRleHQxNCkgewogICAgICB3aGlsZSAoMSkgewogICAgICAgIHN3aXRjaCAoX2NvbnRleHQxNC5wcmV2ID0gX2NvbnRleHQxNC5uZXh0KSB7CiAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgIF9jb250ZXh0MTQucHJldiA9IDA7CiAgICAgICAgICAgIF9jb250ZXh0MTQubmV4dCA9IDM7CiAgICAgICAgICAgIHJldHVybiBheGlvcy5nZXQoYXBpVXJsLmVtcGxveWVlLmVtcGxveWVlX2luZm8gKyAnLycgKyBlbXBsb3llZVV1aWQpOwoKICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgcmVzcG9uc2UgPSBfY29udGV4dDE0LnNlbnQ7CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dDE0LmFicnVwdCgicmV0dXJuIiwgcmVzcG9uc2UuZGF0YSk7CgogICAgICAgICAgY2FzZSA3OgogICAgICAgICAgICBfY29udGV4dDE0LnByZXYgPSA3OwogICAgICAgICAgICBfY29udGV4dDE0LnQwID0gX2NvbnRleHQxNFsiY2F0Y2giXSgwKTsKICAgICAgICAgICAgd2luZG93LmNvbnNvbGUuZXJyb3IoX2NvbnRleHQxNC50MCk7CgogICAgICAgICAgY2FzZSAxMDoKICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dDE0LnN0b3AoKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0sIF9jYWxsZWUxNCwgbnVsbCwgW1swLCA3XV0pOwogIH0pKTsKCiAgcmV0dXJuIGZ1bmN0aW9uIChfeDEzKSB7CiAgICByZXR1cm4gX3JlZjE0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgfTsKfSgpOwoKbW9kdWxlLmV4cG9ydHMuZ2V0RW1wbG95ZWVEYXNoYm9hcmQgPSAvKiNfX1BVUkVfXyovX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMTUoKSB7CiAgdmFyIHJlc3BvbnNlOwogIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMTUkKF9jb250ZXh0MTUpIHsKICAgIHdoaWxlICgxKSB7CiAgICAgIHN3aXRjaCAoX2NvbnRleHQxNS5wcmV2ID0gX2NvbnRleHQxNS5uZXh0KSB7CiAgICAgICAgY2FzZSAwOgogICAgICAgICAgX2NvbnRleHQxNS5wcmV2ID0gMDsKICAgICAgICAgIF9jb250ZXh0MTUubmV4dCA9IDM7CiAgICAgICAgICByZXR1cm4gYXhpb3MuZ2V0KGFwaVVybC5lbXBsb3llZS5lbXBsb3llZV9kYXNoYm9hcmQpOwoKICAgICAgICBjYXNlIDM6CiAgICAgICAgICByZXNwb25zZSA9IF9jb250ZXh0MTUuc2VudDsKICAgICAgICAgIHJldHVybiBfY29udGV4dDE1LmFicnVwdCgicmV0dXJuIiwgcmVzcG9uc2UuZGF0YSk7CgogICAgICAgIGNhc2UgNzoKICAgICAgICAgIF9jb250ZXh0MTUucHJldiA9IDc7CiAgICAgICAgICBfY29udGV4dDE1LnQwID0gX2NvbnRleHQxNVsiY2F0Y2giXSgwKTsKICAgICAgICAgIHdpbmRvdy5jb25zb2xlLmVycm9yKF9jb250ZXh0MTUudDApOwoKICAgICAgICBjYXNlIDEwOgogICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICByZXR1cm4gX2NvbnRleHQxNS5zdG9wKCk7CiAgICAgIH0KICAgIH0KICB9LCBfY2FsbGVlMTUsIG51bGwsIFtbMCwgN11dKTsKfSkpOwoKbW9kdWxlLmV4cG9ydHMuZ2V0RW1wbG95ZWVCYWxhbmNlID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHsKICB2YXIgX3JlZjE2ID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMTYodmFsKSB7CiAgICB2YXIgcmVzcG9uc2U7CiAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTE2JChfY29udGV4dDE2KSB7CiAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgc3dpdGNoIChfY29udGV4dDE2LnByZXYgPSBfY29udGV4dDE2Lm5leHQpIHsKICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgX2NvbnRleHQxNi5wcmV2ID0gMDsKICAgICAgICAgICAgX2NvbnRleHQxNi5uZXh0ID0gMzsKICAgICAgICAgICAgcmV0dXJuIGF4aW9zLmdldChhcGlVcmwuZW1wbG95ZWUuZW1wbG95ZWVfYmFsYW5jZSwgewogICAgICAgICAgICAgIHBhcmFtczogewogICAgICAgICAgICAgICAgJ2VtcGxveWVlVXVpZCc6IHZhbC5lbXBsb3llZVV1aWQgPyB2YWwuZW1wbG95ZWVVdWlkIDogJycsCiAgICAgICAgICAgICAgICAnZW5kX2RhdGUnOiB2YWwuZW5kX2RhdGUKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwoKICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgcmVzcG9uc2UgPSBfY29udGV4dDE2LnNlbnQ7CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dDE2LmFicnVwdCgicmV0dXJuIiwgcmVzcG9uc2UuZGF0YSk7CgogICAgICAgICAgY2FzZSA3OgogICAgICAgICAgICBfY29udGV4dDE2LnByZXYgPSA3OwogICAgICAgICAgICBfY29udGV4dDE2LnQwID0gX2NvbnRleHQxNlsiY2F0Y2giXSgwKTsKICAgICAgICAgICAgd2luZG93LmNvbnNvbGUuZXJyb3IoX2NvbnRleHQxNi50MCk7CgogICAgICAgICAgY2FzZSAxMDoKICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dDE2LnN0b3AoKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0sIF9jYWxsZWUxNiwgbnVsbCwgW1swLCA3XV0pOwogIH0pKTsKCiAgcmV0dXJuIGZ1bmN0aW9uIChfeDE0KSB7CiAgICByZXR1cm4gX3JlZjE2LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgfTsKfSgpOwoKbW9kdWxlLmV4cG9ydHMuZ2V0RW1wbG95ZWVMZWF2ZSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7CiAgdmFyIF9yZWYxNyA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTE3KHNlYXJjaCwgcGFyYW1zKSB7CiAgICB2YXIgcmVzcG9uc2U7CiAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTE3JChfY29udGV4dDE3KSB7CiAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgc3dpdGNoIChfY29udGV4dDE3LnByZXYgPSBfY29udGV4dDE3Lm5leHQpIHsKICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgX2NvbnRleHQxNy5wcmV2ID0gMDsKICAgICAgICAgICAgcmVzcG9uc2UgPSBbXTsKCiAgICAgICAgICAgIGlmICghKHNlYXJjaCAhPT0gJycgJiYgc2VhcmNoICE9PSBudWxsICYmIHNlYXJjaCAhPT0gJ251bGwnICYmIHNlYXJjaCAhPT0gdW5kZWZpbmVkKSkgewogICAgICAgICAgICAgIF9jb250ZXh0MTcubmV4dCA9IDEwOwogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICB9CgogICAgICAgICAgICBfY29udGV4dDE3Lm5leHQgPSA1OwogICAgICAgICAgICByZXR1cm4gYXhpb3MuZ2V0KGFwaVVybC5lbXBsb3llZS5lbXBsb3llZV9sZWF2ZSArICcvJyArIHNlYXJjaCwgewogICAgICAgICAgICAgIHBhcmFtczogewogICAgICAgICAgICAgICAgJ3llYXInOiBwYXJhbXMueWVhcgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CgogICAgICAgICAgY2FzZSA1OgogICAgICAgICAgICByZXNwb25zZSA9IF9jb250ZXh0MTcuc2VudDsKICAgICAgICAgICAgd2luZG93LmNvbnNvbGUubG9nKCdyZXNwb25zZScsIHJlc3BvbnNlKTsKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MTcuYWJydXB0KCJyZXR1cm4iLCByZXNwb25zZSk7CgogICAgICAgICAgY2FzZSAxMDoKICAgICAgICAgICAgX2NvbnRleHQxNy5uZXh0ID0gMTI7CiAgICAgICAgICAgIHJldHVybiBheGlvcy5nZXQoYXBpVXJsLmVtcGxveWVlLmVtcGxveWVlX2xlYXZlLCB7CiAgICAgICAgICAgICAgcGFyYW1zOiB7CiAgICAgICAgICAgICAgICAneWVhcic6IHBhcmFtcy55ZWFyCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKCiAgICAgICAgICBjYXNlIDEyOgogICAgICAgICAgICByZXNwb25zZSA9IF9jb250ZXh0MTcuc2VudDsKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MTcuYWJydXB0KCJyZXR1cm4iLCByZXNwb25zZSk7CgogICAgICAgICAgY2FzZSAxNDoKICAgICAgICAgICAgX2NvbnRleHQxNy5uZXh0ID0gMTk7CiAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgIGNhc2UgMTY6CiAgICAgICAgICAgIF9jb250ZXh0MTcucHJldiA9IDE2OwogICAgICAgICAgICBfY29udGV4dDE3LnQwID0gX2NvbnRleHQxN1siY2F0Y2giXSgwKTsKICAgICAgICAgICAgd2luZG93LmNvbnNvbGUuZXJyb3IoX2NvbnRleHQxNy50MCk7CgogICAgICAgICAgY2FzZSAxOToKICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dDE3LnN0b3AoKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0sIF9jYWxsZWUxNywgbnVsbCwgW1swLCAxNl1dKTsKICB9KSk7CgogIHJldHVybiBmdW5jdGlvbiAoX3gxNSwgX3gxNikgewogICAgcmV0dXJuIF9yZWYxNy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogIH07Cn0oKTsKCm1vZHVsZS5leHBvcnRzLmdldExlYXZlU3VtbWFyeSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7CiAgdmFyIF9yZWYxOCA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTE4KHNlYXJjaCwgcGFyYW1zKSB7CiAgICB2YXIgcmVzcG9uc2U7CiAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTE4JChfY29udGV4dDE4KSB7CiAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgc3dpdGNoIChfY29udGV4dDE4LnByZXYgPSBfY29udGV4dDE4Lm5leHQpIHsKICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgX2NvbnRleHQxOC5wcmV2ID0gMDsKICAgICAgICAgICAgcmVzcG9uc2UgPSBbXTsKCiAgICAgICAgICAgIGlmICghKHNlYXJjaCAhPT0gJycgJiYgc2VhcmNoICE9PSBudWxsICYmIHNlYXJjaCAhPT0gJ251bGwnICYmIHNlYXJjaCAhPT0gdW5kZWZpbmVkKSkgewogICAgICAgICAgICAgIF9jb250ZXh0MTgubmV4dCA9IDk7CiAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIF9jb250ZXh0MTgubmV4dCA9IDU7CiAgICAgICAgICAgIHJldHVybiBheGlvcy5nZXQoYXBpVXJsLmVtcGxveWVlLmxlYXZlX3N1bW1hcnkgKyAnLycgKyBzZWFyY2gsIHsKICAgICAgICAgICAgICBwYXJhbXM6IHsKICAgICAgICAgICAgICAgICd5ZWFyJzogcGFyYW1zLnllYXIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwoKICAgICAgICAgIGNhc2UgNToKICAgICAgICAgICAgcmVzcG9uc2UgPSBfY29udGV4dDE4LnNlbnQ7CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dDE4LmFicnVwdCgicmV0dXJuIiwgcmVzcG9uc2UpOwoKICAgICAgICAgIGNhc2UgOToKICAgICAgICAgICAgX2NvbnRleHQxOC5uZXh0ID0gMTE7CiAgICAgICAgICAgIHJldHVybiBheGlvcy5nZXQoYXBpVXJsLmVtcGxveWVlLmxlYXZlX3N1bW1hcnksIHsKICAgICAgICAgICAgICBwYXJhbXM6IHsKICAgICAgICAgICAgICAgICd5ZWFyJzogcGFyYW1zLnllYXIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwoKICAgICAgICAgIGNhc2UgMTE6CiAgICAgICAgICAgIHJlc3BvbnNlID0gX2NvbnRleHQxOC5zZW50OwogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQxOC5hYnJ1cHQoInJldHVybiIsIHJlc3BvbnNlKTsKCiAgICAgICAgICBjYXNlIDEzOgogICAgICAgICAgICBfY29udGV4dDE4Lm5leHQgPSAxODsKICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgY2FzZSAxNToKICAgICAgICAgICAgX2NvbnRleHQxOC5wcmV2ID0gMTU7CiAgICAgICAgICAgIF9jb250ZXh0MTgudDAgPSBfY29udGV4dDE4WyJjYXRjaCJdKDApOwogICAgICAgICAgICB3aW5kb3cuY29uc29sZS5lcnJvcihfY29udGV4dDE4LnQwKTsKCiAgICAgICAgICBjYXNlIDE4OgogICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MTguc3RvcCgpOwogICAgICAgIH0KICAgICAgfQogICAgfSwgX2NhbGxlZTE4LCBudWxsLCBbWzAsIDE1XV0pOwogIH0pKTsKCiAgcmV0dXJuIGZ1bmN0aW9uIChfeDE3LCBfeDE4KSB7CiAgICByZXR1cm4gX3JlZjE4LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgfTsKfSgpOwoKbW9kdWxlLmV4cG9ydHMuY3JlYXRlRnJpbmdlQmVuZWZpdCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7CiAgdmFyIF9yZWYxOSA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTE5KGRhdGEpIHsKICAgIHZhciByZXNwb25zZTsKICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMTkkKF9jb250ZXh0MTkpIHsKICAgICAgd2hpbGUgKDEpIHsKICAgICAgICBzd2l0Y2ggKF9jb250ZXh0MTkucHJldiA9IF9jb250ZXh0MTkubmV4dCkgewogICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICBfY29udGV4dDE5LnByZXYgPSAwOwogICAgICAgICAgICBfY29udGV4dDE5Lm5leHQgPSAzOwogICAgICAgICAgICByZXR1cm4gYXhpb3MucG9zdChhcGlVcmwuZW1wbG95ZWUuZW1wbG95ZWVfYmVuZWZpdCwgZGF0YSk7CgogICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICByZXNwb25zZSA9IF9jb250ZXh0MTkuc2VudDsKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MTkuYWJydXB0KCJyZXR1cm4iLCByZXNwb25zZSk7CgogICAgICAgICAgY2FzZSA3OgogICAgICAgICAgICBfY29udGV4dDE5LnByZXYgPSA3OwogICAgICAgICAgICBfY29udGV4dDE5LnQwID0gX2NvbnRleHQxOVsiY2F0Y2giXSgwKTsKICAgICAgICAgICAgd2luZG93LmNvbnNvbGUuZXJyb3IoX2NvbnRleHQxOS50MCk7CgogICAgICAgICAgY2FzZSAxMDoKICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dDE5LnN0b3AoKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0sIF9jYWxsZWUxOSwgbnVsbCwgW1swLCA3XV0pOwogIH0pKTsKCiAgcmV0dXJuIGZ1bmN0aW9uIChfeDE5KSB7CiAgICByZXR1cm4gX3JlZjE5LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgfTsKfSgpOwoKbW9kdWxlLmV4cG9ydHMuZ2V0RnJpbmdlQmVuZWZpdCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7CiAgdmFyIF9yZWYyMCA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTIwKHZhbCkgewogICAgdmFyIHJlc3BvbnNlOwogICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUyMCQoX2NvbnRleHQyMCkgewogICAgICB3aGlsZSAoMSkgewogICAgICAgIHN3aXRjaCAoX2NvbnRleHQyMC5wcmV2ID0gX2NvbnRleHQyMC5uZXh0KSB7CiAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgIF9jb250ZXh0MjAucHJldiA9IDA7CiAgICAgICAgICAgIF9jb250ZXh0MjAubmV4dCA9IDM7CiAgICAgICAgICAgIHJldHVybiBheGlvcy5nZXQoYXBpVXJsLmVtcGxveWVlLmVtcGxveWVlX2JlbmVmaXRfZ2V0LCB7CiAgICAgICAgICAgICAgcGFyYW1zOiB7CiAgICAgICAgICAgICAgICBtb250aF9vZjogdmFsCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKCiAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgIHJlc3BvbnNlID0gX2NvbnRleHQyMC5zZW50OwogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyMC5hYnJ1cHQoInJldHVybiIsIHJlc3BvbnNlLmRhdGEpOwoKICAgICAgICAgIGNhc2UgNzoKICAgICAgICAgICAgX2NvbnRleHQyMC5wcmV2ID0gNzsKICAgICAgICAgICAgX2NvbnRleHQyMC50MCA9IF9jb250ZXh0MjBbImNhdGNoIl0oMCk7CiAgICAgICAgICAgIHdpbmRvdy5jb25zb2xlLmVycm9yKF9jb250ZXh0MjAudDApOwoKICAgICAgICAgIGNhc2UgMTA6CiAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyMC5zdG9wKCk7CiAgICAgICAgfQogICAgICB9CiAgICB9LCBfY2FsbGVlMjAsIG51bGwsIFtbMCwgN11dKTsKICB9KSk7CgogIHJldHVybiBmdW5jdGlvbiAoX3gyMCkgewogICAgcmV0dXJuIF9yZWYyMC5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogIH07Cn0oKTsKCm1vZHVsZS5leHBvcnRzLmdldExhc3ROdW1iZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkgewogIHZhciBfcmVmMjEgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUyMSh2YWwpIHsKICAgIHZhciByZXNwb25zZTsKICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMjEkKF9jb250ZXh0MjEpIHsKICAgICAgd2hpbGUgKDEpIHsKICAgICAgICBzd2l0Y2ggKF9jb250ZXh0MjEucHJldiA9IF9jb250ZXh0MjEubmV4dCkgewogICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICBfY29udGV4dDIxLnByZXYgPSAwOwogICAgICAgICAgICBfY29udGV4dDIxLm5leHQgPSAzOwogICAgICAgICAgICByZXR1cm4gYXhpb3MuZ2V0KGFwaVVybC5lbXBsb3llZS5sYXN0X251bWJlcl9nZXQsIHsKICAgICAgICAgICAgICBwYXJhbXM6IHsKICAgICAgICAgICAgICAgIGFiYnI6IHZhbC5hYmJyLAogICAgICAgICAgICAgICAgaWQ6IHZhbC5pZCB8fCAiIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CgogICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICByZXNwb25zZSA9IF9jb250ZXh0MjEuc2VudDsKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MjEuYWJydXB0KCJyZXR1cm4iLCByZXNwb25zZS5kYXRhKTsKCiAgICAgICAgICBjYXNlIDc6CiAgICAgICAgICAgIF9jb250ZXh0MjEucHJldiA9IDc7CiAgICAgICAgICAgIF9jb250ZXh0MjEudDAgPSBfY29udGV4dDIxWyJjYXRjaCJdKDApOwogICAgICAgICAgICB3aW5kb3cuY29uc29sZS5lcnJvcihfY29udGV4dDIxLnQwKTsKCiAgICAgICAgICBjYXNlIDEwOgogICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MjEuc3RvcCgpOwogICAgICAgIH0KICAgICAgfQogICAgfSwgX2NhbGxlZTIxLCBudWxsLCBbWzAsIDddXSk7CiAgfSkpOwoKICByZXR1cm4gZnVuY3Rpb24gKF94MjEpIHsKICAgIHJldHVybiBfcmVmMjEuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICB9Owp9KCk7"},{"version":3,"sources":["/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/src/scripts/employeeHandler.js"],"names":["axios","require","apiUrl","module","exports","searchURL","response","employee","employee_search","error","window","console","search","employee_center","center","undefined","get","id","employee_getOne","create","data","post","employee_post","update","put","employee_update","getAll","createEmployment","employment_record_post","getEmploymentListByEmployee","record_list_by_employee_get","getRecord","param","record_get","params","status","employeeId","location_id","department_id","natureContract_id","employeeGroup_id","getEmploymentByEmployee","record_by_employee_get","createTimesheet","timesheet_post","getTimesheet","timesheet_get","getTimesheetSingle","timesheet_single","getEmployeeTransactions","employeeUuid","transactions","getEmployeeInfo","employee_info","getEmployeeDashboard","employee_dashboard","getEmployeeBalance","val","employee_balance","end_date","getEmployeeLeave","employee_leave","year","log","getLeaveSummary","leave_summary","createFringeBenefit","employee_benefit","getFringeBenefit","employee_benefit_get","month_of","getLastNumber","last_number_get","abbr"],"mappings":"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","sourcesContent":["const axios = require('axios')\nconst apiUrl = require('../apiUrl.js')\n\n//Search URL\nmodule.exports.searchURL = function () {\n    try {\n        const response = apiUrl.employee.employee_search\n        return response\n    } catch (error) {\n        window.console.error(error)\n    }\n}\n\n\n//Search\nmodule.exports.search = function () {\n    try {\n        const response = apiUrl.employee.employee_center\n        return response\n    } catch (error) {\n        window.console.error(error)\n    }\n}\n// Center\nmodule.exports.center = async function (search) {\n    try {\n        let response = []\n        if (search !== '' && search !== null && search !== 'null' && search !== undefined) {\n            response = await axios.get(apiUrl.employee.employee_center + '/' + search)\n            return response\n        } else {\n            response = await axios.get(apiUrl.employee.employee_center)\n            return response\n        }\n    } catch (error) {\n        window.console.error(error)\n    }\n}\n// // List\n// module.exports.list = async function () {\n//     try {\n//         const response = await axios.get(apiUrl.customer.customer_get)\n//\n//         return response\n//     } catch (error) {\n//         window.console.error(error)\n//     }\n// }\n// Get One\nmodule.exports.get = async function (id) {\n    try {\n        const response = await axios.get(apiUrl.employee.employee_getOne + id)\n\n        return response\n    } catch (error) {\n        window.console.error(error)\n    }\n}\n\n// save\nmodule.exports.create = async (data) => {\n    try {\n        const response = await axios.post(apiUrl.employee.employee_post, data)\n        return response\n    } catch (error) {\n        window.console.error(error)\n    }\n}\n// update\nmodule.exports.update = async (id) => {\n    try {\n        const response = await axios.put(apiUrl.employee.employee_update + id)\n        return response\n    } catch (error) {\n        window.console.error(error)\n    }\n}\n// GET LIST BY DAWINE\nmodule.exports.getAll = async () => {\n    try {\n        const response = await axios.get(apiUrl.employee.employee_center)\n\n        return response\n    } catch (error) {\n        window.console.error(error)\n    }\n}\nmodule.exports.createEmployment = async (data) => {\n    try {\n        const response = await axios.post(apiUrl.employee.employment_record_post, data)\n        return response\n    } catch (error) {\n        window.console.error(error)\n    }\n}\nmodule.exports.getEmploymentListByEmployee = async function (id) {\n    try {\n        const response = await axios.get(apiUrl.employee.record_list_by_employee_get + '/' +  id)\n        return response.data.data\n    } catch (error) {\n        window.console.error(error)\n    }\n}\nmodule.exports.getRecord = async function (param) {\n    try {\n        const response = await axios.get(apiUrl.employee.record_get,{\n            params: {\n                status:             param.status ? param.status: 1,\n                employeeId:         param.employeeId ? param.employeeId: '',\n                location_id:        param.location_id || '',\n                department_id:      param.department_id || '',\n                natureContract_id:  param.natureContract_id || '',\n                employeeGroup_id:   param.employeeGroup_id || ''\n            }\n        })\n        return response\n        \n    } catch (error) {\n        window.console.error(error)\n    }\n}\nmodule.exports.getEmploymentByEmployee = async (id) => {\n    try {\n        const response = await axios.get(apiUrl.employee.record_by_employee_get + `/${id}`)\n        return response\n    } catch (error) {\n        window.console.error(error)\n    }\n}\nmodule.exports.createTimesheet = async (data) => {\n    try {\n        const response = await axios.post(apiUrl.employee.timesheet_post, data)\n        return response\n    } catch (error) {\n        window.console.error(error)\n    }\n}\nmodule.exports.getTimesheet = async function (id) {\n    try {\n        const response = await axios.get(apiUrl.employee.timesheet_get+ '/' +  id)\n        return response.data\n    } catch (error) {\n        window.console.error(error)\n    }\n}\nmodule.exports.getTimesheetSingle = async function (id) {\n    try {\n        const response = await axios.get(apiUrl.employee.timesheet_single+  '/' +  id)\n        return response.data\n    } catch (error) {\n        window.console.error(error)\n    }\n}\nmodule.exports.getEmployeeTransactions = async function (employeeUuid) {\n    try {\n        const response = await axios.get(apiUrl.employee.transactions+  '/' +  employeeUuid)\n        return response.data\n    } catch (error) {\n        window.console.error(error)\n    }\n}\nmodule.exports.getEmployeeInfo = async function (employeeUuid) {\n    try {\n        const response = await axios.get(apiUrl.employee.employee_info+  '/' +  employeeUuid)\n        return response.data\n    } catch (error) {\n        window.console.error(error)\n    }\n}\nmodule.exports.getEmployeeDashboard = async function () {\n    try {\n        const response = await axios.get(apiUrl.employee.employee_dashboard)\n        return response.data\n    } catch (error) {\n        window.console.error(error)\n    }\n}\nmodule.exports.getEmployeeBalance = async function (val) {\n    try {\n        const response = await axios.get(apiUrl.employee.employee_balance,{\n            params:{\n                'employeeUuid': val.employeeUuid ? val.employeeUuid: '',\n                'end_date': val.end_date\n            }\n        })\n        return response.data\n    } catch (error) {\n        window.console.error(error)\n    }\n}\nmodule.exports.getEmployeeLeave = async function (search, params) {\n    try {\n        let response = []\n        if (search !== '' && search !== null && search !== 'null' && search !== undefined) {\n            response = await axios.get(apiUrl.employee.employee_leave + '/' + search,{\n                params: {\n                    'year':      params.year,\n                }\n            })\n            window.console.log('response',response)\n            return response\n        } else {\n            response = await axios.get(apiUrl.employee.employee_leave,{\n                params: {\n                    'year':      params.year,\n                }\n            })\n            return response\n        }\n    } catch (error) {\n        window.console.error(error)\n    }\n}\nmodule.exports.getLeaveSummary = async function (search, params) {\n    try {\n        let response = []\n        if (search !== '' && search !== null && search !== 'null' && search !== undefined) {\n            response = await axios.get(apiUrl.employee.leave_summary + '/' + search,{\n                params: {\n                    'year':      params.year,\n                }\n            })\n            return response\n        } else {\n            response = await axios.get(apiUrl.employee.leave_summary,{\n                params: {\n                    'year':      params.year,\n                }\n            })\n            return response\n        }\n    } catch (error) {\n        window.console.error(error)\n    }\n}\nmodule.exports.createFringeBenefit = async (data) => {\n    try {\n        const response = await axios.post(apiUrl.employee.employee_benefit, data)\n        return response\n    } catch (error) {\n        window.console.error(error)\n    }\n}\nmodule.exports.getFringeBenefit = async function (val) {\n    try {\n        const response = await axios.get(apiUrl.employee.employee_benefit_get,{\n            params:{\n                month_of: val\n            }\n        })\n        return response.data\n    } catch (error) {\n        window.console.error(error)\n    }\n}\nmodule.exports.getLastNumber = async function (val) {\n    try {\n        const response = await axios.get(apiUrl.employee.last_number_get,{\n            params:{\n                abbr: val.abbr,\n                id:   val.id || \"\"\n            }\n        })\n        return response.data\n    } catch (error) {\n        window.console.error(error)\n    }\n}"]}]}