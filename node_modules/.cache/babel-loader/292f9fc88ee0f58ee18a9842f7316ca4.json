{"remainingRequest":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/babel-loader/lib/index.js!/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/eslint-loader/index.js??ref--13-0!/Users/macos/Desktop/banhji-0.2/banhji-commerce/src/scripts/customerHandler.js","dependencies":[{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/src/scripts/customerHandler.js","mtime":1642390528843},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/macos/Desktop/banhji-0.2/banhji-commerce/src/scripts/customerHandler.js"],"names":["axios","require","apiUrl","unknown","module","exports","gender","error","window","console","search","response","customer","customer_search","searchv1","customer_searchv1","center","customerTypeId","customerGroupId","strFilter","undefined","get","customer_center","centerv1","customer_centerv1","list","customer_get","getAll","getAllDonors","id","customer_getOne","create","data","post","customer_post","upload","directory","val","customer_directory","params","type","paymentTermReport","payment_term_report","importCreate","importVendorCreate","importEmpCreate","importServiceCreate","importSaleUnitCreate","hasTxn","has_txn","update","put","customer_put","lastNumber","customer_lastNumber","fundingCreate","funding_post","fundingGet","funding_get","customerDetail","customer_linev1"],"mappings":"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","sourcesContent":["const axios = require('axios')\nconst apiUrl = require('../apiUrl.js')\nconst unknown = require('../api/unknown')\n\n// Gender\nmodule.exports.gender = function () {\n    try {\n        const gender = unknown.gender\n        // const response = await axios.get(unknown.gender)\n\n        return gender\n    } catch (error) {\n        window.console.error(error)\n    }\n}\n// Search\nmodule.exports.search = function () {\n    try {\n        const response = apiUrl.customer.customer_search\n        return response\n    } catch (error) {\n        window.console.error(error)\n    }\n}\nmodule.exports.searchv1 = function () {\n    try {\n        const response = apiUrl.customer.customer_searchv1\n        return response\n    } catch (error) {\n        window.console.error(error)\n    }\n}\n// Center\nmodule.exports.center = async function (customerTypeId, customerGroupId, search, strFilter = '') {\n    try {\n        let response = []\n        if (search !== '' && search !== null && search !== 'null' && search !== undefined && search !== 'undefined') {\n            response = await axios.get(apiUrl.customer.customer_center + '/' + customerTypeId + '/center/' + customerGroupId + '/' + search + strFilter)\n            return response\n        } else {\n            response = await axios.get(apiUrl.customer.customer_center + '/' + customerTypeId + '/center/' + customerGroupId + strFilter)\n            return response\n        }\n    } catch (error) {\n        window.console.error(error)\n    }\n}\n// Center\nmodule.exports.centerv1 = async function (strFilter = '') {\n    try {\n        return await axios.get(apiUrl.customer.customer_centerv1 + strFilter)\n    } catch (error) {\n        window.console.error(error)\n    }\n}\n// List\nmodule.exports.list = async function () {\n    try {\n        const response = await axios.get(apiUrl.customer.customer_get)\n\n        return response\n    } catch (error) {\n        window.console.error(error)\n    }\n}\n\n// GET ALL BY DAWINE\nmodule.exports.getAll = async () => {\n    try {\n        const response = await axios.get(apiUrl.customer.customer_get)\n\n        return response;\n    } catch (error) {\n        window.console.error(error)\n    }\n}\n\n// GET ALL DONORS BY DAWINE\nmodule.exports.getAllDonors = async () => {\n    try {\n        const response = await axios.get(apiUrl.customer.customer_center + \"/undefined/center/undefined?is_donor=true\");\n\n        return response;\n    } catch (error) {\n        window.console.error(error)\n    }\n}\n\n// Get One\nmodule.exports.get = async function (id) {\n    try {\n        const response = await axios.get(apiUrl.customer.customer_getOne + id)\n\n        return response\n    } catch (error) {\n        window.console.error(error)\n    }\n}\n\n// save\nmodule.exports.create = async (data) => {\n    try {\n        const response = await axios.post(apiUrl.customer.customer_post, data)\n        return response\n    } catch (error) {\n        window.console.error(error)\n    }\n}\n\n\n// upload\nmodule.exports.upload = async (data) => {\n    try {\n        const response = await axios.post(\"https://ck3f4yltlf.execute-api.ap-southeast-1.amazonaws.com/dev/v1/uploads/file/upload\", data)\n        return response\n    } catch (error) {\n        window.console.error(error)\n    }\n}\n// update\n// module.exports.update = async (id, data) => {\n//     try {\n//         const response = await axios.put(apiUrl.customer.customer_group_put + id, data)\n//\n//         return response\n//     } catch (error) {\n//         window.console.error(error)\n//     }\n// }\nmodule.exports.directory = async function (val) {\n    try {\n        let response = await axios.get(apiUrl.customer.customer_directory, {\n            params: {\n                search: val.search,\n                type: val.type\n            }\n        })\n        return response\n    } catch (error) {\n        window.console.error(error)\n    }\n}\n\n//Todo: Payment term report\nmodule.exports.paymentTermReport = async function (strFilter = '') {\n    try {\n        return await axios.get(apiUrl.customer.payment_term_report + '/' + strFilter)\n    } catch (error) {\n        window.console.error(error)\n    }\n}\n\nmodule.exports.importCreate = async (data) => {\n    try {\n        const response = await axios.post(apiUrl.customer.importCreate, data)\n        return response\n    } catch (error) {\n        window.console.error(error)\n    }\n}\nmodule.exports.importVendorCreate = async (data) => {\n    try {\n        const response = await axios.post(apiUrl.customer.importVendorCreate, data)\n        return response\n    } catch (error) {\n        window.console.error(error)\n    }\n}\nmodule.exports.importEmpCreate = async (data) => {\n    try {\n        const response = await axios.post(apiUrl.customer.importEmpCreate, data)\n        return response\n    } catch (error) {\n        window.console.error(error)\n    }\n}\nmodule.exports.importServiceCreate = async (data) => {\n    try {\n        const response = await axios.post(apiUrl.customer.importServiceCreate, data)\n        return response\n    } catch (error) {\n        window.console.error(error)\n    }\n}\nmodule.exports.importSaleUnitCreate = async (data) => {\n    try {\n        const response = await axios.post(apiUrl.customer.importSaleUnitCreate, data)\n        return response\n    } catch (error) {\n        window.console.error(error)\n    }\n}\n//todo: check customer has transaction , can be delete\nmodule.exports.hasTxn = async (strFilter) => {\n    try {\n        return await axios.get(apiUrl.customer.has_txn + strFilter)\n    } catch (error) {\n        window.console.error(error)\n    }\n}\n//todo: update status customer to delete\nmodule.exports.update = async (strFilter) => {\n    try {\n        return await axios.put(apiUrl.customer.customer_put, strFilter)\n    } catch (error) {\n        window.console.error(error)\n    }\n}\n\n//todo: customer auto number generate\nmodule.exports.lastNumber = async (strFilter) => {\n    try {\n        return await axios.post(apiUrl.customer.customer_lastNumber, strFilter)\n    } catch (error) {\n        window.console.error(error)\n    }\n}\n\nmodule.exports.fundingCreate = async (data) => {\n    try {\n        const response = await axios.post(apiUrl.customer.funding_post, data)\n        return response\n    } catch (error) {\n        window.console.error(error)\n    }\n}\nmodule.exports.fundingGet = async function () {\n    try {\n        const response = await axios.get(apiUrl.customer.funding_get)\n        return response.data\n    } catch (error) {\n        window.console.error(error)\n    }\n}\n\nmodule.exports.customerDetail = async function (strFilter = '') {\n    try {\n        return await axios.get(apiUrl.customer.customer_linev1 + strFilter)\n    } catch (error) {\n        window.console.error(error)\n    }\n}"]}]}