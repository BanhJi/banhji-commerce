{"remainingRequest":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/babel-loader/lib/index.js!/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/eslint-loader/index.js??ref--14-0!/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/src/store/modules/accounting.js","dependencies":[{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/src/store/modules/accounting.js","mtime":1638499443069},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/babel.config.js","mtime":1638499442885},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/src/store/modules/accounting.js"],"names":["AccountModel","AccountTypeModel","AccountGroupModel","ResponseDataModel","AccountHandler","require","AccountTypeHandler","AccountGroupHandler","ReconcileRuleHandler","state","accounts","secondaryAccounts","types","secondaryTypes","groups","reconcileRules","accountLoaded","typeLoaded","groupLoaded","reconcileRuleLoaded","secondaryAccount","accountLanguage","classSetting","C1","C2","C3","C4","C5","getters","actions","getAccounts","commit","dispatch","getAll","response","primaryAccounts","data","forEach","value","account","is_secondary","account_type","find","i","uuid","secondary_type_uuid","push","code","type_code","account_group","group_code","getSecondaryAccounts","putAccounts","saveAccount","index","findIndex","splice","getTypes","primaryTypes","getSecondaryTypes","putTypes","saveType","getGroups","putGroups","saveGroup","getReconcileRules","putReconcileRules","saveReconcileRule","deleteReconcileRule","mutations","setAccounts","setSecondaryAccounts","setAccountLoaded","pushAccount","setTypes","setSecondaryTypes","setTypeLoaded","pushType","setGroups","setGroupLoaded","pushGroup","setReconcileRules","setReconcileRuleLoaded","pushReconcileRule","namespaced"],"mappings":"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","sourcesContent":["import AccountModel from \"@/scripts/model/Account\";\nimport AccountTypeModel from \"@/scripts/model/AccountType\";\nimport AccountGroupModel from \"@/scripts/model/AccountGroup\";\nimport ResponseDataModel from \"@/scripts/model/ResponseData\";\n\nconst AccountHandler = require(\"@/scripts/handler/accounting/account\");\nconst AccountTypeHandler = require(\"@/scripts/handler/accounting/accountType\");\nconst AccountGroupHandler = require(\"@/scripts/handler/accounting/accountGroup\");\nconst ReconcileRuleHandler = require(\"@/scripts/handler/accounting/reconcileRule\");\n\n// initial state\nconst state = () => ({\n    accounts : [],\n    secondaryAccounts : [],\n    types : [],\n    secondaryTypes : [],\n    groups : [],\n    reconcileRules : [],\n    accountLoaded : false,\n    typeLoaded : false,\n    groupLoaded : false,\n    reconcileRuleLoaded : false,\n    secondaryAccount: false,\n    accountLanguage: 'English',\n    classSetting:{\n        C1: true,\n        C2: true,\n        C3: false,\n        C4: false,\n        C5: false,\n    }\n})\n\n// getters\nconst getters = {}\n\n// actions\nconst actions = {\n    /* ACCOUNT */\n    async getAccounts({ state, commit, dispatch}) {\n        if(!state.accountLoaded){\n            commit(\"setAccountLoaded\", true);\n\n            /* Queries */\n            await dispatch(\"getTypes\");\n            await dispatch(\"getGroups\");\n            const response = await AccountHandler.getAll();\n            const accounts = new ResponseDataModel(response);\n\n            /* Filter Data */\n            let primaryAccounts = [], secondaryAccounts = [];\n            accounts.data.forEach(value => {\n                let account = new AccountModel(value);\n\n                if(value.is_secondary === 1){ /* Secondardy Account */\n                    account.account_type = new AccountTypeModel(state.secondaryTypes.find((i) => i.uuid === value.secondary_type_uuid));\n\n                    secondaryAccounts.push(account);\n                }else{ /* Primary Account */\n                    account.account_type = new AccountTypeModel(state.types.find((i) => i.code === value.type_code));\n                    account.account_group = new AccountGroupModel(state.groups.find((i) => i.code === value.group_code));\n\n                    primaryAccounts.push(account);\n                }\n            });\n\n            /* Accounts */\n            commit(\"setAccounts\", primaryAccounts);\n            commit(\"setSecondaryAccounts\", secondaryAccounts);\n        }\n\n        return state.accounts;\n    },\n    async getSecondaryAccounts({ state, dispatch }) {\n        if(!state.accountLoaded){\n            await dispatch(\"getAccounts\");\n        }\n\n        return state.secondaryAccounts;\n    },\n    putAccounts({ commit }, value) {\n        commit(\"setAccounts\", value);\n        commit(\"setAccountLoaded\", true);\n    },\n    saveAccount({ state, commit }, value) {\n        let index = state.accounts.findIndex(i => i.uuid === value.uuid)\n        if (index > -1) { /* Update account */\n            /* Replaces 1 element at specific index */\n            state.accounts.splice(index, 1, value);\n        }else{\n            /* Add new account */\n            commit(\"pushAccount\", value);\n        }\n    },\n\n    /* TYPE */\n    async getTypes({ state, commit }) {\n        if(!state.typeLoaded){\n            commit(\"setTypeLoaded\", true);\n\n            const response = await AccountTypeHandler.getAll();\n            const types = new ResponseDataModel(response);\n\n            /* Filter Data */\n            let primaryTypes = [], secondaryTypes = [];\n            types.data.forEach(value => {\n                if(value.is_secondary === 1){ /* Secondardy Type */\n                    secondaryTypes.push(value);\n                }else{ /* Primary Type */\n                    primaryTypes.push(value);\n                }\n            });\n            \n            commit(\"setTypes\", primaryTypes);\n            commit(\"setSecondaryTypes\", secondaryTypes);\n        }\n\n        return state.types;\n    },\n    async getSecondaryTypes({ state, dispatch }) {\n        if(!state.typeLoaded){\n            await dispatch(\"getTypes\");\n        }\n\n        return state.secondaryTypes;\n    },\n    putTypes({ commit }, value) {\n        commit(\"setTypes\", value);\n        commit(\"setTypeLoaded\", true);\n    },\n    saveType({ state, commit }, value) {\n        let index = state.types.findIndex(i => i.code === value.code)\n        if (index > -1) { /* Update account type */\n            /* Replaces 1 element at specific index */\n            state.types.splice(index, 1, value);\n        }else{\n            /* Add new account type */\n            commit(\"pushType\", value);\n        }\n    },\n\n    /* GROUP */\n    async getGroups({ state, commit, dispatch }) {\n        if(!state.groupLoaded){\n            commit(\"setGroupLoaded\", true);\n\n            await dispatch(\"getTypes\");\n\n            const response = await AccountGroupHandler.getAll();\n            let groups = new ResponseDataModel(response);\n\n            /* Group apply type */\n            groups.data.forEach(value => {\n                value.account_type = new AccountTypeModel(state.types.find((i) => i.code === value.type_code));\n            });\n\n            commit(\"setGroups\", groups.data);\n        }\n\n        return state.groups;\n    },\n    putGroups({ commit }, value) {\n        commit(\"setGroups\", value);\n        commit(\"setGroupLoaded\", true);\n    },\n    saveGroup({ state, commit }, value) {\n        let index = state.groups.findIndex(i => i.code === value.code)\n        if (index > -1) { /* Update account group */\n            /* Replaces 1 element at specific index */\n            state.groups.splice(index, 1, value);\n        }else{\n            /* Add new account group */\n            commit(\"pushGroup\", value);\n        }\n    },\n\n    /* RECONCILE RULE */\n    async getReconcileRules({ state, commit }) {\n        if(!state.reconcileRuleLoaded){\n            commit(\"setReconcileRuleLoaded\", true);\n            \n            let response = await ReconcileRuleHandler.getAll();\n            \n            commit(\"setReconcileRules\", response.data.data);\n        }\n\n        return state.reconcileRules;\n    },\n    putReconcileRules({ commit }, value) {\n        commit(\"setReconcileRules\", value);\n        commit(\"setReconcileRuleLoaded\", true);\n    },\n    saveReconcileRule({ state, commit }, value) {\n        let index = state.reconcileRules.findIndex(i => i.uuid === value.uuid)\n        if (index > -1) { /* Update */\n            /* Replaces 1 element at specific index */\n            state.reconcileRules.splice(index, 1, value);\n        }else{\n            /* Add new reconcile rule */\n            commit(\"pushReconcileRule\", value);\n        }\n    },\n    deleteReconcileRule({ state }, value) {\n        let index = state.reconcileRules.findIndex(i => i.uuid === value.uuid)\n        if (index > -1) {\n            /* Remove 1 element at specific index */\n            state.reconcileRules.splice(index, 1);\n        }\n    },\n}\n\n// mutations\nconst mutations = {\n    /* ACCOUNT */\n    setAccounts(state, value) {\n        state.accounts = value;\n    },\n    setSecondaryAccounts(state, value) {\n        state.secondaryAccounts = value;\n    },\n    setAccountLoaded(state, value) {\n        state.accountLoaded = value;\n    },\n    pushAccount(state, value) {\n        state.accounts.push(value);\n    },\n\n    /* TYPE */\n    setTypes(state, value) {\n        state.types = value;\n    },\n    setSecondaryTypes(state, value) {\n        state.secondaryTypes = value;\n    },\n    setTypeLoaded(state, value) {\n        state.typeLoaded = value;\n    },\n    pushType(state, value) {\n        state.types.push(value);\n    },\n\n    /* GROUP */\n    setGroups(state, value) {\n        state.groups = value;\n    },\n    setGroupLoaded(state, value) {\n        state.groupLoaded = value;\n    },\n    pushGroup(state, value) {\n        state.groups.push(value);\n    },\n\n    /* RECONCILE RULE */\n    setReconcileRules(state, value) {\n        state.reconcileRules = value;\n    },\n    setReconcileRuleLoaded(state, value) {\n        state.reconcileRuleLoaded = value;\n    },\n    pushReconcileRule(state, value) {\n        state.reconcileRules.push(value);\n    },\n}\n\nexport default {\n  namespaced: true,\n  state,\n  getters,\n  actions,\n  mutations\n}"]}]}