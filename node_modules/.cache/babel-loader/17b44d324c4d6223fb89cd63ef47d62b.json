{"remainingRequest":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/babel-loader/lib/index.js!/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/eslint-loader/index.js??ref--13-0!/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/src/scripts/settingsHandler.js","dependencies":[{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/src/scripts/settingsHandler.js","mtime":1638499443065},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/src/scripts/settingsHandler.js"],"names":["axios","require","apiUrl","module","exports","byClassURL","setting","class_subclass_get","error","window","console","getClazz","val","get","class_get","params","type","clazzId","classTypeId","classGroupId","response","create","data","post","class_post","getSeg","id","segment_get","createSeg","segment_post","getSegType","segment_type_get","createSegType","segment_type_post","createSubClass","subclass_post","getPrefixes","prefix_get","getPaymentTerm","strFilter","payment_setting_get","addPaymentTerm","payment_setting_post","getOtherAccount","other_account_get","getFormSetting","form_get","deleteFormSetting","form_delete","formSettingCreate","form_post"],"mappings":"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","sourcesContent":["const axios = require('axios')\nconst apiUrl = require('../apiUrl.js')\n\n// Get SubClassByClass\nmodule.exports.byClassURL = function () {\n    try {\n        // const response = apiUrl.setting.class_subclass_get\n\n        return apiUrl.setting.class_subclass_get\n    } catch (error) {\n        window.console.error(error)\n    }\n}\n\n// Get One\nmodule.exports.getClazz = async function (val) {\n    try {\n        const response = await axios.get(apiUrl.setting.class_get,{\n            params:{\n                type:           val.type,\n                clazzId:        val.clazzId || '',\n                classTypeId:    val.classTypeId || '',\n                classGroupId:   val.classGroupId || ''\n            }\n        })\n\n        return response\n    } catch (error) {\n        window.console.error(error)\n    }\n}\n\n// save\nmodule.exports.create = async (data) => {\n    try {\n        const response = await axios.post(apiUrl.setting.class_post, data)\n        return response\n    } catch (error) {\n        window.console.error(error)\n    }\n}\n\n// Get One\nmodule.exports.getSeg = async function (id='') {\n    try {\n        if( id != ''){\n            const response = await axios.get(apiUrl.setting.segment_get+\"?id=\"+id)\n            return response\n        }else{\n            const response = await axios.get(apiUrl.setting.segment_get)\n            return response\n        }\n\n    } catch (error) {\n        window.console.error(error)\n    }\n}\n\n// save\nmodule.exports.createSeg = async (data) => {\n    try {\n        const response = await axios.post(apiUrl.setting.segment_post, data)\n        return response\n    } catch (error) {\n        window.console.error(error)\n    }\n}\nmodule.exports.getSegType = async function () {\n    try {\n    \n        const response = await axios.get(apiUrl.setting.segment_type_get)\n        return response\n\n    } catch (error) {\n        window.console.error(error)\n    }\n}\nmodule.exports.createSegType = async (data) => {\n    try {\n        const response = await axios.post(apiUrl.setting.segment_type_post, data)\n        return response\n    } catch (error) {\n        window.console.error(error)\n    }\n}\n// save sub class\nmodule.exports.createSubClass = async (data) => {\n    try {\n        const response = await axios.post(apiUrl.setting.subclass_post, data)\n        return response\n    } catch (error) {\n        window.console.error(error)\n    }\n}\n\n// Get prefix list\nmodule.exports.getPrefixes = async function () {\n    try {\n        const response = await axios.get(apiUrl.setting.prefix_get)\n\n        return response\n    } catch (error) {\n        window.console.error(error)\n    }\n}\n\n// Get payment term\nmodule.exports.getPaymentTerm = async function (strFilter = '') {\n    try {\n        const response = await axios.get(apiUrl.setting.payment_setting_get + strFilter)\n\n        return response\n    } catch (error) {\n        window.console.error(error)\n    }\n}\n// save payment term\nmodule.exports.addPaymentTerm = async (data) => {\n    try {\n        const response = await axios.post(apiUrl.setting.payment_setting_post, data)\n        return response\n    } catch (error) {\n        window.console.error(error)\n    }\n}\n\n// Get other account\nmodule.exports.getOtherAccount = async function (strFilter = '') {\n    try {\n        const response = await axios.get(apiUrl.setting.other_account_get + strFilter)\n        return response\n    } catch (error) {\n        window.console.error(error)\n    }\n}\n\n// Get form setting by formType\nmodule.exports.getFormSetting = async function (strFilter = '') {\n    try {\n        const response = await axios.get(apiUrl.setting.form_get + strFilter)\n        return response\n    } catch (error) {\n        window.console.error(error)\n    }\n}\nmodule.exports.deleteFormSetting = async function (strFilter = '') {\n    try {\n        const response = await axios.get(apiUrl.setting.form_delete + strFilter)\n        return response\n    } catch (error) {\n        window.console.error(error)\n    }\n}\n\n// Post form setting\nmodule.exports.formSettingCreate = async (data) => {\n    try {\n        const response = await axios.post(apiUrl.setting.form_post, data)\n        return response\n    } catch (error) {\n        window.console.error(error)\n    }\n}"]}]}