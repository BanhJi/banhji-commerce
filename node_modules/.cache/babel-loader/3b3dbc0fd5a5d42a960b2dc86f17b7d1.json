{"remainingRequest":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/babel-loader/lib/index.js!/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/eslint-loader/index.js??ref--14-0!/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/src/scripts/instituteHandler.js","dependencies":[{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/src/scripts/instituteHandler.js","mtime":1638499442989},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/babel.config.js","mtime":1638499442885},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/src/scripts/instituteHandler.js"],"names":["axios","require","instance","create","apiUrl","cookieJS","getCookie","instituteId","creator","module","exports","init","get","institute","company_getOne","window","console","error","saveIntitute","data","post","company_add","response","getCompany","id","company_get","result","getOneCompany","addCompany","saveImageProfile","save_image","getBt","bt","business_types","getSector","sector_get","log","getBo","bo","getTaxRegime","taxRegime","getRoles","role_get"],"mappings":"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","sourcesContent":["const axios = require('axios');\nconst instance = axios.create();\nconst apiUrl = require('@/apiUrl.js');\n/* Cookie */\nconst cookieJS = require(\"@/cookie.js\");\nconst { instituteId, creator } = cookieJS.getCookie();\n\n// INITIAL INSTITUTE\nmodule.exports.init = async () => {\n    try {\n        return await axios.get(apiUrl.institute.company_getOne + instituteId);\n    } catch (error) {\n        window.console.error(error);\n    }\n}\n\n// SAVE\nmodule.exports.saveIntitute = async (data) => {\n    try {\n        const response = await axios.post(apiUrl.institute.company_add + `${creator}`, data);\n        return response;\n    } catch (error) {\n        window.console.error(error);\n    }\n}\n\nmodule.exports.getCompany = async function (id) {\n    try {\n        const result = await axios.get(apiUrl.institute.company_get + id)\n        return result.data.data\n    } catch (error) {\n        window.console.error(error)\n    }\n}\n\nmodule.exports.getOneCompany = async function (id) {\n    try {\n        const result = await axios.get(apiUrl.institute.company_getOne + id)\n        // window.console.log('institute',apiUrl.institute.company_getOne + id)\n        return result.data.data\n    } catch (error) {\n        window.console.error(error)\n    }\n}\n\nmodule.exports.addCompany = async function (id) {\n    try {\n        const result = await axios.get(apiUrl.institute.company_add + id)\n        return result.data.data\n    } catch (error) {\n        window.console.error(error)\n    }\n}\n\nmodule.exports.saveImageProfile = async function (data) {\n    try {\n        const response = await axios.post(apiUrl.institute.save_image, data)\n        return response.data.data\n    } catch (err) {\n        window.console.error(err)\n    }\n}\n\nmodule.exports.getBt = async function () {\n    try {\n        const response = await instance.get(apiUrl.institute.bt)\n        return response.data.business_types\n    } catch (error) {\n        window.console.error(error)\n    }\n}\n\nmodule.exports.getSector = async function () {\n    try {\n        const response = await axios.get(apiUrl.institute.sector_get)\n        return response.data.data\n    } catch (err) {\n        window.console.log(err)\n    }\n}\n\nmodule.exports.getBo = async function () {\n    try {\n        const response = await axios.get(apiUrl.institute.bo)\n        return response.data.data\n    } catch (error) {\n        window.console.error(error)\n    }\n}\n\nmodule.exports.getTaxRegime = async function () {\n    try {\n        const response = await instance.get(apiUrl.institute.taxRegime)\n\n        return response.data\n    } catch (error) {\n        window.console.error(error)\n    }\n}\n\nmodule.exports.getRoles = async function () {\n    try {\n        const response = await instance.get(apiUrl.institute.role_get + instituteId + '/user/' + `usr-${creator}` + '/list')\n\n        return response.data.data\n    } catch (error) {\n        window.console.error(error)\n    }\n}\n"]}]}