{"remainingRequest":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/babel-loader/lib/index.js!/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/eslint-loader/index.js??ref--14-0!/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/src/scripts/payrollHandler.js","dependencies":[{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/src/scripts/payrollHandler.js","mtime":1640595536779},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/babel.config.js","mtime":1638499442885},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/src/scripts/payrollHandler.js"],"names":["axios","require","apiUrl","module","exports","getBank","get","payroll","payroll_bank_get","response","window","console","error","createBank","data","post","payroll_bank_post","getTax","payroll_tax_get","createTax","payroll_tax_post","createDepartment","department_post","getDepartment","val","department_get","params","location_id","createPosition","position_post","getPosition","position_get","createComponent","pay_component_post","getComponent","pay_component_get","createPeriod","period_post","getPeriiod","period_get","createNSSF","nssf_post","getNSSF","nssf_get","createTypeOfWork","type_of_work_post","getTypeOfWork","type_of_work_get","createSpecificWork","specific_work_post","getSpecificWork","specific_work_get","getSpecificByType","id","specific_by_type_get","getLeave","leave_get","createLeave","leave_post","getPrefix","prefix_get","getGroup","group_employee_get","createGroup","group_employee_post","createPrefix","prefix_post","createPayroll","payroll_post","getPayroll","payroll_id","payroll_get","getPayrollByMonth","monthOf","payroll_by_month_get","getPayrollItem","payroll_item_get","getPayrollList","param","payroll_list_get","employee_id","createJournal","payroll_journal_post","getPrefixNumber","prefix_number","createTimeCard","time_card_post","getTimeCard","time_card_get","selectTime","urlPayroll","getPayrollPrevious","payroll_previous_get","getTransaction","transaction_get","employeeUuid","getTransactionList","transactions_list","payDate","getPayrollDetail","payroll_detail_get","end_date","start_date","getTaxpay","tax_pay_get","getPayrollSummary","payroll_summary_get","getPayrollLiabilites","payroll_liabilites_get","getPayrollTaxList","payroll_tax_list_get","getPayrollEmployee","payroll_employee_get","employeeUid","getPayrollTimesheet","payroll_timesheet_get","createPayment","payment_post","getPayment","payment_get","getPaymentSingle","payment_single_get","createBatchPayment","payment_batch_post","getBatchPaymentList","payment_batch_list","getBatchSingle","batch_single_get","getBatchItem","payment_item_get","getEmployeeToPay","employee_to_pay","getTotalPayment","total_payment","getPaymentChart","payroll_chart","getDayToPay","payroll_day_to_pay","getTaxPayment","payroll_tax_payment","deleteTransactions","payroll_delete","getPayrollJournal","payroll_journal"],"mappings":"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","sourcesContent":["const axios = require('axios')\nconst apiUrl = require('../apiUrl.js')\n\n\n// List\nmodule.exports.getBank = async function () {\n    try {\n        const response = await axios.get(apiUrl.payroll.payroll_bank_get)\n        return response\n    } catch (error) {\n        window.console.error(error)\n    }\n}\n// save\nmodule.exports.createBank = async (data) => {\n    try {\n        const response = await axios.post(apiUrl.payroll.payroll_bank_post, data)\n        return response\n    } catch (error) {\n        window.console.error(error)\n    }\n}\nmodule.exports.getTax = async function () {\n    try {\n        const response = await axios.get(apiUrl.payroll.payroll_tax_get)\n        return response\n    } catch (error) {\n        window.console.error(error)\n    }\n}\nmodule.exports.createTax = async (data) => {\n    try {\n        const response = await axios.post(apiUrl.payroll.payroll_tax_post, data)\n        return response\n    } catch (error) {\n        window.console.error(error)\n    }\n}\nmodule.exports.createDepartment = async (data) => {\n    try {\n        const response = await axios.post(apiUrl.payroll.department_post, data)\n        return response\n    } catch (error) {\n        window.console.error(error)\n    }\n}\nmodule.exports.getDepartment = async function (val) {\n    try {\n        const response = await axios.get(apiUrl.payroll.department_get,{\n            params: {\n                'location_id':      val.location_id || '',\n            }\n        })\n        return response.data.data\n    } catch (error) {\n        window.console.error(error)\n    }\n}\nmodule.exports.createPosition = async (data) => {\n    try {\n        const response = await axios.post(apiUrl.payroll.position_post, data)\n        return response\n    } catch (error) {\n        window.console.error(error)\n    }\n}\nmodule.exports.getPosition = async function () {\n    try {\n        const response = await axios.get(apiUrl.payroll.position_get)\n        return response.data.data\n    } catch (error) {\n        window.console.error(error)\n    }\n}\nmodule.exports.createComponent = async (data) => {\n    try {\n        const response = await axios.post(apiUrl.payroll.pay_component_post, data)\n        return response\n    } catch (error) {\n        window.console.error(error)\n    }\n}\nmodule.exports.getComponent = async function () {\n    try {\n        const response = await axios.get(apiUrl.payroll.pay_component_get)\n        return response\n    } catch (error) {\n        window.console.error(error)\n    }\n}\nmodule.exports.createPeriod = async (data) => {\n    try {\n        const response = await axios.post(apiUrl.payroll.period_post, data)\n        return response\n    } catch (error) {\n        window.console.error(error)\n    }\n}\nmodule.exports.getPeriiod = async function () {\n    try {\n        const response = await axios.get(apiUrl.payroll.period_get)\n        return response.data.data\n    } catch (error) {\n        window.console.error(error)\n    }\n}\nmodule.exports.createNSSF = async (data) => {\n    try {\n        const response = await axios.post(apiUrl.payroll.nssf_post, data)\n        return response\n    } catch (error) {\n        window.console.error(error)\n    }\n}\nmodule.exports.getNSSF = async function () {\n    try {\n        const response = await axios.get(apiUrl.payroll.nssf_get)\n        return response.data.data\n    } catch (error) {\n        window.console.error(error)\n    }\n}\nmodule.exports.createTypeOfWork = async (data) => {\n    try {\n        const response = await axios.post(apiUrl.payroll.type_of_work_post, data)\n        return response\n    } catch (error) {\n        window.console.error(error)\n    }\n}\nmodule.exports.getTypeOfWork = async function () {\n    try {\n        const response = await axios.get(apiUrl.payroll.type_of_work_get)\n        return response.data\n    } catch (error) {\n        window.console.error(error)\n    }\n}\nmodule.exports.createSpecificWork = async (data) => {\n    try {\n        const response = await axios.post(apiUrl.payroll.specific_work_post, data)\n        return response\n    } catch (error) {\n        window.console.error(error)\n    }\n}\nmodule.exports.getSpecificWork = async function () {\n    try {\n        const response = await axios.get(apiUrl.payroll.specific_work_get)\n        return response.data\n    } catch (error) {\n        window.console.error(error)\n    }\n}\nmodule.exports.getSpecificByType = async (id) => {\n    try {\n        const response = await axios.get(apiUrl.payroll.specific_by_type_get + `/${id}`)\n        return response\n    } catch (error) {\n        window.console.error(error)\n    }\n}\nmodule.exports.getLeave = async function () {\n    try {\n        const response = await axios.get(apiUrl.payroll.leave_get)\n        return response.data\n    } catch (error) {\n        window.console.error(error)\n    }\n}\nmodule.exports.createLeave = async (data) => {\n    try {\n        const response = await axios.post(apiUrl.payroll.leave_post, data)\n        return response\n    } catch (error) {\n        window.console.error(error)\n    }\n}\nmodule.exports.getPrefix = async function () {\n    try {\n        const response = await axios.get(apiUrl.payroll.prefix_get)\n        return response.data\n    } catch (error) {\n        window.console.error(error)\n    }\n}\nmodule.exports.getGroup = async function () {\n    try {\n        const response = await axios.get(apiUrl.payroll.group_employee_get)\n        return response.data\n    } catch (error) {\n        window.console.error(error)\n    }\n}\nmodule.exports.createGroup = async (data) =>{\n    \n    try {\n        const response = await axios.post(apiUrl.payroll.group_employee_post, data)\n        return response\n    } catch (error) {\n        window.console.error(error)\n    }\n}\nmodule.exports.createPrefix = async (data) =>{\n    \n    try {\n        const response = await axios.post(apiUrl.payroll.prefix_post, data)\n        return response\n    } catch (error) {\n        window.console.error(error)\n    }\n}\n// Run Payroll\nmodule.exports.createPayroll = async (data) => {\n    try {\n        const response = await axios.post(apiUrl.payroll.payroll_post, data)\n        return response\n    } catch (error) {\n        window.console.error(error)\n    }\n}\nmodule.exports.getPayroll = async (payroll_id) => {\n    try {\n        const response = await axios.get(apiUrl.payroll.payroll_get + `/${payroll_id}`)\n        return response\n    } catch (error) {\n        window.console.error(error)\n    }\n}\nmodule.exports.getPayrollByMonth = async (monthOf) => {\n    try {\n        const response = await axios.get(apiUrl.payroll.payroll_by_month_get,{\n            params:{\n                monthOf: monthOf\n            }\n        })\n        return response\n    } catch (error) {\n        window.console.error(error)\n    }\n}\nmodule.exports.getPayrollItem = async (payroll_id) => {\n    try {\n        const response = await axios.get(apiUrl.payroll.payroll_item_get + `/${payroll_id}`)\n        return response\n    } catch (error) {\n        window.console.error(error)\n    }\n}\nmodule.exports.getPayrollList = async (param) => {\n    try {\n        const response = await axios.get(apiUrl.payroll.payroll_list_get,{\n            params: {\n                'monthOf':      param.monthOf,\n                'employee_id':  param.employee_id\n            }\n        })\n        return response\n    } catch (error) {\n        window.console.error(error)\n    }\n}\nmodule.exports.createJournal = async (data) => {\n    try {\n        const response = await axios.post(apiUrl.payroll.payroll_journal_post, data)\n        return response\n    } catch (error) {\n        window.console.error(error)\n    }\n}\nmodule.exports.getPrefixNumber = async (data) => {\n    try {\n        const response = await axios.post(apiUrl.payroll.prefix_number, data)\n        return response\n    } catch (error) {\n        window.console.error(error)\n    }\n}\nmodule.exports.createTimeCard = async (data) => {\n    try {\n        const response = await axios.post(apiUrl.payroll.time_card_post, data)\n        return response\n    } catch (error) {\n        window.console.error(error)\n    }\n}\nmodule.exports.getTimeCard = async function (param) {\n    try {\n        const response = await axios.get(apiUrl.payroll.time_card_get,{\n            params: {\n                'monthOf': param.monthOf,\n                'selectTime': param.selectTime\n            }\n        })\n        return response\n    } catch (error) {\n        window.console.error(error)\n    }\n}\nmodule.exports.urlPayroll = function () {\n    try {\n        return apiUrl.payroll.payroll_list_get\n    } catch (error) {\n        window.console.error(error)\n    }\n}\nmodule.exports.getPayrollPrevious = async (monthOf) => {\n    try {\n        const response = await axios.get(apiUrl.payroll.payroll_previous_get,{\n            params: {\n                'monthOf':      monthOf,\n            }\n        })\n        return response\n    } catch (error) {\n        window.console.error(error)\n    }\n}\n// payroll payment\nmodule.exports.getTransaction = async function (param) {\n    try {\n        const response = await axios.get(apiUrl.payroll.transaction_get,{\n            params: {\n                'employeeUuid': param.employeeUuid,\n            }\n        })\n        return response\n    } catch (error) {\n        window.console.error(error)\n    }\n}\nmodule.exports.getTransactionList = async function (param) {\n    try {\n        const response = await axios.get(apiUrl.payroll.transactions_list,{\n            params:{\n                payDate: param.payDate\n            }\n        })\n        return response\n    } catch (error) {\n        window.console.error(error)\n    }\n}\nmodule.exports.getPayrollDetail = async function (val) {\n    try {\n        const response = await axios.get(apiUrl.payroll.payroll_detail_get,{\n            params:{\n                'employeeUuid': val.employeeUuid,\n                'end_date': val.end_date,\n                'start_date': val.start_date\n            }\n        })\n        return response\n    } catch (error) {\n        window.console.error(error)\n    }\n}\nmodule.exports.getTaxpay = async function (val) {\n    try {\n        const response = await axios.get(apiUrl.payroll.tax_pay_get,{\n            params:{\n                'end_date': val.end_date,\n                'start_date': val.start_date\n            }\n        })\n        return response\n    } catch (error) {\n        window.console.error(error)\n    }\n}\nmodule.exports.getPayrollSummary = async function (val) {\n    try {\n        const response = await axios.get(apiUrl.payroll.payroll_summary_get,{\n            params:{\n                'start_date': val.start_date,\n                'end_date': val.end_date\n            }\n        })\n        return response\n    } catch (error) {\n        window.console.error(error)\n    }\n}\nmodule.exports.getPayrollLiabilites = async function (val) {\n    try {\n        const response = await axios.get(apiUrl.payroll.payroll_liabilites_get,{\n            params:{\n                'start_date': val.start_date,\n                'end_date': val.end_date\n            }\n        })\n        return response\n    } catch (error) {\n        window.console.error(error)\n    }\n}\nmodule.exports.getPayrollTaxList = async function (val) {\n    try {\n        const response = await axios.get(apiUrl.payroll.payroll_tax_list_get,{\n            params:{\n                'start_date': val.start_date,\n                'end_date': val.end_date\n            }\n        })\n        return response\n    } catch (error) {\n        window.console.error(error)\n    }\n}\nmodule.exports.getPayrollEmployee = async function (val) {\n    try {\n        const response = await axios.get(apiUrl.payroll.payroll_employee_get,{\n            params:{\n                'start_date':   val.start_date,\n                'end_date':     val.end_date,\n                'employeeUid': val.employeeUid,\n            }\n        })\n        return response\n    } catch (error) {\n        window.console.error(error)\n    }\n}\nmodule.exports.getPayrollTimesheet = async function (val) {\n    try {\n        const response = await axios.get(apiUrl.payroll.payroll_timesheet_get,{\n            params:{\n                'start_date': val.start_date,\n                'end_date': val.end_date\n            }\n        })\n        return response\n    } catch (error) {\n        window.console.error(error)\n    }\n}\nmodule.exports.createPayment = async (data) => {\n    try {\n        const response = await axios.post(apiUrl.payroll.payment_post, data)\n        return response\n    } catch (error) {\n        window.console.error(error)\n    }\n}\nmodule.exports.getPayment = async function (val) {\n    try {\n        const response = await axios.get(apiUrl.payroll.payment_get,{\n            params:{\n                'start_date': val.start_date,\n                'end_date': val.end_date\n            }\n        })\n        return response\n    } catch (error) {\n        window.console.error(error)\n    }\n}\nmodule.exports.getPaymentSingle = async function (id) {\n    try {\n        const response = await axios.get(apiUrl.payroll.payment_single_get + `/${id}`)\n        return response.data\n    } catch (error) {\n        window.console.error(error)\n    }\n}\nmodule.exports.createBatchPayment = async (data) => {\n    try {\n        const response = await axios.post(apiUrl.payroll.payment_batch_post, data)\n        return response\n    } catch (error) {\n        window.console.error(error)\n    }\n}\nmodule.exports.getBatchPaymentList = async function (val) {\n    try {\n        const response = await axios.get(apiUrl.payroll.payment_batch_list,{\n            params:{\n                'start_date': val.start_date,\n                'end_date': val.end_date\n            }\n        })\n        return response\n    } catch (error) {\n        window.console.error(error)\n    }\n}\nmodule.exports.getBatchSingle = async function (id) {\n    try {\n        const response = await axios.get(apiUrl.payroll.batch_single_get + `/${id}`)\n        return response.data\n    } catch (error) {\n        window.console.error(error)\n    }\n}\nmodule.exports.getBatchItem = async function (id) {\n    try {\n        const response = await axios.get(apiUrl.payroll.payment_item_get + `/${id}`)\n        return response.data\n    } catch (error) {\n        window.console.error(error)\n    }\n}\nmodule.exports.getEmployeeToPay = async function () {\n    try {\n        const response = await axios.get(apiUrl.payroll.employee_to_pay)\n        return response.data\n    } catch (error) {\n        window.console.error(error)\n    }\n}\nmodule.exports.getTotalPayment = async function (val) {\n    try {\n        const response = await axios.get(apiUrl.payroll.total_payment,{\n            params:{\n                'start_date': val.start_date,\n                'end_date': val.end_date\n            }\n        })\n        return response.data\n    } catch (error) {\n        window.console.error(error)\n    }\n}\nmodule.exports.getPaymentChart = async function (val) {\n    try {\n        const response = await axios.get(apiUrl.payroll.payroll_chart,{\n            params:{\n                'start_date': val.start_date,\n                'end_date': val.end_date\n            }\n        })\n        return response.data\n    } catch (error) {\n        window.console.error(error)\n    }\n}\nmodule.exports.getDayToPay = async function (val) {\n    try {\n        const response = await axios.get(apiUrl.payroll.payroll_day_to_pay,{\n            params:{\n                'start_date': val,\n            }\n        })\n        return response.data\n    } catch (error) {\n        window.console.error(error)\n    }\n}\nmodule.exports.getTaxPayment = async function (val) {\n    try {\n        const response = await axios.get(apiUrl.payroll.payroll_tax_payment,{\n            params:{\n                'start_date': val.start_date,\n                'end_date': val.end_date\n            }\n        })\n        return response.data\n    } catch (error) {\n        window.console.error(error)\n    }\n}\nmodule.exports.deleteTransactions = async function (val) {\n    try {\n        const response = await axios.get(apiUrl.payroll.payroll_delete,{\n            params:{\n                'payroll_id': val,\n            }\n        })\n        return response.data\n    } catch (error) {\n        window.console.error(error)\n    }\n}\nmodule.exports.getPayrollJournal = async function (id) {\n    try {\n        const response = await axios.get(apiUrl.payroll.payroll_journal + `/${id}`)\n        return response.data\n    } catch (error) {\n        window.console.error(error)\n    }\n}"]}]}