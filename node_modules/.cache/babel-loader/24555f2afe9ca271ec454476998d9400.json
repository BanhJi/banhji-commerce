{"remainingRequest":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/babel-loader/lib/index.js!/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/src/views/banking/banking/bank_center/Statement.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/src/views/banking/banking/bank_center/Statement.vue","mtime":1638499443125},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-accounting-web-module/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["Statement.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n    <v-row class=\"mx-3 white\">\n        <v-col sm=\"6\" cols=\"12\">\n            <p >{{$t('updated_on')}} {{ lastUpdated }}</p>\n        </v-col>\n        <v-col sm=\"6\" cols=\"12\" >\n            <v-btn to=\"\" color=\"primary\"\n                class=\"white--text float-right text-capitalize ml-3 mb-3\" @click=\"initialData\">\n                {{$t('fetch_new_feeds')}}\n            </v-btn>\n            <v-btn to=\"\" color=\"primary\"\n                class=\"white--text float-right text-capitalize\" @click=\"showImport++\">\n                {{$t('import')}}\n            </v-btn>\n        </v-col>\n        <v-col sm=\"12\" cols=\"12\" class=\"pt-0\" v-if=\"showImport % 2\">\n            <v-row>\n                <v-col sm=\"9\" cols=\"9\" class=\"pt-0\">\n                    <v-file-input\n                        v-model=\"files\"\n                        :placeholder=\"'file: xlsm, xlsx, xls...'\"\n                        accept=\".xlsm, .xlsx, .xls\"\n                        prepend-icon=\"mdi-file\">\n                    <template v-slot:selection=\"{ text }\">\n                        <v-chip\n                            small\n                            label\n                            color=\"primary\"\n                        >\n                            {{ text }}\n                        </v-chip>\n                    </template>\n                </v-file-input>\n                </v-col>\n                <v-col sm=\"3\" cols=\"3\" class=\"pt-0\">\n                    <v-btn to=\"\" color=\"primary\"\n                        class=\"white--text float-right text-capitalize\" @click=\"importFile\">\n                        {{$t('upload')}}\n                    </v-btn>\n                </v-col>\n            </v-row>\n\n            <v-alert type=\"warning\"\n                    v-model=\"alert\"\n                    dismissible>\n                <span style=\"font-size: small;\" v-html=\"errorMessage\"/>\n            </v-alert>\n        </v-col>\n        <v-col sm=\"12\" cols=\"12\" class=\"pt-0\">\n            <div style=\"position:relative;\" class=\"reports_table\">\n                <LoadingMe\n                    :isLoading=\"showLoading\"\n                    :fullPage=\"false\"\n                    :myLoading=\"true\"\n                    type=\"loading\"\n                />\n                <v-data-table\n                    :headers=\"headers\"\n                    :items=\"bankStatements\"\n                    class=\"elevation-1\"\n                >\n                    <!-- Date -->\n                    <template v-slot:[`item.statement_date`]=\"{ item }\">\n                        <span>{{ Helper.dateFormat(item.statement_date) }}</span>\n                    </template>\n\n                    <!-- Description -->\n                    <template v-slot:[`item.details`]=\"{ item }\">\n                        <p style=\"font-size: x-small;\">{{ item.details }}</p>\n                    </template>\n\n                    <!-- Amount -->\n                    <template v-slot:[`item.amount`]=\"{ item }\">\n                        <span>{{ Number(item.amount).toLocaleString() }} {{ item.currency }}</span>\n                    </template>\n\n                    <!-- Status -->\n                    <template v-slot:[`item.journal_entry_uuid`]=\"{ item }\">\n                        <div v-if=\"item.reconcile_uuid\">\n                            {{$t('reconciled')}}\n                        </div>\n                        <div v-else>\n                            <v-btn color=\"primary\"\n                                class=\"white--text float-right text-capitalize\" \n                                @click=\"goReconcile(item)\"\n                                x-small>{{$t('Reconcile Now')}}\n                            </v-btn>\n                        </div>\n                    </template>\n\n                </v-data-table>\n            </div>\n        </v-col>\n        \n    </v-row>\n</template>\n<script>\n    import kendo from \"@progress/kendo-ui\";\n    import Helper from \"@/helper.js\";\n    import { i18n } from '@/i18n';\n    import { \n        BankAccountModel,\n        BankStatementModel,\n        ReconcileModel,\n        AccountModel,\n        JournalModel,\n        ExchangeRateModel,\n    } from \"@/scripts/model/AppModels\";\n    \n    /* Store */\n    import store from \"@/store\"\n    const institute = store.state.institute.institute\n\n    const {\n        bankStatementHandler,\n    } = require(\"@/scripts/AppHandlers\");\n\n    export default {\n        name: \"BankStatement\",\n        components: {\n            \"LoadingMe\": () => import('@/components/Loading'),\n        },\n        props: {\n            initBankAccount: {\n                type: Object,\n            },\n        },\n        data () {\n            return {\n                /* Obj */\n                bankAccount         : new BankAccountModel(),\n                reconcile           : new ReconcileModel(),\n                adjustmentJournal   : new JournalModel(),\n                adjustmentEntries   : [],\n                // Form validation\n                valid: true,\n                isEdit: false,\n                alert: false,\n                errorMessage: '',\n                Helper              : Helper,\n                user: Helper.getUser(),\n                // File upload\n                files               : null,\n                excelData           : [],\n                excelStatements     : [],\n                // Other\n                lastUpdated         : new Date(),\n                exchangeRate        : new ExchangeRateModel(institute.baseCurrency),\n                adjustmentAccount   : new AccountModel(),\n                showImport          : 0,\n                showReconcileDialog : false,\n                bankStatement       : null,\n                bankStatements      : [],\n                banhjiTxnAmount     : 0,\n                banhjiTransaction   : null,\n                banhjiTransactions  : [],\n                banhjiMatchedTxns   : [],\n                bankMappings        : [],\n                headers             : [\n                    { text: i18n.t('date'), value: 'statement_date' },\n                    { text: i18n.t('bank_detail'), value: 'details', width: \"25%\" },\n                    { text: i18n.t('amount'), value: 'amount' },\n                    { text: i18n.t('source'), value: 'source' },\n                    { text: i18n.t('status'), value: 'journal_entry_uuid' },\n                ],\n                // Kendo\n                schemaFields: {\n                    journal_date    : { type: \"date\" },\n                    journal_type    : { type: \"string\" },\n                    journal_number  : { type: \"string\" },\n                    description     : { type: \"string\" },\n                    amount          : { type: \"number\" }\n                },\n                // LoadingMe\n                showLoading: false,\n            }\n        },\n        methods: {\n            /* Initial Data */\n            initialData () {\n                this.bankAccount = Object.assign({}, this.initBankAccount);\n                this.loadBankStatement();\n            },\n            // Load data\n\t\t\tasync loadData() {\n\t\t\t\tthis.showLoading = true;\n\n\t\t\t\t/* Reset */\n\t\t\t\tstore.state.banking.bankMappingLoaded = false;\n\t\t\t\t\n\t\t\t\t/* Call Bank Mapping List */\n\t\t\t\tthis.bankMappings = await this.$store.dispatch('banking/getBankMappings');\n\t\t\t\t\n\t\t\t\tthis.showLoading = false;\n\t\t\t},\n            /* Load Statement */\n            loadBankStatement () {\n                if(this.bankAccount.uuid){\n                    this.showLoading = true;\n                    bankStatementHandler.getByBankAccountId(this.bankAccount.uuid)\n                    .then(res => {\n                        if (res.data) {\n                            this.bankStatements = [];\n                            \n                            res.data.forEach(value => {\n                                let bs = new BankStatementModel(value);\n                                this.bankStatements.push(bs);\n                            })\n                        }\n                    })\n                    .finally(()=>{\n                        this.showLoading = false;\n                    });\n                }else{\n                    /* Alert Warning */\n                    this.$snotify.warning(i18n.t(\"please_select_bank_account\"));\n                }\n            },\n            /* Import Excel */\n            async importFile() {\n                if(this.bankAccount.uuid){\n                    if (this.files !== null) {\n                        this.excelData = await Helper.getExcelData(this.files);\n                        this.generateExcelData();\n                    }else{\n                        /* Alert Warning */\n                        this.$snotify.warning(i18n.t(\"please_select_file\"));\n                    }\n                }else{\n                    this.$snotify.warning(i18n.t(\"please_select_bank_account\"));\n                }\n            },\n            /* Generate Excel Data */\n            generateExcelData(){\nwindow.console.log(this.excelData)\n                let bankStatementList = [],\n                    excelHeaders = this.excelData[0],\n                    bankRule = this.bankMappings.find(value => value.bank_uuid === this.bankAccount.bank.uuid);\n                    \n                this.excelData.forEach((excelElement, excelIndex) => {\n                    if(excelIndex > 0){// Skip header row 0\n                        let bankStatement = new BankStatementModel({\n                            bank_uuid: this.bankAccount.bank.uuid,\n                            bank_acc_uuid: this.bankAccount.uuid,\n                            bank_acc_number: this.bankAccount.number,\n                            source : 'imported',\n                        });\n\n                        // Matching by bank mapping rule\n                        bankRule.criteria.forEach(rule => {\n                            excelHeaders.forEach((header, headerIndex) => {\n                                /* Defind Headers */\n                                let excelHeader = header.trim(),\n                                    ruleHeader = rule.field.trim();\n                                    \n                                // Matching header name\n                                if(ruleHeader.includes(excelHeader)){\n                                    if(rule.field2.toLowerCase() === 'statement_date'){// Date\n                                        bankStatement.statement_date = Helper.toISODate(excelElement[headerIndex]);\n                                        bankStatement.entry_date = bankStatement.statement_date;\n                                    } else if(rule.field2.toLowerCase() === 'bank_ref'){// Number\n                                        bankStatement.bank_ref = excelElement[headerIndex];\n                                    } else if(rule.field2.toLowerCase() === 'details'){// Description\n                                        bankStatement.details = excelElement[headerIndex];\n                                    } else if(rule.field2.toLowerCase() === 'debit'){// Debit\n                                        let amt = Helper.removeCurrencyFormat(excelElement[headerIndex]);\n\n                                        if(!isNaN(amt)){// Check if number\n                                            bankStatement.amount = kendo.parseFloat(Math.abs(amt));\n                                        }\n                                    } else if(rule.field2.toLowerCase() === 'credit'){// Credit\n                                        let amt = Helper.removeCurrencyFormat(excelElement[headerIndex]);\n                                        \n                                        if(!isNaN(amt)){// Check if number\n                                            bankStatement.amount = kendo.parseFloat(Math.abs(amt) * -1);// Credit is negative\n                                        }\n                                    } else if(rule.field2.toLowerCase() === 'balance'){// Balance\n                                        let amt = Helper.removeCurrencyFormat(excelElement[headerIndex]);\n\n                                        if(!isNaN(amt)){// Check if number\n                                            bankStatement.balance = kendo.parseFloat(amt);\n                                        }\n                                    } else if(rule.field2.toLowerCase() === 'currency'){// Currency\n                                        bankStatement.currency = excelElement[headerIndex];\n                                    }\n                                }\n                            });\n                        })\n\n                        // Add bank statement\n                        bankStatementList.push(bankStatement);\n                    }\n                    \n                });\n\n                // Bind bank statement\n                this.excelStatements = bankStatementList;\n                \n                this.uploadStatement();\n            },\n            /* Validate Excel Statement */\n            validateExcelStatement(){\n                let result = true, msg = '';\n\n                // Empty Excel Statement\n                if(this.excelStatements.length === 0){\n                    result = false;\n                    msg += '<p>There is no data to import</p>';\n                }else{\n                    let invalidData = false;\n                    this.excelStatements.forEach((value, index) => {\n                        let d = new Date(value.date),\n                            validDate = false, validDetail = false, validAmount = false;\n\n                        // Date\n                        if (Object.prototype.toString.call(value.date) === \"[object Date]\") {\n                            // it is a date\n                            if (isNaN(d.getTime())) {\n                                // date is not valid\n                            } else {\n                                // date is valid\n                                validDate = true;\n                            }\n                        }\n\n                        // Description\n                        if(value.details !== ''){\n                            validDetail = true;\n                        }\n\n                        // Amount\n                        if(value.amount !== 0){\n                            validAmount = true;\n                        }\n\n                        // Check those require fields\n                        if(validDate && validDetail && validAmount){\n                            invalidData = true;\n                            msg += `<p>Invalid data at row number ${index+1}</p>`;\n                            \n                            // Exit Loop\n                            return false;\n                        }\n                    });\n\n                    // Validate Data\n                    if(invalidData){\n                        result = false;\n                    }\n                }\n\n                // Show Alert\n                this.errorMessage = msg;\n                this.alert = false;\n                if (result === false) {\n                    this.alert = true;\n                }\n\n                return result;\n            },\n            /* Clear */\n            clear () {\n                this.files = null;\n                this.showImport = 0;\n            },\n            /* Upload Statement */\n            uploadStatement(){\n                if(this.validateExcelStatement()){\n                    let isBatch = true;\n                    \n                    this.showLoading = true;\n                    bankStatementHandler.save(this.excelStatements, isBatch)\n                        .then(function (response) {\n                            this.responseStatus(response)\n                        })\n                        .catch(function (error) {\n                            Helper.alertErrorMsg(error);\n                        })\n                        .finally(() => {\n                            this.showLoading = false;\n                        });\n                }\n            },\n            responseStatus(response) {\n                if (response.status === 200) {\n                    /* Load data */\n                    this.initialData();\n\n                    /* Clear */\n                    this.clear();\n                    \n                    /* Alert Success */\n                    this.$snotify.success(i18n.t(\"successful\"));\n                } else {\n                    /* Alert Error */\n                    this.$snotify.error(i18n.t(\"error_something_wrong\"));\n                }\n            },\n            /* Go To Reconcile */\n            goReconcile(selectedItem) {\n                this.$router.push({ \n                    name: 'Bank Statement Reconciliation', \n                    params: { \n                        initBankStatement: new BankStatementModel(selectedItem),\n                    },\n                });\n            },\n        },\n        watch: {\n            initBankAccount: \"initialData\",\n        },\n        created() {\n            this.loadData();\n        },\n        mounted() {\n            this.initialData();\n        },\n    }\n</script>\n<style scoped>\n    @media (max-width: 576px) {\n        .v-application p{\n            margin-bottom: 0 !important;\n        }\n    }\n</style>"],"sourceRoot":"src/views/banking/banking/bank_center"}]}