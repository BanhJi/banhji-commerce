{"remainingRequest":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/babel-loader/lib/index.js!/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/eslint-loader/index.js??ref--13-0!/Users/macos/Desktop/banhji-0.2/banhji-commerce/src/store/modules/banking.js","dependencies":[{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/src/store/modules/banking.js","mtime":1638499443070},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/macos/Desktop/banhji-0.2/banhji-commerce/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/macos/Desktop/banhji-0.2/banhji-commerce/src/store/modules/banking.js"],"names":["BankHandler","require","BankAccountHandler","BankTransactionMappingHandler","state","banks","bankAccounts","bankAccountTypes","bankMappings","bankLoaded","bankAccountLoaded","bankAccountTypeLoaded","bankMappingLoaded","getters","actions","getBanks","commit","getAll","response","data","putBanks","value","saveBank","index","findIndex","i","uuid","splice","getBankAccounts","putBankAccounts","saveBankAccount","getBankAccountTypes","getAllTypes","putBankAccountTypes","saveBankAccountType","getBankMappings","putBankMappings","saveBankMapping","mutations","setBanks","setBankLoaded","pushBank","push","setBankAccounts","setBankAccountLoaded","pushBankAccount","setBankAccountTypes","setBankAccountTypeLoaded","pushBankAccountType","setBankMappings","setBankMappingLoaded","pushBankMapping","namespaced"],"mappings":"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","sourcesContent":["const BankHandler = require(\"@/scripts/bankHandler.js\");\nconst BankAccountHandler = require(\"@/scripts/bankAccountHandler.js\");\nconst BankTransactionMappingHandler = require(\"@/scripts/bankTransactionMappingHandler.js\");\n\n// initial state\nconst state = () => ({\n    banks : [],\n    bankAccounts : [],\n    bankAccountTypes : [],\n    bankMappings : [],\n    bankLoaded : false,\n    bankAccountLoaded : false,\n    bankAccountTypeLoaded : false,\n    bankMappingLoaded : false,\n})\n\n// getters\nconst getters = {}\n\n// actions\nconst actions = {\n    /* BANK */\n    async getBanks({ state, commit }) {\n        if(!state.bankLoaded){\n            let response = await BankHandler.getAll();\n            commit(\"setBankLoaded\", true);\n            commit(\"setBanks\", response.data);\n        }\n\n        return state.banks;\n    },\n    putBanks({ commit }, value) {\n        commit(\"setBanks\", value);\n        commit(\"setBankLoaded\", true);\n    },\n    saveBank({ state, commit }, value) {\n        let index = state.banks.findIndex(i => i.uuid === value.uuid)\n        if (index > -1) { /* Update bank */\n            /* Replaces 1 element at specific index */\n            state.banks.splice(index, 1, value);\n        }else{\n            /* Add new bank */\n            commit(\"pushBank\", value);\n        }\n    },\n\n    /* BANK ACCOUNT */\n    async getBankAccounts({ state, commit }) {\n        if(!state.bankAccountLoaded){\n            let response = await BankAccountHandler.getAll();\n            commit(\"setBankAccountLoaded\", true);\n            commit(\"setBankAccounts\", response.data);\n        }\n\n        return state.bankAccounts;\n    },\n    putBankAccounts({ commit }, value) {\n        commit(\"setBankAccounts\", value);\n        commit(\"setBankAccountLoaded\", true);\n    },\n    saveBankAccount({ state, commit }, value) {\n        let index = state.bankAccounts.findIndex(i => i.uuid === value.uuid)\n        if (index > -1) { /* Update bank account */\n            /* Replaces 1 element at specific index */\n            state.bankAccounts.splice(index, 1, value);\n        }else{\n            /* Add new bank account */\n            commit(\"pushBankAccount\", value);\n        }\n    },\n\n    /* BANK ACCOUNT TYPE */\n    async getBankAccountTypes({ state, commit }) {\n        if(!state.bankAccountTypeLoaded){\n            let response = await BankAccountHandler.getAllTypes();\n            commit(\"setBankAccountTypes\", response.data);\n        }\n\n        return state.bankAccountTypes;\n    },\n    putBankAccountTypes({ commit }, value) {\n        commit(\"setBankAccountTypes\", value);\n        commit(\"setBankAccountTypeLoaded\", true);\n    },\n    saveBankAccountType({ state, commit }, value) {\n        let index = state.bankAccountTypes.findIndex(i => i.uuid === value.uuid)\n        if (index > -1) { /* Update bank account type */\n            /* Replaces 1 element at specific index */\n            state.bankAccountTypes.splice(index, 1, value);\n        }else{\n            /* Add new bank account type */\n            commit(\"pushBankAccountType\", value);\n        }\n    },\n\n    /* BANK MAPPING */\n    async getBankMappings({ state, commit }) {\n        if(!state.bankMappingLoaded){\n            let response = await BankTransactionMappingHandler.getAll();\n            commit(\"setBankMappingLoaded\", true);\n            commit(\"setBankMappings\", response.data);\n        }\n\n        return state.bankMappings;\n    },\n    putBankMappings({ commit }, value) {\n        commit(\"setBankMappings\", value);\n        commit(\"setBankMappingLoaded\", true);\n    },\n    saveBankMapping({ state, commit }, value) {\n        let index = state.bankMappings.findIndex(i => i.uuid === value.uuid)\n        if (index > -1) { /* Update bank */\n            /* Replaces 1 element at specific index */\n            state.bankMappings.splice(index, 1, value);\n        }else{\n            /* Add new bank */\n            commit(\"pushBankMapping\", value);\n        }\n    },\n}\n\n// mutations\nconst mutations = {\n    /* BANK */\n    setBanks(state, value) {\n        state.banks = value;\n    },\n    setBankLoaded(state, value) {\n        state.bankLoaded = value;\n    },\n    pushBank(state, value) {\n        state.banks.push(value);\n    },\n\n    /* BANK ACCOUNT */\n    setBankAccounts(state, value) {\n        state.bankAccounts = value;\n    },\n    setBankAccountLoaded(state, value) {\n        state.bankAccountLoaded = value;\n    },\n    pushBankAccount(state, value) {\n        state.bankAccounts.push(value);\n    },\n\n    /* BANK ACCOUNT TYPE */\n    setBankAccountTypes(state, value) {\n        state.bankAccountTypes = value;\n    },\n    setBankAccountTypeLoaded(state, value) {\n        state.bankAccountTypeLoaded = value;\n    },\n    pushBankAccountType(state, value) {\n        state.bankAccountTypes.push(value);\n    },\n\n    /* BANK MAPPING */\n    setBankMappings(state, value) {\n        state.bankMappings = value;\n    },\n    setBankMappingLoaded(state, value) {\n        state.bankMappingLoaded = value;\n    },\n    pushBankMapping(state, value) {\n        state.bankMappings.push(value);\n    },\n}\n\nexport default {\n  namespaced: true,\n  state,\n  getters,\n  actions,\n  mutations\n}"]}]}