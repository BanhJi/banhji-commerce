"use strict";

var __assign = undefined && undefined.__assign || function () {
  __assign = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];

      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
    }

    return t;
  };

  return __assign.apply(this, arguments);
};

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SplitButtonVue3 = exports.SplitButton = void 0; // @ts-ignore

var Vue = require("vue");

var allVue = Vue;
var gh = allVue.h;
var ref = allVue.ref;

var Button_1 = require("../Button");

var kendo_vue_common_1 = require("@progress/kendo-vue-common");

var ButtonItem_1 = require("./ButtonItem");

var navigation_1 = require("./utils/navigation");

var kendo_vue_popup_1 = require("@progress/kendo-vue-popup");

var popup_1 = require("./utils/popup");

var kendo_vue_common_2 = require("@progress/kendo-vue-common");

var package_metadata_1 = require("../package-metadata");

var util_1 = require("../util");

var styles = util_1.default.styles; // tslint:enable:max-line-length

var SplitButton = {
  name: 'KendoSplitButton',
  // @ts-ignore
  emits: {
    focus: null,
    blur: null,
    buttonclick: null,
    itemclick: null,
    open: null,
    close: null
  },
  props: {
    accessKey: String,
    text: String,
    items: {
      type: Array,
      default: function _default() {
        return [];
      }
    },
    textField: String,
    tabIndex: Number,
    disabled: Boolean,
    icon: String,
    opened: {
      type: Boolean,
      default: undefined
    },
    iconClass: String,
    imageUrl: String,
    popupSettings: Object,
    itemRender: [String, Function, Object],
    item: [String, Function, Object],
    look: String,
    className: String,
    buttonClass: String,
    dir: String
  },
  data: function data() {
    return {
      focused: false,
      focusedIndex: -1,
      currentOpened: false
    };
  },
  created: function created() {
    this._blurTimeout = null;
    this._anchor = kendo_vue_common_1.guid();
    this.mainButton = null;
    this.guid = kendo_vue_common_1.guid();
    this.buttonsData = [];
    kendo_vue_common_2.validatePackage(package_metadata_1.packageMetadata);
  },
  mounted: function mounted() {
    this.mainButton = this.v3 ? this.kendoAnchorRef : this.$refs[this._anchor]; // If this.$props.opened is true during the initial render, the popup is not aligned.

    if (this.$props.dir === undefined && this.isRtl() || this.computedOpened) {
      this.$forceUpdate();
    }
  },
  updated: function updated() {
    if (this.focused && this.element()) {
      this.mainButton = this.v3 ? this.kendoAnchorRef : this.$refs[this._anchor];
      this.mainButton.focus();
    }
  },
  computed: {
    computedOpened: function computedOpened() {
      return this.$props.opened === undefined ? this.currentOpened : this.$props.opened;
    },
    wrapperClass: function wrapperClass() {
      var _a;

      return _a = {
        'k-widget': true,
        'k-split-button': true,
        'k-button-group': true
      }, _a[styles["" + this.$props.look]] = true, _a['k-state-focused'] = this.focused, _a;
    }
  },
  // @ts-ignore
  setup: !gh ? undefined : function () {
    var v3 = !!gh;
    var kendoAnchorRef = ref(null);
    return {
      v3: v3,
      kendoAnchorRef: kendoAnchorRef
    };
  },
  render: function render(createElement) {
    var _this3 = this;

    var _this = this;

    var h = gh || createElement;
    this.buttonsData = this.$props.items;
    var rtl = this.isRtl();
    var dir = rtl ? 'rtl' : undefined;
    var _a = this.$props,
        tabIndex = _a.tabIndex,
        disabled = _a.disabled;

    var renderChildItems = function renderChildItems() {
      var _a = this.$props,
          item = _a.item,
          itemRender = _a.itemRender,
          textField = _a.textField;
      return this.buttonsData.length > 0 ? this.buttonsData.map(function (dataItem, index) {
        var currentDataItem = typeof dataItem !== 'string' ? __assign(__assign({}, dataItem), {
          render: kendo_vue_common_2.templateRendering.call(this, dataItem.render, kendo_vue_common_2.getListeners.call(this))
        }) : dataItem;
        return (// @ts-ignore
          h(ButtonItem_1.ButtonItem, {
            dataItem: currentDataItem,
            attrs: this.v3 ? undefined : {
              dataItem: currentDataItem,
              textField: textField,
              focused: this.focusedIndex === index,
              render: kendo_vue_common_2.templateRendering.call(this, itemRender, kendo_vue_common_2.getListeners.call(this)),
              item: item,
              index: index,
              id: this.guid + "-" + index
            },
            textField: textField,
            focused: this.focusedIndex === index,
            onClick: this.onItemClick,
            on: this.v3 ? undefined : {
              "click": this.onItemClick,
              "down": this.onItemDown
            },
            onDown: this.onItemDown,
            render: kendo_vue_common_2.templateRendering.call(this, itemRender, kendo_vue_common_2.getListeners.call(this)),
            item: item,
            key: index,
            index: index,
            id: this.guid + "-" + index
          })
        );
      }, this) : null;
    };

    var renderPopup = function renderPopup() {
      var _this2 = this;

      var _a = this.$props.popupSettings,
          popupSettings = _a === void 0 ? {} : _a;
      return (// @ts-ignore function children
        h(kendo_vue_popup_1.Popup, {
          anchor: this._anchor,
          attrs: this.v3 ? undefined : {
            anchor: this._anchor,
            show: this.computedOpened,
            animate: popupSettings.animate,
            popupClass: kendo_vue_common_1.classNames('k-list-container k-reset k-group', popupSettings.popupClass),
            anchorAlign: popupSettings.anchorAlign || popup_1.getAnchorAlign(rtl),
            popupAlign: popupSettings.popupAlign || popup_1.getPopupAlign(rtl)
          },
          show: this.computedOpened,
          animate: popupSettings.animate,
          popupClass: kendo_vue_common_1.classNames('k-list-container k-reset k-group', popupSettings.popupClass),
          anchorAlign: popupSettings.anchorAlign || popup_1.getAnchorAlign(rtl),
          popupAlign: popupSettings.popupAlign || popup_1.getPopupAlign(rtl),
          style: rtl ? {
            direction: 'rtl'
          } : undefined
        }, this.v3 ? function () {
          return [h("ul", {
            "class": "k-list k-reset",
            role: "menu",
            attrs: _this2.v3 ? undefined : {
              role: "menu",
              id: _this2.guid
            },
            id: _this2.guid
          }, [renderChildItems.call(_this2)])];
        } : [h("ul", {
          "class": "k-list k-reset",
          role: "menu",
          attrs: _this2.v3 ? undefined : {
            role: "menu",
            id: _this2.guid
          },
          id: _this2.guid
        }, [renderChildItems.call(_this2)])])
      );
    };

    return h("div", {
      "class": this.wrapperClass,
      onKeydown: this.onKeyDown,
      on: this.v3 ? undefined : {
        "keydown": this.onKeyDown,
        "focusin": this.onFocus,
        "focusout": this.onBlur
      },
      onFocusin: this.onFocus,
      onFocusout: this.onBlur,
      dir: dir,
      attrs: this.v3 ? undefined : {
        dir: dir
      }
    }, [// @ts-ignore function children
    h(Button_1.Button, {
      onClick: function onClick(event) {
        return _this.onItemClick(event, -1);
      },
      on: this.v3 ? undefined : {
        "click": function onClick(event) {
          return _this.onItemClick(event, -1);
        }
      },
      disabled: disabled || undefined,
      attrs: this.v3 ? undefined : {
        disabled: disabled || undefined,
        tabIndex: tabIndex,
        accessKey: this.$props.accessKey,
        icon: this.$props.icon,
        iconClass: this.$props.iconClass,
        imageUrl: this.$props.imageUrl,
        look: this.$props.look,
        dir: dir,
        type: "button",
        "aria-disabled": disabled,
        "aria-haspopup": true,
        "aria-expanded": this.computedOpened,
        "aria-label": this.$props.text + " splitbutton",
        "aria-owns": this.guid,
        "aria-activedescendant": this.focusedIndex !== undefined && this.focusedIndex >= 0 ? this.guid + "-" + this.focusedIndex : undefined
      },
      tabIndex: tabIndex,
      accessKey: this.$props.accessKey,
      "class": this.$props.buttonClass,
      icon: this.$props.icon,
      iconClass: this.$props.iconClass,
      imageUrl: this.$props.imageUrl,
      look: this.$props.look,
      dir: dir,
      ref: this.v3 ? function (el) {
        _this.kendoAnchorRef = el.$el;
      } : this._anchor,
      type: "button",
      "aria-disabled": disabled,
      "aria-haspopup": true,
      "aria-expanded": this.computedOpened,
      "aria-label": this.$props.text + " splitbutton",
      "aria-owns": this.guid,
      "aria-activedescendant": this.focusedIndex !== undefined && this.focusedIndex >= 0 ? this.guid + "-" + this.focusedIndex : undefined
    }, this.v3 ? function () {
      return [_this3.$props.text];
    } : [_this3.$props.text]), // @ts-ignore
    h(Button_1.Button, {
      icon: "arrow-s",
      attrs: this.v3 ? undefined : {
        icon: "arrow-s",
        disabled: disabled || undefined,
        tabIndex: -1,
        look: this.$props.look,
        dir: dir,
        "aria-label": "menu toggling button"
      },
      disabled: disabled || undefined,
      tabIndex: -1,
      look: this.$props.look,
      onClick: this.onSplitPartClick,
      on: this.v3 ? undefined : {
        "click": this.onSplitPartClick,
        "mousedown": this.onDownSplitPart,
        "pointerdown": this.onDownSplitPart
      },
      onMousedown: this.onDownSplitPart,
      onPointerdown: this.onDownSplitPart,
      dir: dir,
      "aria-label": "menu toggling button"
    }), renderPopup.call(this)]);
  },
  methods: {
    element: function element() {
      return this.mainButton;
    },
    onKeyDown: function onKeyDown(event) {
      if (event.altKey) {
        if (!this.computedOpened && event.keyCode === kendo_vue_common_1.Keys.down) {
          this.dispatchPopupEvent(event, true);
          this.focusedIndex = 0;
          this.currentOpened = true;
        } else if (this.computedOpened && event.keyCode === kendo_vue_common_1.Keys.up) {
          this.dispatchPopupEvent(event, false);
          this.focusedIndex = -1;
          this.currentOpened = false;
        }

        return;
      }

      var newState = undefined;

      if (event.keyCode === kendo_vue_common_1.Keys.enter || event.keyCode === kendo_vue_common_1.Keys.space) {
        // Prevent default because otherwise when an item is selected
        // click on the default button gets emitted which opens the popup again.
        event.preventDefault();
        this.dispatchClickEvent(event, this.focusedIndex);

        if (this.focusedIndex !== undefined && this.focusedIndex >= 0) {
          newState = {
            focusedIndex: this.computedOpened ? -1 : 0,
            currentOpened: !this.computedOpened
          };
          this.dispatchPopupEvent(event, newState.currentOpened);
        }
      } else if (this.computedOpened && event.keyCode === kendo_vue_common_1.Keys.esc) {
        newState = {
          focusedIndex: -1,
          currentOpened: false
        };
        this.dispatchPopupEvent(event, newState.currentOpened);
      }

      if (this.computedOpened) {
        var newFocused = navigation_1.default(this.focusedIndex, event.keyCode, event.altKey, this.buttonsData.length);

        if (newFocused !== this.focusedIndex) {
          newState = newState || {}; // @ts-ignore

          newState.focusedIndex = newFocused;
        }

        var arrowKey = event.keyCode === kendo_vue_common_1.Keys.up || event.keyCode === kendo_vue_common_1.Keys.down || event.keyCode === kendo_vue_common_1.Keys.left || event.keyCode === kendo_vue_common_1.Keys.right;

        if (!event.altKey && arrowKey) {
          // Needed to notify the parent listeners that event is handled.
          event.preventDefault();
        }
      }

      if (newState) {
        this.focusedIndex = newState.focusedIndex;
        this.focused = newState.focused;

        if (newState.currentOpened !== undefined) {
          this.currentOpened = newState.currentOpened;
        }
      }
    },
    onFocus: function onFocus(event) {
      if (!this.focused) {
        this.$emit('focus', event, this, undefined);
        this.focused = true;
      }

      this.focusedIndex = -1;
      clearTimeout(this._blurTimeout);
    },
    onItemClick: function onItemClick(event, clickedItemIndex) {
      var opened = this.computedOpened;

      if (opened) {
        this.focusedIndex = 0;
        this.currentOpened = false;
      }

      this.dispatchClickEvent(event, clickedItemIndex);

      if (opened) {
        this.dispatchPopupEvent(event, false);
      }
    },
    onBlur: function onBlur(event) {
      clearTimeout(this._blurTimeout);
      this.createBlurTimeout(event);
    },
    createBlurTimeout: function createBlurTimeout(event) {
      var _this = this;

      var that = this;
      this._blurTimeout = setTimeout(function () {
        if (kendo_vue_common_2.canUseDOM && document.activeElement !== that.mainButton) {
          that.focused = false;
          that.focusedIndex = -1;
          that.$emit('blur', event, _this, undefined);
          var fireCloseEvent = that.computedOpened;

          if (fireCloseEvent) {
            that.currentOpened = false;
            that.dispatchPopupEvent(event, false);
          }
        }
      }, 200);
    },
    dispatchClickEvent: function dispatchClickEvent(dispatchedEvent, clickedItemIndex) {
      if (!this.isItemDisabled(clickedItemIndex)) {
        if (clickedItemIndex === -1) {
          this.$emit('buttonclick', dispatchedEvent, this, undefined);
        } else {
          this.$emit('itemclick', {
            event: dispatchedEvent,
            component: this,
            item: this.buttonsData[clickedItemIndex],
            itemIndex: clickedItemIndex
          });
        }
      }
    },
    onSplitPartClick: function onSplitPartClick(event) {
      if (this.buttonsData.length) {
        var toOpen = !this.computedOpened;
        this.dispatchPopupEvent(event, toOpen);
        this.focusedIndex = toOpen ? 0 : -1;
        this.currentOpened = toOpen;
        this.focused = true;
      }
    },
    onDownSplitPart: function onDownSplitPart(event) {
      event.preventDefault();

      if (this.element() && document.activeElement !== this.element()) {
        // @ts-ignore
        this.element().focus();
      }
    },
    onItemDown: function onItemDown(event) {
      if (document.activeElement === this.element()) {
        event.preventDefault();
      }
    },
    dispatchPopupEvent: function dispatchPopupEvent(dispatchedEvent, open) {
      this.$emit(open ? 'open' : 'close', dispatchedEvent, this, undefined);
    },
    isItemDisabled: function isItemDisabled(index) {
      return this.buttonsData[index] ? this.buttonsData[index].disabled : this.$props.disabled;
    },
    isRtl: function isRtl() {
      return this.$props.dir !== undefined ? this.$props.dir === 'rtl' : !!this.$el && getComputedStyle(this.$el).direction === 'rtl';
    }
  }
};
exports.SplitButton = SplitButton;
var SplitButtonVue3 = SplitButton;
exports.SplitButtonVue3 = SplitButtonVue3;