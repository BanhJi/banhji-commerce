import { DefineComponent } from '../additionalTypes';
import Vue from 'vue';
import { RecordPropsDefinition, ComponentOptions } from 'vue/types/options';
declare type DefaultMethods<V> = {
    [key: string]: (this: V, ...args: any[]) => any;
};
declare type DefaultData<V> = object | ((this: V) => IntlProviderData);
import { IntlProviderProps } from './IntlProviderProps';
export interface IntlProviderMethods {
    [key: string]: any;
    getIntlService: () => void;
    getChildContext: () => void;
}
export interface IntlProviderData {
    kendoIntlService: any;
}
export interface IntlProviderAllMethods extends Vue, IntlProviderMethods {
}
/**
 * A Vue component which provides an internationalization service.
 * Expects a locale string as a property of the component.
 */
declare let IntlProvider: ComponentOptions<IntlProviderAllMethods, DefaultData<IntlProviderData>, DefaultMethods<IntlProviderAllMethods>, {}, RecordPropsDefinition<IntlProviderProps>> | typeof Vue;
declare const IntlProviderVue3: DefineComponent<IntlProviderProps, any, IntlProviderData, {}, IntlProviderMethods, {}, {}, {}, string, IntlProviderProps, IntlProviderProps, {}>;
export { IntlProvider, IntlProviderVue3 };
