// import { FilterDescriptor } from '@progress/kendo-data-query';
// import { FilterOperator } from './FilterOperator';
// import { FilterComponentProps } from './FilterComponentProps';
// /**
//  * @hidden
//  */
// export interface FilterComponentSettings {
//     inputComponent: (props: any) => React.ReactNode;
//     operatorComponent: (props: any, cellProps: FilterComponentProps) => React.ReactNode;
//     emptyFilter: FilterDescriptor;
//     operators?: FilterOperator[];
// }
// /**
//  * @hidden
//  */
// export const createFilterComponent = (settings: FilterComponentSettings) => {
//     const Cell: React.ComponentClass<FilterComponentProps> =
//         class FilterComponent extends React.Component<FilterComponentProps> {
//             filterChange = (event) => {
//                 if (this.props.onFilterChange) {
//                     this.props.onFilterChange(event);
//                 }
//             };
//             inputChange = (e: any) => {
//                 const value = e.target.value;
//                 const { filter = [], field = '' } = this.props;
//                 const existing = this.findCellFilter();
//                 const filterResult: Array<FilterDescriptor> = existing ?
//                     filter.map(f => f.field === field ? { ...existing, value } : f) :
//                     [ ...filter, { ...settings.emptyFilter, value, field }];
//                 this.filterChange({
//                     filter: filterResult,
//                     field,
//                     syntheticEvent: e.syntheticEvent
//                 });
//             };
//             operatorChange = (e: any) => {
//                 const { operator } = e.target.value;
//                 const { filter = [], field = '' } = this.props;
//                 const existing = this.findCellFilter();
//                 const filterResult: Array<FilterDescriptor> = existing ?
//                     filter.map(f => f.field === field ? { ...existing, operator } : f) :
//                     [ ...filter, { ...settings.emptyFilter, field, operator }];
//                 this.filterChange({
//                     filter: filterResult,
//                     field,
//                     syntheticEvent: e.syntheticEvent
//                 });
//             };
//             clearButtonClick = (e: React.SyntheticEvent<any>) => {
//                 const { filter = [], field = '' } = this.props;
//                 this.filterChange({
//                     filter: filter.filter(f => f.field !== field),
//                     field,
//                     syntheticEvent: e
//                 });
//             };
//             findCellFilter = (): FilterDescriptor | undefined => {
//                 const { filter = [], field } = this.props;
//                 return filter.find(f => f.field === field);
//             };
//             render() {
//                 const { clearButtonTitle = '', operators = [] } = this.props;
//                 const filter = this.findCellFilter() || { ...settings.emptyFilter, operator: '' };
//                 const { operator, value } = filter;
//                 const operatorComponentProps = {
//                     value: operators.find(item => item.operator === operator) || null,
//                     onChange: this.operatorChange,
//                     className: 'k-dropdown-operator',
//                     iconClassName: 'k-i-filter k-icon',
//                     data: operators,
//                     textField: 'text',
//                     popupSettings: { width: '' },
//                     components: this.props.components
//                 };
//                 return (
//                   <div className="k-filtercell">
//                     <div className="k-filtercell-wrapper">
//                       {settings.inputComponent({ 
//                                   value, onChange: this.inputChange, 
//                                  components: this.props.components 
//                          })}
//                       <div className="k-filtercell-operator">
//                         {settings.operatorComponent(operatorComponentProps, this.props)}
//                         <button
//                           className={
//                                         /* button is always visible if there is either value or operator */
//                                         (!(value === null || value === '') || operator) ?
//                                             'k-button k-button-icon k-clear-button-visible' :
//                                             'k-button k-button-icon'
//                                     }
//                           title={clearButtonTitle}
//                           type="button"
//                           onClick={this.clearButtonClick}
//                                 >
//                           <span className="k-icon k-i-filter-clear" />
//                         </button>
//                       </div>
//                     </div>
//                   </div>
//                 );
//             }
//         };
//     return Cell;
// };
"use strict";