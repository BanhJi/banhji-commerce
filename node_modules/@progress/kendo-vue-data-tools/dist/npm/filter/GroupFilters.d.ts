import { DefineComponent } from '../additionalTypes';
import { RecordPropsDefinition, ComponentOptions } from 'vue/types/options';
declare type DefaultData<V> = object | ((this: V) => {});
declare type DefaultMethods<V> = {
    [key: string]: (this: V, ...args: any[]) => any;
};
import { CompositeFilterDescriptor, FilterDescriptor } from '@progress/kendo-data-query';
import { ExpressionChangeEvent, ExpressionRemoveEvent } from './Expression';
import { FieldSettings } from './FieldSettings';
/**
 * @hidden
 */
export interface GroupChangeEvent {
    target: any;
    event: any;
    prevFilter: CompositeFilterDescriptor;
    nextFilter: CompositeFilterDescriptor;
}
/**
 * @hidden
 */
export interface GroupRemoveEvent {
    target: any;
    event: any;
    filter: CompositeFilterDescriptor;
}
/**
 * @hidden
 */
export interface GroupProps {
    filter: CompositeFilterDescriptor;
    fields: Array<FieldSettings>;
    defaultGroupFilter: CompositeFilterDescriptor;
}
/**
 * @hidden
 */
export interface GroupState {
}
/**
 * @hidden
 */
export interface GroupComputed {
    [key: string]: any;
}
/**
 * @hidden
 */
export interface GroupMethods {
    [key: string]: any;
    replaceFilter: (prevFilter: FilterDescriptor | CompositeFilterDescriptor, nextFilter: FilterDescriptor | CompositeFilterDescriptor) => CompositeFilterDescriptor;
    onChange: (event: ExpressionChangeEvent | GroupChangeEvent) => void;
    onRemove: (event: ExpressionRemoveEvent | GroupRemoveEvent) => void;
}
/**
 * @hidden
 */
export interface GroupData {
}
/**
 * @hidden
 */
export interface GroupAll extends Vue, GroupMethods, GroupData, GroupComputed, GroupState {
}
declare let GroupFilter: ComponentOptions<GroupAll, DefaultData<GroupData>, DefaultMethods<GroupAll>, GroupComputed, RecordPropsDefinition<GroupProps>>;
declare const GroupFilterVue3: DefineComponent<GroupProps, any, GroupData, GroupComputed, GroupMethods, {}, {}, {}, string, GroupProps, GroupProps, {}>;
export { GroupFilter, GroupFilterVue3 };
