import { DefineComponent } from '../additionalTypes';
import { RecordPropsDefinition, ComponentOptions } from 'vue/types/options';
declare type DefaultData<V> = object | ((this: V) => {});
declare type DefaultMethods<V> = {
    [key: string]: (this: V, ...args: any[]) => any;
};
import { FilterDescriptor } from '@progress/kendo-data-query';
import { DropDownListChangeEvent } from '@progress/kendo-vue-dropdowns';
import { FieldSettings } from './FieldSettings';
/**
 * @hidden
 */
export interface ExpressionChangeEvent {
    target: any;
    event: any;
    prevFilter: FilterDescriptor;
    nextFilter: FilterDescriptor;
}
/**
 * @hidden
 */
export interface ExpressionRemoveEvent {
    target: any;
    event: any;
    filter: FilterDescriptor;
}
/**
 * @hidden
 */
export interface ExpressionProps {
    filter: FilterDescriptor;
    fields: Array<FieldSettings>;
}
/**
 * @hidden
 */
export interface ExpressionState {
}
/**
 * @hidden
 */
export interface ExpressionComputed {
    [key: string]: any;
}
/**
 * @hidden
 */
export interface ExpressionMethods {
    [key: string]: any;
    onFieldChange: (event: DropDownListChangeEvent) => void;
    onOperatorChange: (event: DropDownListChangeEvent) => void;
    onInputChange: (event: any) => void;
    triggerOnFilterChange: (prevFilter: FilterDescriptor, nextFilter: FilterDescriptor, event: any) => void;
    onFilterRemove: (event: any) => void;
}
/**
 * @hidden
 */
export interface ExpressionData {
}
/**
 * @hidden
 */
export interface ExpressionAll extends Vue, ExpressionMethods, ExpressionData, ExpressionComputed, ExpressionState {
}
declare let Expression: ComponentOptions<ExpressionAll, DefaultData<ExpressionData>, DefaultMethods<ExpressionAll>, ExpressionComputed, RecordPropsDefinition<ExpressionProps>>;
declare const ExpressionVue3: DefineComponent<ExpressionProps, any, ExpressionData, ExpressionComputed, ExpressionMethods, {}, {}, {}, string, ExpressionProps, ExpressionProps, {}>;
export { Expression, ExpressionVue3 };
