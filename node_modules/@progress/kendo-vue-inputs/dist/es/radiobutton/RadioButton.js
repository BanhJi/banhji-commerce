// @ts-ignore
import * as Vue from 'vue';
var allVue = Vue;
var gh = allVue.h;
var ref = allVue.ref;
var inject = allVue.inject;
import { guid, getTabIndex, getDefaultSlots, templateRendering, getTemplate, getListeners } from '@progress/kendo-vue-common';
import { validatePackage } from '@progress/kendo-vue-common';
import { packageMetadata } from '../package-metadata';
var RadioButton = {
  name: 'KendoRadioButton',
  props: {
    ariaDescribedBy: String,
    checked: Boolean,
    disabled: Boolean,
    className: String,
    id: String,
    label: String,
    labelRender: [String, Number, Boolean, Object],
    labelPlacement: String,
    name: String,
    tabIndex: Number,
    value: [String, Number, Object],
    valid: {
      type: Boolean,
      default: undefined
    }
  },
  // @ts-ignore
  emits: {
    change: null,
    focus: null,
    blur: null
  },
  created: function created() {
    this.calculatedId = guid();
    validatePackage(packageMetadata);
  },
  mounted: function mounted() {
    this.input = this.v3 ? this.inputRef : this.$refs.input;
  },
  computed: {
    inputClassName: function inputClassName() {
      var _a;

      return _a = {
        'k-radio': true,
        'k-state-invalid': this.$props.valid === false,
        'k-invalid': this.$props.valid === false
      }, _a[this.$props.className] = this.$props.className, _a;
    }
  },
  methods: {
    focusElement: function focusElement() {
      if (this.input) {
        this.input.focus();
      }
    },
    handleChange: function handleChange(event) {
      this.$emit('change', {
        event: event,
        value: this.$props.value
      });
    },
    handleFocus: function handleFocus(event) {
      if (!this.$props.disabled) {
        this.$emit('focus', event, undefined);
      }
    },
    handleBlur: function handleBlur(event) {
      if (!this.$props.disabled) {
        this.$emit('blur', event, undefined);
      }
    }
  },
  // @ts-ignore
  setup: !gh ? undefined : function () {
    var v3 = !!gh;
    var inputRef = ref(null);
    return {
      v3: v3,
      inputRef: inputRef
    };
  },
  render: function render(createElement) {
    var _this = this;

    var h = gh || createElement;
    var defaultSlot = getDefaultSlots(this);
    var _a = this.$props,
        ariaDescribedBy = _a.ariaDescribedBy,
        checked = _a.checked,
        disabled = _a.disabled,
        id = _a.id,
        label = _a.label,
        labelRender = _a.labelRender,
        labelPlacement = _a.labelPlacement,
        name = _a.name,
        tabIndex = _a.tabIndex,
        value = _a.value;
    var renderedLabel = label;

    if (labelRender) {
      var renderTemplate = labelRender ? templateRendering.call(this, labelRender, getListeners.call(this)) : null;
      renderedLabel = getTemplate.call(this, {
        h: h,
        template: renderTemplate
      });
    }

    var radioButtonLabel = renderedLabel !== undefined ? h("label", {
      "class": 'k-radio-label',
      "for": id || this.calculatedId,
      attrs: this.v3 ? undefined : {
        "for": id || this.calculatedId,
        "aria-label": label
      },
      style: {
        userSelect: 'none'
      },
      "aria-label": label
    }, [renderedLabel]) : null;
    var radio = h("input", {
      type: 'radio',
      attrs: this.v3 ? undefined : {
        type: 'radio',
        id: id || this.calculatedId,
        name: name,
        disabled: disabled,
        tabIndex: getTabIndex(tabIndex, disabled),
        "aria-describedby": ariaDescribedBy
      },
      id: id || this.calculatedId,
      name: name,
      "class": this.inputClassName,
      ref: this.v3 ? function (el) {
        _this.inputRef = el;
      } : 'input',
      disabled: disabled,
      tabIndex: getTabIndex(tabIndex, disabled),
      checked: this.v3 ? checked : null,
      domProps: this.v3 ? undefined : {
        "checked": checked,
        "value": value
      },
      style: this.$attrs.style,
      "aria-describedby": ariaDescribedBy,
      value: this.v3 ? value : null,
      onChange: this.handleChange,
      on: this.v3 ? undefined : {
        "change": this.handleChange,
        "focus": this.handleFocus,
        "blur": this.handleBlur
      },
      onFocus: this.handleFocus,
      onBlur: this.handleBlur
    });
    return labelPlacement === 'before' ? h("div", [radioButtonLabel, radio, defaultSlot]) : h("div", [radio, radioButtonLabel, defaultSlot]);
  }
};
var RadioButtonVue3 = RadioButton;
export { RadioButton, RadioButtonVue3 };